Sabbrev.c
Fexpand-abbrev
Expand the abbrev before point, if any.
Effective when explicitly called even when `abbrev-mode' is nil.
Returns the abbrev symbol, if expansion took place.
If no abbrev matched, but `pre-abbrev-expand-hook' changed the buffer,
 returns t.

arguments: ()
Sabbrev.c
Finsert-abbrev-table-description
Insert before point a full description of abbrev table named NAME.
NAME is a symbol whose value is an abbrev table.
If optional 2nd arg READABLE is non-nil, a human-readable description
is inserted.  Otherwise the description is an expression,
a call to `define-abbrev-table', which would
define the abbrev table NAME exactly as it is currently defined.

Abbrevs marked as "system abbrevs" are normally omitted.  However, if
READABLE is non-nil, they are listed.  


arguments: (NAME &optional READABLE)
Sabbrev.c
Vglobal-abbrev-table
The abbrev table whose abbrevs affect all buffers.
Each buffer may also have a local abbrev table.
If it does, the local table overrides the global one
for any particular abbrev defined in both.Sabbrev.c
Vlast-abbrev
The abbrev-symbol of the last abbrev expanded.
See the function `abbrev-symbol'.Sabbrev.c
Vlast-abbrev-text
The exact text of the last abbrev expanded.
nil if the abbrev has already been unexpanded.Sabbrev.c
Vlast-abbrev-location
The location of the start of the last abbrev expanded.Sabbrev.c
Vabbrev-start-location
Buffer position for `expand-abbrev' to use as the start of the abbrev.
nil means use the word before point as the abbrev.
Calling `expand-abbrev' sets this to nil.Sabbrev.c
Vabbrev-start-location-buffer
Buffer that `abbrev-start-location' has been set for.
Trying to expand an abbrev in any other buffer clears `abbrev-start-location'.Sabbrev.c
Vabbrev-all-caps
*Non-nil means expand multi-word abbrevs all caps if abbrev was so.Sabbrev.c
Vpre-abbrev-expand-hook
Function or functions to be called before abbrev expansion is done.
This is the first thing that `expand-abbrev' does, and so this may change
the current abbrev table before abbrev lookup happens.Salloc.c
Fcons
Create a new cons cell, give it CAR and CDR as components, and return it.

A cons cell is a Lisp object (an area in memory) made up of two pointers
called the CAR and the CDR.  Each of these pointers can point to any other
Lisp object.  The common Lisp data type, the list, is a specially-structured
series of cons cells.

The pointers are accessed from Lisp with `car' and `cdr', and mutated with
`setcar' and `setcdr' respectively.  For historical reasons, the aliases
`rplaca' and `rplacd' (for `setcar' and `setcdr') are supported.

arguments: (CAR CDR)
Salloc.c
Flist
Return a newly created list with specified ARGS as elements.
Any number of arguments, even zero arguments, are allowed.

arguments: (&rest ARGS)Salloc.c
Facons
Return a new alist created by prepending (KEY . VALUE) to ALIST.

arguments: (KEY VALUE ALIST)
Salloc.c
Fmake-list
Return a new list of length LENGTH, with each element being OBJECT.

arguments: (LENGTH OBJECT)
Salloc.c
Fmake-vector
Return a new vector of length LENGTH, with each element being OBJECT.
See also the function `vector'.

arguments: (LENGTH OBJECT)
Salloc.c
Fvector
Return a newly created vector with specified ARGS as elements.
Any number of arguments, even zero arguments, are allowed.

arguments: (&rest ARGS)Salloc.c
Fmake-bit-vector
Return a new bit vector of length LENGTH. with each bit set to BIT.
BIT must be one of the integers 0 or 1.  See also the function `bit-vector'.

arguments: (LENGTH BIT)
Salloc.c
Fbit-vector
Return a newly created bit vector with specified ARGS as elements.
Any number of arguments, even zero arguments, are allowed.
Each argument must be one of the integers 0 or 1.

arguments: (&rest ARGS)Salloc.c
Fmake-byte-code
Return a new compiled-function object.
Note that, unlike all other emacs-lisp functions, calling this with five
arguments is NOT the same as calling it with six arguments, the last of
which is nil.  If the INTERACTIVE arg is specified as nil, then that means
that this function was defined with `(interactive)'.  If the arg is not
specified, then that means the function is not interactive.
This is terrible behavior which is retained for compatibility with old
`.elc' files which expect these semantics.

arguments: (ARGLIST INSTRUCTIONS CONSTANTS STACK-DEPTH &optional DOC-STRING INTERACTIVE)Salloc.c
Fmake-symbol
Return a newly allocated uninterned symbol whose name is NAME.
Its value and function definition are void, and its property list is nil.

arguments: (NAME)
Salloc.c
Fmake-marker
Return a new marker which does not point at any place.

arguments: ()
Salloc.c
Fmake-string
Return a new string consisting of LENGTH copies of CHARACTER.
LENGTH must be a non-negative integer.

arguments: (LENGTH CHARACTER)
Salloc.c
Fstring
Concatenate all the argument characters and make the result a string.

arguments: (&rest ARGS)Salloc.c
Fobject-memory-usage-stats
Return statistics about memory usage of Lisp objects.

arguments: ()
Salloc.c
Fobject-memory-usage
Return stats about the memory usage of OBJECT.
The values returned are in the form of an alist of usage types and byte
counts.  The byte counts attempt to encompass all the memory used
by the object (separate from the memory logically associated with any
other object), including internal structures and any malloc()
overhead associated with them.  In practice, the byte counts are
underestimated because certain memory usage is very hard to determine
(e.g. the amount of memory used inside the Xt library or inside the
X server).

Multiple slices of the total memory usage may be returned, separated
by a nil.  Each slice represents a particular view of the memory, a
particular way of partitioning it into groups.  Within a slice, there
is no overlap between the groups of memory, and each slice collectively
represents all the memory concerned.  The rightmost slice typically
represents the total memory used plus malloc and dynarr overhead.

Slices describing other Lisp objects logically associated with the
object may be included, separated from other slices by `t' and from
each other by nil if there is more than one.

#### We have to figure out how to handle the memory used by the object
itself vs. the memory used by substructures.  Probably the memory_usage
method should return info only about substructures and related Lisp
objects, since the caller can always find and all info about the object
itself.

arguments: (OBJECT)
Salloc.c
Ftotal-object-memory-usage
Return total number of bytes used for object storage in XEmacs.
This may be helpful in debugging XEmacs's memory usage.
See also `consing-since-gc' and `object-memory-usage-stats'.

arguments: ()
Salloc.c
Fgarbage-collect
Reclaim storage for Lisp objects no longer needed.
Return info on amount of space in use:
 ((USED-CONSES . FREE-CONSES) (USED-SYMS . FREE-SYMS)
  (USED-MARKERS . FREE-MARKERS) USED-STRING-CHARS USED-VECTOR-SLOTS
  PLIST)
  where `PLIST' is a list of alternating keyword/value pairs providing
  more detailed information.
Garbage collection happens automatically if you cons more than
`gc-cons-threshold' bytes of Lisp data since previous garbage collection.

arguments: ()
Salloc.c
Fconsing-since-gc
Return the number of bytes consed since the last garbage collection.
"Consed" is a misnomer in that this actually counts allocation
of all different kinds of objects, not just conses.

If this value exceeds `gc-cons-threshold', a garbage collection happens.

arguments: ()
Salloc.c
Fmemory-limit
Return the address of the last byte XEmacs has allocated, divided by 1024.
This may be helpful in debugging XEmacs's memory usage.
The value is divided by 1024 to make sure it will fit in a lisp integer.

arguments: ()
Salloc.c
Ftotal-memory-usage
Return the total number of bytes used by the data segment in XEmacs.
This may be helpful in debugging XEmacs's memory usage.
NOTE: This may or may not be accurate!  It is hard to determine this
value in a system-independent fashion.  On Windows, for example, the
returned number tends to be much greater than reality.

arguments: ()
Salloc.c
Fvalgrind-leak-check
Ask valgrind to perform a memory leak check.
The results of the leak check are sent to stderr.

arguments: ()
Salloc.c
Fvalgrind-quick-leak-check
Ask valgrind to perform a quick memory leak check.
This just prints a summary of leaked memory, rather than all the details.
The results of the leak check are sent to stderr.

arguments: ()
Salloc.c
Varray-rank-limit
The exclusive upper bound on the number of dimensions an array may have.

XEmacs does not support multidimensional arrays, meaning this constant is,
for the moment, 2.Salloc.c
Varray-dimension-limit
The exclusive upper bound of an array's dimension.
Note that XEmacs may not have enough memory available to create an array
with this dimension.Salloc.c
Varray-total-size-limit
The exclusive upper bound on the number of elements an array may contain.

In Common Lisp, this is distinct from `array-dimension-limit', because
arrays can have more than one dimension.  In XEmacs this is not the case,
and multi-dimensional arrays need to be implemented by the user with arrays
of arrays.

Note that XEmacs may not have enough memory available to create an array
with this dimension.Salloc.c
Vdebug-allocation
If non-zero, print out information to stderr about all objects allocated.
See also `debug-allocation-backtrace-length'.Salloc.c
Vdebug-allocation-backtrace-length
Length (in stack frames) of short backtrace printed out by `debug-allocation'.Salloc.c
Vpurify-flag
Non-nil means loading Lisp code in order to dump an executable.
This means that certain objects should be allocated in readonly space.Sballoon-x.c
Fshow-balloon-help
Show balloon help.

arguments: (STRING)
Sballoon-x.c
Fhide-balloon-help
Hide balloon help.

arguments: ()
Sballoon-x.c
Fballoon-help-move-to-pointer
Move the balloon help to the place where the pointer currently resides.

arguments: ()
Sbuffer.c
Fbufferp
Return t if OBJECT is an editor buffer.

arguments: (OBJECT)
Sbuffer.c
Fbuffer-live-p
Return t if OBJECT is an editor buffer that has not been deleted.

arguments: (OBJECT)
Sbuffer.c
Fbuffer-list
Return a list of all existing live buffers.
The order is specific to the selected frame; if the optional FRAME
argument is provided, the ordering for that frame is returned instead.
If the FRAME argument is t, then the global (non-frame) ordering is
returned instead.

arguments: (&optional FRAME)
Sbuffer.c
Fdecode-buffer
Validate BUFFER or if BUFFER is nil, return the current buffer.
If BUFFER is a valid buffer or a string representing a valid buffer,
the corresponding buffer object will be returned.  Otherwise an error
will be signaled.

arguments: (BUFFER)
Sbuffer.c
Fget-buffer
Return the buffer named BUFFER-NAME (a string), or nil if there is none.
BUFFER-NAME may also be a buffer; if so, the value is that buffer.

arguments: (BUFFER-NAME)
Sbuffer.c
Fget-file-buffer
Return the buffer visiting file FILENAME (a string).
The buffer's `buffer-file-name' must match exactly the expansion of FILENAME.
If there is no such live buffer, return nil.

Normally, the comparison is done by canonicalizing FILENAME (using
`expand-file-name') and comparing that to the value of `buffer-file-name'
for each existing buffer.  However,  If `find-file-compare-truenames' is
non-nil, FILENAME will be converted to its truename and the search will be
done on each buffer's value of `buffer-file-truename' instead of
`buffer-file-name'.  Otherwise, if `find-file-use-truenames' is non-nil,
FILENAME will be converted to its truename and used for searching, but
the search will still be done on `buffer-file-name'.

arguments: (FILENAME)
Sbuffer.c
Fget-buffer-create
Return the buffer named NAME, or create such a buffer and return it.
A new buffer is created if there is no live buffer named NAME.
If NAME starts with a space, the new buffer does not keep undo information.
If NAME is a buffer instead of a string, then it is the value returned.
The value is never nil.

arguments: (NAME)
Sbuffer.c
Fmake-indirect-buffer
Create and return an indirect buffer for buffer BASE-BUFFER, named NAME.
BASE-BUFFER should be an existing buffer (or buffer name).
NAME should be a string which is not the name of an existing buffer.

If BASE-BUFFER is itself an indirect buffer, the base buffer for that buffer
 is made the base buffer for the newly created buffer. (Thus, there will
 never be indirect buffers whose base buffers are themselves indirect.)

arguments: (BASE-BUFFER NAME)
Sbuffer.c
Fgenerate-new-buffer-name
Return a string that is the name of no existing buffer based on NAME.
If there is no live buffer named NAME, then return NAME.
Otherwise modify name by appending `<NUMBER>', incrementing NUMBER
until an unused name is found, and then return that name.
Optional second argument IGNORE specifies a name that is okay to use
(if it is in the sequence to be tried)
even if a buffer with that name exists.

arguments: (NAME &optional IGNORE)
Sbuffer.c
Fbuffer-name
Return the name of BUFFER, as a string.
With no argument or nil as argument, return the name of the current buffer.

arguments: (&optional BUFFER)
Sbuffer.c
Fbuffer-file-name
Return name of file BUFFER is visiting, or nil if none.
No argument or nil as argument means use the current buffer.

arguments: (&optional BUFFER)
Sbuffer.c
Fbuffer-base-buffer
Return the base buffer of indirect buffer BUFFER.
If BUFFER is not indirect, return nil.

arguments: (&optional BUFFER)
Sbuffer.c
Fbuffer-indirect-children
Return a list of all indirect buffers whose base buffer is BUFFER.
If BUFFER is indirect, the return value will always be nil; see
`make-indirect-buffer'.

arguments: (&optional BUFFER)
Sbuffer.c
Fbuffer-local-variables
Return an alist of variables that are buffer-local in BUFFER.
Most elements look like (SYMBOL . VALUE), describing one variable.
For a symbol that is locally unbound, just the symbol appears in the value.
Note that storing new VALUEs in these elements doesn't change the variables.
No argument or nil as argument means use current buffer as BUFFER.

arguments: (&optional BUFFER)
Sbuffer.c
Fbuffer-modified-p
Return t if BUFFER was modified since its file was last read or saved.
No argument or nil as argument means use current buffer as BUFFER.

arguments: (&optional BUFFER)
Sbuffer.c
Fset-buffer-modified-p
Mark BUFFER as modified or unmodified according to FLAG.
A non-nil FLAG means mark the buffer modified.  No argument or nil
as BUFFER means use current buffer.

arguments: (FLAG &optional BUFFER)
Sbuffer.c
Fbuffer-modified-tick
Return BUFFER's tick counter, incremented for each change in text.
Each buffer has a tick counter which is incremented each time the text in
that buffer is changed.  It wraps around occasionally.
No argument or nil as argument means use current buffer as BUFFER.

arguments: (&optional BUFFER)
Sbuffer.c
Frename-buffer
Change current buffer's name to NEWNAME (a string).
If second arg UNIQUE is nil or omitted, it is an error if a
buffer named NEWNAME already exists.
If UNIQUE is non-nil, come up with a new name using
`generate-new-buffer-name'.
Interactively, one can set UNIQUE with a prefix argument.
Returns the name we actually gave the buffer.
This does not change the name of the visited file (if any).

arguments: (NEWNAME &optional UNIQUE)
Sbuffer.c
Fother-buffer
Return most recently selected buffer other than BUFFER.
Buffers not visible in windows are preferred to visible buffers,
unless optional third argument VISIBLE-OK is non-nil.
If no other buffer exists, the buffer `*scratch*' is returned.
If BUFFER is omitted or nil, some interesting buffer is returned.

The ordering is for this frame; If second optional argument FRAME
is provided, then the ordering is for that frame.  If the second arg
is t, then the global ordering is returned.

Note: In FSF Emacs, this function takes two arguments: BUFFER and
VISIBLE-OK.

arguments: (&optional BUFFER FRAME VISIBLE-OK)
Sbuffer.c
Fbuffer-disable-undo
Stop keeping undo information for BUFFER.
Any undo records it already has are discarded.
No argument or nil as argument means do this for the current buffer.

arguments: (&optional BUFFER)
Sbuffer.c
Fbuffer-enable-undo
Start keeping undo information for BUFFER.
No argument or nil as argument means do this for the current buffer.

arguments: (&optional BUFFER)
Sbuffer.c
Fkill-buffer
Kill the buffer BUFFER.
The argument may be a buffer or may be the name of a buffer.
An argument of nil means kill the current buffer.

Value is t if the buffer is actually killed, nil if user says no.

The value of `kill-buffer-hook' (which may be local to that buffer),
if not void, is a list of functions to be called, with no arguments,
before the buffer is actually killed.  The buffer to be killed is current
when the hook functions are called.

Any processes that have this buffer as the `process-buffer' are killed
with `delete-process'.

arguments: (BUFFER)
Sbuffer.c
Frecord-buffer
Place buffer BUFFER first in the buffer order.
Call this function when a buffer is selected "visibly".

This function changes the global buffer order and the per-frame buffer
order for the selected frame.  The buffer order keeps track of recency
of selection so that `other-buffer' will return a recently selected
buffer.  See `other-buffer' for more information.

arguments: (BUFFER)
Sbuffer.c
Fset-buffer-major-mode
Set an appropriate major mode for BUFFER, according to `default-major-mode'.
Use this function before selecting the buffer, since it may need to inspect
the current buffer's major mode.

arguments: (BUFFER)
Sbuffer.c
Fcurrent-buffer
Return the current buffer as a Lisp object.

arguments: ()
Sbuffer.c
Fset-buffer
Make the buffer BUFFER current for editing operations.
BUFFER may be a buffer or the name of an existing buffer.
See also `save-excursion' when you want to make a buffer current temporarily.
This function does not display the buffer, so its effect ends
when the current command terminates.
Use `switch-to-buffer' or `pop-to-buffer' to switch buffers permanently.

arguments: (BUFFER)
Sbuffer.c
Fbarf-if-buffer-read-only
Signal a `buffer-read-only' error if BUFFER is read-only.
Optional argument BUFFER defaults to the current buffer.

If optional argument START is non-nil, all extents in the buffer
which overlap that part of the buffer are checked to ensure none has a
`read-only' property. (Extents that lie completely within the range,
however, are not checked.) END defaults to the value of START.

If START and END are equal, the range checked is [START, END] (i.e.
closed on both ends); otherwise, the range checked is (START, END)
(open on both ends), except that extents that lie completely within
[START, END] are not checked.  See `extent-in-region-p' for a fuller
discussion.

arguments: (&optional BUFFER START END)
Sbuffer.c
Fbury-buffer
Put BUFFER at the end of the list of all buffers.
There it is the least likely candidate for `other-buffer' to return;
thus, the least likely buffer for \[switch-to-buffer] to select by default.
If BUFFER is nil or omitted, bury the current buffer.
Also, if BUFFER is nil or omitted, remove the current buffer from the
selected window if it is displayed there.
Because of this, you may need to specify (current-buffer) as
BUFFER when calling from minibuffer.
If BEFORE is non-nil, it specifies a buffer before which BUFFER
will be placed, instead of being placed at the end.

arguments: (&optional BUFFER BEFORE)
Sbuffer.c
Ferase-buffer
Delete the entire contents of the BUFFER.
Any clipping restriction in effect (see `narrow-to-region') is removed,
so the buffer is truly empty after this.
BUFFER defaults to the current buffer if omitted.

arguments: (&optional BUFFER)
Sbuffer.c
Fkill-all-local-variables
Switch to Fundamental mode by killing current buffer's local variables.
Most local variable bindings are eliminated so that the default values
become effective once more.  Also, the syntax table is set from
the standard syntax table, the category table is set from the
standard category table (if support for Mule exists), local keymap is set
to nil, the abbrev table is set from `fundamental-mode-abbrev-table',
and all specifier specifications whose locale is the current buffer
are removed.  This function also forces redisplay of the modeline.

Every function to select a new major mode starts by
calling this function.

As a special exception, local variables whose names have
a non-nil `permanent-local' property are not eliminated by this function.

The first thing this function does is run
the normal hook `change-major-mode-hook'.

arguments: ()
Sbuffer.c
Fbuffer-char-byte-conversion-info
Return the current info used for char-byte conversion in BUFFER.
The values returned are in the form of a plist of properties and values.

arguments: (BUFFER)
Sbuffer.c
Fstring-char-byte-conversion-info
Return the current info used for char-byte conversion in STRING.
The values returned are in the form of a plist of properties and values.

arguments: (STRING)
Sbuffer.c
Vchange-major-mode-hook
List of hooks to be run before killing local variables in a buffer.
This should be used by any mode that temporarily alters the contents or
the read-only state of the buffer.  See also `kill-all-local-variables'.Sbuffer.c
Vfind-file-compare-truenames
If this is true, then the `find-file' command will check the truenames
of all visited files when deciding whether a given file is already in
a buffer, instead of just `buffer-file-name'.  This means that if you
attempt to visit another file which is a symbolic link to a file which
is already in a buffer, the existing buffer will be found instead of a
newly-created one.  This works if any component of the pathname
(including a non-terminal component) is a symbolic link as well, but
doesn't work with hard links (nothing does).

See also the variable `find-file-use-truenames'.Sbuffer.c
Vfind-file-use-truenames
If this is true, then a buffer's visited file-name will always be
chased back to the real file; it will never be a symbolic link, and there
will never be a symbolic link anywhere in its directory path.
That is, the buffer-file-name and buffer-file-truename will be equal.
This doesn't work with hard links.

See also the variable `find-file-compare-truenames'.Sbuffer.c
Vbefore-change-functions
List of functions to call before each text change.
Two arguments are passed to each function: the positions of
the beginning and end of the range of old text to be changed.
(For an insertion, the beginning and end are at the same place.)
No information is given about the length of the text after the change.

Buffer changes made while executing the `before-change-functions'
don't call any before-change or after-change functions.Sbuffer.c
Vafter-change-functions
List of functions to call after each text change.
Three arguments are passed to each function: the positions of
the beginning and end of the range of changed text,
and the length of the pre-change text replaced by that range.
(For an insertion, the pre-change length is zero;
for a deletion, that length is the number of characters deleted,
and the post-change beginning and end are at the same place.)

Buffer changes made while executing `after-change-functions'
don't call any before-change or after-change functions.Sbuffer.c
Vbefore-change-function

Sbuffer.c
Vafter-change-function

Sbuffer.c
Vfirst-change-hook
A list of functions to call before changing a buffer which is unmodified.
The functions are run using the `run-hooks' function.Sbuffer.c
Vundo-threshold
Keep no more undo information once it exceeds this size.
This threshold is applied when garbage collection happens.
The size is counted as the number of bytes occupied,
which includes both saved text and other data.Sbuffer.c
Vundo-high-threshold
Don't keep more than this much size of undo information.
A command which pushes past this size is itself forgotten.
This threshold is applied when garbage collection happens.
The size is counted as the number of bytes occupied,
which includes both saved text and other data.Sbuffer.c
Vinhibit-read-only
*Non-nil means disregard read-only status of buffers or characters.
If the value is t, disregard `buffer-read-only' and all `read-only'
text properties.  If the value is a list, disregard `buffer-read-only'
and disregard a `read-only' extent property or text property if the
property value is a member of the list.Sbuffer.c
Vkill-buffer-query-functions
List of functions called with no args to query before killing a buffer.Sbuffer.c
Vdelete-auto-save-files
*Non-nil means delete auto-save file when a buffer is saved or killed.Sbuffer.c
Vdefault-modeline-format
Default value of `modeline-format' for buffers that don't override it.
This is the same as (default-value 'modeline-format).Sbuffer.c
Vdefault-abbrev-mode
Default value of `abbrev-mode' for buffers that do not override it.
This is the same as (default-value 'abbrev-mode).Sbuffer.c
Vdefault-ctl-arrow
Default value of `ctl-arrow' for buffers that do not override it.
This is the same as (default-value 'ctl-arrow).Sbuffer.c
Vdefault-display-direction
Default display-direction for buffers that do not override it.
This is the same as (default-value 'display-direction).
Note: This is not yet implemented.Sbuffer.c
Vdefault-truncate-lines
Default value of `truncate-lines' for buffers that do not override it.
This is the same as (default-value 'truncate-lines).Sbuffer.c
Vdefault-fill-column
Default value of `fill-column' for buffers that do not override it.
This is the same as (default-value 'fill-column).Sbuffer.c
Vdefault-left-margin
Default value of `left-margin' for buffers that do not override it.
This is the same as (default-value 'left-margin).Sbuffer.c
Vdefault-tab-width
Default value of `tab-width' for buffers that do not override it.
This is the same as (default-value 'tab-width).Sbuffer.c
Vdefault-case-fold-search
Default value of `case-fold-search' for buffers that don't override it.
This is the same as (default-value 'case-fold-search).Sbuffer.c
Vmodeline-format
Template for displaying modeline for current buffer.
Each buffer has its own value of this variable.
Value may be a string, symbol, glyph, generic specifier, list or cons cell.
For a symbol, its value is processed (but it is ignored if t or nil).
 A string appearing directly as the value of a symbol is processed verbatim
 in that the %-constructs below are not recognized.
For a glyph, it is inserted as is.
For a generic specifier (i.e. a specifier of type `generic'), its instance
 is computed in the current window using the equivalent of `specifier-instance'
 and the value is processed.
For a list whose car is a symbol, the symbol's value is taken,
 and if that is non-nil, the cadr of the list is processed recursively.
 Otherwise, the caddr of the list (if there is one) is processed.
For a list whose car is a boolean specifier, its instance is computed
 in the current window using the equivalent of `specifier-instance',
 and if that is non-nil, the cadr of the list is processed recursively.
 Otherwise, the caddr of the list (if there is one) is processed.
For a list whose car is a string or list, each element is processed
 recursively and the results are effectively concatenated.
For a list whose car is an integer, the cdr of the list is processed
 and padded (if the number is positive) or truncated (if negative)
 to the width specified by that number.
For a list whose car is an extent, the cdr of the list is processed
 normally but the results are displayed using the face of the
 extent, and mouse clicks over this section are processed using the
 keymap of the extent. (In addition, if the extent has a help-echo
 property, that string will be echoed when the mouse moves over this
 section.) If extents are nested, all keymaps are properly consulted
 when processing mouse clicks, but multiple faces are not correctly
 merged (only the first face is used), and lists of faces are not
 correctly handled.  See `generated-modeline-string' for more information.
A string is printed verbatim in the modeline except for %-constructs:
  (%-constructs are processed when the string is the entire modeline-format
   or when it is found in a cons-cell or a list)
  %b -- print buffer name.      %c -- print the current column number.
  %f -- print visited file name.
  %* -- print %, * or hyphen.   %+ -- print *, % or hyphen.
	% means buffer is read-only and * means it is modified.
	For a modified read-only buffer, %* gives % and %+ gives *.
  %s -- print process status.   %l -- print the current line number.
  %S -- print name of selected frame (only meaningful under X Windows).
  %p -- print percent of buffer above top of window, or Top, Bot or All.
  %P -- print percent of buffer above bottom of window, perhaps plus Top,
        or print Bottom or All.
  %n -- print Narrow if appropriate.
  %C -- print the mnemonic for `buffer-file-coding-system'.
  %[ -- print one [ for each recursive editing level.  %] similar.
  %% -- print %.                %- -- print infinitely many dashes.
Decimal digits after the % specify field width to which to pad.Sbuffer.c
Vdefault-major-mode
*Major mode for new buffers.  Defaults to `fundamental-mode'.
nil here means use current buffer's major mode.Sbuffer.c
Vfundamental-mode-abbrev-table
The abbrev table of mode-specific abbrevs for Fundamental Mode.Sbuffer.c
Vmajor-mode
Symbol for current buffer's major mode.Sbuffer.c
Vmode-name
Pretty name of current buffer's major mode (a string).Sbuffer.c
Vabbrev-mode
Non-nil turns on automatic expansion of abbrevs as they are inserted.
Automatically becomes buffer-local when set in any fashion.Sbuffer.c
Vcase-fold-search
*Non-nil if searches should ignore case.
Automatically becomes buffer-local when set in any fashion.Sbuffer.c
Vfill-column
*Column beyond which automatic line-wrapping should happen.
Automatically becomes buffer-local when set in any fashion.Sbuffer.c
Vleft-margin
*Column for the default indent-line-function to indent to.
Linefeed indents to this column in Fundamental mode.
Automatically becomes buffer-local when set in any fashion.
Do not confuse this with the specifier `left-margin-width';
that controls the size of a margin that is displayed outside
of the text area.Sbuffer.c
Vtab-width
*Distance between tab stops (for display of tab characters), in columns.
Automatically becomes buffer-local when set in any fashion.Sbuffer.c
Vctl-arrow
*Non-nil means display control chars with uparrow.
Nil means use backslash and octal digits.
An integer means characters >= ctl-arrow are assumed to be printable, and
will be displayed as a single glyph.
Any other value is the same as 160 - the code SPC with the high bit on.

The interpretation of this variable is likely to change in the future.

Automatically becomes buffer-local when set in any fashion.
This variable does not apply to characters whose display is specified
in the current display table (if there is one).Sbuffer.c
Vtruncate-lines
*Non-nil means do not display continuation lines;
give each line of text one frame line.
Automatically becomes buffer-local when set in any fashion.

Note that this is overridden by the variable
`truncate-partial-width-windows' if that variable is non-nil
and this buffer is not full-frame width.Sbuffer.c
Vdefault-directory
Name of default directory of current buffer.  Should end with slash.
Each buffer has its own value of this variable.Sbuffer.c
Vdefault-buffer-file-coding-system
Default value of `buffer-file-coding-system' for buffers that do not override it.
This is the same as (default-value 'buffer-file-coding-system).
This value is used both for buffers without associated files and
for buffers whose files do not have any apparent coding system.
See `buffer-file-coding-system'.Sbuffer.c
Vbuffer-file-coding-system
*Current coding system for the current buffer.
When the buffer is written out into a file, this coding system will be
used for the encoding.  Automatically buffer-local when set in any
fashion.  This is normally set automatically when a file is loaded in
based on the determined coding system of the file (assuming that
`buffer-file-coding-system-for-read' is set to `undecided', which
calls for automatic determination of the file's coding system).
Normally the modeline indicates the current file coding system using
its mnemonic abbreviation.

The default value for this variable (which is normally used for
buffers without associated files) is also used when automatic
detection of a file's encoding is called for and there was no
discernible encoding in the file (i.e. it was entirely or almost
entirely ASCII).  The default value should generally *not* be set to
nil (equivalent to `no-conversion'), because if extended characters
are ever inserted into the buffer, they will be lost when the file is
written out.  A good choice is `iso-2022-8' (the simple ISO 2022 8-bit
encoding), which will write out ASCII and Latin-1 characters in the
standard (and highly portable) fashion and use standard escape
sequences for other charsets.  Another reasonable choice is
`escape-quoted', which is equivalent to `iso-2022-8' but prefixes
certain control characters with ESC to make sure they are not
interpreted as escape sequences when read in.  This latter coding
system results in more "correct" output in the presence of control
characters in the buffer, in the sense that when read in again using
the same coding system, the result will virtually always match the
original contents of the buffer, which is not the case with
`iso-2022-8'; but the output is less portable when dealing with binary
data -- there may be stray ESC characters when the file is read by
another program.

`buffer-file-coding-system' does *not* control the coding system used when
a file is read in.  Use the variables `buffer-file-coding-system-for-read'
and `file-coding-system-alist' for that.  From a Lisp program, if
you wish to unilaterally specify the coding system used for one
particular operation, you should bind the variable
`coding-system-for-read' rather than changing the other two
variables just mentioned, which are intended to be used for
global environment specification.

See `insert-file-contents' for a full description of how a file's
coding system is determined when it is read in.Sbuffer.c
Vauto-fill-function
Function called (if non-nil) to perform auto-fill.
It is called after self-inserting a space at a column beyond `fill-column'.
Each buffer has its own value of this variable.
NOTE: This variable is not an ordinary hook;
It may not be a list of functions.Sbuffer.c
Vbuffer-file-name
Name of file visited in current buffer, or nil if not visiting a file.
Each buffer has its own value of this variable.
Code that changes this variable must maintain the invariant
`(equal buffer-file-truename (file-truename buffer-file-name))'.Sbuffer.c
Vbuffer-file-truename
The real name of the file visited in the current buffer, or nil if not
visiting a file.  This is the result of passing `buffer-file-name' to the
`file-truename' function.  Every buffer has its own value of this variable.
Code that changes the file name associated with a buffer maintains the
invariant `(equal buffer-file-truename (file-truename buffer-file-name))'.Sbuffer.c
Vbuffer-auto-save-file-name
Name of file for auto-saving current buffer,
or nil if buffer should not be auto-saved.
Each buffer has its own value of this variable.Sbuffer.c
Vbuffer-read-only
Non-nil if this buffer is read-only.
Each buffer has its own value of this variable.Sbuffer.c
Vbuffer-backed-up
Non-nil if this buffer's file has been backed up.
Backing up is done before the first time the file is saved.
Each buffer has its own value of this variable.Sbuffer.c
Vbuffer-saved-size
Length of current buffer when last read in, saved or auto-saved.
0 initially.
Each buffer has its own value of this variable.Sbuffer.c
Vselective-display
Non-nil enables selective display:
Integer N as value means display only lines
 that start with less than n columns of space.
A value of t means, after a ^M, all the rest of the line is invisible.
 Then ^M's in the file are written into files as newlines.

Automatically becomes buffer-local when set in any fashion.Sbuffer.c
Vselective-display-ellipses
t means display ... on previous line when a line is invisible.
Automatically becomes buffer-local when set in any fashion.Sbuffer.c
Vlocal-abbrev-table
Local (mode-specific) abbrev table of current buffer.Sbuffer.c
Voverwrite-mode
Non-nil if self-insertion should replace existing text.
The value should be one of `overwrite-mode-textual',
`overwrite-mode-binary', or nil.
If it is `overwrite-mode-textual', self-insertion still
inserts at the end of a line, and inserts when point is before a tab,
until the tab is filled in.
If `overwrite-mode-binary', self-insertion replaces newlines and tabs too.
Automatically becomes buffer-local when set in any fashion.

Normally, you shouldn't modify this variable by hand, but use the functions
`overwrite-mode' and `binary-overwrite-mode' instead. However, you can
customize the default value from the options menu.Sbuffer.c
Vbuffer-undo-list
List of undo entries in current buffer.
Recent changes come first; older changes follow newer.

An entry (START . END) represents an insertion which begins at
position START and ends at position END.

An entry (TEXT . POSITION) represents the deletion of the string TEXT
from (abs POSITION).  If POSITION is positive, point was at the front
of the text being deleted; if negative, point was at the end.

An entry (t HIGH . LOW) indicates that the buffer previously had
"unmodified" status.  HIGH and LOW are the high and low 16-bit portions
of the visited file's modification time, as of that time.  If the
modification time of the most recent save is different, this entry is
obsolete.

An entry of the form EXTENT indicates that EXTENT was attached in
the buffer.  Undoing an entry of this form detaches EXTENT.

An entry of the form (EXTENT START END) indicates that EXTENT was
detached from the buffer.  Undoing an entry of this form attaches
EXTENT from START to END.

An entry of the form POSITION indicates that point was at the buffer
location given by the integer.  Undoing an entry of this form places
point at POSITION.

nil marks undo boundaries.  The undo command treats the changes
between two undo boundaries as a single step to be undone.

If the value of the variable is t, undo information is not recorded.Sbuffer.c
Vpoint-before-scroll
Value of point before the last series of scroll operations, or nil.Sbuffer.c
Vbuffer-file-format
List of formats to use when saving this buffer.
Formats are defined by `format-alist'.  This variable is
set when a file is visited.  Automatically local in all buffers.Sbuffer.c
Vbuffer-display-count
A number incremented each time this buffer is displayed in a window.
The function `set-window-buffer' updates it.Sbuffer.c
Vbuffer-display-time
Time stamp updated each time this buffer is displayed in a window.
The function `set-window-buffer' updates this variable
to the value obtained by calling `current-time'.
If the buffer has never been shown in a window, the value is nil.Sbuffer.c
Vbuffer-invisibility-spec
Invisibility spec of this buffer.
The default is t, which means that text is invisible
if it has (or is covered by an extent with) a non-nil `invisible' property.
If the value is a list, a text character is invisible if its `invisible'
property is an element in that list.
If an element is a cons cell of the form (PROPERTY . ELLIPSIS),
then characters with property value PROPERTY are invisible,
and they have an ellipsis as well if ELLIPSIS is non-nil.
Note that the actual characters used for the ellipsis are controllable
using `invisible-text-glyph', and default to "...".Sbuffer.c
Vgenerated-modeline-string
String of characters in this buffer's modeline as of the last redisplay.
Each time the modeline is recomputed, the resulting characters are
stored in this string, which is resized as necessary.  You may not
set this variable, and modifying this string will not change the
modeline; you have to change `modeline-format' if you want that.

For each extent in `modeline-format' that is encountered when
processing the modeline, a corresponding extent is placed in
`generated-modeline-string' and covers the text over which the
extent in `modeline-format' applies.  The extent in
`generated-modeline-string' is made a child of the extent in
`modeline-format', which means that it inherits all properties from
that extent.  Note that the extents in `generated-modeline-string'
are managed automatically.  You should not explicitly put any extents
in `generated-modeline-string'; if you do, they will disappear the
next time the modeline is processed.

For extents in `modeline-format', the following properties are currently
handled:

`face'
	Affects the face of the modeline text.  Currently, faces do
	not merge properly; only the most recently encountered face
	is used.  This is a bug.

`keymap'
	Affects the disposition of button events over the modeline
	text.  Multiple applicable keymaps *are* handled properly,
	and `modeline-map' still applies to any events that don't
	have bindings in extent-specific keymaps.

`help-echo'
	If a string, causes the string to be displayed when the mouse
	moves over the text.Sbytecode.c
Fcompiled-function-p
Return t if OBJECT is a byte-compiled function object.

arguments: (OBJECT)
Sbytecode.c
Fcompiled-function-arglist
Return the argument list of the compiled-function object FUNCTION.

arguments: (FUNCTION)
Sbytecode.c
Fcompiled-function-instructions
Return the byte-opcode string of the compiled-function object FUNCTION.

arguments: (FUNCTION)
Sbytecode.c
Fcompiled-function-constants
Return the constants vector of the compiled-function object FUNCTION.

arguments: (FUNCTION)
Sbytecode.c
Fcompiled-function-stack-depth
Return the maximum stack depth of the compiled-function object FUNCTION.

arguments: (FUNCTION)
Sbytecode.c
Fcompiled-function-doc-string
Return the doc string of the compiled-function object FUNCTION, if available.
Functions that had their doc strings snarfed into the DOC file will have
an integer returned instead of a string.

arguments: (FUNCTION)
Sbytecode.c
Fcompiled-function-interactive
Return the interactive spec of the compiled-function object FUNCTION, or nil.
If non-nil, the return value will be a list whose first element is
`interactive' and whose second element is the interactive spec.

arguments: (FUNCTION)
Sbytecode.c
Fcompiled-function-annotation
Return the annotation of the compiled-function object FUNCTION, or nil.
The annotation is a piece of information indicating where this
compiled-function object came from.  Generally this will be
a symbol naming a function; or a string naming a file, if the
compiled-function object was not defined in a function; or nil,
if the compiled-function object was not created as a result of
a `load'.

arguments: (FUNCTION)
Sbytecode.c
Fcompiled-function-domain
Return the domain of the compiled-function object FUNCTION, or nil.
This is only meaningful if I18N3 was enabled when emacs was compiled.

arguments: (FUNCTION)
Sbytecode.c
Ffetch-bytecode
If the byte code for compiled function FUNCTION is lazy-loaded, fetch it now.

arguments: (FUNCTION)
Sbytecode.c
Foptimize-compiled-function
Convert compiled function FUNCTION into an optimized internal form.

arguments: (FUNCTION)
Sbytecode.c
Fbyte-code
Function used internally in byte-compiled code.
First argument INSTRUCTIONS is a string of byte code.
Second argument CONSTANTS is a vector of constants.
Third argument STACK-DEPTH is the maximum stack depth used in this function.
If STACK-DEPTH is incorrect, Emacs may crash.

arguments: (INSTRUCTIONS CONSTANTS STACK-DEPTH)
Sbytecode.c
Vbyte-code-meter
A vector of vectors which holds a histogram of byte code usage.
(aref (aref byte-code-meter 0) CODE) indicates how many times the byte
opcode CODE has been executed.
(aref (aref byte-code-meter CODE1) CODE2), where CODE1 is not 0,
indicates how many times the byte opcodes CODE1 and CODE2 have been
executed in succession.Sbytecode.c
Vbyte-metering-on
If non-nil, keep profiling information on byte code usage.
The variable `byte-code-meter' indicates how often each byte opcode is used.
If a symbol has a property named `byte-code-meter' whose value is an
integer, it is incremented each time that symbol's function is called.Scallint.c
Finteractive
Specify a way of parsing arguments for interactive use of a function.
For example, write
  (defun foo (arg) "Doc string" (interactive "p") ...use arg...)
to make ARG be the prefix argument when `foo' is called as a command.
The "call" to `interactive' is actually a declaration rather than a function;
 it tells `call-interactively' how to read arguments
 to pass to the function.
The interactive form must appear at the top level of the function body.  If
 it is wrapped in a `let' or `progn' or similar, Lisp will not even realize
 the function is an interactive command!
When actually called, `interactive' just returns nil.

The argument of `interactive' is usually a string containing a code letter
 followed by a prompt.  (Some code letters do not use I/O to get
 the argument and do not need prompts.)  To prompt for multiple arguments,
 give a code letter, its prompt, a newline, and another code letter, etc.
 Prompts are passed to format, and may use % escapes to print the
 arguments that have already been read.
If the argument is not a string, it is evaluated to get a list of
 arguments to pass to the function.
Just `(interactive)' means pass no args when calling interactively.

Code letters available are:
a -- Function name: symbol with a function definition.
b -- Name of existing buffer.
B -- Name of buffer, possibly nonexistent.
c -- Character.
C -- Command name: symbol with interactive function definition.
d -- Value of point as number.  Does not do I/O.
D -- Directory name.
e -- Last mouse-button or misc-user event that invoked this command.
     If used more than once, the Nth `e' returns the Nth such event.
     Does not do I/O.
f -- Existing file name.
F -- Possibly nonexistent file name.
i -- Always nil, ignore.  Use to skip arguments when interactive.
k -- Key sequence (a vector of events).
K -- Key sequence to be redefined (do not automatically down-case).
m -- Value of mark as number.  Does not do I/O.
n -- Number read using minibuffer.
N -- Prefix arg converted to number, or if none, do like code `n'.
p -- Prefix arg converted to number.  Does not do I/O.
P -- Prefix arg in raw form.  Does not do I/O.
r -- Region: point and mark as 2 numeric args, smallest first.  Does no I/O.
s -- Any string.
S -- Any symbol.
v -- Variable name: symbol that is user-variable-p.
x -- Lisp expression read but not evaluated.
X -- Lisp expression read and evaluated.
z -- Coding system. (Always nil if no Mule support.)
Z -- Coding system, nil if no prefix arg. (Always nil if no Mule support.)
In addition, if the string begins with `*'
 then an error is signaled if the buffer is read-only.
 This happens before reading any arguments.
If the string begins with `@', then the window the mouse is over is selected
 before anything else is done.
If the string begins with `_', then this command will not cause the region
 to be deactivated when it completes; that is, `zmacs-region-stays' will be
 set to t when the command exits successfully.
You may use any of `@', `*' and `_' at the beginning of the string;
 they are processed in the order that they appear.


When writing your own interactive spec, it can be useful to know the
equivalent Lisp expressions for the various code letters.  They are:

a -- (read-function "PROMPT")
b -- (let ((def (current-buffer)))
       (if (eq (selected-window) (active-minibuffer-window))
           (setq def (other-buffer def))
       (read-buffer "PROMPT" def t)))
B -- (read-buffer "PROMPT" (other-buffer (current-buffer)))
c -- (prog1
         (let ((cursor-in-echo-area t))
           (message "%s" "PROMPT")
           (read-char))
       (message nil))
C -- (read-command "PROMPT")
d -- (point)
D -- (read-directory-name "PROMPT" nil default-directory t)
e -- current-mouse-event ;; #### not quite right. needs access to the KEYS
                         ;; argument of `call-interactively', but that's
                         ;; currently impossible.
f -- (read-file-name "PROMPT" nil nil 0)
F -- (read-file-name "PROMPT")
i -- nil
k -- (read-key-sequence "PROMPT")
K -- (read-key-sequence "PROMPT" nil t)
m -- (mark)
n -- (read-number "PROMPT")
N -- (if current-prefix-arg
         (prefix-numeric-value current-prefix-arg)
       (read-number "PROMPT"))
p -- (prefix-numeric-value current-prefix-arg)
P -- current-prefix-arg
r -- (if (and zmacs-regions (not zmacs-region-active-p))
         (error "The region is not active now"))
     (let ((tem (marker-buffer (mark-marker t))))
       (unless (and tem (eq tem (current-buffer)))
         (error "The mark is now set now")))
     (region-beginning) +
     (region-end)
s -- (read-string "PROMPT")
S -- (let (tem prev-tem)
       (while (not tem)
         (setq tem (completing-read "PROMPT" obarray nil nil prev-tem))
         (setq prev-tem tem)
         (setq tem (intern tem))
         (if (= (length tem) 0)
             (setq tem nil))))
v -- (read-variable "PROMPT")
x -- (read-expression "PROMPT")
X -- (eval (read-expression "PROMPT"))
z -- (and (fboundp 'read-coding-system) (read-coding-system "PROMPT"))
Z -- (and current-prefix-arg (fboundp 'read-coding-system)
       (read-coding-system "PROMPT"))

`*' (barf-if-buffer-read-only)
`@' (let ((event current-mouse-event)) ;; #### not quite right; needs the
      (when event                      ;; value from the `e' spec above.
        (let ((window event-window event))
          (when window
            (if (and (window-minibuffer-p window)
                     (not (and (> (minibuffer-depth) 0)
                               (eq window (active-minibuffer-window)))))
              (error "Attempt to select inactive minibuffer window"))
            (select window)))))
`_' (setq zmacs-region-stays t) 
Scallint.c
Fcall-interactively
Call FUNCTION, reading args according to its interactive calling specs.
Return the value FUNCTION returns.
The function contains a specification of how to do the argument reading.
In the case of user-defined functions, this is specified by placing a call
to the function `interactive' at the top level of the function body.
See `interactive'.

If optional second arg RECORD-FLAG is the symbol `lambda', the interactive
calling arguments for FUNCTION are read and returned as a list,
but the function is not called on them.

If RECORD-FLAG is `t' then unconditionally put this command in the
command-history.  Otherwise, this is done only if an arg is read using
the minibuffer.

The argument KEYS specifies the value to use instead of (this-command-keys)
when reading the arguments.

arguments: (FUNCTION &optional RECORD-FLAG KEYS)
Scallint.c
Fprefix-numeric-value
Return numeric meaning of raw prefix argument RAW.
A raw prefix argument is what you get from `(interactive "P")'.
Its numeric meaning is what you would get from `(interactive "p")'.

arguments: (RAW)
Scallint.c
Vcurrent-prefix-arg
The value of the prefix argument for this editing command.
It may be a number, or the symbol `-' for just a minus sign as arg,
or a list whose car is a number for just one or more C-U's
or nil if no argument has been specified.
This is what `(interactive "P")' returns.Scallint.c
Vcommand-history
List of recent commands that read arguments from terminal.
Each command is represented as a form to evaluate.Scallint.c
Vcommand-debug-status
Debugging status of current interactive command.
Bound each time `call-interactively' is called;
may be set by the debugger as a reminder for itself.Scasefiddle.c
Fupcase
Convert STRING-OR-CHAR to upper case and return that.
STRING-OR-CHAR may be a character or string.  The result has the same type.
STRING-OR-CHAR is not altered--the value is a copy.
See also `capitalize', `downcase' and `upcase-initials'.
Optional second arg BUFFER specifies which buffer's case tables to use,
 and defaults to the current buffer.

arguments: (STRING-OR-CHAR &optional BUFFER)
Scasefiddle.c
Fdowncase
Convert STRING-OR-CHAR to lower case and return that.
STRING-OR-CHAR may be a character or string.  The result has the same type.
STRING-OR-CHAR is not altered--the value is a copy.
Optional second arg BUFFER specifies which buffer's case tables to use,
 and defaults to the current buffer.

arguments: (STRING-OR-CHAR &optional BUFFER)
Scasefiddle.c
Fcanoncase
Convert STRING-OR-CHAR to its canonical lowercase form and return that.

STRING-OR-CHAR may be a character or string.  The result has the same type.
STRING-OR-CHAR is not altered--the value is a copy.

Optional second arg BUFFER specifies which buffer's case tables to use,
and defaults to the current buffer.

For any N characters that are equivalent in case-insensitive searching,
their canonical lowercase character will be the same.

arguments: (STRING-OR-CHAR &optional BUFFER)
Scasefiddle.c
Fcapitalize
Convert STRING-OR-CHAR to capitalized form and return that.
This means that each word's first character is upper case
and the rest is lower case.
STRING-OR-CHAR may be a character or string.  The result has the same type.
STRING-OR-CHAR is not altered--the value is a copy.
Optional second arg BUFFER specifies which buffer's case tables to use,
 and defaults to the current buffer.

arguments: (STRING-OR-CHAR &optional BUFFER)
Scasefiddle.c
Fupcase-initials
Convert the initial of each word in STRING-OR-CHAR to upper case.
Do not change the other letters of each word.
STRING-OR-CHAR may be a character or string.  The result has the same type.
STRING-OR-CHAR is not altered--the value is a copy.
Optional second arg BUFFER specifies which buffer's case tables to use,
 and defaults to the current buffer.

arguments: (STRING-OR-CHAR &optional BUFFER)
Scasefiddle.c
Fupcase-region
Convert the region to upper case.  In programs, wants two arguments.
These arguments specify the starting and ending character numbers of
 the region to operate on.  When used as a command, the text between
 point and the mark is operated on.
See also `capitalize-region'.
Optional third arg BUFFER defaults to the current buffer.

arguments: (START END &optional BUFFER)
Scasefiddle.c
Fdowncase-region
Convert the region to lower case.  In programs, wants two arguments.
These arguments specify the starting and ending character numbers of
 the region to operate on.  When used as a command, the text between
 point and the mark is operated on.
Optional third arg BUFFER defaults to the current buffer.

arguments: (START END &optional BUFFER)
Scasefiddle.c
Fcapitalize-region
Convert the region to capitalized form.
Capitalized form means each word's first character is upper case
 and the rest of it is lower case.
In programs, give two arguments, the starting and ending
 character positions to operate on.
Optional third arg BUFFER defaults to the current buffer.

arguments: (START END &optional BUFFER)
Scasefiddle.c
Fupcase-initials-region
Upcase the initial of each word in the region.
Subsequent letters of each word are not changed.
In programs, give two arguments, the starting and ending
 character positions to operate on.
Optional third arg BUFFER defaults to the current buffer.

arguments: (START END &optional BUFFER)
Scasefiddle.c
Fupcase-word
Convert following word (or COUNT words) to upper case, moving over.
With negative argument, convert previous words but do not move.
See also `capitalize-word'.
Optional second arg BUFFER defaults to the current buffer.

arguments: (COUNT &optional BUFFER)
Scasefiddle.c
Fdowncase-word
Convert following word (or COUNT words) to lower case, moving over.
With negative argument, convert previous words but do not move.
Optional second arg BUFFER defaults to the current buffer.

arguments: (COUNT &optional BUFFER)
Scasefiddle.c
Fcapitalize-word
Capitalize the following word (or COUNT words), moving over.
This gives the word(s) a first character in upper case
 and the rest lower case.
With negative argument, capitalize previous words but do not move.
Optional second arg BUFFER defaults to the current buffer.

arguments: (COUNT &optional BUFFER)
Scasetab.c
Fmake-case-table
Create a new, empty case table.

arguments: ()
Scasetab.c
Fcase-table-p
Return t if OBJECT is a case table.
See `set-case-table' for more information on these data structures.

arguments: (OBJECT)
Scasetab.c
Fget-case-table
Return CHAR-CASE version of CHARACTER in CASE-TABLE.

CHAR-CASE is either `downcase' or `upcase'.

arguments: (CHAR-CASE CHARACTER CASE-TABLE)
Scasetab.c
Fput-case-table
Set CHAR-CASE version of CHARACTER to be VALUE in CASE-TABLE.

CHAR-CASE is either `downcase' or `upcase'.
See also `put-case-table-pair'.

arguments: (CHAR-CASE CHARACTER VALUE CASE-TABLE)
Scasetab.c
Fput-case-table-pair
Make UC and LC a pair of inter-case-converting letters in CASE-TABLE.
UC is an uppercase character and LC is a downcase character.

arguments: (UC LC CASE-TABLE)
Scasetab.c
Fcopy-case-table
Return a new case table which is a copy of CASE-TABLE

arguments: (CASE-TABLE)
Scasetab.c
Fcurrent-case-table
Return the case table of BUFFER, which defaults to the current buffer.

arguments: (&optional BUFFER)
Scasetab.c
Fstandard-case-table
Return the standard case table.
This is the one used for new buffers.

arguments: ()
Scasetab.c
Fset-case-table
Select CASE-TABLE as the new case table for the current buffer.
A case table is a case-table object or list
 (DOWNCASE UPCASE CANONICALIZE EQUIVALENCES)
 where each element is either nil or a string of length 256.
The latter is provided for backward-compatibility.
DOWNCASE maps each character to its lower-case equivalent.
UPCASE maps each character to its upper-case equivalent;
 if lower and upper case characters are in 1-1 correspondence,
 you may use nil and the upcase table will be deduced from DOWNCASE.
CANONICALIZE maps each character to a canonical equivalent;
 any two characters that are related by case-conversion have the same
 canonical equivalent character; it may be nil, in which case it is
 deduced from DOWNCASE and UPCASE.
EQUIVALENCES is a map that cyclicly permutes each equivalence class
 (of characters with the same canonical equivalent); it may be nil,
 in which case it is deduced from CANONICALIZE.

See also `get-case-table', `put-case-table' and `put-case-table-pair'.

arguments: (CASE-TABLE)
Scasetab.c
Fset-standard-case-table
Select CASE-TABLE as the new standard case table for new buffers.
See `set-case-table' for more info on case tables.

arguments: (CASE-TABLE)
Schartab.c
Fchar-table-p
Return non-nil if OBJECT is a char table.

arguments: (OBJECT)
Schartab.c
Fchar-table-type-list
Return a list of the recognized char table types.
See `make-char-table'.

arguments: ()
Schartab.c
Fvalid-char-table-type-p
Return t if TYPE if a recognized char table type.
See `make-char-table'.

arguments: (TYPE)
Schartab.c
Fchar-table-type
Return the type of CHAR-TABLE.
See `make-char-table'.

arguments: (CHAR-TABLE)
Schartab.c
Freset-char-table
Reset CHAR-TABLE to its default state.

arguments: (CHAR-TABLE)
Schartab.c
Fmake-char-table
Return a new, empty char table of type TYPE.

A char table is a table that maps characters (or ranges of characters)
to values.  Char tables are specialized for characters, only allowing
particular sorts of ranges to be assigned values.  Although this
loses in generality, it makes for extremely fast (constant-time)
lookups, and thus is feasible for applications that do an extremely
large number of lookups (e.g. scanning a buffer for a character in
a particular syntax, where a lookup in the syntax table must occur
once per character).

When Mule support exists, the types of ranges that can be assigned
values are

-- all characters (represented by t)
-- an entire charset
-- a single row in a two-octet charset (represented by a vector of two
   elements: a two-octet charset and a row number; the row must be an
   integer, not a character)
-- a single character

When Mule support is not present, the types of ranges that can be
assigned values are

-- all characters (represented by t)
-- a single character

To create a char table, use `make-char-table'.
To modify a char table, use `put-char-table' or `remove-char-table'.
To retrieve the value for a particular character, use `get-char-table'.
See also `map-char-table', `reset-char-table', `copy-char-table',
`char-table-p', `valid-char-table-type-p', `char-table-type-list',
`valid-char-table-value-p', and `check-char-table-value'.

Each char table type is used for a different purpose and allows different
sorts of values.  The different char table types are

`category'
	Used for category tables, which specify the regexp categories that a
	character is in.  The valid values are nil or a bit vector of 95
	elements, and values default to nil.  Higher-level Lisp functions
	are provided for working with category tables.  Currently categories
	and category tables only exist when Mule support is present.
`char'
	A generalized char table, for mapping from one character to another.
	Used for case tables, syntax matching tables,
	`keyboard-translate-table', etc.  The valid values are characters,
	and the default result given by `get-char-table' if a value hasn't
	been set for a given character or for a range that includes it, is
	?x00.
`generic'
        An even more generalized char table, for mapping from a character to
	anything. The default result given by `get-char-table' is nil.
`display'
	Used for display tables, which specify how a particular character is
	to appear when displayed.  #### Not yet implemented; currently, the
	display table code uses generic char tables, and it's not clear that
	implementing this char table type would be useful.
`syntax'
	Used for syntax tables, which specify the syntax of a particular
	character.  Higher-level Lisp functions are provided for
	working with syntax tables.  The valid values are integers, and the
	default result given by `get-char-table' is the syntax code for
	`inherit'.

arguments: (TYPE)
Schartab.c
Fcopy-char-table
Return a new char table which is a copy of CHAR-TABLE.
It will contain the same values for the same characters and ranges
as CHAR-TABLE.  The values will not themselves be copied.

arguments: (CHAR-TABLE)
Schartab.c
Fchar-table-default
Return the default value for CHAR-TABLE.  When an entry for a character
does not exist, the default is returned.

arguments: (CHAR-TABLE)
Schartab.c
Fset-char-table-default
Set the default value for CHAR-TABLE to DEFAULT.
Currently, the default value for syntax tables cannot be changed.
(This policy might change in the future.)

arguments: (CHAR-TABLE DEFAULT)
Schartab.c
Fget-char-table
Find value for CHARACTER in CHAR-TABLE.

arguments: (CHARACTER CHAR-TABLE)
Schartab.c
Fget-range-char-table
Find value for RANGE in CHAR-TABLE.
If there is more than one value, return MULTI (defaults to nil).

Valid values for RANGE are single characters, charsets, a row in a
two-octet charset, and all characters.  See `put-char-table'.

arguments: (RANGE CHAR-TABLE &optional MULTI)
Schartab.c
Fvalid-char-table-value-p
Return non-nil if VALUE is a valid value for CHAR-TABLE-TYPE.

arguments: (VALUE CHAR-TABLE-TYPE)
Schartab.c
Fcheck-valid-char-table-value
Signal an error if VALUE is not a valid value for CHAR-TABLE-TYPE.

arguments: (VALUE CHAR-TABLE-TYPE)
Schartab.c
Fput-char-table
Set the value for chars in RANGE to be VALUE in CHAR-TABLE.

RANGE specifies one or more characters to be affected and should be
one of the following:

-- t (all characters are affected)
-- A charset (only allowed when Mule support is present)
-- A vector of two elements: a two-octet charset and a row number; the row
   must be an integer, not a character (only allowed when Mule support is
   present)
-- A single character

VALUE must be a value appropriate for the type of CHAR-TABLE.
See `make-char-table'.

arguments: (RANGE VALUE CHAR-TABLE)
Schartab.c
Fremove-char-table
Remove any value from chars in RANGE in CHAR-TABLE.

RANGE specifies one or more characters to be affected and should be
one of the following:

-- t (all characters are affected)
-- A charset (only allowed when Mule support is present)
-- A vector of two elements: a two-octet charset and a row number
   (only allowed when Mule support is present)
-- A single character

With all values removed, the default value will be returned by 
`get-char-table' and `get-range-char-table'.

arguments: (RANGE CHAR-TABLE)
Schartab.c
Fmap-char-table
Map FUNCTION over CHAR-TABLE until it returns non-nil; return that value.
FUNCTION is called with two arguments, each key and entry in the table.

RANGE specifies a subrange to map over.  If omitted or t, it defaults to
the entire table.

Both RANGE and the keys passed to FUNCTION are in the same format as the
RANGE argument to `put-char-table'.  N.B. This function does NOT map over
all characters in RANGE, but over the subranges that have been assigned to.
Thus this function is most suitable for searching a char-table, or for
populating one char-table based on the contents of another.  The current
implementation does not coalesce ranges all of whose values are the same.

arguments: (FUNCTION CHAR-TABLE &optional RANGE)
Schartab.c
Fcategory-table-p
Return t if OBJECT is a category table.
A category table is a type of char table used for keeping track of
categories.  Categories are used for classifying characters for use
in regexps -- you can refer to a category rather than having to use
a complicated [] expression (and category lookups are significantly
faster).

There are 95 different categories available, one for each printable
character (including space) in the ASCII charset.  Each category
is designated by one such character, called a "category designator".
They are specified in a regexp using the syntax "\cX", where X is
a category designator.

A category table specifies, for each character, the categories that
the character is in.  Note that a character can be in more than one
category.  More specifically, a category table maps from a character
to either the value nil (meaning the character is in no categories)
or a 95-element bit vector, specifying for each of the 95 categories
whether the character is in that category.

Special Lisp functions are provided that abstract this, so you do not
have to directly manipulate bit vectors.

arguments: (OBJECT)
Schartab.c
Fcheck-category-at
Return t if category of the character at POSITION includes DESIGNATOR.
Optional third arg BUFFER specifies which buffer to use, and defaults
to the current buffer.
Optional fourth arg CATEGORY-TABLE specifies the category table to
use, and defaults to BUFFER's category table.

arguments: (POSITION DESIGNATOR &optional BUFFER CATEGORY-TABLE)
Schartab.c
Fchar-in-category-p
Return non-nil if category of CHARACTER includes DESIGNATOR.
Optional third arg CATEGORY-TABLE specifies the category table to use,
and defaults to the current buffer's category table.

arguments: (CHARACTER DESIGNATOR &optional CATEGORY-TABLE)
Schartab.c
Fcategory-table
Return BUFFER's current category table.
BUFFER defaults to the current buffer.

arguments: (&optional BUFFER)
Schartab.c
Fstandard-category-table
Return the standard category table.
This is the one used for new buffers.

arguments: ()
Schartab.c
Fcopy-category-table
Return a new category table which is a copy of CATEGORY-TABLE.
CATEGORY-TABLE defaults to the standard category table.

arguments: (&optional CATEGORY-TABLE)
Schartab.c
Fset-category-table
Select CATEGORY-TABLE as the new category table for BUFFER.
BUFFER defaults to the current buffer if omitted.

arguments: (CATEGORY-TABLE &optional BUFFER)
Schartab.c
Fcategory-designator-p
Return t if OBJECT is a category designator (a char in the range ' ' to '~').

arguments: (OBJECT)
Schartab.c
Fcategory-table-value-p
Return t if OBJECT is a category table value.
Valid values are nil or a bit vector of size 95.

arguments: (OBJECT)
Schartab.c
Vword-combining-categories
List of pair (cons) of categories to determine word boundary.

Emacs treats a sequence of word constituent characters as a single
word (i.e. finds no word boundary between them) iff they belongs to
the same charset.  But, exceptions are allowed in the following cases.

(1) The case that characters are in different charsets is controlled
by the variable `word-combining-categories'.

Emacs finds no word boundary between characters of different charsets
if they have categories matching some element of this list.

More precisely, if an element of this list is a cons of category CAT1
and CAT2, and a multibyte character C1 which has CAT1 is followed by
C2 which has CAT2, there's no word boundary between C1 and C2.

For instance, to tell that ASCII characters and Latin-1 characters can
form a single word, the element `(?l . ?l)' should be in this list
because both characters have the category `l' (Latin characters).

(2) The case that character are in the same charset is controlled by
the variable `word-separating-categories'.

Emacs find a word boundary between characters of the same charset
if they have categories matching some element of this list.

More precisely, if an element of this list is a cons of category CAT1
and CAT2, and a multibyte character C1 which has CAT1 is followed by
C2 which has CAT2, there's a word boundary between C1 and C2.

For instance, to tell that there's a word boundary between Japanese
Hiragana and Japanese Kanji (both are in the same charset), the
element `(?H . ?C) should be in this list.Schartab.c
Vword-separating-categories
List of pair (cons) of categories to determine word boundary.
See the documentation of the variable `word-combining-categories'.Sfilelock.c
Flock-buffer
Lock FILE, if current buffer is modified.
FILE defaults to current buffer's visited file,
or else nothing is done if current buffer isn't visiting a file.

arguments: (&optional FILE)
Sfilelock.c
Funlock-buffer
Unlock the file visited in the current buffer,
if it should normally be locked.

arguments: ()
Sfilelock.c
Ffile-locked-p
Return nil if the FILENAME is not locked,
t if it is locked by you, else a string of the name of the locker.

arguments: (&optional FILENAME)
Sfilelock.c
Vinhibit-clash-detection
Non-nil inhibits creation of lock file to detect clash.Scmdloop.c
Freally-early-error-handler
You should almost certainly not be using this.

arguments: (X)
Scmdloop.c
Frecursive-edit
Invoke the editor command loop recursively.
To get out of the recursive edit, a command can do `(throw 'exit nil)';
that tells this function to return.
Alternately, `(throw 'exit t)' makes this function signal an error.

arguments: ()
Scmdloop.c
Fcommand-loop-1
Invoke the internals of the canonical editor command loop.
Don't call this unless you know what you're doing.

arguments: ()
Scmdloop.c
Vcommand-loop-level
Number of recursive edits in progress.Scmdloop.c
Vdisabled-command-hook
Value is called instead of any command that is disabled,
i.e. has a non-nil `disabled' property.Scmdloop.c
Vleave-window-hook
Not yet implemented.Scmdloop.c
Venter-window-hook
Not yet implemented.Scmdloop.c
Vminibuffer-echo-wait-function
The function called by command loop when minibuffer was active and
message was displayed (text appeared in " *Echo Area*" buffer).  It
must wait after displaying message so that user can read it.  If the
variable value is `nil', the equivalent of `(sit-for 2)' is run.Scmdloop.c
Vtop-level
Form to evaluate when Emacs starts up.
Useful to set before you dump a modified Emacs.Scmdloop.c
Vcommand-loop
Function or one argument to call to read and process keyboard commands.
The passed argument specifies whether or not to handle errors.Scmds.c
Fforward-char
Move point right COUNT characters (left if COUNT is negative).
On attempt to pass end of buffer, stop and signal `end-of-buffer'.
On attempt to pass beginning of buffer, stop and signal `beginning-of-buffer'.
On reaching end of buffer, stop and signal error.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.

arguments: (&optional COUNT BUFFER)
Scmds.c
Fbackward-char
Move point left COUNT characters (right if COUNT is negative).
On attempt to pass end of buffer, stop and signal `end-of-buffer'.
On attempt to pass beginning of buffer, stop and signal `beginning-of-buffer'.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.

arguments: (&optional COUNT BUFFER)
Scmds.c
Fforward-line
Move COUNT lines forward (backward if COUNT is negative).
Precisely, if point is on line I, move to the start of line I + COUNT.
If there isn't room, go as far as possible (no error).
Returns the count of lines left to move.  If moving forward,
that is COUNT - number of lines moved; if backward, COUNT + number moved.
(Note that if COUNT is negative, the return will be non-positive.)
With positive COUNT, a non-empty line at the end counts as one line
  successfully moved (for the return value).
If BUFFER is nil, the current buffer is assumed.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.

arguments: (&optional COUNT BUFFER)
Scmds.c
Fpoint-at-bol
Return the character position of the first character on the current line.
With argument COUNT not nil or 1, move forward COUNT - 1 lines first.
If scan reaches end of buffer, return that position.
This function does not move point.

arguments: (&optional COUNT BUFFER)
Scmds.c
Fbeginning-of-line
Move point to beginning of current line.
With argument COUNT not nil or 1, move forward COUNT - 1 lines first.
If scan reaches end of buffer, stop there without error.
If BUFFER is nil, the current buffer is assumed.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.

arguments: (&optional COUNT BUFFER)
Scmds.c
Fpoint-at-eol
Return the character position of the last character on the current line.
With argument COUNT not nil or 1, move forward COUNT - 1 lines first.
If scan reaches end of buffer, return that position.
This function does not move point.

arguments: (&optional COUNT BUFFER)
Scmds.c
Fend-of-line
Move point to end of current line.
With argument COUNT not nil or 1, move forward COUNT - 1 lines first.
If scan reaches end of buffer, stop there without error.
If BUFFER is nil, the current buffer is assumed.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.

arguments: (&optional COUNT BUFFER)
Scmds.c
Fdelete-char
Delete the following COUNT characters (previous, with negative COUNT).
Optional second arg KILLP non-nil means kill instead (save in kill ring).
Interactively, COUNT is the prefix arg, and KILLP is set if
COUNT was explicitly specified.

arguments: (&optional COUNT KILLP)
Scmds.c
Fdelete-backward-char
Delete the previous COUNT characters (following, with negative COUNT).
Optional second arg KILLP non-nil means kill instead (save in kill ring).
Interactively, COUNT is the prefix arg, and KILLP is set if
COUNT was explicitly specified.

arguments: (&optional COUNT KILLP)
Scmds.c
Fself-insert-command
Insert the character you type.
Whichever character you type to run this command is inserted.
If a prefix arg COUNT is specified, the character is inserted COUNT times.

arguments: (COUNT)
Scmds.c
Fself-insert-internal
Invoke `self-insert-command' as if CHARACTER is entered from keyboard.

arguments: (CHARACTER)
Scmds.c
Vself-insert-face
If non-nil, set the face of the next self-inserting character to this.
See also `self-insert-face-command'.Scmds.c
Vself-insert-face-command
This is the command that set up `self-insert-face'.
If `last-command' does not equal this value, we ignore `self-insert-face'.Scmds.c
Vblink-paren-function
Function called, if non-nil, whenever a close parenthesis is inserted.
More precisely, a char with closeparen syntax is self-inserted.Scmds.c
Vauto-fill-chars
A char-table for characters which invoke auto-filling.
Such characters have value t in this table.Sconsole.c
Fvalid-console-type-p
Return t if CONSOLE-TYPE is a valid console type.
Valid types are `x', `tty', `mswindows', `msprinter', `gtk', and `stream'.

arguments: (CONSOLE-TYPE)
Sconsole.c
Fconsole-type-list
Return a list of valid console types.

arguments: ()
Sconsole.c
Fcdfw-console
Given a console, device, frame, or window, return the associated console.
Return nil otherwise.

arguments: (OBJECT)
Sconsole.c
Fselected-console
Return the console which is currently active.

arguments: ()
Sconsole.c
Fselect-console
Select the console CONSOLE.
Subsequent editing commands apply to its selected device, selected frame,
and selected window.  The selection of CONSOLE lasts until the next time
the user does something to select a different console, or until the next
time this function is called.

arguments: (CONSOLE)
Sconsole.c
Fconsolep
Return non-nil if OBJECT is a console.

arguments: (OBJECT)
Sconsole.c
Fconsole-live-p
Return non-nil if OBJECT is a console that has not been deleted.

arguments: (OBJECT)
Sconsole.c
Fconsole-type
Return the console type (e.g. `x' or `tty') of CONSOLE.
Value is
`tty' for a tty console (a character-only terminal),
`x' for a console that is an X display,
`mswindows' for a console that is an MS Windows connection,
`msprinter' for a console that is an MS Windows printer connection,
`gtk' for a console that is a GTK connection,
`stream' for a stream console (which acts like a stdio stream), and
`dead' for a deleted console.

arguments: (&optional CONSOLE)
Sconsole.c
Fconsole-name
Return the name of CONSOLE.

arguments: (&optional CONSOLE)
Sconsole.c
Fconsole-connection
Return the connection of the specified console.
CONSOLE defaults to the selected console if omitted.

arguments: (&optional CONSOLE)
Sconsole.c
Ffind-console
Look for an existing console attached to connection CONNECTION.
Return the console if found; otherwise, return nil.

If TYPE is specified, only return consoles of that type; otherwise,
return consoles of any type. (It is possible, although unlikely,
that two consoles of different types could have the same connection
name; in such a case, the first console found is returned.)

arguments: (CONNECTION &optional TYPE)
Sconsole.c
Fget-console
Look for an existing console attached to connection CONNECTION.
Return the console if found; otherwise, signal an error.

If TYPE is specified, only return consoles of that type; otherwise,
return consoles of any type. (It is possible, although unlikely,
that two consoles of different types could have the same connection
name; in such a case, the first console found is returned.)

arguments: (CONNECTION &optional TYPE)
Sconsole.c
Fdelete-console
Delete CONSOLE, permanently eliminating it from use.
Normally, you cannot delete the last non-minibuffer-only frame (you must
use `save-buffers-kill-emacs' or `kill-emacs').  However, if optional
second argument FORCE is non-nil, you can delete the last frame. (This
will automatically call `save-buffers-kill-emacs'.)

arguments: (CONSOLE &optional FORCE)
Sconsole.c
Fconsole-list
Return a list of all consoles.

arguments: ()
Sconsole.c
Fconsole-device-list
Return a list of all devices on CONSOLE.
If CONSOLE is nil, the selected console is used.

arguments: (&optional CONSOLE)
Sconsole.c
Fconsole-enable-input
Enable input on console CONSOLE.

arguments: (CONSOLE)
Sconsole.c
Fconsole-disable-input
Disable input on console CONSOLE.

arguments: (CONSOLE)
Sconsole.c
Fconsole-on-window-system-p
Return t if CONSOLE is on a window system.
If CONSOLE is nil, the selected console is used.
This generally means that there is support for the mouse, the menubar,
the toolbar, glyphs, etc.

arguments: (&optional CONSOLE)
Sconsole.c
Fsuspend-emacs
Stop Emacs and return to superior process.  You can resume later.
On systems that don't have job control, run a subshell instead.

If optional arg STUFFSTRING is non-nil, its characters are stuffed
to be read as terminal input by Emacs's superior shell.

Before suspending, run the normal hook `suspend-hook'.
After resumption run the normal hook `suspend-resume-hook'.

Some operating systems cannot stop the Emacs process and resume it later.
On such systems, Emacs will start a subshell and wait for it to exit.

arguments: (&optional STUFFSTRING)
Sconsole.c
Fsuspend-console
Suspend a console.  For tty consoles, it sends a signal to suspend
the process in charge of the tty, and removes the devices and
frames of that console from the display.

If optional arg CONSOLE is non-nil, it is the console to be suspended.
Otherwise it is assumed to be the selected console.

Some operating systems cannot stop processes and resume them later.
On such systems, who knows what will happen.

arguments: (&optional CONSOLE)
Sconsole.c
Fresume-console
Re-initialize a previously suspended console.
For tty consoles, do stuff to the tty to make it sane again.

arguments: (CONSOLE)
Sconsole.c
Fset-input-mode
Set mode of reading keyboard input.
First arg (formerly INTERRUPT-INPUT) is ignored, for backward compatibility.
Second arg FLOW non-nil means use ^S/^Q flow control for output to terminal
 (no effect except in CBREAK mode).
Third arg META t means accept 8-bit input (for a Meta key).
 META nil means ignore the top bit, on the assumption it is parity.
 Otherwise, accept 8-bit input and don't use the top bit for Meta.
First three arguments only apply to TTY consoles.
Optional fourth arg QUIT if non-nil specifies character to use for quitting.
Optional fifth arg CONSOLE specifies console to make changes to; nil means
 the selected console.
See also `current-input-mode'.

arguments: (IGNORED FLOW META &optional QUIT CONSOLE)
Sconsole.c
Fcurrent-input-mode
Return information about the way Emacs currently reads keyboard input.
Optional arg CONSOLE specifies console to return information about; nil means
 the selected console.
The value is a list of the form (nil FLOW META QUIT), where
  FLOW is non-nil if Emacs uses ^S/^Q flow control for output to the
    terminal; this does not apply if Emacs uses interrupt-driven input.
  META is t if accepting 8-bit input with 8th bit as Meta flag.
    META nil means ignoring the top bit, on the assumption it is parity.
    META is neither t nor nil if accepting 8-bit input and using
    all 8 bits as the character code.
  QUIT is the character Emacs currently uses to quit.
FLOW, and META are only meaningful for TTY consoles.
The elements of this list correspond to the arguments of
`set-input-mode'.

arguments: (&optional CONSOLE)
Sconsole.c
Vcreate-console-hook
Function or functions to call when a console is created.
One argument, the newly-created console.
This is called after the first frame has been created, but before
  calling the `create-device-hook' or `create-frame-hook'.
Note that in general the console will not be selected.Sconsole.c
Vdelete-console-hook
Function or functions to call when a console is deleted.
One argument, the to-be-deleted console.Sconsole.c
Vfunction-key-map-parent
Parent keymap for `function-key-map'.

This keymap is appropriate for bindings that are not console-specific, but
yet should take advantage of the substitution made by `read-key-sequence'
for bindings in `function-key-map'.Sconsole.c
Vdefault-function-key-map
Default value of `function-key-map' for consoles that don't override it.
This is the same as (default-value 'function-key-map).Sconsole.c
Vfunction-key-map
Keymap mapping ASCII function key sequences onto their preferred forms.
This allows Emacs to recognize function keys sent from ASCII
terminals at any point in a key sequence.

The `read-key-sequence' function replaces any subsequence bound by
`function-key-map' with its binding.  More precisely, when the active
keymaps have no binding for the current key sequence but
`function-key-map' binds a suffix of the sequence to a vector or string,
`read-key-sequence' replaces the matching suffix with its binding, and
continues with the new sequence.  See `key-binding'.

The events that come from bindings in `function-key-map' are not
themselves looked up in `function-key-map'.

For example, suppose `function-key-map' binds `ESC O P' to [f1].
Typing `ESC O P' to `read-key-sequence' would return
[#<keypress-event f1>].  Typing `C-x ESC O P' would return
[#<keypress-event control-X> #<keypress-event f1>].  If [f1]
were a prefix key, typing `ESC O P x' would return
[#<keypress-event f1> #<keypress-event x>].

The parent keymap of `function-key-map' when created is
`function-key-map-parent', which is not a console-local variable.  Bindings
appropriate for `function-key-map' but which are likely to be relevant to
every created console should be created in `function-key-map-parent'.Sconsole.c
Vtty-erase-char
The ERASE character as set by the user with stty.
When this value cannot be determined or would be meaningless (on non-TTY
consoles, for example), it is set to nil.Sconsole.c
Vdefining-kbd-macro
Non-nil while a keyboard macro is being defined.  Don't set this!Sconsole.c
Vlast-kbd-macro
Last keyboard macro defined, as a vector of events; nil if none defined.Sconsole.c
Vprefix-arg
The value of the prefix argument for the next editing command.
It may be a number, or the symbol `-' for just a minus sign as arg,
or a list whose car is a number for just one or more C-U's
or nil if no argument has been specified.

You cannot examine this variable to find the argument for this command
since it has been set to nil by the time you can look.
Instead, you should use the variable `current-prefix-arg', although
normally commands can get this prefix argument with (interactive "P").Sconsole.c
Vdefault-minibuffer-frame
Minibufferless frames use this frame's minibuffer.

Emacs cannot create minibufferless frames unless this is set to an
appropriate surrogate.

XEmacs consults this variable only when creating minibufferless
frames; once the frame is created, it sticks with its assigned
minibuffer, no matter what this variable is set to.  This means that
this variable doesn't necessarily say anything meaningful about the
current set of frames, or where the minibuffer is currently being
displayed.Sconsole.c
Voverriding-terminal-local-map
Keymap that overrides all other local keymaps, for the selected console only.
If this variable is non-nil, it is used as a keymap instead of the
buffer's local map, and the minor mode keymaps and text property keymaps.Sconsole-stream.c
Vterminal-console
The initial console object, which represents XEmacs' stdout.Sconsole-stream.c
Vterminal-device
The initial device object, which represents XEmacs' stdout.Sconsole-stream.c
Vterminal-frame
The initial frame object, which represents XEmacs' stdout.Sdata.c
Fwrong-type-argument
Signal an error until the correct type value is given by the user.
This function loops, signalling a continuable `wrong-type-argument' error
with PREDICATE and VALUE as the data associated with the error and then
calling PREDICATE on the returned value, until the value gotten satisfies
PREDICATE.  At that point, the gotten value is returned.

arguments: (PREDICATE VALUE)
Sdata.c
Feq
Return t if the two args are the same Lisp object.

arguments: (OBJECT1 OBJECT2)
Sdata.c
Fnull
Return t if OBJECT is nil.

arguments: (OBJECT)
Sdata.c
Fconsp
Return t if OBJECT is a cons cell.  `nil' is not a cons cell.

See the documentation for `cons' or the Lisp manual for more details on what
a cons cell is.

arguments: (OBJECT)
Sdata.c
Fatom
Return t if OBJECT is not a cons cell.  `nil' is not a cons cell.

See the documentation for `cons' or the Lisp manual for more details on what
a cons cell is.

arguments: (OBJECT)
Sdata.c
Flistp
Return t if OBJECT is a list.  `nil' is a list.

A list is either the Lisp object nil (a symbol), interpreted as the empty
list in this context, or a cons cell whose CDR refers to either nil or a
cons cell.  A "proper list" contains no cycles.

arguments: (OBJECT)
Sdata.c
Fnlistp
Return t if OBJECT is not a list.  `nil' is a list.

arguments: (OBJECT)
Sdata.c
Ftrue-list-p
Return t if OBJECT is an acyclic, nil-terminated (ie, not dotted), list.

arguments: (OBJECT)
Sdata.c
Fsymbolp
Return t if OBJECT is a symbol.

A symbol is a Lisp object with a name. It can optionally have any and all of
a value, a property list and an associated function. 

arguments: (OBJECT)
Sdata.c
Fkeywordp
Return t if OBJECT is a keyword.

arguments: (OBJECT)
Sdata.c
Fvectorp
Return t if OBJECT is a vector.

arguments: (OBJECT)
Sdata.c
Fbit-vector-p
Return t if OBJECT is a bit vector.

arguments: (OBJECT)
Sdata.c
Fstringp
Return t if OBJECT is a string.

arguments: (OBJECT)
Sdata.c
Farrayp
Return t if OBJECT is an array (string, vector, or bit vector).

arguments: (OBJECT)
Sdata.c
Fsequencep
Return t if OBJECT is a sequence (list or array).

arguments: (OBJECT)
Sdata.c
Fmarkerp
Return t if OBJECT is a marker (editor pointer).

arguments: (OBJECT)
Sdata.c
Fsubrp
Return t if OBJECT is a built-in function.

arguments: (OBJECT)
Sdata.c
Fsubr-min-args
Return minimum number of args built-in function SUBR may be called with.

arguments: (SUBR)
Sdata.c
Fsubr-max-args
Return maximum number of args built-in function SUBR may be called with,
or nil if it takes an arbitrary number of arguments or is a special operator.

arguments: (SUBR)
Sdata.c
Fsubr-interactive
Return the interactive spec of the subr object SUBR, or nil.
If non-nil, the return value will be a list whose first element is
`interactive' and whose second element is the interactive spec.

arguments: (SUBR)
Sdata.c
Fcharacterp
Return t if OBJECT is a character.
Unlike in XEmacs v19 and FSF Emacs, a character is its own primitive type.
Any character can be converted into an equivalent integer using
`char-int'.  To convert the other way, use `int-char'; however,
only some integers can be converted into characters.  Such an integer
is called a `char-int'; see `char-int-p'.

Some functions that work on integers (e.g. the comparison functions
<, <=, =, /=, etc. and the arithmetic functions +, -, *, etc.)
accept characters and implicitly convert them into integers.  In
general, functions that work on characters also accept char-ints and
implicitly convert them into characters.  WARNING: Neither of these
behaviors is very desirable, and they are maintained for backward
compatibility with old E-Lisp programs that confounded characters and
integers willy-nilly.  These behaviors may change in the future; therefore,
do not rely on them.  Instead, use the character-specific functions such
as `char='.

arguments: (OBJECT)
Sdata.c
Fchar-to-int
Convert CHARACTER into an equivalent integer.
The resulting integer will always be non-negative.  The integers in
the range 0 - 255 map to characters as follows:

0 - 31		Control set 0
32 - 127	ASCII
128 - 159	Control set 1
160 - 255	Right half of ISO-8859-1

If support for Mule does not exist, these are the only valid character
values.  When Mule support exists, the values assigned to other characters
may vary depending on the particular version of XEmacs, the order in which
character sets were loaded, etc., and you should not depend on them.

arguments: (CHARACTER)
Sdata.c
Fint-to-char
Convert integer INTEGER into the equivalent character.
Not all integers correspond to valid characters; use `char-int-p' to
determine whether this is the case.  If the integer cannot be converted,
nil is returned.

arguments: (INTEGER)
Sdata.c
Fchar-int-p
Return t if OBJECT is an integer that can be converted into a character.
See `char-int'.

arguments: (OBJECT)
Sdata.c
Fchar-or-char-int-p
Return t if OBJECT is a character or an integer that can be converted into one.

arguments: (OBJECT)
Sdata.c
Fchar-or-string-p
Return t if OBJECT is a character (or a char-int) or a string.
It is semi-hateful that we allow a char-int here, as it goes against
the name of this function, but it makes the most sense considering the
other steps we take to maintain compatibility with the old character/integer
confoundedness in older versions of E-Lisp.

arguments: (OBJECT)
Sdata.c
Ffixnump
Return t if OBJECT is a fixnum.

In this implementation, a fixnum is an immediate integer, and has a
maximum value described by the constant `most-positive-fixnum'.  This
contrasts with bignums, integers where the values are limited by your
available memory.

arguments: (OBJECT)
Sdata.c
Fintegerp
Return t if OBJECT is an integer, nil otherwise.

On builds without bignum support, this function is identical to `fixnump'.

arguments: (OBJECT)
Sdata.c
Finteger-or-marker-p
Return t if OBJECT is an integer or a marker (editor pointer).

arguments: (OBJECT)
Sdata.c
Finteger-or-char-p
Return t if OBJECT is an integer or a character.

arguments: (OBJECT)
Sdata.c
Finteger-char-or-marker-p
Return t if OBJECT is an integer, character or a marker (editor pointer).

arguments: (OBJECT)
Sdata.c
Fnatnump
Return t if OBJECT is a nonnegative integer.

arguments: (OBJECT)
Sdata.c
Fnonnegativep
Return t if OBJECT is a nonnegative number.

arguments: (OBJECT)
Sdata.c
Fbitp
Return t if OBJECT is a bit (0 or 1).

arguments: (OBJECT)
Sdata.c
Fnumberp
Return t if OBJECT is a number (floating point or integer).

arguments: (OBJECT)
Sdata.c
Fnumber-or-marker-p
Return t if OBJECT is a number or a marker.

arguments: (OBJECT)
Sdata.c
Fnumber-char-or-marker-p
Return t if OBJECT is a number, character or a marker.

arguments: (OBJECT)
Sdata.c
Ffloatp
Return t if OBJECT is a floating point number.

arguments: (OBJECT)
Sdata.c
Ftype-of
Return a symbol representing the type of OBJECT.

arguments: (OBJECT)
Sdata.c
Fcar
Return the car of CONS.  If CONS is nil, return nil.
The car of a list or a dotted pair is its first element.

Error if CONS is not nil and not a cons cell.  See also `car-safe'.

arguments: (CONS)
Sdata.c
Fcar-safe
Return the car of OBJECT if it is a cons cell, or else nil.

arguments: (OBJECT)
Sdata.c
Fcdr
Return the cdr of CONS.  If CONS is nil, return nil.
The cdr of a list is the list without its first element.  The cdr of a
dotted pair (A . B) is the second element, B.

Error if arg is not nil and not a cons cell.  See also `cdr-safe'.

arguments: (CONS)
Sdata.c
Fcdr-safe
Return the cdr of OBJECT if it is a cons cell, else nil.

arguments: (OBJECT)
Sdata.c
Fsetcar
Set the car of CONS-CELL to be NEWCAR.  Return NEWCAR.
The car of a list or a dotted pair is its first element.

arguments: (CONS-CELL NEWCAR)
Sdata.c
Fsetcdr
Set the cdr of CONS-CELL to be NEWCDR.  Return NEWCDR.
The cdr of a list is the list without its first element.  The cdr of a
dotted pair (A . B) is the second element, B.

arguments: (CONS-CELL NEWCDR)
Sdata.c
Findirect-function
Return the function at the end of OBJECT's function chain.
If OBJECT is a symbol, follow all function indirections and return
the final function binding.
If OBJECT is not a symbol, just return it.
Signal a void-function error if the final symbol is unbound.
Signal a cyclic-function-indirection error if there is a loop in the
function chain of symbols.

arguments: (OBJECT)
Sdata.c
Faref
Return the element of ARRAY at index INDEX.
ARRAY may be a vector, bit vector, or string.  INDEX starts at 0.

arguments: (ARRAY INDEX)
Sdata.c
Faset
Store into the element of ARRAY at index INDEX the value NEWVAL.
ARRAY may be a vector, bit vector, or string.  INDEX starts at 0.

arguments: (ARRAY INDEX NEWVAL)
Sdata.c
F=
Return t if all the arguments are numerically equal.
The arguments may be numbers, characters or markers.

arguments: (FIRST &rest ARGS)Sdata.c
F<
Return t if the sequence of arguments is monotonically increasing.

(That is, if there is a second argument, it must be numerically greater than
the first.  If there is a third, it must be numerically greater than the
second, and so on.)  At least one argument is required.

The arguments may be numbers, characters or markers.  

arguments: (FIRST &rest ARGS)Sdata.c
F>
Return t if the sequence of arguments is monotonically decreasing.

(That is, if there is a second argument, it must be numerically less than
the first.  If there is a third, it must be numerically less than the
second, and so forth.)  At least one argument is required.

The arguments may be numbers, characters or markers.

arguments: (FIRST &rest ARGS)Sdata.c
F<=
Return t if the sequence of arguments is monotonically nondecreasing.
The arguments may be numbers, characters or markers.

arguments: (FIRST &rest ARGS)Sdata.c
F>=
Return t if the sequence of arguments is monotonically nonincreasing.
The arguments may be numbers, characters or markers.

arguments: (FIRST &rest ARGS)Sdata.c
F/=
Return t if no two arguments are numerically equal.
The arguments may be numbers, characters or markers.

arguments: (FIRST &rest ARGS)Sdata.c
Fzerop
Return t if NUMBER is zero.

arguments: (NUMBER)
Sdata.c
Fnumber-to-string
Convert NUMBER to a string by printing it in decimal.
Uses a minus sign if negative.
NUMBER may be an integer or a floating point number.
If supported, it may also be a ratio.

arguments: (NUMBER)
Sdata.c
Fstring-to-number
Convert STRING to a number by parsing it as a number in base BASE.
This parses both integers and floating point numbers.
If they are supported, it also reads ratios.
It ignores leading spaces and tabs.

If BASE is nil or omitted, base 10 is used.
BASE must be an integer between 2 and 16 (inclusive).
Floating point numbers always use base 10.

arguments: (STRING &optional BASE)
Sdata.c
F+
Return sum of any number of arguments.
The arguments should all be numbers, characters or markers.

arguments: (&rest ARGS)Sdata.c
F-
Negate number or subtract numbers, characters or markers.
With one arg, negates it.  With more than one arg,
subtracts all but the first from the first.

arguments: (FIRST &rest ARGS)Sdata.c
F*
Return product of any number of arguments.
The arguments should all be numbers, characters or markers.

arguments: (&rest ARGS)Sdata.c
Fdiv
Same as `/', but dividing integers creates a ratio instead of truncating.
Note that this is a departure from Common Lisp, where / creates ratios when
dividing integers.  Having a separate function lets us avoid breaking existing
Emacs Lisp code that expects / to do integer division.

arguments: (FIRST &rest ARGS)Sdata.c
F/
Return FIRST divided by all the remaining arguments.
The arguments must be numbers, characters or markers.
With one argument, reciprocates the argument.

arguments: (FIRST &rest ARGS)Sdata.c
Fmax
Return largest of all the arguments.
All arguments must be real numbers, characters or markers.
The value is always a number; markers and characters are converted
to numbers.

arguments: (FIRST &rest ARGS)Sdata.c
Fmin
Return smallest of all the arguments.
All arguments must be numbers, characters or markers.
The value is always a number; markers and characters are converted
to numbers.

arguments: (FIRST &rest ARGS)Sdata.c
Flogand
Return bitwise-and of all the arguments.
Arguments may be integers, or markers or characters converted to integers.

arguments: (&rest ARGS)Sdata.c
Flogior
Return bitwise-or of all the arguments.
Arguments may be integers, or markers or characters converted to integers.

arguments: (&rest ARGS)Sdata.c
Flogxor
Return bitwise-exclusive-or of all the arguments.
Arguments may be integers, or markers or characters converted to integers.

arguments: (&rest ARGS)Sdata.c
Flognot
Return the bitwise complement of NUMBER.
NUMBER may be an integer, marker or character converted to integer.

arguments: (NUMBER)
Sdata.c
F%
Return remainder of first arg divided by second.
Both must be integers, characters or markers.

arguments: (NUMBER1 NUMBER2)
Sdata.c
Fmod
Return X modulo Y.
The result falls between zero (inclusive) and Y (exclusive).
Both X and Y must be numbers, characters or markers.
If either argument is a float, a float will be returned.

arguments: (X Y)
Sdata.c
Fash
Return VALUE with its bits shifted left by COUNT.
If COUNT is negative, shifting is actually to the right.
In this case, the sign bit is duplicated.
This function cannot be applied to bignums, as there is no leftmost sign bit
to be duplicated.  Use `lsh' instead.

arguments: (VALUE COUNT)
Sdata.c
Flsh
Return VALUE with its bits shifted left by COUNT.
If COUNT is negative, shifting is actually to the right.
In this case, zeros are shifted in on the left.

arguments: (VALUE COUNT)
Sdata.c
F1+
Return NUMBER plus one.  NUMBER may be a number, character or marker.
Markers and characters are converted to integers.

arguments: (NUMBER)
Sdata.c
F1-
Return NUMBER minus one.  NUMBER may be a number, character or marker.
Markers and characters are converted to integers.

arguments: (NUMBER)
Sdata.c
Fweak-list-p
Return non-nil if OBJECT is a weak list.

arguments: (OBJECT)
Sdata.c
Fmake-weak-list
Return a new weak list object of type TYPE.
A weak list object is an object that contains a list.  This list behaves
like any other list except that its elements do not count towards
garbage collection -- if the only pointer to an object is inside a weak
list (other than pointers in similar objects such as weak hash tables),
the object is garbage collected and automatically removed from the list.
This is used internally, for example, to manage the list holding the
children of an extent -- an extent that is unused but has a parent will
still be reclaimed, and will automatically be removed from its parent's
list of children.

Optional argument TYPE specifies the type of the weak list, and defaults
to `simple'.  Recognized types are

`simple'	Objects in the list disappear if not pointed to.
`assoc'		Objects in the list disappear if they are conses
		and either the car or the cdr of the cons is not
		pointed to.
`key-assoc'	Objects in the list disappear if they are conses
		and the car is not pointed to.
`value-assoc'	Objects in the list disappear if they are conses
		and the cdr is not pointed to.
`full-assoc'	Objects in the list disappear if they are conses
		and neither the car nor the cdr is pointed to.

arguments: (&optional TYPE)
Sdata.c
Fweak-list-type
Return the type of the given weak-list object.

arguments: (WEAK)
Sdata.c
Fweak-list-list
Return the list contained in a weak-list object.

arguments: (WEAK)
Sdata.c
Fset-weak-list-list
Change the list contained in a weak-list object.

arguments: (WEAK NEW-LIST)
Sdata.c
Fmake-weak-box
Return a new weak box from value CONTENTS.
The weak box is a reference to CONTENTS which may be extracted with
`weak-box-ref'.  However, the weak box does not contribute to the
reachability of CONTENTS.  When CONTENTS is garbage-collected,
`weak-box-ref' will return NIL.

arguments: (VALUE)
Sdata.c
Fweak-box-ref
Return the contents of weak box WEAK-BOX.
If the contents have been GCed, return NIL.

arguments: (WB)
Sdata.c
Fweak-box-p
Return non-nil if OBJECT is a weak box.

arguments: (OBJECT)
Sdata.c
Fmake-ephemeron
Return a new ephemeron with key KEY, value VALUE, and finalizer FINALIZER.
The ephemeron is a reference to VALUE which may be extracted with
`ephemeron-ref'.  VALUE is only reachable through the ephemeron as
long as KEY is reachable; the ephemeron does not contribute to the
reachability of KEY.  When KEY becomes unreachable while the ephemeron
itself is still reachable, VALUE is queued for finalization: FINALIZER
will possibly be called on VALUE some time in the future.  Moreover,
future calls to `ephemeron-ref' will return NIL.

arguments: (KEY VALUE &optional FINALIZER)
Sdata.c
Fephemeron-ref
Return the contents of ephemeron EPHEMERON.
If the contents have been GCed, return NIL.

arguments: (EPH)
Sdata.c
Fephemeron-p
Return non-nil if OBJECT is an ephemeron.

arguments: (OBJECT)
Sdata.c
Vmost-negative-fixnum
The fixnum closest in value to negative infinity.Sdata.c
Vmost-positive-fixnum
The fixnum closest in value to positive infinity.Sdata.c
Vdebug-issue-ebola-notices
If non-zero, note when your code may be suffering from char-int confoundance.
That is to say, if XEmacs encounters a usage of `eq', `memq', `equal',
etc. where an int and a char with the same value are being compared,
it will issue a notice on stderr to this effect, along with a backtrace.
In such situations, the result would be different in XEmacs 19 versus
XEmacs 20, and you probably don't want this.

Note that in order to see these notices, you have to byte compile your
code under XEmacs 20 -- any code byte-compiled under XEmacs 19 will
have its chars and ints all confounded in the byte code, making it
impossible to accurately determine Ebola infection.Sdata.c
Vdebug-ebola-backtrace-length
Length (in stack frames) of short backtrace printed out in Ebola notices.
See `debug-issue-ebola-notices'.Sdatabase.c
Fclose-database
Close database DATABASE.

arguments: (DATABASE)
Sdatabase.c
Fdatabase-type
Return the type of database DATABASE.

arguments: (DATABASE)
Sdatabase.c
Fdatabase-subtype
Return the subtype of database DATABASE, if any.

arguments: (DATABASE)
Sdatabase.c
Fdatabase-live-p
Return t if OBJECT is an active database.

arguments: (OBJECT)
Sdatabase.c
Fdatabase-file-name
Return the filename associated with the database DATABASE.

arguments: (DATABASE)
Sdatabase.c
Fdatabasep
Return t if OBJECT is a database.

arguments: (OBJECT)
Sdatabase.c
Fdatabase-last-error
Return the last error associated with DATABASE.

arguments: (&optional DATABASE)
Sdatabase.c
Fopen-database
Return a new database object opened on FILE.
Optional arguments TYPE and SUBTYPE specify the database type.
Optional argument ACCESS specifies the access rights, which may be any
combination of 'r' 'w' and '+', for read, write, and creation flags.
Optional argument MODE gives the permissions to use when opening FILE,
and defaults to 0755.
Optional argument CODESYS specifies the coding system used to encode/decode
data passed to/from the database, and defaults to the value of the
variable `database-coding-system'.

arguments: (FILE &optional TYPE SUBTYPE ACCESS MODE CODESYS)
Sdatabase.c
Fput-database
Store KEY and VALUE in DATABASE.
If optional fourth arg REPLACE is non-nil,
replace any existing entry in the database.

arguments: (KEY VALUE DATABASE &optional REPLACE)
Sdatabase.c
Fremove-database
Remove KEY from DATABASE.

arguments: (KEY DATABASE)
Sdatabase.c
Fget-database
Return value for KEY in DATABASE.
If there is no corresponding value, return DEFAULT (defaults to nil).

arguments: (KEY DATABASE &optional DEFAULT)
Sdatabase.c
Fmap-database
Map FUNCTION over entries in DATABASE, calling it with two args,
each key and value in the database.

arguments: (FUNCTION DATABASE)
Sdatabase.c
Vdatabase-coding-system
Default coding system used to convert data in database files.Sdebug.c
Fadd-debug-class-to-check
Add a debug class to the list of active classes.

arguments: (CLASS)
Sdebug.c
Fdelete-debug-class-to-check
Delete a debug class from the list of active classes.

arguments: (CLASS)
Sdebug.c
Fdebug-classes-being-checked
Return a list of active debug classes.

arguments: ()
Sdebug.c
Fdebug-classes-list
Return a list of all defined debug classes.

arguments: ()
Sdebug.c
Fset-debug-classes-to-check
Set which classes of debug statements should be active.
CLASSES should be a list of debug classes.

arguments: (CLASSES)
Sdebug.c
Fset-debug-class-types-to-check
For the given debug CLASS, set which TYPES are actually interesting.
TYPES should be an integer representing the or'd value of all desired types.
Lists of defined types and their values are located in the source code.

arguments: (CLASS TYPE)
Sdebug.c
Fdebug-types-being-checked
For the given CLASS, return the associated type value.

arguments: (CLASS)
Stests.c
Ftest-data-format-conversion
Return list of results of test TO_EXTERNAL_FORMAT() and TO_INTERNAL_FORMAT().
For use by the automated test suite.  See tests/automated/c-tests.

Each element is a list (DESCRIPTION, STATUS, REASON).
DESCRIPTION is a string describing the test.
STATUS is a symbol, either t (pass) or nil (fail).
REASON is nil or a string describing the failure (not required).

arguments: ()
Stests.c
Ftest-hash-tables
Return list of results of testing C interface to hash tables.
For use by the automated test suite.  See tests/automated/c-tests.

Each element is a list (DESCRIPTION, STATUS, REASON).
DESCRIPTION is a string describing the test.
STATUS is a symbol, either t (pass) or nil (fail).
REASON is nil or a string describing the failure (not required).

arguments: ()
Stests.c
Ftest-store-void-in-lisp
Test STORE_VOID_IN_LISP and its inverse GET_VOID_FROM_LISP.
Tests by internal assert(); only returns if it succeeds.

arguments: ()
Stests.c
Vtest-function-list
List of all test functions defined in tests.c.
For use by the automated test suite.  See tests/automated/c-tests.Sdevice.c
Fvalid-device-class-p
Given a DEVICE-CLASS, return t if it is valid.
Valid classes are `color', `grayscale', and `mono'.

arguments: (DEVICE-CLASS)
Sdevice.c
Fdevice-class-list
Return a list of valid device classes.

arguments: ()
Sdevice.c
Fdfw-device
Given a device, frame, or window, return the associated device.
Return nil otherwise.

arguments: (OBJECT)
Sdevice.c
Fselected-device
Return the device which is currently active.
If optional CONSOLE is non-nil, return the device that would be currently
active if CONSOLE were the selected console.

arguments: (&optional CONSOLE)
Sdevice.c
Fselect-device
Select the device DEVICE.
Subsequent editing commands apply to its console, selected frame,
and selected window.
The selection of DEVICE lasts until the next time the user does
something to select a different device, or until the next time this
function is called.

arguments: (DEVICE)
Sdevice.c
Fset-device-selected-frame
Set the selected frame of device object DEVICE to FRAME.
If DEVICE is nil, the selected device is used.
If DEVICE is the selected device, this makes FRAME the selected frame.

arguments: (DEVICE FRAME)
Sdevice.c
Fdevicep
Return non-nil if OBJECT is a device.

arguments: (OBJECT)
Sdevice.c
Fdevice-live-p
Return non-nil if OBJECT is a device that has not been deleted.

arguments: (OBJECT)
Sdevice.c
Fdevice-name
Return the name of the specified device.
DEVICE defaults to the selected device if omitted.

arguments: (&optional DEVICE)
Sdevice.c
Fdevice-connection
Return the connection of the specified device.
DEVICE defaults to the selected device if omitted.

arguments: (&optional DEVICE)
Sdevice.c
Fdevice-console
Return the console of the specified device.
DEVICE defaults to the selected device if omitted.

arguments: (&optional DEVICE)
Sdevice.c
Fdefault-device
Return the default device of type TYPE.
This is generally the first-created device of that TYPE that still exists.
It is used for resourcing and certain other things.  On MS Windows, it
is not very useful because there is generally only one device.
If TYPE is omitted, it is derived from the selected device.
If there is no default device of TYPE, nil is returned.

arguments: (&optional TYPE)
Sdevice.c
Ffind-device
Look for an existing device attached to connection CONNECTION.
Return the device if found; otherwise, return nil.

If TYPE is specified, only return devices of that type; otherwise,
return devices of any type. (It is possible, although unlikely,
that two devices of different types could have the same connection
name; in such a case, the first device found is returned.)

arguments: (CONNECTION &optional TYPE)
Sdevice.c
Fget-device
Look for an existing device attached to connection CONNECTION.
Return the device if found; otherwise, signal an error.

If TYPE is specified, only return devices of that type; otherwise,
return devices of any type. (It is possible, although unlikely,
that two devices of different types could have the same connection
name; in such a case, the first device found is returned.)

arguments: (CONNECTION &optional TYPE)
Sdevice.c
Fmake-device
Return a new device of type TYPE, attached to connection CONNECTION.

The valid values for CONNECTION are device-specific; however,
CONNECTION is generally a string. (Specifically, for X devices,
CONNECTION should be a display specification such as "foo:0", and
for TTY devices, CONNECTION should be the filename of a TTY device
file, such as "/dev/ttyp4", or nil to refer to XEmacs' standard
input/output.)

PROPS, if specified, should be a plist of properties controlling
device creation.

If CONNECTION specifies an already-existing device connection, that
device is simply returned; no new device is created, and PROPS
have no effect.

arguments: (TYPE CONNECTION &optional PROPS)
Sdevice.c
Fdelete-device
Delete DEVICE, permanently eliminating it from use.
Normally, you cannot delete the last non-minibuffer-only frame (you must
use `save-buffers-kill-emacs' or `kill-emacs').  However, if optional
second argument FORCE is non-nil, you can delete the last frame. (This
will automatically call `save-buffers-kill-emacs'.)

arguments: (DEVICE &optional FORCE)
Sdevice.c
Fdevice-frame-list
Return a list of all frames on DEVICE.
If DEVICE is nil, the selected device will be used.

arguments: (&optional DEVICE)
Sdevice.c
Fdevice-class
Return the class (color behavior) of DEVICE.
This will be one of `color', `grayscale', or `mono'.

arguments: (&optional DEVICE)
Sdevice.c
Fset-device-class
Set the class (color behavior) of DEVICE.
CLASS should be one of `color', `grayscale', or `mono'.
This is only allowed on device such as TTY devices, where the color
behavior cannot necessarily be determined automatically.

arguments: (DEVICE CLASS)
Sdevice.c
Fset-device-baud-rate
Set the output baud rate of DEVICE to RATE.
On most systems, changing this value will affect the amount of padding
and other strategic decisions made during redisplay.

arguments: (DEVICE RATE)
Sdevice.c
Fdevice-baud-rate
Return the output baud rate of DEVICE.

arguments: (&optional DEVICE)
Sdevice.c
Fdevice-printer-p
Return t if DEVICE is a printer, nil if it is a display. DEVICE defaults
to selected device if omitted, and must be live if specified.

arguments: (&optional DEVICE)
Sdevice.c
Fdevice-system-metric
Get DEVICE METRIC as provided by the system.

METRIC must be a symbol specifying requested metric.  Note that the metrics
returned are these provided by the system internally, not read from resources,
so obtained from the most internal level.

If a metric is not provided by the system, then DEFAULT is returned.

When DEVICE is nil, selected device is assumed

Metrics, by group, are:

COLORS.  Colors are returned as valid color instantiators.  No other assumption
on the returned value should be made (i.e. it can be a string on one system but
a color instance on another).  For colors, returned value is a cons of
foreground and background colors.  Note that if the system provides only one
color of the pair, the second one may be nil.

color-default         Standard window text foreground and background.
color-select          Selection highlight text and background colors.
color-balloon         Balloon popup text and background colors.
color-3d-face         3-D object (button, modeline) text and surface colors.
color-3d-light        Fore and back colors for 3-D edges facing light source.
color-3d-dark         Fore and back colors for 3-D edges facing away from
                      light source.
color-menu            Text and background for menus
color-menu-highlight  Selected menu item colors
color-menu-button     Menu button colors
color-menu-disabled   Unselectable menu item colors
color-toolbar         Toolbar foreground and background colors
color-scrollbar       Scrollbar foreground and background colors
color-desktop         Desktop window colors
color-workspace       Workspace window colors

FONTS. Fonts are returned as valid font instantiators.  No other assumption on
the returned value should be made (i.e. it can be a string on one system but
font instance on another).

font-default          Default fixed width font.
font-menubar          Menubar font
font-dialog           Dialog boxes font

GEOMETRY. These metrics are returned as conses of (X . Y).  As with colors,
either car or cdr of the cons may be nil if the system does not provide one
of the corresponding dimensions.

size-cursor           Mouse cursor size.
size-scrollbar        Scrollbars (WIDTH . HEIGHT)
size-menu             Menubar height, as (nil . HEIGHT)
size-toolbar          Toolbar width and height.
size-toolbar-button   Toolbar button size.
size-toolbar-border   Toolbar border width and height.
size-icon             Icon dimensions.
size-icon-small       Small icon dimensions.
size-device           Device screen or paper size in pixels.
size-workspace        Workspace size in pixels. This can be less than or
                      equal to the above. For displays, this is the area
                      available to applications less window manager
                      decorations. For printers, this is the size of
                      printable area.
offset-workspace      Offset of workspace area from the top left corner
                      of screen or paper, in pixels.
size-device-mm        Device screen size in millimeters.
device-dpi            Device resolution, in dots per inch.
num-bit-planes        Integer, number of device bit planes.
num-color-cells       Integer, number of device color cells.
num-screens           Integer, number of device screens.

FEATURES.  This group reports various device features.  If a feature is
present, integer 1 (one) is returned, if it is not present, then integer
0 (zero) is returned.  If the system is unaware of the feature, then
DEFAULT is returned.

mouse-buttons         Integer, number of mouse buttons, or zero if no mouse.
swap-buttons          Non-zero if left and right mouse buttons are swapped.
show-sounds           User preference for visual over audible bell.
slow-device           Device is slow, avoid animation.
security              Non-zero if user environment is secure.

arguments: (DEVICE METRIC &optional DEFAULT)
Sdevice.c
Fdevice-system-metrics
Get a property list of device metric for DEVICE.

See `device-system-metric' for the description of available metrics.
DEVICE defaults to selected device when omitted.

arguments: (&optional DEVICE)
Sdevice.c
Fdomain-device-type
Return the device type symbol for a DOMAIN, e.g. `x' or `tty'.
DOMAIN can be either a window, frame, device or console.

arguments: (&optional DOMAIN)
Sdevice.c
Vcreate-device-hook
Function or functions to call when a device is created.
One argument, the newly-created device.
This is called after the first frame has been created, but before
  calling the `create-frame-hook'.
Note that in general the device will not be selected.Sdevice.c
Vdelete-device-hook
Function or functions to call when a device is deleted.
One argument, the to-be-deleted device.Sdired.c
Fdirectory-files
Return a list of names of files in DIRECTORY.
There are four optional arguments:
If FULL is non-nil, absolute pathnames of the files are returned.
If MATCH is non-nil, only pathnames whose basename contain that regexp are
 returned.
If NOSORT is non-nil, the list is not sorted--its order is unpredictable.
 NOSORT is useful if you plan to sort the result yourself.
If FILES-ONLY is the symbol t, then only the "files" in the directory
 will be returned; subdirectories will be excluded.  If FILES-ONLY is not
 nil and not t, then only the subdirectories will be returned.  Otherwise,
 if FILES-ONLY is nil (the default) then both files and subdirectories will
 be returned.

arguments: (DIRECTORY &optional FULL MATCH NOSORT FILES-ONLY)
Sdired.c
Ffile-name-completion
Complete file name PARTIAL-FILENAME in directory DIRECTORY.
Return the longest prefix common to all file names in DIRECTORY
that start with PARTIAL-FILENAME.
If there is only one and PARTIAL-FILENAME matches it exactly, return t.
Return nil if DIRECTORY contains no name starting with PARTIAL-FILENAME.

File names which end with any member of `completion-ignored-extensions'
are not considered as possible completions for PARTIAL-FILENAME unless
there is no other possible completion. `completion-ignored-extensions'
is not applied to the names of directories.

arguments: (PARTIAL-FILENAME DIRECTORY)
Sdired.c
Ffile-name-all-completions
Return a list of all completions of PARTIAL-FILENAME in DIRECTORY.
These are all file names in DIRECTORY which begin with PARTIAL-FILENAME.

arguments: (PARTIAL-FILENAME DIRECTORY)
Sdired.c
Fuser-name-completion
Complete user name from PARTIAL-USERNAME.
Return the longest prefix common to all user names starting with
PARTIAL-USERNAME.  If there is only one and PARTIAL-USERNAME matches
it exactly, returns t.  Return nil if there is no user name starting
with PARTIAL-USERNAME.

arguments: (PARTIAL-USERNAME)
Sdired.c
Fuser-name-completion-1
Complete user name from PARTIAL-USERNAME.

This function is identical to `user-name-completion', except that
the cons of the completion and an indication of whether the
completion was unique is returned.

The car of the returned value is the longest prefix common to all user
names that start with PARTIAL-USERNAME.  If there is only one and
PARTIAL-USERNAME matches it exactly, the car is t.  The car is nil if
there is no user name starting with PARTIAL-USERNAME.  The cdr of the
result is non-nil if and only if the completion returned in the car
was unique.

arguments: (PARTIAL-USERNAME)
Sdired.c
Fuser-name-all-completions
Return a list of all user name completions from PARTIAL-USERNAME.
These are all the user names which begin with PARTIAL-USERNAME.

arguments: (PARTIAL-USERNAME)
Sdired.c
Ffile-attributes
Return a list of attributes of file FILENAME.
Value is nil if specified file cannot be opened.

ID-FORMAT specifies the preferred format of attributes uid and gid (see
below) - valid values are 'string and 'integer.  The latter is the
default.

Otherwise, list elements are:
 0. t for directory, string (name linked to) for symbolic link, or nil.
 1. Number of links to file.
 2. File uid as a string or a number.  If a string value cannot be
  looked up, a numeric value, either an integer or a float, is returned.
 3. File gid, likewise.
 4. Last access time, as a list of two integers.
  First integer has high-order 16 bits of time, second has low 16 bits.
 5. Last modification time, likewise.
 6. Last status change time, likewise.
 7. Size in bytes. (-1, if number out of range and no bignum support.)
 8. File modes, as a string of ten letters or dashes as in ls -l.
 9. t iff file's gid would change if file were deleted and recreated.
10. inode number.
11. Device number.

If file does not exist, returns nil.

arguments: (FILENAME &optional ID-FORMAT)
Sdired.c
Vcompletion-ignored-extensions
*Completion ignores filenames ending in any string in this list.
This variable does not affect lists of possible completions,
but does affect the commands that actually do completions.
It is used by the function `file-name-completion'.Sdoc.c
Fbuilt-in-symbol-file
Return the C source file built-in symbol SYM comes from. 
Don't use this.  Use the more general `symbol-file' (q.v.) instead. 

If TYPE is nil or omitted, any kind of definition is acceptable. 
If TYPE is `defun', then function, subr, special operator or macro definitions
are acceptable.
If TYPE is `defvar', then variable definitions are acceptable.

arguments: (SYMBOL &optional TYPE)
Sdoc.c
Fdocumentation
Return the documentation string of FUNCTION.
Unless a non-nil second argument RAW is given, the
string is passed through `substitute-command-keys'.

arguments: (FUNCTION &optional RAW)
Sdoc.c
Fdocumentation-property
Return the documentation string that is SYMBOL's PROP property.
This is like `get', but it can refer to strings stored in the
`doc-directory/DOC' file; and if the value is a string, it is passed
through `substitute-command-keys'.  A non-nil third argument avoids this
translation.

arguments: (SYMBOL PROP &optional RAW)
Sdoc.c
FSnarf-documentation
Used during Emacs initialization, before dumping runnable Emacs,
to find pointers to doc strings stored in `.../lib-src/DOC' and
record them in function definitions.
One arg, FILENAME, a string which does not include a directory.
The file is written to `../lib-src', and later found in `exec-directory'
when doc strings are referred to in the dumped Emacs.

arguments: (FILENAME)
Sdoc.c
FVerify-documentation
Used to make sure everything went well with Snarf-documentation.
Writes to stderr if not.

arguments: ()
Sdoc.c
Fsubstitute-command-keys
Substitute key descriptions for command names in STRING.
Return a new string which is STRING with substrings of the form \=\[COMMAND]
replaced by either:  a keystroke sequence that will invoke COMMAND,
or "M-x COMMAND" if COMMAND is not on any keys.
Substrings of the form \=\{MAPVAR} are replaced by summaries
(made by `describe-bindings') of the value of MAPVAR, taken as a keymap.
Substrings of the form \=\<MAPVAR> specify to use the value of MAPVAR
as the keymap for future \=\[COMMAND] substrings.
\=\= quotes the following character and is discarded;
thus, \=\=\=\= puts \=\= into the output, and \=\=\=\[ puts \=\[ into the output.

arguments: (STRING)
Sdoc.c
Vinternal-doc-file-name
Name of file containing documentation strings of built-in symbols.Seditfns.c
Fchar-to-string
Convert CHARACTER to a one-character string containing that character.

arguments: (CHARACTER)
Seditfns.c
Fstring-to-char
Convert arg STRING to a character, the first character of that string.
An empty string will return the constant `nil'.

arguments: (STRING)
Seditfns.c
Fpoint
Return value of point, as an integer.
Beginning of buffer is position (point-min).
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Seditfns.c
Fpoint-marker
Return value of point, as a marker object.
This marker is a copy; you may modify it with reckless abandon.
If optional argument DONT-COPY-P is non-nil, then it returns the real
point-marker; modifying the position of this marker will move point.
It is illegal to change the buffer of it, or make it point nowhere.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional DONT-COPY-P BUFFER)
Seditfns.c
Fgoto-char
Set point to POSITION, a number or marker.
Beginning of buffer is position (point-min), end is (point-max).
If BUFFER is nil, the current buffer is assumed.
Return value of POSITION, as an integer.

arguments: (POSITION &optional BUFFER)
Seditfns.c
Fregion-beginning
Return position of beginning of region in BUFFER, as an integer.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Seditfns.c
Fregion-end
Return position of end of region in BUFFER, as an integer.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Seditfns.c
Fmark-marker
Return this buffer's mark, as a marker object.
If `zmacs-regions' is true, then this returns nil unless the region is
currently in the active (highlighted) state.  If optional argument FORCE
is t, this returns the mark (if there is one) regardless of the zmacs-region
state.  You should *generally* not use the mark unless the region is active,
if the user has expressed a preference for the zmacs-region model.
Watch out!  Moving this marker changes the mark position.
If you set the marker not to point anywhere, the buffer will have no mark.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional FORCE BUFFER)
Seditfns.c
Fsave-excursion
Save point, mark, and current buffer; execute BODY; restore those things.
Executes BODY just like `progn'.
The values of point, mark and the current buffer are restored
even in case of abnormal exit (throw or error).

arguments: (&rest BODY)Seditfns.c
Fsave-current-buffer
Save the current buffer; execute BODY; restore the current buffer.
Executes BODY just like `progn'.

arguments: (&rest BODY)Seditfns.c
Fbuffer-size
Return the number of characters in BUFFER.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Seditfns.c
Fpoint-min
Return the minimum permissible value of point in BUFFER.
This is 1, unless narrowing (a buffer restriction)
is in effect, in which case it may be greater.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Seditfns.c
Fpoint-min-marker
Return a marker to the minimum permissible value of point in BUFFER.
This is the beginning, unless narrowing (a buffer restriction)
is in effect, in which case it may be greater.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Seditfns.c
Fpoint-max
Return the maximum permissible value of point in BUFFER.
This is (1+ (buffer-size)), unless narrowing (a buffer restriction)
is in effect, in which case it may be less.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Seditfns.c
Fpoint-max-marker
Return a marker to the maximum permissible value of point in BUFFER.
This is (1+ (buffer-size)), unless narrowing (a buffer restriction)
is in effect, in which case it may be less.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Seditfns.c
Ffollowing-char
Return the character following point.
At the end of the buffer or accessible region, return 0.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Seditfns.c
Fpreceding-char
Return the character preceding point.
At the beginning of the buffer or accessible region, return 0.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Seditfns.c
Fbobp
Return t if point is at the beginning of the buffer.
If the buffer is narrowed, this means the beginning of the narrowed part.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Seditfns.c
Feobp
Return t if point is at the end of the buffer.
If the buffer is narrowed, this means the end of the narrowed part.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Seditfns.c
Fbolp
Return t if point is at the beginning of a line.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Seditfns.c
Feolp
Return t if point is at the end of a line.
`End of a line' includes point being at the end of the buffer.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Seditfns.c
Fchar-after
Return the character at position POS in BUFFER.
POS is an integer or a marker.
If POS is out of range, the value is nil.
if POS is nil, the value of point is assumed.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional POS BUFFER)
Seditfns.c
Fchar-before
Return the character preceding position POS in BUFFER.
POS is an integer or a marker.
If POS is out of range, the value is nil.
if POS is nil, the value of point is assumed.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional POS BUFFER)
Seditfns.c
Ftemp-directory
Return the pathname to the directory to use for temporary files.
On MS Windows, this is obtained from the TEMP or TMP environment variables,
defaulting to c:\ if they are both undefined.
On Unix it is obtained from TMPDIR, with /tmp as the default.

arguments: ()
Seditfns.c
Fuser-login-name
Return the name under which the user logged in, as a string.
This is based on the effective uid, not the real uid.
Also, if the environment variable LOGNAME or USER is set,
that determines the value of this function.
If the optional argument UID is present, then environment variables are
ignored and this function returns the login name for that UID, or nil.

arguments: (&optional UID)
Seditfns.c
Fuser-real-login-name
Return the name of the user's real uid, as a string.
This ignores the environment variables LOGNAME and USER, so it differs from
`user-login-name' when running under `su'.

arguments: ()
Seditfns.c
Fuser-uid
Return the effective uid of Emacs, as an integer.

arguments: ()
Seditfns.c
Fuser-real-uid
Return the real uid of Emacs, as an integer.

arguments: ()
Seditfns.c
Fuser-full-name
Return the full name of the user logged in, as a string.
If the optional argument USER is given, then the full name for that
user is returned, or nil.  USER may be either a login name or a uid.

If USER is nil, and `user-full-name' contains a string, the
value of `user-full-name' is returned.

arguments: (&optional USER)
Seditfns.c
Fuser-home-directory
Return the user's home directory, as a string.

arguments: ()
Seditfns.c
Fsystem-name
Return the name of the machine you are running on, as a string.

arguments: ()
Seditfns.c
Femacs-pid
Return the process ID of Emacs, as an integer.

arguments: ()
Seditfns.c
Fcurrent-time
Return the current time, as the number of seconds since 1970-01-01 00:00:00.
The time is returned as a list of three integers.  The first has the
most significant 16 bits of the seconds, while the second has the
least significant 16 bits.  The third integer gives the microsecond
count.

The microsecond count is zero on systems that do not provide
resolution finer than a second.

arguments: ()
Seditfns.c
Fcurrent-process-time
Return the amount of time used by this XEmacs process so far.
The return value is a list of three floating-point numbers, expressing
the user, system, and real times used by the process.  The user time
measures the time actually spent by the CPU executing the code in this
process.  The system time measures time spent by the CPU executing kernel
code on behalf of this process (e.g. I/O requests made by the process).

Note that the user and system times measure processor time, as opposed
to real time, and only accrue when the processor is actually doing
something: Time spent in an idle wait (waiting for user events to come
in or for I/O on a disk drive or other device to complete) does not
count.  Thus, the user and system times will often be considerably
less than the real time.

Some systems do not allow the user and system times to be distinguished.
In this case, the user time will be the total processor time used by
the process, and the system time will be 0.

Some systems do not allow the real and processor times to be distinguished.
In this case, the user and real times will be the same and the system
time will be 0.

arguments: ()
Seditfns.c
Fformat-time-string
Use FORMAT-STRING to format the time TIME.
TIME is specified as (HIGH LOW . IGNORED) or (HIGH . LOW), as from
`current-time' and `file-attributes'.  If TIME is not specified it
defaults to the current time.
The third, optional, argument UNIVERSAL, if non-nil, means describe TIME
as Universal Time; nil means describe TIME in the local time zone.
FORMAT-STRING may contain %-sequences to substitute parts of the time.
%a is replaced by the abbreviated name of the day of week.
%A is replaced by the full name of the day of week.
%b is replaced by the abbreviated name of the month.
%B is replaced by the full name of the month.
%c is a synonym for "%x %X".
%C is a locale-specific synonym, which defaults to "%A, %B %e, %Y" in the C locale.
%d is replaced by the day of month, zero-padded.
%D is a synonym for "%m/%d/%y".
%e is replaced by the day of month, blank-padded.
%G is replaced by the year containing the ISO 8601 week
%g is replaced by the year of the ISO 8601 week within the century (00-99)
%h is a synonym for "%b".
%H is replaced by the hour (00-23).
%I is replaced by the hour (00-12).
%j is replaced by the day of the year (001-366).
%k is replaced by the hour (0-23), blank padded.
%l is replaced by the hour (1-12), blank padded.
%m is replaced by the month (01-12).
%M is replaced by the minute (00-59).
%n is a synonym for "\n".
%p is replaced by AM or PM, as appropriate.
%r is a synonym for "%I:%M:%S %p".
%R is a synonym for "%H:%M".
%s is replaced by the time in seconds since 00:00:00, Jan 1, 1970 (a
      nonstandard extension)
%S is replaced by the second (00-60).
%t is a synonym for "\t".
%T is a synonym for "%H:%M:%S".
%U is replaced by the week of the year (00-53), first day of week is Sunday.
%V is replaced by the ISO 8601 week number
%w is replaced by the day of week (0-6), Sunday is day 0.
%W is replaced by the week of the year (00-53), first day of week is Monday.
%x is a locale-specific synonym, which defaults to "%D" in the C locale.
%X is a locale-specific synonym, which defaults to "%T" in the C locale.
%y is replaced by the year without century (00-99).
%Y is replaced by the year with century.
%z is replaced by the time zone as a numeric offset (e.g +0530, -0800 etc.)
%Z is replaced by the time zone abbreviation.
%\xe6 is replaced by the month as a lowercase Roman number (i-xii)
%\xc6 is replaced by the month as an uppercase Roman number (I-XII)

The number of options reflects the `strftime' function.

arguments: (FORMAT-STRING &optional TIME UNIVERSAL)
Seditfns.c
Fdecode-time
Decode a time value as (SEC MINUTE HOUR DAY MONTH YEAR DOW DST ZONE).
The optional SPECIFIED-TIME should be a list of (HIGH LOW . IGNORED)
or (HIGH . LOW), as from `current-time' and `file-attributes', or `nil'
to use the current time.  The list has the following nine members:
SEC is an integer between 0 and 60; SEC is 60 for a leap second, which
only some operating systems support.  MINUTE is an integer between 0 and 59.
HOUR is an integer between 0 and 23.  DAY is an integer between 1 and 31.
MONTH is an integer between 1 and 12.  YEAR is an integer indicating the
four-digit year.  DOW is the day of week, an integer between 0 and 6, where
0 is Sunday.  DST is t if daylight savings time is effect, otherwise nil.
ZONE is an integer indicating the number of seconds east of Greenwich.
(Note that Common Lisp has different meanings for DOW and ZONE.)

arguments: (&optional SPECIFIED-TIME)
Seditfns.c
Fencode-time
Convert SECOND, MINUTE, HOUR, DAY, MONTH, YEAR and ZONE to internal time.
This is the reverse operation of `decode-time', which see.
ZONE defaults to the current time zone rule.  This can
be a string (as from `set-time-zone-rule'), or it can be a list
(as from `current-time-zone') or an integer (as from `decode-time')
applied without consideration for daylight savings time.

You can pass more than 7 arguments; then the first six arguments
are used as SECOND through YEAR, and the *last* argument is used as ZONE.
The intervening arguments are ignored.
This feature lets (apply 'encode-time (decode-time ...)) work.

Out-of-range values for SEC, MINUTE, HOUR, DAY, or MONTH are allowed;
for example, a DAY of 0 means the day preceding the given month.
Year numbers less than 100 are treated just like other year numbers.
If you want them to stand for years in this century, you must do that yourself.

arguments: (SECOND MINUTE HOUR DAY MONTH YEAR &optional ZONE &rest REST)Seditfns.c
Fcurrent-time-string
Return the current time, as a human-readable string.
Programs can use this function to decode a time,
since the number of columns in each field is fixed.
The format is `Sun Sep 16 01:03:52 1973'.
If an argument is given, it specifies a time to format
instead of the current time.  The argument should have the form:
  (HIGH . LOW)
or the form:
  (HIGH LOW . IGNORED).
Thus, you can use times obtained from `current-time'
and from `file-attributes'.

arguments: (&optional SPECIFIED-TIME)
Seditfns.c
Fcurrent-time-zone
Return the offset and name for the local time zone.
This returns a list of the form (OFFSET NAME).
OFFSET is an integer number of seconds ahead of UTC (east of Greenwich).
    A negative value means west of Greenwich.
NAME is a string giving the name of the time zone.
If an argument is given, it specifies when the time zone offset is determined
instead of using the current time.  The argument should have the form:
  (HIGH . LOW)
or the form:
  (HIGH LOW . IGNORED).
Thus, you can use times obtained from `current-time'
and from `file-attributes'.

Some operating systems cannot provide all this information to Emacs;
in this case, `current-time-zone' returns a list containing nil for
the data it can't find.

arguments: (&optional SPECIFIED-TIME)
Seditfns.c
Fset-time-zone-rule
Set the local time zone using TZ, a string specifying a time zone rule.
If TZ is nil, use implementation-defined default time zone information.

arguments: (TZ)
Seditfns.c
Finsert
Insert ARGS, either strings or characters, at point.
Point moves forward so that it ends up after the inserted text.
Any other markers at the point of insertion remain before the text.
If a string has non-null string-extent-data, new extents will be created.

arguments: (&rest ARGS)Seditfns.c
Finsert-before-markers
Insert strings or characters at point, relocating markers after the text.
Point moves forward so that it ends up after the inserted text.
Any other markers at the point of insertion also end up after the text.

arguments: (&rest ARGS)Seditfns.c
Finsert-string
Insert STRING into BUFFER at BUFFER's point.
Point moves forward so that it ends up after the inserted text.
Any other markers at the point of insertion remain before the text.
If a string has non-null string-extent-data, new extents will be created.
BUFFER defaults to the current buffer.

arguments: (STRING &optional BUFFER)
Seditfns.c
Finsert-char
Insert COUNT copies of CHARACTER into BUFFER.
Point and all markers are affected as in the function `insert'.
COUNT defaults to 1 if omitted.
The optional third arg IGNORED is INHERIT under FSF Emacs.
This is highly bogus, however, and XEmacs always behaves as if
`t' were passed to INHERIT.
The optional fourth arg BUFFER specifies the buffer to insert the
text into.  If BUFFER is nil, the current buffer is assumed.

arguments: (CHARACTER &optional COUNT IGNORED BUFFER)
Seditfns.c
Fbuffer-substring
Return the contents of part of BUFFER as a string.
The two arguments START and END are character positions;
they can be in either order.  If omitted, they default to the beginning
and end of BUFFER, respectively.
If there are duplicable extents in the region, the string remembers
them in its extent data.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional START END BUFFER)
Seditfns.c
Fbuffer-substring-no-properties
Return the text from START to END as a string, without copying the extents.

arguments: (&optional START END BUFFER)
Seditfns.c
Finsert-buffer-substring
Insert before point a substring of the contents of buffer BUFFER.
BUFFER may be a buffer or a buffer name.
Arguments START and END are character numbers specifying the substring.
They default to the beginning and the end of BUFFER.

arguments: (BUFFER &optional START END)
Seditfns.c
Fcompare-buffer-substrings
Compare two substrings of two buffers; return result as number.
the value is -N if first string is less after N-1 chars,
+N if first string is greater after N-1 chars, or 0 if strings match.
Each substring is represented as three arguments: BUFFER, START and END.
That makes six args in all, three for each substring.

The value of `case-fold-search' in the current buffer
determines whether case is significant or ignored.

arguments: (BUFFER1 START1 END1 BUFFER2 START2 END2)
Seditfns.c
Fsubst-char-in-region
From START to END, replace FROMCHAR with TOCHAR each time it occurs.
If optional arg NOUNDO is non-nil, don't record this change for undo
and don't mark the buffer as really changed.

arguments: (START END FROMCHAR TOCHAR &optional NOUNDO)
Seditfns.c
Ftranslate-region
Translate characters from START to END according to TABLE.

If TABLE is a string, the Nth character in it is the mapping for the
character with code N.

If TABLE is a vector, its Nth element is the mapping for character
with code N.  The values of elements may be characters, strings, or
nil (nil meaning don't replace.)

If TABLE is a char-table, its elements describe the mapping between
characters and their replacements.  The char-table should be of type `char'
or `generic'.  If the value given by `get-char-table' for a given character
is nil, that character will not be translated by `translate-region'.  Since
`get-char-table' can never return nil with a char table of type `char', and
since most translation involves a subset of the possible XEmacs characters,
not all of them, the most generally useful table type here is `generic'.

Returns the number of substitutions performed.

arguments: (START END TABLE)
Seditfns.c
Fdelete-region
Delete the text between point and mark.
When called from a program, expects two arguments START and END
(integers or markers) specifying the stretch to be deleted.
If optional third arg BUFFER is nil, the current buffer is assumed.

arguments: (START END &optional BUFFER)
Seditfns.c
Fwiden
Remove restrictions (narrowing) from BUFFER.
This allows the buffer's full text to be seen and edited.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Seditfns.c
Fnarrow-to-region
Restrict editing in BUFFER to the current region.
The rest of the text becomes temporarily invisible and untouchable
but is not deleted; if you save the buffer in a file, the invisible
text is included in the file.  \[widen] makes all visible again.
If BUFFER is nil, the current buffer is assumed.
See also `save-restriction'.

When calling from a program, pass two arguments; positions (integers
or markers) bounding the text that should remain visible.

arguments: (START END &optional BUFFER)
Seditfns.c
Fsave-restriction
Execute BODY, saving and restoring current buffer's restrictions.
The buffer's restrictions make parts of the beginning and end invisible.
(They are set up with `narrow-to-region' and eliminated with `widen'.)
This special operator, `save-restriction', saves the current buffer's
restrictions when it is entered, and restores them when it is exited.
So any `narrow-to-region' within BODY lasts only until the end of the form.
The old restrictions settings are restored
even in case of abnormal exit (throw or error).

The value returned is the value of the last form in BODY.

As of XEmacs 22.0, `save-restriction' correctly handles all modifications
made within BODY. (Formerly, it got confused if, within the BODY, you
widened and then made changes outside the old restricted area.)

Note: if you are using both `save-excursion' and `save-restriction',
use `save-excursion' outermost:
    (save-excursion (save-restriction ...))

arguments: (&rest BODY)Seditfns.c
Fformat
Format a string out of a control-string and arguments.
The first argument is a control string.
The other arguments are substituted into it to make the result, a string.
It may contain %-sequences meaning to substitute the next argument.
%s means print all objects as-is, using `princ'.
%S means print all objects as s-expressions, using `prin1'.
%d or %i means print as an integer in decimal (%o octal, %x lowercase hex,
  %X uppercase hex, %b binary).
%c means print as a single character.
%f means print as a floating-point number in fixed notation (e.g. 785.200).
%e or %E means print as a floating-point number in scientific notation
  (e.g. 7.85200e+03).
%g or %G means print as a floating-point number in "pretty format";
  depending on the number, either %f or %e/%E format will be used, and
  trailing zeroes are removed from the fractional part.
The argument used for all but %s and %S must be a number.  It will be
  converted to an integer or a floating-point number as necessary.

%$ means reposition to read a specific numbered argument; for example,
  %3$s would apply the `%s' to the third argument after the control string,
  and the next format directive would use the fourth argument, the
  following one the fifth argument, etc. (There must be a positive integer
  between the % and the $).
Zero or more of the flag characters `-', `+', ` ', `0', and `#' may be
  specified between the optional repositioning spec and the conversion
  character; see below.
An optional minimum field width may be specified after any flag characters
  and before the conversion character; it specifies the minimum number of
  characters that the converted argument will take up.  Padding will be
  added on the left (or on the right, if the `-' flag is specified), as
  necessary.  Padding is done with spaces, or with zeroes if the `0' flag
  is specified.
If the field width is specified as `*', the field width is assumed to have
  been specified as an argument.  Any repositioning specification that
  would normally specify the argument to be converted will now specify
  where to find this field width argument, not where to find the argument
  to be converted.  If there is no repositioning specification, the normal
  next argument is used.  The argument to be converted will be the next
  argument after the field width argument unless the precision is also
  specified as `*' (see below).

An optional period character and precision may be specified after any
  minimum field width.  It specifies the minimum number of digits to
  appear in %d, %i, %o, %x, and %X conversions (the number is padded
  on the left with zeroes as necessary); the number of digits printed
  after the decimal point for %f, %e, and %E conversions; the number
  of significant digits printed in %g and %G conversions; and the
  maximum number of non-padding characters printed in %s and %S
  conversions.  The default precision for floating-point conversions
  is six.
If the precision is specified as `*', the precision is assumed to have been
  specified as an argument.  The argument used will be the next argument
  after the field width argument, if any.  If the field width was not
  specified as an argument, any repositioning specification that would
  normally specify the argument to be converted will now specify where to
  find the precision argument.  If there is no repositioning specification,
  the normal next argument is used.

The ` ' and `+' flags mean prefix non-negative numbers with a space or
  plus sign, respectively.
The `#' flag means print numbers in an alternate, more verbose format:
  octal numbers begin with zero; hex numbers begin with a 0x or 0X;
  a decimal point is printed in %f, %e, and %E conversions even if no
  numbers are printed after it; and trailing zeroes are not omitted in
   %g and %G conversions.

Use %% to put a single % into the output.

arguments: (CONTROL-STRING &rest ARGS)Seditfns.c
Fchar-equal
Return t if two characters match, optionally ignoring case.
Both arguments must be characters (i.e. NOT integers).
Case is ignored if `case-fold-search' is non-nil in BUFFER.
If BUFFER is nil, the current buffer is assumed.

arguments: (CHARACTER1 CHARACTER2 &optional BUFFER)
Seditfns.c
Ftranspose-regions
Transpose region START1 to END1 with START2 to END2.
The regions may not be overlapping, because the size of the buffer is
never changed in a transposition.

Optional fifth arg LEAVE-MARKERS, if non-nil, means don't transpose
any markers that happen to be located in the regions. (#### BUG: currently
this function always acts as if LEAVE-MARKERS is non-nil.)

Transposing beyond buffer boundaries is an error.

arguments: (START1 END1 START2 END2 &optional LEAVE-MARKERS)
Seditfns.c
Vzmacs-regions
*Whether LISPM-style active regions should be used.
This means that commands which operate on the region (the area between the
point and the mark) will only work while the region is in the ``active''
state, which is indicated by highlighting.  Executing most commands causes
the region to not be in the active state, so (for example) \[kill-region] will only
work immediately after activating the region.

More specifically:

 - Commands which operate on the region only work if the region is active.
 - Only a very small set of commands cause the region to become active:
   Those commands whose semantics are to mark an area, like `mark-defun'.
 - The region is deactivated after each command that is executed, except that:
 - "Motion" commands do not change whether the region is active or not.

set-mark-command (C-SPC) pushes a mark and activates the region.  Moving the
cursor with normal motion commands (C-n, C-p, etc) will cause the region
between point and the recently-pushed mark to be highlighted.  It will
remain highlighted until some non-motion command is executed.

exchange-point-and-mark (\[exchange-point-and-mark]) activates the region.  So if you mark a
region and execute a command that operates on it, you can reactivate the
same region with \[exchange-point-and-mark] (or perhaps \[exchange-point-and-mark] \[exchange-point-and-mark]) to operate on it
again.

Generally, commands which push marks as a means of navigation (like
beginning-of-buffer and end-of-buffer (M-< and M->)) do not activate the
region.  But commands which push marks as a means of marking an area of
text (like mark-defun (\[mark-defun]), mark-word (\[mark-word]) or mark-whole-buffer (\[mark-whole-buffer]))
do activate the region.

The way the command loop actually works with regard to deactivating the
region is as follows:

- If the variable `zmacs-region-stays' has been set to t during the command
  just executed, the region is left alone (this is how the motion commands
  make the region stay around; see the `_' flag in the `interactive'
  specification).  `zmacs-region-stays' is reset to nil before each command
  is executed.
- If the function `zmacs-activate-region' has been called during the command
  just executed, the region is left alone.  Very few functions should
  actually call this function.
- Otherwise, if the region is active, the region is deactivated and
  the `zmacs-deactivate-region-hook' is called.Seditfns.c
Vzmacs-region-active-p
Do not alter this.  It is for internal use only.Seditfns.c
Vzmacs-region-stays
Whether the current command will deactivate the region.
Commands which do not wish to affect whether the region is currently
highlighted should set this to t.  Normally, the region is turned off after
executing each command that did not explicitly turn it on with the function
zmacs-activate-region. Setting this to true lets a command be non-intrusive.
See the variable `zmacs-regions'.

The same effect can be achieved using the `_' interactive specification.

`zmacs-region-stays' is reset to nil before each command is executed.Seditfns.c
Vatomic-extent-goto-char-p
Do not use this -- it will be going away soon.
Indicates if `goto-char' has just been run.  This information is allegedly
needed to get the desired behavior for atomic extents and unfortunately
is not available by any other means.Seditfns.c
Vuser-full-name
*The name of the user.
The function `user-full-name' will return the value of this variable, when
called without arguments.
This is initialized to the value of the NAME environment variable.Selhash.c
Fhash-table-p
Return t if OBJECT is a hash table, else nil.

arguments: (OBJECT)
Selhash.c
Fmake-hash-table
Return a new empty hash table object.
Use Common Lisp style keywords to specify hash table properties.

Keyword :test can be `eq', `eql' (default), `equal' or `equalp'.
Comparison between keys is done using this function.  If speed is important,
consider using `eq'.  When storing strings in the hash table, you will
likely need to use `equal' or `equalp' (for case-insensitivity).  With other
objects, consider using a test function defined with
`define-hash-table-test', an emacs extension to this Common Lisp hash table
API.

Keyword :size specifies the number of keys likely to be inserted.
This number of entries can be inserted without enlarging the hash table.

Keyword :rehash-size must be a float greater than 1.0, and specifies
the factor by which to increase the size of the hash table when enlarging.

Keyword :rehash-threshold must be a float between 0.0 and 1.0,
and specifies the load factor of the hash table which triggers enlarging.

Non-standard keyword :weakness can be `nil' (default), `t', `key-and-value',
`key', `value' or `key-or-value'. `t' is an alias for `key-and-value'.

A key-and-value-weak hash table, also known as a fully-weak or simply
as a weak hash table, is one whose pointers do not count as GC
referents: for any key-value pair in the hash table, if the only
remaining pointer to either the key or the value is in a weak hash
table, then the pair will be removed from the hash table, and the key
and value collected.  A non-weak hash table (or any other pointer)
would prevent the object from being collected.

A key-weak hash table is similar to a fully-weak hash table except that
a key-value pair will be removed only if the key remains unmarked
outside of weak hash tables.  The pair will remain in the hash table if
the key is pointed to by something other than a weak hash table, even
if the value is not.

A value-weak hash table is similar to a fully-weak hash table except
that a key-value pair will be removed only if the value remains
unmarked outside of weak hash tables.  The pair will remain in the
hash table if the value is pointed to by something other than a weak
hash table, even if the key is not.

A key-or-value-weak hash table is similar to a fully-weak hash table except
that a key-value pair will be removed only if the value and the key remain
unmarked outside of weak hash tables.  The pair will remain in the
hash table if the value or key are pointed to by something other than a weak
hash table, even if the other is not.

arguments: (&key TEST SIZE REHASH-SIZE REHASH-THRESHOLD WEAKNESS)Selhash.c
Fcopy-hash-table
Return a new hash table containing the same keys and values as HASH-TABLE.
The keys and values will not themselves be copied.

arguments: (HASH-TABLE)
Selhash.c
Fgethash
Find hash value for KEY in HASH-TABLE.
If there is no corresponding value, return DEFAULT (which defaults to nil).

arguments: (KEY HASH-TABLE &optional DEFAULT)
Selhash.c
Fputhash
Hash KEY to VALUE in HASH-TABLE, and return VALUE. 

arguments: (KEY VALUE HASH-TABLE)
Selhash.c
Fremhash
Remove the entry for KEY from HASH-TABLE.
Do nothing if there is no entry for KEY in HASH-TABLE.
Return non-nil if an entry was removed.

arguments: (KEY HASH-TABLE)
Selhash.c
Fclrhash
Remove all entries from HASH-TABLE, leaving it empty.
Return HASH-TABLE.

arguments: (HASH-TABLE)
Selhash.c
Fhash-table-count
Return the number of entries in HASH-TABLE.

arguments: (HASH-TABLE)
Selhash.c
Fhash-table-test
Return HASH-TABLE's test.

This can be one of `eq', `eql', `equal', `equalp', or some symbol supplied
as the NAME argument to `define-hash-table-test', which see.

arguments: (HASH-TABLE)
Selhash.c
Fhash-table-size
Return the size of HASH-TABLE.
This is the current number of slots in HASH-TABLE, whether occupied or not.

arguments: (HASH-TABLE)
Selhash.c
Fhash-table-rehash-size
Return the current rehash size of HASH-TABLE.
This is a float greater than 1.0; the factor by which HASH-TABLE
is enlarged when the rehash threshold is exceeded.

arguments: (HASH-TABLE)
Selhash.c
Fhash-table-rehash-threshold
Return the current rehash threshold of HASH-TABLE.
This is a float between 0.0 and 1.0; the maximum `load factor' of HASH-TABLE,
beyond which the HASH-TABLE is enlarged by rehashing.

arguments: (HASH-TABLE)
Selhash.c
Fhash-table-weakness
Return the weakness of HASH-TABLE.
This can be one of `nil', `key-and-value', `key-or-value', `key' or `value'.

arguments: (HASH-TABLE)
Selhash.c
Fhash-table-type
Return the type of HASH-TABLE.
This can be one of `non-weak', `weak', `key-weak' or `value-weak'.

arguments: (HASH-TABLE)
Selhash.c
Fmaphash
Map FUNCTION over entries in HASH-TABLE, calling it with two args,
each key and value in HASH-TABLE.

FUNCTION must not modify HASH-TABLE, with the one exception that FUNCTION
may remhash or puthash the entry currently being processed by FUNCTION.

arguments: (FUNCTION HASH-TABLE)
Selhash.c
Feq-hash
Return a hash value for OBJECT appropriate for use with `eq.'

If OBJECT is not immediate (it is not a fixnum or character) this hash value
will be unique among currently-reachable objects, and is appropriate for
implementing the Common Lisp PRINT-OBJECT protocol.

arguments: (OBJECT)
Selhash.c
Feql-hash
Return a hash value for OBJECT appropriate for use with `eql.'

arguments: (OBJECT)
Selhash.c
Fequal-hash
Return a hash value for OBJECT appropriate for use with `equal.'
(equal obj1 obj2) implies (= (equal-hash obj1) (equal-hash obj2)).

arguments: (OBJECT)
Selhash.c
Fequalp-hash
Return a hash value for OBJECT appropriate for use with `equalp.'

arguments: (OBJECT)
Selhash.c
Fdefine-hash-table-test
Define a new hash table test with name NAME, a symbol.

In a hash table created with NAME as its test, use EQUAL-FUNCTION to compare
keys, and HASH-FUNCTION for computing hash codes of keys.

EQUAL-FUNCTION must be a function taking two arguments and returning non-nil
if both arguments are the same.  HASH-FUNCTION must be a function taking one
argument and returning an integer that is the hash code of the argument.

Computation should use the whole value range of the underlying machine long
type.  In XEmacs this will necessitate bignums for values above
`most-positive-fixnum' but below (1+ (* most-positive-fixnum 2)) and
analogous values below `most-negative-fixnum'.  Relatively poor hashing
performance is guaranteed in a build without bignums.

This function returns t if successful, and errors if NAME
cannot be defined as a hash table test.

arguments: (NAME EQUAL-FUNCTION HASH-FUNCTION)
Selhash.c
Fvalid-hash-table-test-p
Return t if OBJECT names a hash table test, nil otherwise.

A valid hash table test is one of the symbols `eq', `eql', `equal',
`equalp', or some symbol passed as the NAME argument to
`define-hash-table-test'.  As a special case, `nil' is regarded as
equivalent to `eql'.

arguments: (OBJECT)
Selhash.c
Fhash-table-test-list
Return a list of symbols naming valid hash table tests.
These can be passed as the value of the TEST keyword to `make-hash-table'.
This list does not include nil, regarded as equivalent to `eql' by
`make-hash-table'.

arguments: ()
Selhash.c
Fhash-table-test-equal-function
Return the comparison function used for hash table test TEST.
See `define-hash-table-test' and `make-hash-table'.

arguments: (TEST)
Selhash.c
Fhash-table-test-hash-function
Return the hash function used for hash table test TEST.
See `define-hash-table-test' and `make-hash-table'.

arguments: (TEST)
Semacs.c
Finvocation-name
Return the program name that was used to run XEmacs.
Any directory names are omitted.

arguments: ()
Semacs.c
Finvocation-directory
Return the directory name in which the Emacs executable was located.

arguments: ()
Semacs.c
Frunning-temacs-p
True if running temacs.  This means we are in the dumping stage.
This is false during normal execution of the `xemacs' program, and
becomes false once `run-emacs-from-temacs' is run.

arguments: ()
Semacs.c
Femacs-run-status
Plist of values indicating the current run status of this XEmacs.
Currently defined values:

`temacs'
  If non-nil, we are running a "raw temacs" (no dump data is present
  and `run-emacs-from-temacs' not called). (same as `running-temacs-p')

`dumping'
  If non-nil, we are in the process of creating dump data. (same as
  `purify-flag')

`restarted'
  If non-nil, `run-emacs-from-temacs' was called.

`pdump'
  If non-nil, we were compiled with pdump (portable dumping) support.

`batch'
  If non-nil, we are running non-interactively. (same as `noninteractive')

arguments: ()
Semacs.c
Frun-emacs-from-temacs
Do not call this.  It will reinitialize your XEmacs.  You'll be sorry.

arguments: (&rest ARGS)Semacs.c
Fdump-emacs
Dump current state of XEmacs into executable file FILENAME.
Take symbols from SYMFILE (presumably the file you executed to run XEmacs).
This is used in the file `loadup.el' when building XEmacs.

Remember to set `command-line-processed' to nil before dumping
if you want the dumped XEmacs to process its command line
and announce itself normally when it is run.

arguments: (FILENAME SYMFILE)
Semacs.c
Fforce-debugging-signal
Cause XEmacs to enter the debugger.
On some systems, there may be no way to do this gracefully; if so,
nothing happens unless ABORT is non-nil, in which case XEmacs will
ABORT() -- a sure-fire way to immediately get back to the debugger,
but also a sure-fire way to kill XEmacs (and dump core on Unix
systems)!

arguments: (&optional ABORT)
Semacs.c
Fkill-emacs
Exit the XEmacs job and kill it.  Ask for confirmation, without argument.
If ARG is an integer, return ARG as the exit program code.
If ARG is a string, stuff it as keyboard input.

The value of `kill-emacs-hook', if not void,
is a list of functions (of no args),
all of which are called before XEmacs is actually killed.

arguments: (&optional ARG)
Semacs.c
Fnoninteractive
Non-nil return value means XEmacs is running without interactive terminal.

arguments: ()
Semacs.c
Fquantify-start-recording-data
Start recording Quantify data.

arguments: ()
Semacs.c
Fquantify-stop-recording-data
Stop recording Quantify data.

arguments: ()
Semacs.c
Fquantify-clear-data
Clear all Quantify data.

arguments: ()
Semacs.c
Vsuppress-early-error-handler-backtrace
Non-nil means early error handler shouldn't print a backtrace.Semacs.c
Vcommand-line-args
Args passed by shell to XEmacs, as a list of strings.Semacs.c
Vinvocation-name
The program name that was used to run XEmacs.
Any directory names are omitted.Semacs.c
Vinvocation-directory
The directory in which the XEmacs executable was found, to run it.
The value is simply the program name if that directory's name is not known.Semacs.c
Vinvocation-path
The path in which the XEmacs executable was found, to run it.
The value is simply the value of environment variable PATH on startup
if XEmacs was found there.Semacs.c
Vsystem-type
Symbol indicating type of operating system you are using.Semacs.c
Vsystem-configuration
String naming the configuration XEmacs was built for.Semacs.c
Vsystem-configuration-options
String containing the configuration options XEmacs was built with.Semacs.c
Vemacs-major-version
Major version number of this version of Emacs, as an integer.
Warning: this variable did not exist in Emacs versions earlier than:
  FSF Emacs:   19.23
  XEmacs:      19.10Semacs.c
Vemacs-minor-version
Minor version number of this version of Emacs, as an integer.
Warning: this variable did not exist in Emacs versions earlier than:
  FSF Emacs:   19.23
  XEmacs:      19.10Semacs.c
Vemacs-patch-level
The patch level of this version of Emacs, as an integer.
The value is non-nil if this version of XEmacs is part of a series of
stable XEmacsen, but has bug fixes applied.
Warning: this variable does not exist in FSF Emacs or in XEmacs versions
earlier than 21.1.1Semacs.c
Vemacs-beta-version
Beta number of this version of Emacs, as an integer.
The value is nil if this is an officially released version of XEmacs.
Warning: this variable does not exist in FSF Emacs or in XEmacs versions
earlier than 20.3.Semacs.c
Vxemacs-codename
Codename of this version of Emacs (a string).Semacs.c
Vxemacs-extra-name
Arbitrary string to place in the version string after the codename.

Appropriate surrounding whitespace will be added, but typically looks best
if enclosed in parentheses.

A standard use is to indicate the topmost hash id of the Mercurial
changeset from which XEmacs was compiled.  Developers may also use it
to indicate particular branches, etc.Semacs.c
Vxemacs-release-date
ISO 8601 format date string giving the date of latest release in series.

The time may optionally be given.  The time zone may not be given, and
is (implicitly) UTC.  Currently not included in the version string.Semacs.c
Vnoninteractive
Non-nil means XEmacs is running without interactive terminal.Semacs.c
Vvanilla-inhibiting
Set to non-nil when the user-init and site-start files should not be loaded.Semacs.c
Vinhibit-early-packages
Set to non-nil when the early packages should be ignored at startup.
Early package directories will not be added to `load-path', nor set up as
autoloads, nothing.Semacs.c
Vinhibit-all-packages
Set to non-nil when all packages should be ignored at startup.
Package directories will not be added to `load-path', nor set up as
autoloads, nothing.Semacs.c
Vinhibit-autoloads
Set to non-nil when autoloads should not be loaded at startup.Semacs.c
Vdebug-paths
Set to non-nil when debug information about paths should be printed.Semacs.c
Vinhibit-site-lisp
Set to non-nil when the site-lisp should not be searched at startup.Semacs.c
Vinhibit-site-modules
Set to non-nil when site-modules should not be searched at startup.Semacs.c
Vemacs-priority
Priority for XEmacs to run at.
This value is effective only if set before XEmacs is dumped,
and only if the XEmacs executable is installed with setuid to permit
it to change priority.  (XEmacs sets its uid back to the real uid.)
Currently, you need to define SET_EMACS_PRIORITY in `config.h'
before you compile XEmacs, to enable the code for this feature.Semacs.c
Vinternal-error-checking
Internal error checking built-in into this instance of XEmacs.
This is a list of symbols, initialized at build-time.  Legal symbols
are:

extents		- check extents prior to each extent change;
types		- check types strictly;
malloc		- check operation of malloc;
gc		- check garbage collection;
text		- check text and buffer positions;
display		- check redisplay structure consistency;
glyphs		- check glyph structure consistency;
byte-code	- check byte-code consistency;.
structures	- check other structure consistency.

quick-build     - user has requested the "quick-build" configure option.Semacs.c
Vmail-lock-methods
Mail spool locking methods supported by this instance of XEmacs.
This is a list of symbols.  Each of the symbols is one of the
following: dot, lockf, flock, locking, mmdf.Semacs.c
Vconfigure-mail-lock-method
Mail spool locking method suggested by configure.  This is one
of the symbols in MAIL-LOCK-METHODS.Semacs.c
Vemacs-program-name
*Name of the Emacs variant.
This is mainly meant for use in path searching.Semacs.c
Vemacs-program-version
*Version of the Emacs variant.
This typically has the form NN.NN-bNN.
This is mainly meant for use in path searching.Semacs.c
Vexec-path
*List of directories to search programs to run in subprocesses.
Each element is a string (directory name) or nil (try default directory).Semacs.c
Vexec-directory
*Directory of architecture-dependent files that come with XEmacs,
especially executable programs intended for XEmacs to invoke.Semacs.c
Vconfigure-exec-directory
For internal use by the build procedure only.
configure's idea of what `exec-directory' will be.Semacs.c
Vlisp-directory
*Directory of core Lisp files that come with XEmacs.Semacs.c
Vconfigure-lisp-directory
For internal use by the build procedure only.
configure's idea of what `lisp-directory' will be.Semacs.c
Vmule-lisp-directory
*Directory of Mule Lisp files that come with XEmacs.Semacs.c
Vconfigure-mule-lisp-directory
For internal use by the build procedure only.
configure's idea of what `mule-lisp-directory' will be.Semacs.c
Vmodule-directory
*Directory of core dynamic modules that come with XEmacs.Semacs.c
Vconfigure-module-directory
For internal use by the build procedure only.
configure's idea of what `module-directory' will be.Semacs.c
Vconfigure-early-package-directories
For internal use by the build procedure only.
configure's idea of what the early package directories will be.Semacs.c
Vconfigure-late-package-directories
For internal use by the build procedure only.
configure's idea of what the late package directories will be.Semacs.c
Vconfigure-last-package-directories
For internal use by the build procedure only.
configure's idea of what the last package directories will be.Semacs.c
Vconfigure-package-path
For internal use by the build procedure only.
configure's idea of what the package path will be.Semacs.c
Vdata-directory
*Directory of architecture-independent files that come with XEmacs,
intended for XEmacs to use.
Use of this variable in new code is almost never correct.  See the
functions `locate-data-file' and `locate-data-directory' and the variable
`data-directory-list'.Semacs.c
Vconfigure-data-directory
For internal use by the build procedure only.
configure's idea of what `data-directory' will be.Semacs.c
Vdata-directory-list
*List of directories of architecture-independent files that come with XEmacs
or were installed as packages, and are intended for XEmacs to use.Semacs.c
Vsite-directory
*Directory of site-specific Lisp files that come with XEmacs.Semacs.c
Vconfigure-site-directory
For internal use by the build procedure only.
configure's idea of what `site-directory' will be.Semacs.c
Vsite-module-directory
*Directory of site-specific loadable modules that come with XEmacs.Semacs.c
Vconfigure-site-module-directory
For internal use by the build procedure only.
configure's idea of what `site-directory' will be.Semacs.c
Vdoc-directory
*Directory containing the DOC file that comes with XEmacs.
This is usually the same as `exec-directory'.Semacs.c
Vconfigure-doc-directory
For internal use by the build procedure only.
configure's idea of what `doc-directory' will be.Semacs.c
Vconfigure-exec-prefix-directory
For internal use by the build procedure only.
configure's idea of what `exec-prefix-directory' will be.Semacs.c
Vconfigure-prefix-directory
For internal use by the build procedure only.
configure's idea of what `prefix-directory' will be.Semacs.c
Vconfigure-info-directory
For internal use by the build procedure only.
This is the name of the directory in which the build procedure installed
Emacs's info files; the default value for Info-default-directory-list
includes this.Semacs.c
Vconfigure-info-path
The configured initial path for info documentation.Semodules.c
Fload-module
Load in a C Emacs Extension module named FILE.
The optional NAME and VERSION are used to identify specific modules.

DO NOT USE THIS FUNCTION in your programs.  Use `require' instead.

This function is similar in intent to `load' except that it loads in
pre-compiled C or C++ code, using dynamic shared objects.  If NAME is
specified, then the module is only loaded if its internal name matches
the NAME specified.  If VERSION is specified, then the module is only
loaded if it matches that VERSION.  This function will check to make
sure that the same module is not loaded twice.  Modules are searched
for in the same way as Lisp files, except that the valid file
extensions are `.so', `.dll', `.ell', or `.dylib'.

All symbols in the shared module must be completely resolved in order
for this function to be successful.  Any modules which the specified
FILE depends on will be automatically loaded.  You can determine which
modules have been loaded as dynamic shared objects by examining the
return value of the function `list-modules'.

It is possible, although unwise, to unload modules using `unload-feature'.
The preferred mechanism for unloading or reloading modules is to quit
XEmacs, and then reload those new or changed modules that are required.

Messages informing you of the progress of the load are displayed unless
the variable `load-modules-quietly' is non-NIL.

arguments: (FILE &optional NAME VERSION)
Semodules.c
Funload-module
Unload a module previously loaded with load-module.

DO NOT USE THIS FUNCTION in your programs.  Use `unload-feature' instead.

As with load-module, this function requires at least the module FILE, and
optionally the module NAME and VERSION to unload.  It may not be possible
for the module to be unloaded from memory, as there may be Lisp objects
referring to variables inside the module code.  However, once you have
requested a module to be unloaded, it will be unloaded from memory as
soon as the last reference to symbols within the module is destroyed.

arguments: (FILE &optional NAME VERSION)
Semodules.c
Flist-modules
Produce a list of loaded dynamic modules.

This function will return a list of all the loaded dynamic modules.
Each element in the list is a list in the form (SONAME NAME VER DESC),
where SONAME is the name of the shared object that was loaded, NAME
is the internal module name, VER is the version of the module, and DESC
is how the module describes itself.

This function returns a list, so you will need to assign the return value
to a variable and then examine the variable with `describe-variable'.
For example:

  (setq mylist (list-modules))
  (describe-variable 'mylist)


NOTE: It is possible for the same module to be loaded more than once,
at different versions.  However, you should never see the same module,
with the same name and version, loaded more than once.  If you do, this
is a bug, and you are encouraged to report it.

arguments: ()
Semodules.c
Vmodule-version
Emacs dynamic loading mechanism version, as a string.

This string is in the form XX.YY.ppp, where XX is the major version
number, YY is the minor version number, and ppp is the patch level.
This variable can be used to distinguish between different versions of
the dynamic loading technology used in Emacs, if required.  It is not
a given that this value will be the same as the Emacs version number.Semodules.c
Vload-modules-quietly
*Set to t if module loading is to be silent.

Normally, when loading dynamic modules, Emacs will inform you of its
progress, and will display the module name and version if the module
is loaded correctly.  Setting this variable to `t' will suppress these
messages.  This would normally only be done if `load-module' was being
called by a Lisp function.Semodules.c
Vunloading-module
Used internally by `unload-feature'.  Do not set this variable.
Danger, danger, Will Robinson!Semodules.c
Vmodule-load-path
*List of directories to search for dynamic modules to load.
Each element is a string (directory name) or nil (try default directory).

Note that elements of this list *may not* begin with "~", so you must
call `expand-file-name' on them before adding them to this list.

Initialized based on EMACSMODULEPATH environment variable, if any, otherwise
to default specified the file `paths.h' when XEmacs was built.  If there
were no paths specified in `paths.h', then XEmacs chooses a default
value for this variable by looking around in the file-system near the
directory in which the XEmacs executable resides.

Due to the nature of dynamic modules, the path names should almost always
refer to architecture-dependent directories.  It is unwise to attempt to
store dynamic modules in a heterogenous environment.  Some environments
are similar enough to each other that XEmacs will be unable to determine
the correctness of a dynamic module, which can have unpredictable results
when a dynamic module is loaded.Semodules.c
Vmodule-extensions
*List of filename extensions to use when searching for dynamic modules.Seval.c
For
Eval ARGS until one of them yields non-nil, then return that value.
The remaining ARGS are not evalled at all.
If all args return nil, return nil.

Any multiple values from the last form, and only from the last form, are
passed back.  See `values' and `multiple-value-bind'. 

arguments: (&rest ARGS)Seval.c
Fand
Eval ARGS until one of them yields nil, then return nil.
The remaining ARGS are not evalled at all.
If no arg yields nil, return the last arg's value.

Any multiple values from the last form, and only from the last form, are
passed back.  See `values' and `multiple-value-bind'. 

arguments: (&rest ARGS)Seval.c
Fif
If COND yields non-nil, do THEN, else do ELSE.
Returns the value of THEN or the value of the last of the ELSE's.
THEN must be one expression, but ELSE... can be zero or more expressions.
If COND yields nil, and there are no ELSE's, the value is nil.

arguments: (COND THEN &rest ELSE)Seval.c
Fwhen
If COND yields non-nil, do BODY, else return nil.
BODY can be zero or more expressions.  If BODY is nil, return nil.

arguments: (COND &rest BODY)Seval.c
Funless
If COND yields nil, do BODY, else return nil.
BODY can be zero or more expressions.  If BODY is nil, return nil.

arguments: (COND &rest BODY)Seval.c
Fcond
Try each clause until one succeeds.
Each clause looks like (CONDITION BODY...).  CONDITION is evaluated
and, if the value is non-nil, this clause succeeds:
then the expressions in BODY are evaluated and the last one's
value is the value of the cond-form.
If no clause succeeds, cond returns nil.
If a clause has one element, as in (CONDITION),
CONDITION's value if non-nil is returned from the cond-form.

arguments: (&rest CLAUSES)Seval.c
Fprogn
Eval BODY forms sequentially and return value of last one.

arguments: (&rest BODY)Seval.c
Fprog1
Similar to `progn', but the value of the first form is returned.

All the arguments are evaluated sequentially.  The value of FIRST is saved
during evaluation of the remaining args, whose values are discarded.

arguments: (FIRST &rest BODY)Seval.c
Fprog2
Similar to `progn', but the value of the second form is returned.

All the arguments are evaluated sequentially.  The value of SECOND is saved
during evaluation of the remaining args, whose values are discarded.

arguments: (FIRST SECOND &rest BODY)Seval.c
Flet*
Bind variables according to VARLIST then eval BODY.
The value of the last form in BODY is returned.
Each element of VARLIST is a symbol (which is bound to nil)
or a list (SYMBOL VALUEFORM) (which binds SYMBOL to the value of VALUEFORM).
Each VALUEFORM can refer to the symbols already bound by this VARLIST.

arguments: (VARLIST &rest BODY)Seval.c
Flet
Bind variables according to VARLIST then eval BODY.
The value of the last form in BODY is returned.
Each element of VARLIST is a symbol (which is bound to nil)
or a list (SYMBOL VALUEFORM) (which binds SYMBOL to the value of VALUEFORM).
All the VALUEFORMs are evalled before any symbols are bound.

arguments: (VARLIST &rest BODY)Seval.c
Fwhile
If TEST yields non-nil, eval BODY... and repeat.
The order of execution is thus TEST, BODY, TEST, BODY and so on
until TEST returns nil.

arguments: (TEST &rest BODY)Seval.c
Fsetq
(setq SYM VAL SYM VAL ...): set each SYM to the value of its VAL.
The symbols SYM are variables; they are literal (not evaluated).
The values VAL are expressions; they are evaluated.
Thus, (setq x (1+ y)) sets `x' to the value of `(1+ y)'.
The second VAL is not computed until after the first SYM is set, and so on;
each VAL can use the new value of variables set earlier in the `setq'.
The return value of the `setq' form is the value of the last VAL.Seval.c
Fquote
Return the argument, without evaluating it.  `(quote x)' yields `x'.

`quote' differs from `function' in that it is a hint that an expression is
data, not a function.  In particular, under some circumstances the byte
compiler will compile an expression quoted with `function', but it will
never do so for an expression quoted with `quote'.  These issues are most
important for lambda expressions (see `lambda').

There is an alternative, more readable, reader syntax for `quote':  a Lisp
object preceded by `''. Thus, `'x' is equivalent to `(quote x)', in all
contexts.  A print function may use either.  Internally the expression is
represented as `(quote x)').

arguments: (OBJECT)Seval.c
Fquote-maybe
Quote EXPR if it is not self quoting.

In contrast with `quote', this is a function, not a special form; its
argument is evaluated before `quote-maybe' is called.  It returns either
EXPR (if it is self-quoting) or a list `(quote EXPR)' if it is not
self-quoting.  Lists starting with the symbol `lambda' are regarded as
self-quoting.

arguments: (EXPR)
Seval.c
Ffunction
Return the argument, without evaluating it.  `(function x)' yields `x'.

`function' differs from `quote' in that it is a hint that an expression is
a function, not data.  In particular, under some circumstances the byte
compiler will compile an expression quoted with `function', but it will
never do so for an expression quoted with `quote'.  However, the byte
compiler will not compile an expression buried in a data structure such as
a vector or a list which is not syntactically a function.  These issues are
most important for lambda expressions (see `lambda').

There is an alternative, more readable, reader syntax for `function':  a Lisp
object preceded by `#''. Thus, #'x is equivalent to (function x), in all
contexts.  A print function may use either.  Internally the expression is
represented as `(function x)').

arguments: (SYMBOL-OR-LAMBDA)Seval.c
Fdefun
Define NAME as a function.
The definition is (lambda ARGLIST [DOCSTRING] BODY...).
See also the function `interactive'.

arguments: (NAME ARGLIST &optional DOCSTRING &rest BODY)Seval.c
Fdefmacro
Define NAME as a macro.
The definition is (macro lambda ARGLIST [DOCSTRING] BODY...).
When the macro is called, as in (NAME ARGS...),
the function (lambda ARGLIST BODY...) is applied to
the list ARGS... as it appears in the expression,
and the result should be a form to be evaluated instead of the original.

arguments: (NAME ARGLIST &optional DOCSTRING &rest BODY)Seval.c
Fdefvar
Define SYMBOL as a variable.
You are not required to define a variable in order to use it,
 but the definition can supply documentation and an initial value
 in a way that tags can recognize.

INITVALUE is evaluated, and used to set SYMBOL, only if SYMBOL's value is
 void. (However, when you evaluate a defvar interactively, it acts like a
 defconst: SYMBOL's value is always set regardless of whether it's currently
 void.)
If SYMBOL is buffer-local, its default value is what is set;
 buffer-local values are not affected.
INITVALUE and DOCSTRING are optional.
If DOCSTRING starts with *, this variable is identified as a user option.
 This means that M-x set-variable recognizes it.
If INITVALUE is missing, SYMBOL's value is not set.

In lisp-interaction-mode defvar is treated as defconst.

arguments: (SYMBOL &optional INITVALUE DOCSTRING)Seval.c
Fdefconst
Define SYMBOL as a constant variable.
The intent is that programs do not change this value, but users may.
Always sets the value of SYMBOL to the result of evalling INITVALUE.
If SYMBOL is buffer-local, its default value is what is set;
 buffer-local values are not affected.
DOCSTRING is optional.
If DOCSTRING starts with *, this variable is identified as a user option.
 This means that M-x set-variable recognizes it.

Note: do not use `defconst' for user options in libraries that are not
 normally loaded, since it is useful for users to be able to specify
 their own values for such variables before loading the library.
Since `defconst' unconditionally assigns the variable,
 it would override the user's choice.

arguments: (SYMBOL &optional INITVALUE DOCSTRING)Seval.c
Fmacroexpand
Return result of expanding macros at top level of FORM.
If FORM is not a macro call, it is returned unchanged.
Otherwise, the macro is expanded and the expansion is considered
in place of FORM.  When a non-macro-call results, it is returned.

The second optional arg ENVIRONMENT specifies an environment of macro
definitions to shadow the loaded ones for use in file byte-compilation.

arguments: (FORM &optional ENVIRONMENT)
Seval.c
Fcatch
Eval BODY allowing nonlocal exits using `throw'.
TAG is evalled to get the tag to use.  Then the BODY is executed.
Within BODY, (throw TAG VAL) with same (`eq') tag exits BODY and this `catch'.
If no throw happens, `catch' returns the value of the last BODY form.
If a throw happens, it specifies the value to return from `catch'.

arguments: (TAG &rest BODY)Seval.c
Fthrow
Throw to the catch for TAG and return VALUE from it.

Both TAG and VALUE are evalled, and multiple values in VALUE will be passed
back.  Tags are the same if and only if they are `eq'.

arguments: (TAG VALUE)Seval.c
Funwind-protect
Do BODYFORM, protecting with UNWINDFORMS.
If BODYFORM completes normally, its value is returned
after executing the UNWINDFORMS.
If BODYFORM exits nonlocally, the UNWINDFORMS are executed anyway.

arguments: (BODYFORM &rest UNWINDFORMS)Seval.c
Fcondition-case
Regain control when an error is signalled.
Usage looks like (condition-case VAR BODYFORM HANDLERS...).
Executes BODYFORM and returns its value if no error happens.
Each element of HANDLERS looks like (CONDITION-NAME BODY...)
where the BODY is made of Lisp expressions.

A typical usage of `condition-case' looks like this:

(condition-case nil
    ;; you need a progn here if you want more than one statement ...
    (progn
      (do-something)
      (do-something-else))
  (error
   (issue-warning-or)
   ;; but strangely, you don't need one here.
   (return-a-value-etc)
   ))

A handler is applicable to an error if CONDITION-NAME is one of the
error's condition names.  If an error happens, the first applicable
handler is run.  As a special case, a CONDITION-NAME of t matches
all errors, even those without the `error' condition name on them
(e.g. `quit').

The car of a handler may be a list of condition names
instead of a single condition name.

When a handler handles an error,
control returns to the condition-case and the handler BODY... is executed
with VAR bound to (SIGNALED-CONDITIONS . SIGNAL-DATA).
VAR may be nil; then you do not get access to the signal information.

The value of the last BODY form is returned from the condition-case.
See also the function `signal' for more info.

Note that at the time the condition handler is invoked, the Lisp stack
and the current catches, condition-cases, and bindings have all been
popped back to the state they were in just before the call to
`condition-case'.  This means that resignalling the error from
within the handler will not result in an infinite loop.

If you want to establish an error handler that is called with the
Lisp stack, bindings, etc. as they were when `signal' was called,
rather than when the handler was set, use `call-with-condition-handler'.Seval.c
Fcall-with-condition-handler
Call FUNCTION with arguments ARGS, regaining control on error.

This function is similar to `condition-case', but HANDLER is invoked
with the same environment (Lisp stack, bindings, catches, condition-cases)
that was current when `signal' was called, rather than when the handler
was established.

HANDLER should be a function of one argument, which is a cons of the args
(SIG . DATA) that were passed to `signal'.  It is invoked whenever
`signal' is called (this differs from `condition-case', which allows
you to specify which errors are trapped).  If the handler function
returns, `signal' continues as if the handler were never invoked.
(It continues to look for handlers established earlier than this one,
and invokes the standard error-handler if none is found.)

arguments: (HANDLER FUNCTION &rest ARGS)Seval.c
Fsignal
Signal a continuable error.  Args are ERROR-SYMBOL, and associated DATA.
An error symbol is a symbol defined using `define-error'.
DATA should be a list.  Its elements are printed as part of the error message.
If the signal is handled, DATA is made available to the handler.
See also the function `signal-error', and the functions to handle errors:
`condition-case' and `call-with-condition-handler'.

Note that this function can return, if the debugger is invoked and the
user invokes the "return from signal" option.

arguments: (ERROR-SYMBOL DATA)
Seval.c
Fcommandp
Return t if FUNCTION makes provisions for interactive calling.
This means it contains a description for how to read arguments to give it.
The value is nil for an invalid function or a symbol with no function
definition.

Interactively callable functions include

-- strings and vectors (treated as keyboard macros)
-- lambda-expressions that contain a top-level call to `interactive'
-- autoload definitions made by `autoload' with non-nil fourth argument
   (i.e. the interactive flag)
-- compiled-function objects with a non-nil `compiled-function-interactive'
   value
-- subrs (built-in functions) that are interactively callable

Also, a symbol satisfies `commandp' if its function definition does so.

arguments: (FUNCTION)
Seval.c
Fcommand-execute
Execute CMD as an editor command.
CMD must be an object that satisfies the `commandp' predicate.
Optional second arg RECORD-FLAG is as in `call-interactively'.
The argument KEYS specifies the value to use instead of (this-command-keys)
when reading the arguments.

arguments: (CMD &optional RECORD-FLAG KEYS)
Seval.c
Finteractive-p
Return t if function in which this appears was called interactively.
This means that the function was called with call-interactively (which
includes being called as the binding of a key)
and input is currently coming from the keyboard (not in keyboard macro).

arguments: ()
Seval.c
Fautoload
Define FUNCTION to autoload from FILENAME.
FUNCTION is a symbol; FILENAME is a file name string to pass to `load'.
The remaining optional arguments provide additional info about the
real definition.
DOCSTRING is documentation for FUNCTION.
INTERACTIVE, if non-nil, says FUNCTION can be called interactively.
TYPE indicates the type of the object:
   nil or omitted says FUNCTION is a function,
   `keymap' says FUNCTION is really a keymap, and
   `macro' or t says FUNCTION is really a macro.
If FUNCTION already has a non-void function definition that is not an
autoload object, this function does nothing and returns nil.

arguments: (FUNCTION FILENAME &optional DOCSTRING INTERACTIVE TYPE)
Seval.c
Feval
Evaluate FORM and return its value.

arguments: (FORM)
Seval.c
Ffuncall
Call FUNCTION as a function, passing the remaining arguments to it.
Thus, (funcall 'cons 'x 'y) returns (x . y).

arguments: (FUNCTION &rest ARGS)Seval.c
Ffunctionp
Return t if OBJECT can be called as a function, else nil.
A function is an object that can be applied to arguments,
using for example `funcall' or `apply'.

arguments: (OBJECT)
Seval.c
Ffunction-min-args
Return the minimum number of arguments a function may be called with.
The function may be any form that can be passed to `funcall',
any special operator, or any macro.

To check if a function can be called with a specified number of
arguments, use `function-allows-args'.

arguments: (FUNCTION)
Seval.c
Ffunction-max-args
Return the maximum number of arguments a function may be called with.
The function may be any form that can be passed to `funcall',
any special operator, or any macro.
If the function takes an arbitrary number of arguments or is
a built-in special operator, nil is returned.

To check if a function can be called with a specified number of
arguments, use `function-allows-args'.

arguments: (FUNCTION)
Seval.c
Fapply
Call FUNCTION with the remaining args, using the last arg as a list of args.
Thus, (apply '+ 1 2 '(3 4)) returns 10.

arguments: (FUNCTION &rest ARGS)Seval.c
Fmultiple-value-call
Call FUNCTION with arguments FORMS, using multiple values when returned.

All of the (possibly multiple) values returned by each form in FORMS are
gathered together, and given as arguments to FUNCTION; conceptually, this
function is a version of `apply' that by-passes the multiple values
infrastructure, treating multiple values as intercalated lists.

arguments: (FUNCTION &rest FORMS)Seval.c
Fmultiple-value-list-internal
Evaluate FORM. Return a list of multiple vals reflecting the other two args.

Don't use this.  Use `multiple-value-list', the macro specified by Common
Lisp, instead.

FIRST-DESIRED-MULTIPLE-VALUE is the first element in list of multiple values
to pass back.  MULTIPLE-VALUE-UPPER-LIMIT is the exclusive upper limit on
the indexes within the values that may be passed back; this function will
never return a list longer than MULTIPLE-VALUE-UPPER-LIMIT -
FIRST-DESIRED-MULTIPLE-VALUE.  It may return a list shorter than that, if
`values' or `values-list' do not supply enough elements.

arguments: (FIRST-DESIRED-MULTIPLE-VALUE MULTIPLE-VALUE-UPPER-LIMIT FORM)Seval.c
Fmultiple-value-prog1
Similar to `prog1', but return any multiple values from the first form. 
`prog1' itself will never return multiple values. 

arguments: (FIRST &rest BODY)Seval.c
Fvalues
Return all ARGS as multiple values.

arguments: (&rest ARGS)Seval.c
Fvalues-list
Return all the elements of LIST as multiple values.

arguments: (LIST)
Seval.c
Frun-hooks
Run each hook in HOOKS.  Major mode functions use this.
Each argument should be a symbol, a hook variable.
These symbols are processed in the order specified.
If a hook symbol has a non-nil value, that value may be a function
or a list of functions to be called to run the hook.
If the value is a function, it is called with no arguments.
If it is a list, the elements are called, in order, with no arguments.

To make a hook variable buffer-local, use `make-local-hook',
not `make-local-variable'.

arguments: (FIRST &rest REST)Seval.c
Frun-hook-with-args
Run HOOK with the specified arguments ARGS.
HOOK should be a symbol, a hook variable.  If HOOK has a non-nil
value, that value may be a function or a list of functions to be
called to run the hook.  If the value is a function, it is called with
the given arguments and its return value is returned.  If it is a list
of functions, those functions are called, in order,
with the given arguments ARGS.
It is best not to depend on the value returned by `run-hook-with-args',
as that may change.

To make a hook variable buffer-local, use `make-local-hook',
not `make-local-variable'.

arguments: (HOOK &rest ARGS)Seval.c
Frun-hook-with-args-until-success
Run HOOK with the specified arguments ARGS.
HOOK should be a symbol, a hook variable.  Its value should
be a list of functions.  We call those functions, one by one,
passing arguments ARGS to each of them, until one of them
returns a non-nil value.  Then we return that value.
If all the functions return nil, we return nil.

To make a hook variable buffer-local, use `make-local-hook',
not `make-local-variable'.

arguments: (HOOK &rest ARGS)Seval.c
Frun-hook-with-args-until-failure
Run HOOK with the specified arguments ARGS.
HOOK should be a symbol, a hook variable.  Its value should
be a list of functions.  We call those functions, one by one,
passing arguments ARGS to each of them, until one of them
returns nil.  Then we return nil.
If all the functions return non-nil, we return non-nil.

To make a hook variable buffer-local, use `make-local-hook',
not `make-local-variable'.

arguments: (HOOK &rest ARGS)Seval.c
Fbacktrace-debug
Set the debug-on-exit flag of eval frame LEVEL levels down to FLAG.
The debugger is entered when that frame exits, if the flag is non-nil.

arguments: (LEVEL FLAG)
Seval.c
Fbacktrace
Print a trace of Lisp function calls currently active.
Optional arg STREAM specifies the output stream to send the backtrace to,
and defaults to the value of `standard-output'.
Optional second arg DETAILED non-nil means show places where currently
active variable bindings, catches, condition-cases, and
unwind-protects, as well as function calls, were made.

arguments: (&optional STREAM DETAILED)
Seval.c
Fbacktrace-frame
Return the function and arguments NFRAMES up from current execution point.
If that frame has not evaluated the arguments yet (or involves a special
operator), the value is (nil FUNCTION ARG-FORMS...).
If that frame has evaluated its arguments and called its function already,
the value is (t FUNCTION ARG-VALUES...).
A &rest arg is represented as the tail of the list ARG-VALUES.
FUNCTION is whatever was supplied as car of evaluated list,
or a lambda expression for macro calls.
If NFRAMES is more than the number of frames, the value is nil.

arguments: (NFRAMES)
Seval.c
Vmax-specpdl-size
Limit on number of Lisp variable bindings & unwind-protects before error.Seval.c
Vmax-lisp-eval-depth
Limit on depth in `eval', `apply' and `funcall' before error.
This limit is to catch infinite recursions for you before they cause
actual stack overflow in C, which would be fatal for Emacs.
You can safely make it considerably larger than its default value,
if that proves inconveniently small.Seval.c
Vquit-flag
t causes running Lisp code to abort, unless `inhibit-quit' is non-nil.
`critical' causes running Lisp code to abort regardless of `inhibit-quit'.
Normally, you do not need to set this value yourself.  It is set to
t each time a Control-G is detected, and to `critical' each time a
Shift-Control-G is detected.  The XEmacs core C code is littered with
calls to the QUIT; macro, which check the values of `quit-flag' and
`inhibit-quit' and ABORT (or more accurately, call (signal 'quit)) if
it's correct to do so.Seval.c
Vinhibit-quit
Non-nil inhibits C-g quitting from happening immediately.
Note that `quit-flag' will still be set by typing C-g,
so a quit will be signalled as soon as `inhibit-quit' is nil.
To prevent this happening, set `quit-flag' to nil
before making `inhibit-quit' nil.

The value of `inhibit-quit' is ignored if a critical quit is
requested by typing control-shift-G in a window-system frame;
this is explained in more detail in `quit-flag'.Seval.c
Vstack-trace-on-error
*Non-nil means automatically display a backtrace buffer
after any error that is not handled by a `condition-case'.
If the value is a list, an error only means to display a backtrace
if one of its condition symbols appears in the list.
See also variable `stack-trace-on-signal'.Seval.c
Vstack-trace-on-signal
*Non-nil means automatically display a backtrace buffer
after any error that is signalled, whether or not it is handled by
a `condition-case'.
If the value is a list, an error only means to display a backtrace
if one of its condition symbols appears in the list.
See also variable `stack-trace-on-error'.Seval.c
Vdebug-ignored-errors
*List of errors for which the debugger should not be called.
Each element may be a condition-name or a regexp that matches error messages.
If any element applies to a given error, that error skips the debugger
and just returns to top level.
This overrides the variable `debug-on-error'.
It does not apply to errors handled by `condition-case'.Seval.c
Vdebug-on-error
*Non-nil means enter debugger if an unhandled error is signalled.
The debugger will not be entered if the error is handled by
a `condition-case'.
If the value is a list, an error only means to enter the debugger
if one of its condition symbols appears in the list.
This variable is overridden by `debug-ignored-errors'.
See also variables `debug-on-quit' and `debug-on-signal'.

Process filters are considered to be outside of condition-case forms
(unless contained in the process filter itself).  To prevent the
debugger from being called from a process filter, use a list value, or
put the expected error(s) in `debug-ignored-errors'.

If this variable is set while XEmacs is running noninteractively (using
`-batch'), and XEmacs was configured with `--debug' (#define XEMACS_DEBUG
in the C code), instead of trying to invoke the Lisp debugger (which
obviously won't work), XEmacs will break out to a C debugger using
(force-debugging-signal t).  This is useful because debugging
noninteractive runs of XEmacs is often very difficult, since they typically
happen as part of sometimes large and complex make suites (e.g. rebuilding
the XEmacs packages).  NOTE: This runs ABORT()!!! (As well as and after
executing INT 3 under MS Windows, which should invoke a debugger if it's
active.) This is guaranteed to kill XEmacs! (But in this situation, XEmacs
is about to die anyway, and if no debugger is present, this will usefully
dump core.) The most useful way to set this flag when debugging
noninteractive runs, especially in makefiles, is using the environment
variable XEMACSDEBUG, like this:

(using csh)      setenv XEMACSDEBUG '(setq debug-on-error t)'
(using bash)     export XEMACSDEBUG='(setq debug-on-error t)'Seval.c
Vdebug-on-signal
*Non-nil means enter debugger if an error is signalled.
The debugger will be entered whether or not the error is handled by
a `condition-case'.
If the value is a list, an error only means to enter the debugger
if one of its condition symbols appears in the list.
See also variable `debug-on-quit'.

This will attempt to enter a C debugger when XEmacs is run noninteractively
and under the same conditions as described in `debug-on-error'.Seval.c
Vdebug-on-quit
*Non-nil means enter debugger if quit is signalled (C-G, for example).
Does not apply if quit is handled by a `condition-case'.  Entering the
debugger can also be achieved at any time (for X11 console) by typing
control-shift-G to signal a critical quit.Seval.c
Vdebug-on-next-call
Non-nil means enter debugger before next `eval', `apply' or `funcall'.Seval.c
Vbacktrace-with-interal-sections
Non-nil means backtraces will contain additional information indicating
when particular sections of the C code have been entered, e.g. redisplay(),
byte-char conversion, internal-external conversion, etc.  This can be
particularly useful when XEmacs crashes, in helping to pinpoint the problem.Seval.c
Vdebugger
Function to call to invoke debugger.
If due to frame exit, args are `exit' and the value being returned;
 this function's value will be returned instead of that.
If due to error, args are `error' and a list of the args to `signal'.
If due to `apply' or `funcall' entry, one arg, `lambda'.
If due to `eval' entry, one arg, t.Seval.c
Vmultiple-values-limit
The exclusive upper bound on the number of multiple values. 

This applies to `values', `values-list', `multiple-value-bind' and related
macros and special operators.Seval.c
Vmacro-declaration-function
Function to process declarations in a macro definition.
The function will be called with two args MACRO and DECL.
MACRO is the name of the macro being defined.
DECL is a list `(declare ...)' containing the declarations.
The value the function returns is not used.Seval.c
Vbyte-compile-macro-environment
Alist of macros defined in the file being compiled.
Each element looks like (MACRONAME . DEFINITION).  It is
(MACRONAME . nil) when a macro is redefined as a function.

You should normally access this using the &environment argument to
#'macrolet, #'defmacro* and friends, and not directly; see the documentation
of those macros.Sevents.c
Fmake-event
Return a new event of type TYPE, with properties described by PLIST.

TYPE is a symbol, either `empty', `key-press', `button-press',
 `button-release', `misc-user' or `motion'.  If TYPE is nil, it
 defaults to `empty'.

PLIST is a property list, the properties being compatible to those
 returned by `event-properties'.  The following properties are
 allowed:

 channel	-- The event channel, a frame or a console.  For
		   button-press, button-release, misc-user and motion events,
		   this must be a frame.  For key-press events, it must be
                   a console.  If channel is unspecified, it will be set to
                   the selected frame or selected console, as appropriate.
 key		-- The event key, a symbol or character.  Allowed only for
		   keypress events.
 button		-- The event button, integer 1, 2 or 3.  Allowed for
		   button-press, button-release and misc-user events.
 modifiers	-- The event modifiers, a list of modifier symbols.  Allowed
		   for key-press, button-press, button-release, motion and
		   misc-user events.
 function       -- Function. Allowed for misc-user events only.
 object         -- An object, function's parameter. Allowed for misc-user
                   events only.
 x		-- The event X coordinate, an integer.  This is relative
		   to the left of CHANNEL's root window.  Allowed for
		   motion, button-press, button-release and misc-user events.
 y		-- The event Y coordinate, an integer.  This is relative
		   to the top of CHANNEL's root window.  Allowed for
		   motion, button-press, button-release and misc-user events.
 timestamp	-- The event timestamp, a non-negative integer.  Allowed for
		   all types of events.  If unspecified, it will be set to 0
		   by default.

For event type `empty', PLIST must be nil.
 `button-release', or `motion'.  If TYPE is left out, it defaults to
 `empty'.
PLIST is a list of properties, as returned by `event-properties'.  Not
 all properties are allowed for all kinds of events, and some are
 required.

WARNING: the event object returned may be a reused one; see the function
 `deallocate-event'.

arguments: (&optional TYPE PLIST)
Sevents.c
Fdeallocate-event
Allow the given event structure to be reused.
You MUST NOT use this event object after calling this function with it.
You will lose.  It is not necessary to call this function, as event
objects are garbage-collected like all other objects; however, it may
be more efficient to explicitly deallocate events when you are sure
that it is safe to do so.

arguments: (EVENT)
Sevents.c
Fcopy-event
Make a copy of the event object EVENT1.
If a second event argument EVENT2 is given, EVENT1 is copied into
EVENT2 and EVENT2 is returned.  If EVENT2 is not supplied (or is nil)
then a new event will be made as with `make-event'.  See also the
function `deallocate-event'.

arguments: (EVENT1 &optional EVENT2)
Sevents.c
Fevent-to-character
Return the closest character approximation to the given event object.
If the event isn't a keypress, this returns nil.
If the ALLOW-EXTRA-MODIFIERS argument is non-nil, then this is lenient in
 its translation; it will ignore modifier keys other than control and meta,
 and will ignore the shift modifier on those characters which have no
 shifted ASCII equivalent (Control-Shift-A for example, will be mapped to
 the same ASCII code as Control-A).
If the ALLOW-META argument is non-nil, then the Meta modifier will be
 represented by turning on the high bit of the byte returned; otherwise, nil
 will be returned for events containing the Meta modifier.
Note that ALLOW-META may cause ambiguity between meta characters and
 Latin-1 characters.
ALLOW-NON-ASCII is unused, and retained for compatibility. 

arguments: (EVENT &optional ALLOW-EXTRA-MODIFIERS ALLOW-META ALLOW-NON-ASCII)
Sevents.c
Fcharacter-to-event
Convert KEY-DESCRIPTION into an event structure, replete with bucky bits.

KEY-DESCRIPTION is the first argument, and the event to fill in is the
second.  This function contains knowledge about what various kinds of
arguments ``mean'' -- for example, the number 9 is converted to the
character ``Tab'', not the distinct character ``Control-I''.

KEY-DESCRIPTION can be an integer, a character, a symbol such as `clear',
or a list such as '(control backspace).

If the optional second argument EVENT is an event, it is modified and
returned; otherwise, a new event object is created and returned.

Optional third arg CONSOLE is the console to store in the event, and
defaults to the selected console.

If KEY-DESCRIPTION is an integer or character, the high bit may be
interpreted as the meta key. (This is done for backward compatibility in
lots of places -- specifically, because lots of Lisp code uses specs like
?M-d and "M-d" in key code, expecting this to work; yet these are in
reality converted directly to 8-bit characters by the Lisp reader.)  If
USE-CONSOLE-META-FLAG is nil or CONSOLE is not a TTY, this will always be
the case.  If USE-CONSOLE-META-FLAG is non-nil and CONSOLE is a TTY, the
`meta' flag for CONSOLE affects whether the high bit is interpreted as a
meta key. (See `set-input-mode'.)  Don't set this flag to non-nil unless
you know what you're doing (more specifically, only if the character came
directly from a TTY, not from the user).  If you don't want this silly meta
interpretation done, you should pass in a list containing the character.

Beware that character-to-event and event-to-character are not strictly
inverse functions, since events contain much more information than the
Lisp character object type can encode.

arguments: (KEYSTROKE &optional EVENT CONSOLE USE-CONSOLE-META-FLAG)
Sevents.c
Feventp
True if OBJECT is an event object.

arguments: (OBJECT)
Sevents.c
Fevent-live-p
True if OBJECT is an event object that has not been deallocated.

arguments: (OBJECT)
Sevents.c
Fevent-next
Return the event object's `next' event, or nil if it has none.
The `next-event' field is changed by calling `set-next-event'.

arguments: (EVENT)
Sevents.c
Fset-event-next
Set the `next event' of EVENT to NEXT-EVENT.
NEXT-EVENT must be an event object or nil.

arguments: (EVENT NEXT-EVENT)
Sevents.c
Fevent-type
Return the type of EVENT.
This will be a symbol; one of

key-press	A key was pressed.
button-press	A mouse button was pressed.
button-release	A mouse button was released.
misc-user	Some other user action happened; typically, this is
		a menu selection or scrollbar action.
motion		The mouse moved.
process		Input is available from a subprocess.
timeout		A timeout has expired.
eval		This causes a specified action to occur when dispatched.
magic		Some window-system-specific event has occurred.
empty		The event has been allocated but not assigned.


arguments: (EVENT)
Sevents.c
Fevent-timestamp
Return the timestamp of the event object EVENT.
Timestamps are measured in milliseconds since the start of the window system.
They are NOT related to any current time measurement.
They should be compared with `event-timestamp<'.
See also `current-event-timestamp'.

arguments: (EVENT)
Sevents.c
Fevent-timestamp<
Return true if timestamp TIME1 is earlier than timestamp TIME2.
This correctly handles timestamp wrap.
See also `event-timestamp' and `current-event-timestamp'.

arguments: (TIME1 TIME2)
Sevents.c
Fevent-key
Return the Keysym of the key-press event EVENT.
This will be a character if the event is associated with one, else a symbol.

arguments: (EVENT)
Sevents.c
Fevent-button
Return the button-number of the button-press or button-release event EVENT.

arguments: (EVENT)
Sevents.c
Fevent-modifier-bits
Return a number representing the modifier keys and buttons which were down
when the given mouse or keyboard event was produced.
See also the function `event-modifiers'.

arguments: (EVENT)
Sevents.c
Fevent-modifiers
Return a list of symbols, the names of the modifier keys and buttons
which were down when the given mouse or keyboard event was produced.
See also the function `event-modifier-bits'.

The possible symbols in the list are

`shift':     The Shift key.  Will not appear, in general, on key events
             where the keysym is an ASCII character, because using Shift
             on such a character converts it into another character rather
             than actually just adding a Shift modifier.

`control':   The Control key.

`meta':      The Meta key.  On PC's and PC-style keyboards, this is generally
             labelled "Alt"; Meta is a holdover from early Lisp Machines and
             such, propagated through the X Window System.  On Sun keyboards,
             this key is labelled with a diamond.

`alt':       The "Alt" key.  Alt is in quotes because this does not refer
             to what it obviously should refer to, namely the Alt key on PC
             keyboards.  Instead, it refers to the key labelled Alt on Sun
             keyboards, and to no key at all on PC keyboards.

`super':     The Super key.  Most keyboards don't have any such key, but
             under X Windows using `xmodmap' you can assign any key (such as
             an underused right-shift, right-control, or right-alt key) to
             this key modifier.  No support currently exists under MS Windows
             for generating these modifiers.

`hyper':     The Hyper key.  Works just like the Super key.

`button1':   The mouse buttons.  This means that the specified button was held
`button2':   down at the time the event occurred.  NOTE: For button-press
`button3':   events, the button that was just pressed down does NOT appear in
`button4':   the modifiers.
`button5':

Button modifiers are currently ignored when defining and looking up key and
mouse strokes in keymaps.  This could be changed, which would allow a user to
create button-chord actions, use a button as a key modifier and do other
clever things.

arguments: (EVENT)
Sevents.c
Fevent-window-x-pixel
Return the X position in pixels of mouse event EVENT.
The value returned is relative to the window the event occurred in.
This will signal an error if the event is not a mouse event.
See also `mouse-event-p' and `event-x-pixel'.

arguments: (EVENT)
Sevents.c
Fevent-window-y-pixel
Return the Y position in pixels of mouse event EVENT.
The value returned is relative to the window the event occurred in.
This will signal an error if the event is not a mouse event.
See also `mouse-event-p' and `event-y-pixel'.

arguments: (EVENT)
Sevents.c
Fevent-x-pixel
Return the X position in pixels of mouse event EVENT.
The value returned is relative to the frame the event occurred in.
This will signal an error if the event is not a mouse event.
See also `mouse-event-p' and `event-window-x-pixel'.

arguments: (EVENT)
Sevents.c
Fevent-y-pixel
Return the Y position in pixels of mouse event EVENT.
The value returned is relative to the frame the event occurred in.
This will signal an error if the event is not a mouse event.
See also `mouse-event-p' `event-window-y-pixel'.

arguments: (EVENT)
Sevents.c
Fevent-over-text-area-p
Return t if the mouse event EVENT occurred over the text area of a window.
The modeline is not considered to be part of the text area.

arguments: (EVENT)
Sevents.c
Fevent-over-modeline-p
Return t if the mouse event EVENT occurred over the modeline of a window.

arguments: (EVENT)
Sevents.c
Fevent-over-border-p
Return t if the mouse event EVENT occurred over an internal border.

arguments: (EVENT)
Sevents.c
Fevent-over-toolbar-p
Return t if the mouse event EVENT occurred over a toolbar.

arguments: (EVENT)
Sevents.c
Fevent-over-vertical-divider-p
Return t if the mouse event EVENT occurred over a window divider.

arguments: (EVENT)
Sevents.c
Fevent-channel
Return the channel that the event EVENT occurred on.
This will be a frame, device, console, or nil for some types
of events (e.g. eval events).

arguments: (EVENT)
Sevents.c
Fevent-window
Return the window over which mouse event EVENT occurred.
This may be nil if the event occurred in the border or over a toolbar.
The modeline is considered to be within the window it describes.

arguments: (EVENT)
Sevents.c
Fevent-point
Return the character position of the mouse event EVENT.
If the event did not occur over a window, or did not occur over text,
then this returns nil.  Otherwise, it returns a position in the buffer
visible in the event's window.

arguments: (EVENT)
Sevents.c
Fevent-closest-point
Return the character position closest to the mouse event EVENT.
If the event did not occur over a window or over text, return the
closest point to the location of the event.  If the Y pixel position
overlaps a window and the X pixel position is to the left of that
window, the closest point is the beginning of the line containing the
Y position.  If the Y pixel position overlaps a window and the X pixel
position is to the right of that window, the closest point is the end
of the line containing the Y position.  If the Y pixel position is
above a window, return 0.  If it is below the last character in a window,
return the value of (window-end).

arguments: (EVENT)
Sevents.c
Fevent-x
Return the X position of the mouse event EVENT in characters.
This is relative to the window the event occurred over.

arguments: (EVENT)
Sevents.c
Fevent-y
Return the Y position of the mouse event EVENT in characters.
This is relative to the window the event occurred over.

arguments: (EVENT)
Sevents.c
Fevent-modeline-position
Return the character position in the modeline that EVENT occurred over.
EVENT should be a mouse event.  If EVENT did not occur over a modeline,
nil is returned.  You can determine the actual character that the
event occurred over by looking in `generated-modeline-string' at the
returned character position.  Note that `generated-modeline-string'
is buffer-local, and you must use EVENT's buffer when retrieving
`generated-modeline-string' in order to get accurate results.

arguments: (EVENT)
Sevents.c
Fevent-glyph
Return the glyph that the mouse event EVENT occurred over, or nil.

arguments: (EVENT)
Sevents.c
Fevent-glyph-extent
Return the extent of the glyph that the mouse event EVENT occurred over.
If the event did not occur over a glyph, nil is returned.

arguments: (EVENT)
Sevents.c
Fevent-glyph-x-pixel
Return the X pixel position of EVENT relative to the glyph it occurred over.
EVENT should be a mouse event.  If the event did not occur over a glyph,
nil is returned.

arguments: (EVENT)
Sevents.c
Fevent-glyph-y-pixel
Return the Y pixel position of EVENT relative to the glyph it occurred over.
EVENT should be a mouse event.  If the event did not occur over a glyph,
nil is returned.

arguments: (EVENT)
Sevents.c
Fevent-toolbar-button
Return the toolbar button that the mouse event EVENT occurred over.
If the event did not occur over a toolbar button, nil is returned.

arguments: (EVENT)
Sevents.c
Fevent-process
Return the process of the process-output event EVENT.

arguments: (EVENT)
Sevents.c
Fevent-function
Return the callback function of EVENT.
EVENT should be a timeout, misc-user, or eval event.

arguments: (EVENT)
Sevents.c
Fevent-object
Return the callback function argument of EVENT.
EVENT should be a timeout, misc-user, or eval event.

arguments: (EVENT)
Sevents.c
Fevent-properties
Return a list of all of the properties of EVENT.
This is in the form of a property list (alternating keyword/value pairs).

arguments: (EVENT)
Sevent-stream.c
Fadd-timeout
Add a timeout, to be signaled after the timeout period has elapsed.
SECS is a number of seconds, expressed as an integer or a float.
FUNCTION will be called after that many seconds have elapsed, with one
argument, the given OBJECT.  If the optional RESIGNAL argument is provided,
then after this timeout expires, `add-timeout' will automatically be called
again with RESIGNAL as the first argument.

This function returns an object which is the id number of this particular
timeout.  You can pass that object to `disable-timeout' to turn off the
timeout before it has been signalled.

NOTE: Id numbers as returned by this function are in a distinct namespace
from those returned by `add-async-timeout'.  This means that the same id
number could refer to a pending synchronous timeout and a different pending
asynchronous timeout, and that you cannot pass an id from `add-timeout'
to `disable-async-timeout', or vice-versa.

The number of seconds may be expressed as a floating-point number, in which
case some fractional part of a second will be used.  Caveat: the usable
timeout granularity will vary from system to system.

Adding a timeout causes a timeout event to be returned by `next-event', and
the function will be invoked by `dispatch-event,' so if emacs is in a tight
loop, the function will not be invoked until the next call to sit-for or
until the return to top-level (the same is true of process filters).

If you need to have a timeout executed even when XEmacs is in the midst of
running Lisp code, use `add-async-timeout'.

WARNING: if you are thinking of calling add-timeout from inside of a
callback function as a way of resignalling a timeout, think again.  There
is a race condition.  That's why the RESIGNAL argument exists.

arguments: (SECS FUNCTION OBJECT &optional RESIGNAL)
Sevent-stream.c
Fdisable-timeout
Disable a timeout from signalling any more.
ID should be a timeout id number as returned by `add-timeout'.  If ID
corresponds to a one-shot timeout that has already signalled, nothing
will happen.

It will not work to call this function on an id number returned by
`add-async-timeout'.  Use `disable-async-timeout' for that.

arguments: (ID)
Sevent-stream.c
Fadd-async-timeout
Add an asynchronous timeout, to be signaled after an interval has elapsed.
SECS is a number of seconds, expressed as an integer or a float.
FUNCTION will be called after that many seconds have elapsed, with one
argument, the given OBJECT.  If the optional RESIGNAL argument is provided,
then after this timeout expires, `add-async-timeout' will automatically be
called again with RESIGNAL as the first argument.

This function returns an object which is the id number of this particular
timeout.  You can pass that object to `disable-async-timeout' to turn off
the timeout before it has been signalled.

NOTE: Id numbers as returned by this function are in a distinct namespace
from those returned by `add-timeout'.  This means that the same id number
could refer to a pending synchronous timeout and a different pending
asynchronous timeout, and that you cannot pass an id from
`add-async-timeout' to `disable-timeout', or vice-versa.

The number of seconds may be expressed as a floating-point number, in which
case some fractional part of a second will be used.  Caveat: the usable
timeout granularity will vary from system to system.

Adding an asynchronous timeout causes the function to be invoked as soon
as the timeout occurs, even if XEmacs is in the midst of executing some
other code. (This is unlike the synchronous timeouts added with
`add-timeout', where the timeout will only be signalled when XEmacs is
waiting for events, i.e. the next return to top-level or invocation of
`sit-for' or related functions.) This means that the function that is
called *must* not signal an error or change any global state (e.g. switch
buffers or windows) except when locking code is in place to make sure
that race conditions don't occur in the interaction between the
asynchronous timeout function and other code.

Under most circumstances, you should use `add-timeout' instead, as it is
much safer.  Asynchronous timeouts should only be used when such behavior
is really necessary.

Asynchronous timeouts are blocked and will not occur when `inhibit-quit'
is non-nil.  As soon as `inhibit-quit' becomes nil again, any pending
asynchronous timeouts will get called immediately. (Multiple occurrences
of the same asynchronous timeout are not queued, however.) While the
callback function of an asynchronous timeout is invoked, `inhibit-quit'
is automatically bound to non-nil, and thus other asynchronous timeouts
will be blocked unless the callback function explicitly sets `inhibit-quit'
to nil.

WARNING: if you are thinking of calling `add-async-timeout' from inside of a
callback function as a way of resignalling a timeout, think again.  There
is a race condition.  That's why the RESIGNAL argument exists.

arguments: (SECS FUNCTION OBJECT &optional RESIGNAL)
Sevent-stream.c
Fdisable-async-timeout
Disable an asynchronous timeout from signalling any more.
ID should be a timeout id number as returned by `add-async-timeout'.  If ID
corresponds to a one-shot timeout that has already signalled, nothing
will happen.

It will not work to call this function on an id number returned by
`add-timeout'.  Use `disable-timeout' for that.

arguments: (ID)
Sevent-stream.c
Fenqueue-eval-event
Add an eval event to the back of the eval event queue.
When this event is dispatched, FUNCTION (which should be a function
of one argument) will be called with OBJECT as its argument.
See `next-event' for a description of event types and how events
are received.

arguments: (FUNCTION OBJECT)
Sevent-stream.c
Finput-pending-p
Return t if command input is currently available with no waiting.
Actually, the value is nil only if we can be sure that no input is available.

arguments: ()
Sevent-stream.c
Fnext-event
Return the next available event.
Pass this object to `dispatch-event' to handle it.
In most cases, you will want to use `next-command-event', which returns
the next available "user" event (i.e. keypress, button-press,
button-release, or menu selection) instead of this function.

If EVENT is non-nil, it should be an event object and will be filled in
and returned; otherwise a new event object will be created and returned.
If PROMPT is non-nil, it should be a string and will be displayed in the
echo area while this function is waiting for an event.

The next available event will be

-- any events in `unread-command-events' or `unread-command-event'; else
-- the next event in the currently executing keyboard macro, if any; else
-- an event queued by `enqueue-eval-event', if any, or any similar event
   queued internally, such as a misc-user event. (For example, when an item
   is selected from a menu or from a `question'-type dialog box, the item's
   callback is not immediately executed, but instead a misc-user event
   is generated and placed onto this queue; when it is dispatched, the
   callback is executed.) Else
-- the next available event from the window system or terminal driver.

In the last case, this function will block until an event is available.

The returned event will be one of the following types:

-- a key-press event.
-- a button-press or button-release event.
-- a misc-user-event, meaning the user selected an item on a menu or used
   the scrollbar.
-- a process event, meaning that output from a subprocess is available.
-- a timeout event, meaning that a timeout has elapsed.
-- an eval event, which simply causes a function to be executed when the
   event is dispatched.  Eval events are generated by `enqueue-eval-event'
   or by certain other conditions happening.
-- a magic event, indicating that some window-system-specific event
   happened (such as a focus-change notification) that must be handled
   synchronously with other events.  `dispatch-event' knows what to do with
   these events.

arguments: (&optional EVENT PROMPT)
Sevent-stream.c
Fnext-command-event
Return the next available "user" event.
Pass this object to `dispatch-event' to handle it.

If EVENT is non-nil, it should be an event object and will be filled in
and returned; otherwise a new event object will be created and returned.
If PROMPT is non-nil, it should be a string and will be displayed in the
echo area while this function is waiting for an event.

The event returned will be a keyboard, mouse press, or mouse release event.
If there are non-command events available (mouse motion, sub-process output,
etc) then these will be executed (with `dispatch-event') and discarded.  This
function is provided as a convenience; it is roughly equivalent to the lisp code

	(while (progn
		 (next-event event prompt)
	         (not (or (key-press-event-p event)
	                  (button-press-event-p event)
	                  (button-release-event-p event)
	                  (misc-user-event-p event))))
	   (dispatch-event event))

but it also makes a provision for displaying keystrokes in the echo area.

arguments: (&optional EVENT PROMPT)
Sevent-stream.c
Fdispatch-non-command-events
Dispatch any pending "magic" events.

This function is useful for forcing the redisplay of native
widgets. Normally these are redisplayed through a native window-system
event encoded as magic event, rather than by the redisplay code.  This
function does not call redisplay or do any of the other things that
`next-event' does.

arguments: ()
Sevent-stream.c
Fdiscard-input
Discard any pending "user" events.
Also cancel any kbd macro being defined.
A user event is a key press, button press, button release, or
"misc-user" event (menu selection or scrollbar action).

arguments: ()
Sevent-stream.c
Faccept-process-output
Allow any pending output from subprocesses to be read by Emacs.
It is read into the process' buffers or given to their filter functions.
Non-nil arg PROCESS means do not return until some output has been received
 from PROCESS. Nil arg PROCESS means do not return until some output has
 been received from any process.
If the second arg is non-nil, it is the maximum number of seconds to wait:
 this function will return after that much time even if no input has arrived
 from PROCESS.  This argument may be a float, meaning wait some fractional
 part of a second.
If the third arg is non-nil, it is a number of milliseconds that is added
 to the second arg.  (This exists only for compatibility.)
Return non-nil iff we received any output before the timeout expired.

arguments: (&optional PROCESS TIMEOUT-SECS TIMEOUT-MSECS)
Sevent-stream.c
Fsleep-for
Pause, without updating display, for SECONDS seconds.
SECONDS may be a float, allowing pauses for fractional parts of a second.

It is recommended that you never call sleep-for from inside of a process
filter function or timer event (either synchronous or asynchronous).

arguments: (SECONDS)
Sevent-stream.c
Fsit-for
Perform redisplay, then wait SECONDS seconds or until user input is available.
SECONDS may be a float, meaning a fractional part of a second.
Optional second arg NODISPLAY non-nil means don't redisplay; just wait.
Redisplay is preempted as always if user input arrives, and does not
 happen if input is available before it starts.
Value is t if waited the full time with no input arriving.

If sit-for is called from within a process filter function or timer
 event (either synchronous or asynchronous) it will return immediately.

arguments: (SECONDS &optional NODISPLAY)
Sevent-stream.c
Frecent-keys
Return a vector of recent keyboard or mouse button events read.
If NUMBER is non-nil, not more than NUMBER events will be returned.
Change number of events stored using `set-recent-keys-ring-size'.

This copies the event objects into a new vector; it is safe to keep and
modify them.

arguments: (&optional NUMBER)
Sevent-stream.c
Frecent-keys-ring-size
The maximum number of events `recent-keys' can return.

arguments: ()
Sevent-stream.c
Fset-recent-keys-ring-size
Set the maximum number of events to be stored internally.

arguments: (SIZE)
Sevent-stream.c
Fdispatch-event
Given an event object EVENT as returned by `next-event', execute it.

Key-press, button-press, and button-release events get accumulated
until a complete key sequence (see `read-key-sequence') is reached,
at which point the sequence is looked up in the current keymaps and
acted upon.

Mouse motion events cause the low-level handling function stored in
`mouse-motion-handler' to be called. (There are very few circumstances
under which you should change this handler.  Use `mode-motion-hook'
instead.)

Menu, timeout, and eval events cause the associated function or handler
to be called.

Process events cause the subprocess's output to be read and acted upon
appropriately (see `start-process').

Magic events are handled as necessary.

arguments: (EVENT)
Sevent-stream.c
Fread-key-sequence
Read a sequence of keystrokes or mouse clicks.
Returns a vector of the event objects read.  The vector and the event
objects it contains are freshly created (and so will not be side-effected
by subsequent calls to this function).

The sequence read is sufficient to specify a non-prefix command starting
from the current local and global keymaps.  A C-g typed while in this
function is treated like any other character, and `quit-flag' is not set.

First arg PROMPT is a prompt string.  If nil, do not prompt specially.

Second optional arg CONTINUE-ECHO non-nil means this key echoes as a
continuation of the previous key.

Third optional arg DONT-DOWNCASE-LAST non-nil means do not convert the
last event to lower case.  (Normally any upper case event is converted
to lower case if the original event is undefined and the lower case
equivalent is defined.) This argument is provided mostly for FSF
compatibility; the equivalent effect can be achieved more generally by
binding `retry-undefined-key-binding-unshifted' to nil around the call
to `read-key-sequence'.

If the user selects a menu item while we are prompting for a key-sequence,
the returned value will be a vector of a single menu-selection event.
An error will be signalled if you pass this value to `lookup-key' or a
related function.

`read-key-sequence' checks `function-key-map' for function key
sequences, where they wouldn't conflict with ordinary bindings.
See `function-key-map' for more details.

arguments: (PROMPT &optional CONTINUE-ECHO DONT-DOWNCASE-LAST)
Sevent-stream.c
Fthis-command-keys
Return a vector of the keyboard or mouse button events that were used
to invoke this command.  This copies the vector and the events; it is safe
to keep and modify them.

arguments: ()
Sevent-stream.c
Freset-this-command-lengths
Used for complicated reasons in `universal-argument-other-key'.

`universal-argument-other-key' rereads the event just typed.
It then gets translated through `function-key-map'.
The translated event gets included in the echo area and in
the value of `this-command-keys' in addition to the raw original event.
That is not right.

Calling this function directs the translated event to replace
the original event, so that only one version of the event actually
appears in the echo area and in the value of `this-command-keys'.

arguments: ()
Sevent-stream.c
Fopen-dribble-file
Start writing all keyboard characters to a dribble file called FILENAME.
If FILENAME is nil, close any open dribble file.

arguments: (FILENAME)
Sevent-stream.c
Fcurrent-event-timestamp
Return the current event timestamp of the window system associated with CONSOLE.
CONSOLE defaults to the selected console if omitted.

arguments: (&optional CONSOLE)
Sevent-stream.c
Vecho-keystrokes
*Nonzero means echo unfinished commands after this many seconds of pause.Sevent-stream.c
Vauto-save-interval
*Number of keyboard input characters between auto-saves.
Zero means disable autosaving due to number of characters typed.
See also the variable `auto-save-timeout'.Sevent-stream.c
Vpre-command-hook
Function or functions to run before every command.
This may examine the `this-command' variable to find out what command
is about to be run, or may change it to cause a different command to run.
Errors while running the hook are caught and turned into warnings.Sevent-stream.c
Vpost-command-hook
Function or functions to run after every command.
This may examine the `this-command' variable to find out what command
was just executed.Sevent-stream.c
Vpre-idle-hook
Normal hook run when XEmacs it about to be idle.
This occurs whenever it is going to block, waiting for an event.
This generally happens as a result of a call to `next-event',
`next-command-event', `sit-for', `sleep-for', `accept-process-output',
or `get-selection'.  Errors while running the hook are caught and
turned into warnings.Sevent-stream.c
Vfocus-follows-mouse
*Variable to control XEmacs behavior with respect to focus changing.
If this variable is set to t, then XEmacs will not gratuitously change
the keyboard focus.  XEmacs cannot in general detect when this mode is
used by the window manager, so it is up to the user to set it.Sevent-stream.c
Vlast-command-event
Last keyboard or mouse button event that was part of a command.  This
variable is off limits: you may not set its value or modify the event that
is its value, as it is destructively modified by `read-key-sequence'.  If
you want to keep a pointer to this value, you must use `copy-event'.Sevent-stream.c
Vlast-command-char
If the value of `last-command-event' is a keyboard event, then
this is the nearest ASCII equivalent to it.  This is the value that
`self-insert-command' will put in the buffer.  Remember that there is
NOT a 1:1 mapping between keyboard events and ASCII characters: the set
of keyboard events is much larger, so writing code that examines this
variable to determine what key has been typed is bad practice, unless
you are certain that it will be one of a small set of characters.Sevent-stream.c
Vlast-input-event
Last keyboard or mouse button event received.  This variable is off
limits: you may not set its value or modify the event that is its value, as
it is destructively modified by `next-event'.  If you want to keep a pointer
to this value, you must use `copy-event'.Sevent-stream.c
Vcurrent-mouse-event
The mouse-button event which invoked this command, or nil.
This is usually what `(interactive "e")' returns.Sevent-stream.c
Vlast-input-char
If the value of `last-input-event' is a keyboard event, then
this is the nearest ASCII equivalent to it.  Remember that there is
NOT a 1:1 mapping between keyboard events and ASCII characters: the set
of keyboard events is much larger, so writing code that examines this
variable to determine what key has been typed is bad practice, unless
you are certain that it will be one of a small set of characters.Sevent-stream.c
Vlast-input-time
The time (in seconds since Jan 1, 1970) of the last-command-event,
represented as a cons of two 16-bit integers.  This is destructively
modified, so copy it if you want to keep it.Sevent-stream.c
Vlast-command-event-time
The time (in seconds since Jan 1, 1970) of the last-command-event,
represented as a list of three integers.  The first integer contains
the most significant 16 bits of the number of seconds, and the second
integer contains the least significant 16 bits.  The third integer
contains the remainder number of microseconds, if the current system
supports microsecond clock resolution.  This list is destructively
modified, so copy it if you want to keep it.Sevent-stream.c
Vunread-command-events
List of event objects to be read as next command input events.
This can be used to simulate the receipt of events from the user.
Normally this is nil.
Events are removed from the front of this list.Sevent-stream.c
Vunread-command-event
Obsolete.  Use `unread-command-events' instead.Sevent-stream.c
Vlast-command
The last command executed.  Normally a symbol with a function definition,
but can be whatever was found in the keymap, or whatever the variable
`this-command' was set to by that command.Sevent-stream.c
Vthis-command
The command now being executed.
The command can set this variable; whatever is put here
will be in `last-command' during the following command.Sevent-stream.c
Vlast-command-properties
Value of `this-command-properties' for the last command.
Used by commands to help synchronize consecutive commands, in preference
to looking at `last-command' directly.Sevent-stream.c
Vthis-command-properties
Properties set by the current command.
At the beginning of each command, the current value of this variable is
copied to `last-command-properties', and then it is set to nil.  Use `putf'
to add properties to this variable.  Commands should use this to communicate
with pre/post-command hooks, subsequent commands, wrapping commands, etc.
in preference to looking at and/or setting `this-command'.Sevent-stream.c
Vhelp-char
Character to recognize as meaning Help.
When it is read, do `(eval help-form)', and display result if it's a string.
If the value of `help-form' is nil, this char can be read normally.
This can be any form recognized as a single key specifier.
The help-char cannot be a negative number in XEmacs.Sevent-stream.c
Vhelp-form
Form to execute when character help-char is read.
If the form returns a string, that string is displayed.
If `help-form' is nil, the help char is not recognized.Sevent-stream.c
Vprefix-help-command
Command to run when `help-char' character follows a prefix key.
This command is used only when there is no actual binding
for that character after that prefix key.Sevent-stream.c
Vkeyboard-translate-table
Hash table used as translate table for keyboard input.
Use `keyboard-translate' to portably add entries to this table.
Each key-press event is looked up in this table as follows:

-- If an entry maps a symbol to a symbol, then a key-press event whose
   keysym is the former symbol (with any modifiers at all) gets its
   keysym changed and its modifiers left alone.  This is useful for
   dealing with non-standard X keyboards, such as the grievous damage
   that Sun has inflicted upon the world.
-- If an entry maps a symbol to a character, then a key-press event
   whose keysym is the former symbol (with any modifiers at all) gets
   changed into a key-press event matching the latter character, and the
   resulting modifiers are the union of the original and new modifiers.
-- If an entry maps a character to a character, then a key-press event
   matching the former character gets converted to a key-press event
   matching the latter character.  This is useful on ASCII terminals
   for (e.g.) making C-\ look like C-s, to get around flow-control
   problems.
-- If an entry maps a character to a symbol, then a key-press event
   matching the character gets converted to a key-press event whose
   keysym is the given symbol and which has no modifiers.

Here's an example: This makes typing parens and braces easier by rerouting
their positions to eliminate the need to use the Shift key.

  (keyboard-translate ?[ ?()
  (keyboard-translate ?] ?))
  (keyboard-translate ?{ ?[)
  (keyboard-translate ?} ?])
  (keyboard-translate 'f11 ?{)
  (keyboard-translate 'f12 ?})Sevent-stream.c
Vretry-undefined-key-binding-unshifted
If a key-sequence which ends with a shifted keystroke is undefined
and this variable is non-nil then the command lookup is retried again
with the last key unshifted.  (e.g. C-X C-F would be retried as C-X C-f.)
If lookup still fails, a normal error is signalled.  In general,
you should *bind* this, not set it.Sevent-stream.c
Vmodifier-keys-are-sticky
*Non-nil makes modifier keys sticky.
This means that you can release the modifier key before pressing down
the key that you wish to be modified.  Although this is non-standard
behavior, it is recommended because it reduces the strain on your hand,
thus reducing the incidence of the dreaded Emacs-pinky syndrome.

Modifier keys are sticky within the inverval specified by
`modifier-keys-sticky-time'.Sevent-stream.c
Vmodifier-keys-sticky-time
*Modifier keys are sticky within this many milliseconds.
If you don't want modifier keys sticking to be bounded, set this to
non-integer value.

This variable has no effect when `modifier-keys-are-sticky' is nil.
Currently only implemented under X Window System.Sevent-stream.c
Vdebug-emacs-events
If non-zero, display debug information about Emacs events that XEmacs sees.
Information is displayed on stderr.

Before the event, the source of the event is displayed in parentheses,
and is one of the following:

(real)				A real event from the window system or
				terminal driver, as far as XEmacs can tell.

(keyboard macro)		An event generated from a keyboard macro.

(unread-command-events)	An event taken from `unread-command-events'.

(unread-command-event)		An event taken from `unread-command-event'.

(command event queue)		An event taken from an internal queue.
				Events end up on this queue when
				`enqueue-eval-event' is called or when
				user or eval events are received while
				XEmacs is blocking (e.g. in `sit-for',
				`sleep-for', or `accept-process-output',
				or while waiting for the reply to an
				X selection).

(->keyboard-translate-table)	The result of an event translated through
				keyboard-translate-table.  Note that in
				this case, two events are printed even
				though only one is really generated.

(SIGINT)			A faked C-g resulting when XEmacs receives
				a SIGINT (e.g. C-c was pressed in XEmacs'
				controlling terminal or the signal was
				explicitly sent to the XEmacs process).Sevent-stream.c
Vinhibit-input-event-recording
Non-nil inhibits recording of input-events to recent-keys ring.Sevent-stream.c
Vtry-alternate-layouts-for-commands
Non-nil means that if looking up a command from a sequence of keys typed by
the user would otherwise fail, try it again with some other keyboard
layout. On X11, the only alternative to the default mapping is American
QWERTY; on Windows, other mappings may be available, depending on things
like the default language environment for the current user, for the system,
&c.

With a Russian keyboard layout on X11, for example, this means that
C-Cyrillic_che C-Cyrillic_a, if you haven't given that sequence a binding
yourself, will invoke `find-file.' This is because `Cyrillic_che' is
physically where `x' is, and `Cyrillic_a' is where `f' is, on an American
Qwerty layout, and, of course, C-x C-f is a default emacs binding for that
command.Sextents.c
Fextentp
Return t if OBJECT is an extent.

arguments: (OBJECT)
Sextents.c
Fextent-live-p
Return t if OBJECT is an extent that has not been destroyed.

arguments: (OBJECT)
Sextents.c
Fextent-detached-p
Return t if EXTENT is detached.

arguments: (EXTENT)
Sextents.c
Fextent-object
Return object (buffer or string) that EXTENT refers to.

arguments: (EXTENT)
Sextents.c
Fextent-start-position
Return start position of EXTENT, or nil if EXTENT is detached.

arguments: (EXTENT)
Sextents.c
Fextent-end-position
Return end position of EXTENT, or nil if EXTENT is detached.

arguments: (EXTENT)
Sextents.c
Fextent-length
Return length of EXTENT in characters.

arguments: (EXTENT)
Sextents.c
Fnext-extent
Find next extent after EXTENT.
If EXTENT is a buffer return the first extent in the buffer; likewise
 for strings.
Extents in a buffer are ordered in what is called the "display"
 order, which sorts by increasing start positions and then by *decreasing*
 end positions.
If you want to perform an operation on a series of extents, use
 `map-extents' instead of this function; it is much more efficient.
 The primary use of this function should be to enumerate all the
 extents in a buffer.
Note: The display order is not necessarily the order that `map-extents'
 processes extents in!

arguments: (EXTENT)
Sextents.c
Fprevious-extent
Find last extent before EXTENT.
If EXTENT is a buffer return the last extent in the buffer; likewise
 for strings.
This function is analogous to `next-extent'.

arguments: (EXTENT)
Sextents.c
Fnext-e-extent
Find next extent after EXTENT using the "e" order.
If EXTENT is a buffer return the first extent in the buffer; likewise
 for strings.

arguments: (EXTENT)
Sextents.c
Fprevious-e-extent
Find last extent before EXTENT using the "e" order.
If EXTENT is a buffer return the last extent in the buffer; likewise
 for strings.
This function is analogous to `next-e-extent'.

arguments: (EXTENT)
Sextents.c
Fnext-extent-change
Return the next position after POS where an extent begins or ends.
If POS is at the end of the buffer or string, POS will be returned;
 otherwise a position greater than POS will always be returned.
If OBJECT is nil, the current buffer is assumed.

arguments: (POS &optional OBJECT)
Sextents.c
Fprevious-extent-change
Return the last position before POS where an extent begins or ends.
If POS is at the beginning of the buffer or string, POS will be returned;
 otherwise a position less than POS will always be returned.
If OBJECT is nil, the current buffer is assumed.

arguments: (POS &optional OBJECT)
Sextents.c
Fextent-parent
Return the parent (if any) of EXTENT.
If an extent has a parent, it derives all its properties from that extent
and has no properties of its own. (The only "properties" that the
extent keeps are the buffer/string it refers to and the start and end
points.) It is possible for an extent's parent to itself have a parent.

arguments: (EXTENT)
Sextents.c
Fextent-children
Return a list of the children (if any) of EXTENT.
The children of an extent are all those extents whose parent is that extent.
This function does not recursively trace children of children.
(To do that, use `extent-descendants'.)

arguments: (EXTENT)
Sextents.c
Fset-extent-parent
Set the parent of EXTENT to PARENT (may be nil).
See `extent-parent'.

arguments: (EXTENT PARENT)
Sextents.c
Fmake-extent
Make an extent for the range [FROM, TO) in BUFFER-OR-STRING.
BUFFER-OR-STRING defaults to the current buffer.  Insertions at point
TO will be outside of the extent; insertions at FROM will be inside the
extent, causing the extent to grow. (This is the same way that markers
behave.) You can change the behavior of insertions at the endpoints
using `set-extent-property'.  The extent is initially detached if both
FROM and TO are nil, and in this case BUFFER-OR-STRING defaults to nil,
meaning the extent is in no buffer and no string.

arguments: (FROM TO &optional BUFFER-OR-STRING)
Sextents.c
Fcopy-extent
Make a copy of EXTENT.  It is initially detached.
Optional argument BUFFER-OR-STRING defaults to EXTENT's buffer or string.

arguments: (EXTENT &optional BUFFER-OR-STRING)
Sextents.c
Fdelete-extent
Remove EXTENT from its buffer and destroy it.
This does not modify the buffer's text, only its display properties.
The extent cannot be used thereafter.

arguments: (EXTENT)
Sextents.c
Fdetach-extent
Remove EXTENT from its buffer in such a way that it can be re-inserted.
An extent is also detached when all of its characters are all killed by a
deletion, unless its `detachable' property has been unset.

Extents which have the `duplicable' attribute are tracked by the undo
mechanism.  Detachment via `detach-extent' and string deletion is recorded,
as is attachment via `insert-extent' and string insertion.  Extent motion,
face changes, and attachment via `make-extent' and `set-extent-endpoints'
are not recorded.  This means that extent changes which are to be undo-able
must be performed by character editing, or by insertion and detachment of
duplicable extents.

arguments: (EXTENT)
Sextents.c
Fset-extent-endpoints
Set the endpoints of EXTENT to START, END.
If START and END are null, call detach-extent on EXTENT.
BUFFER-OR-STRING specifies the new buffer or string that the extent should
be in, and defaults to EXTENT's buffer or string. (If nil, and EXTENT
is in no buffer and no string, it defaults to the current buffer.)
See documentation on `detach-extent' for a discussion of undo recording.

arguments: (EXTENT START END &optional BUFFER-OR-STRING)
Sextents.c
Fextent-in-region-p
Return whether EXTENT overlaps a specified region.
This is equivalent to whether `map-extents' would visit EXTENT when called
with these args.

arguments: (EXTENT &optional FROM TO FLAGS)
Sextents.c
Fmap-extents
Map FUNCTION over the extents which overlap a region in OBJECT.
OBJECT is normally a buffer or string but could be an extent (see below).
The region is normally bounded by [FROM, TO) (i.e. the beginning of the
region is closed and the end of the region is open), but this can be
changed with the FLAGS argument (see below for a complete discussion).

FUNCTION is called with the arguments (extent, MAPARG).  The arguments
OBJECT, FROM, TO, MAPARG, and FLAGS are all optional and default to
the current buffer, the beginning of OBJECT, the end of OBJECT, nil,
and nil, respectively.  `map-extents' returns the first non-nil result
produced by FUNCTION, and no more calls to FUNCTION are made after it
returns non-nil.

If OBJECT is an extent, FROM and TO default to the extent's endpoints,
and the mapping omits that extent and its predecessors.  This feature
supports restarting a loop based on `map-extents'.  Note: OBJECT must
be attached to a buffer or string, and the mapping is done over that
buffer or string.

An extent overlaps the region if there is any point in the extent that is
also in the region. (For the purpose of overlap, zero-length extents and
regions are treated as closed on both ends regardless of their endpoints'
specified open/closedness.) Note that the endpoints of an extent or region
are considered to be in that extent or region if and only if the
corresponding end is closed.  For example, the extent [5,7] overlaps the
region [2,5] because 5 is in both the extent and the region.  However, (5,7]
does not overlap [2,5] because 5 is not in the extent, and neither [5,7] nor
(5,7] overlaps the region [2,5) because 5 is not in the region.

The optional FLAGS can be a symbol or a list of one or more symbols,
modifying the behavior of `map-extents'.  Allowed symbols are:

end-closed		The region's end is closed.

start-open		The region's start is open.

all-extents-closed	Treat all extents as closed on both ends for the
			purpose of determining whether they overlap the
			region, irrespective of their actual open- or
			closedness.
all-extents-open	Treat all extents as open on both ends.
all-extents-closed-open	Treat all extents as start-closed, end-open.
all-extents-open-closed	Treat all extents as start-open, end-closed.

start-in-region		In addition to the above conditions for extent
			overlap, the extent's start position must lie within
			the specified region.  Note that, for this
			condition, open start positions are treated as if
			0.5 was added to the endpoint's value, and open
			end positions are treated as if 0.5 was subtracted
			from the endpoint's value.
end-in-region		The extent's end position must lie within the
			region.
start-and-end-in-region	Both the extent's start and end positions must lie
			within the region.
start-or-end-in-region	Either the extent's start or end position must lie
			within the region.

negate-in-region	The condition specified by a `*-in-region' flag
			must NOT hold for the extent to be considered.


At most one of `all-extents-closed', `all-extents-open',
`all-extents-closed-open', and `all-extents-open-closed' may be specified.

At most one of `start-in-region', `end-in-region',
`start-and-end-in-region', and `start-or-end-in-region' may be specified.

If optional arg PROPERTY is non-nil, only extents with that property set
on them will be visited.  If optional arg VALUE is non-nil, only extents
whose value for that property is `eq' to VALUE will be visited.

arguments: (FUNCTION &optional OBJECT FROM TO MAPARG FLAGS PROPERTY VALUE)
Sextents.c
Fmap-extent-children
Map FUNCTION over the extents in the region from FROM to TO.
FUNCTION is called with arguments (extent, MAPARG).  See `map-extents'
for a full discussion of the arguments FROM, TO, and FLAGS.

The arguments are the same as for `map-extents', but this function differs
in that it only visits extents which start in the given region, and also
in that, after visiting an extent E, it skips all other extents which start
inside E but end before E's end.

Thus, this function may be used to walk a tree of extents in a buffer:
	(defun walk-extents (buffer &optional ignore)
	 (map-extent-children 'walk-extents buffer))

arguments: (FUNCTION &optional OBJECT FROM TO MAPARG FLAGS PROPERTY VALUE)
Sextents.c
Fextent-at
Find "smallest" extent at POS in OBJECT having PROPERTY set.
Normally, an extent is "at" POS if it overlaps the region (POS, POS+1);
 i.e. if it covers the character after POS. (However, see the definition
 of AT-FLAG.) "Smallest" means the extent that comes last in the display
 order; this normally means the extent whose start position is closest to
 POS.  See `next-extent' for more information.
OBJECT specifies a buffer or string and defaults to the current buffer.
PROPERTY defaults to nil, meaning that any extent will do.
Properties are attached to extents with `set-extent-property', which see.
Returns nil if POS is invalid or there is no matching extent at POS.
If the fourth argument BEFORE is not nil, it must be an extent; any returned
 extent will precede that extent.  This feature allows `extent-at' to be
 used by a loop over extents.
AT-FLAG controls how end cases are handled, and should be one of:

nil or `after'		An extent is at POS if it covers the character
			after POS.  This is consistent with the way
			that text properties work.
`before'		An extent is at POS if it covers the character
			before POS.
`at'			An extent is at POS if it overlaps or abuts POS.
			This includes all zero-length extents at POS.

Note that in all cases, the start-openness and end-openness of the extents
considered is ignored.  If you want to pay attention to those properties,
you should use `map-extents', which gives you more control.

arguments: (POS &optional OBJECT PROPERTY BEFORE AT-FLAG)
Sextents.c
Fextents-at
Find all extents at POS in OBJECT having PROPERTY set.
Normally, an extent is "at" POS if it overlaps the region (POS, POS+1);
 i.e. if it covers the character after POS. (However, see the definition
 of AT-FLAG.)
This provides similar functionality to `extent-list', but does so in a way
 that is compatible with `extent-at'. (For example, errors due to POS out of
 range are ignored; this makes it safer to use this function in response to
 a mouse event, because in many cases previous events have changed the buffer
 contents.)
OBJECT specifies a buffer or string and defaults to the current buffer.
PROPERTY defaults to nil, meaning that any extent will do.
Properties are attached to extents with `set-extent-property', which see.
Returns nil if POS is invalid or there is no matching extent at POS.
If the fourth argument BEFORE is not nil, it must be an extent; any returned
 extent will precede that extent.  This feature allows `extents-at' to be
 used by a loop over extents.
AT-FLAG controls how end cases are handled, and should be one of:

nil or `after'		An extent is at POS if it covers the character
			after POS.  This is consistent with the way
			that text properties work.
`before'		An extent is at POS if it covers the character
			before POS.
`at'			An extent is at POS if it overlaps or abuts POS.
			This includes all zero-length extents at POS.

Note that in all cases, the start-openness and end-openness of the extents
considered is ignored.  If you want to pay attention to those properties,
you should use `map-extents', which gives you more control.

arguments: (POS &optional OBJECT PROPERTY BEFORE AT-FLAG)
Sextents.c
Fset-extent-initial-redisplay-function
Note: This feature is experimental!

Set initial-redisplay-function of EXTENT to the function
FUNCTION.

The first time the EXTENT is (re)displayed, an eval event will be
dispatched calling FUNCTION with EXTENT as its only argument.

arguments: (EXTENT FUNCTION)
Sextents.c
Fextent-face
Return the name of the face in which EXTENT is displayed, or nil
if the extent's face is unspecified.  This might also return a list
of face names.

arguments: (EXTENT)
Sextents.c
Fset-extent-face
Make the given EXTENT have the graphic attributes specified by FACE.
FACE can also be a list of faces, and all faces listed will apply,
with faces earlier in the list taking priority over those later in the
list.

arguments: (EXTENT FACE)
Sextents.c
Fextent-mouse-face
Return the face used to highlight EXTENT when the mouse passes over it.
The return value will be a face name, a list of face names, or nil
if the extent's mouse face is unspecified.

arguments: (EXTENT)
Sextents.c
Fset-extent-mouse-face
Set the face used to highlight EXTENT when the mouse passes over it.
FACE can also be a list of faces, and all faces listed will apply,
with faces earlier in the list taking priority over those later in the
list.

arguments: (EXTENT FACE)
Sextents.c
Fset-extent-begin-glyph
Display a bitmap, subwindow or string at the beginning of EXTENT.
BEGIN-GLYPH must be a glyph object.  The layout policy defaults to `text'.

arguments: (EXTENT BEGIN-GLYPH &optional LAYOUT)
Sextents.c
Fset-extent-end-glyph
Display a bitmap, subwindow or string at the end of EXTENT.
END-GLYPH must be a glyph object.  The layout policy defaults to `text'.

arguments: (EXTENT END-GLYPH &optional LAYOUT)
Sextents.c
Fextent-begin-glyph
Return the glyph object displayed at the beginning of EXTENT.
If there is none, nil is returned.

arguments: (EXTENT)
Sextents.c
Fextent-end-glyph
Return the glyph object displayed at the end of EXTENT.
If there is none, nil is returned.

arguments: (EXTENT)
Sextents.c
Fset-extent-begin-glyph-layout
Set the layout policy of EXTENT's begin glyph.
Access this using the `extent-begin-glyph-layout' function.

arguments: (EXTENT LAYOUT)
Sextents.c
Fset-extent-end-glyph-layout
Set the layout policy of EXTENT's end glyph.
Access this using the `extent-end-glyph-layout' function.

arguments: (EXTENT LAYOUT)
Sextents.c
Fextent-begin-glyph-layout
Return the layout policy associated with EXTENT's begin glyph.
Set this using the `set-extent-begin-glyph-layout' function.

arguments: (EXTENT)
Sextents.c
Fextent-end-glyph-layout
Return the layout policy associated with EXTENT's end glyph.
Set this using the `set-extent-end-glyph-layout' function.

arguments: (EXTENT)
Sextents.c
Fset-extent-priority
Set the display priority of EXTENT to PRIORITY (an integer).
When the extent attributes are being merged for display, the priority
is used to determine which extent takes precedence in the event of a
conflict (two extents whose faces both specify font, for example: the
font of the extent with the higher priority will be used).
Extents are created with priority 0; priorities may be negative.

arguments: (EXTENT PRIORITY)
Sextents.c
Fextent-priority
Return the display priority of EXTENT; see `set-extent-priority'.

arguments: (EXTENT)
Sextents.c
Fset-extent-property
Change a property of an extent.
PROPERTY may be any symbol; the value stored may be accessed with
 the `extent-property' function.

The following symbols have predefined meanings:

 detached           Removes the extent from its buffer; setting this is
                    the same as calling `detach-extent'.

 destroyed          Removes the extent from its buffer, and makes it
                    unusable in the future; this is the same calling
                    `delete-extent'.

 priority           Change redisplay priority; same as `set-extent-priority'.

 start-open         Whether the set of characters within the extent is
                    treated being open on the left, that is, whether
                    the start position is an exclusive, rather than
                    inclusive, boundary.  If true, then characters
                    inserted exactly at the beginning of the extent
                    will remain outside of the extent; otherwise they
                    will go into the extent, extending it.

 end-open           Whether the set of characters within the extent is
                    treated being open on the right, that is, whether
                    the end position is an exclusive, rather than
                    inclusive, boundary.  If true, then characters
                    inserted exactly at the end of the extent will
                    remain outside of the extent; otherwise they will
                    go into the extent, extending it.

                    By default, extents have the `end-open' but not the
                    `start-open' property set.

 read-only          Text within this extent will be unmodifiable.

 initial-redisplay-function (EXPERIMENTAL)
                    function to be called the first time (part of) the extent
                    is redisplayed. It will be called with the extent as its
                    first argument.
                    Note: The function will not be called immediately
                    during redisplay, an eval event will be dispatched.

 detachable         Whether the extent gets detached (as with
                    `detach-extent') when all the text within the
                    extent is deleted.  This is true by default.  If
                    this property is not set, the extent becomes a
                    zero-length extent when its text is deleted. (In
                    such a case, the `start-open' property is
                    automatically removed if both the `start-open' and
                    `end-open' properties are set, since zero-length
                    extents open on both ends are not allowed.)

 face               The face in which to display the text.  Setting
                    this is the same as calling `set-extent-face'.

 mouse-face	        If non-nil, the extent will be highlighted in this
                    face when the mouse moves over it.

 pointer            If non-nil, and a valid pointer glyph, this specifies
                    the shape of the mouse pointer while over the extent.

 highlight          Obsolete: Setting this property is equivalent to
                    setting a `mouse-face' property of `highlight'.
		            Reading this property returns non-nil if
		            the extent has a non-nil `mouse-face' property.

 duplicable         Whether this extent should be copied into strings,
                    so that kill, yank, and undo commands will restore
                    or copy it.  `duplicable' extents are copied from
                    an extent into a string when `buffer-substring' or
                    a similar function creates a string.  The extents
                    in a string are copied into other strings created
                    from the string using `concat' or `substring'.
                    When `insert' or a similar function inserts the
                    string into a buffer, the extents are copied back
                    into the buffer.

 unique             Meaningful only in conjunction with `duplicable'.
                    When this is set, there may be only one instance
                    of this extent attached at a time: if it is copied
                    to the kill ring and then yanked, the extent is
                    not copied.  If, however, it is killed (removed
                    from the buffer) and then yanked, it will be
                    re-attached at the new position.

 invisible          If the value is non-nil, text under this extent
                    may be treated as not present for the purpose of
                    redisplay, or may be displayed using an ellipsis
                    or other marker; see `buffer-invisibility-spec'
                    and `invisible-text-glyph'.  In all cases,
                    however, the text is still visible to other
                    functions that examine a buffer's text.

 keymap             This keymap is consulted for mouse clicks on this
                    extent, or keypresses made while point is within the
                    extent.

 copy-function      This is a hook that is run when a duplicable extent
                    is about to be copied from a buffer to a string (or
                    the kill ring).  It is called with three arguments,
                    the extent, and the buffer-positions within it
                    which are being copied.  If this function returns
                    nil, then the extent will not be copied; otherwise
                    it will.

 paste-function     This is a hook that is run when a duplicable extent is
                    about to be copied from a string (or the kill ring)
                    into a buffer.  It is called with three arguments,
                    the original extent, and the buffer positions which
                    the copied extent will occupy.  (This hook is run
                    after the corresponding text has already been
                    inserted into the buffer.)  Note that the extent
                    argument may be detached when this function is run.
                    If this function returns nil, no extent will be
                    inserted.  Otherwise, there will be an extent
                    covering the range in question.

                    If the original extent is not attached to a buffer,
                    then it will be re-attached at this range.
                    Otherwise, a copy will be made, and that copy
                    attached here.

                    The copy-function and paste-function are meaningful
                    only for extents with the `duplicable' flag set,
                    and if they are not specified, behave as if `t' was
                    the returned value.  When these hooks are invoked,
                    the current buffer is the buffer which the extent
                    is being copied from/to, respectively.

 begin-glyph        A glyph to be displayed at the beginning of the extent,
                    or nil.

 end-glyph          A glyph to be displayed at the end of the extent,
                    or nil.

 begin-glyph-layout The layout policy (one of `text', `whitespace',
                    `inside-margin', or `outside-margin') of the extent's
                    begin glyph.

 end-glyph-layout   The layout policy of the extent's end glyph.

 syntax-table       A cons or a syntax table object.  If a cons, the car must
                    be an integer (interpreted as a syntax code, applicable
                    to all characters in the extent).  Otherwise, syntax of
                    characters in the extent is looked up in the syntax
                    table.  You should use the text property API to
                    manipulate this property.  (This may be required in the
                    future.)

The following property is available if `atomic-extents.el'--part of the
`edit-utils' package--has been loaded:

  atomic	    When set, point will never fall inside the extent. 
		    Not as useful as you might think, as
		    `delete-backward-char' still removes characters one by
		    one.  This property as currently implemented is a
		    kludge, and be prepared for it to go away if and when we
		    implement something better.


arguments: (EXTENT PROPERTY VALUE)
Sextents.c
Fset-extent-properties
Change some properties of EXTENT.
PLIST is a property list.
For a list of built-in properties, see `set-extent-property'.

arguments: (EXTENT PLIST)
Sextents.c
Fextent-property
Return EXTENT's value for property PROPERTY.
If no such property exists, DEFAULT is returned.
See `set-extent-property' for the built-in property names.

arguments: (EXTENT PROPERTY &optional DEFAULT)
Sextents.c
Fextent-properties
Return a property list of the attributes of EXTENT.
Do not modify this list; use `set-extent-property' instead.

arguments: (EXTENT)
Sextents.c
Fforce-highlight-extent
Highlight or unhighlight the given extent.
If the second arg is non-nil, it will be highlighted, else dehighlighted.
This is the same as `highlight-extent', except that it will work even
on extents without the `mouse-face' property.

arguments: (EXTENT &optional HIGHLIGHT-P)
Sextents.c
Fhighlight-extent
Highlight EXTENT, if it is highlightable.
(that is, if it has the `mouse-face' property).
If the second arg is non-nil, it will be highlighted, else dehighlighted.
Highlighted extents are displayed as if they were merged with the face
or faces specified by the `mouse-face' property.

arguments: (EXTENT &optional HIGHLIGHT-P)
Sextents.c
Finsert-extent
Insert EXTENT from START to END in BUFFER-OR-STRING.
BUFFER-OR-STRING defaults to the current buffer if omitted.
If EXTENT is already on the same object, and overlaps or is adjacent to
the given range, its range is merely extended to include the new range.
Otherwise, a copy is made of the extent at the new position and object.
When a copy is made, the new extent is returned, copy/paste hooks are run,
and the change is noted for undo recording.  When no copy is made, nil is
returned.  See documentation on `detach-extent' for a discussion of undo
recording.

The fourth arg, NO-HOOKS, can be used to inhibit the running of the
extent's `paste-function' property if it has one.

It's not really clear why this function exists any more.  It was a holdover
from a much older implementation of extents, before extents could really
exist on strings.

arguments: (EXTENT &optional START END NO-HOOKS BUFFER-OR-STRING)
Sextents.c
Fget-text-property
Return the value of the PROP property at the given position.
Optional arg OBJECT specifies the buffer or string to look in, and
 defaults to the current buffer.
Optional arg AT-FLAG controls what it means for a property to be "at"
 a position, and has the same meaning as in `extent-at'.
This examines only those properties added with `put-text-property'.
See also `get-char-property'.

arguments: (POS PROP &optional OBJECT AT-FLAG)
Sextents.c
Fget-char-property
Return the value of the PROP property at the given position.
Optional arg OBJECT specifies the buffer or string to look in, and
 defaults to the current buffer.
Optional arg AT-FLAG controls what it means for a property to be "at"
 a position, and has the same meaning as in `extent-at'.
This examines properties on all extents.
See also `get-text-property'.

arguments: (POS PROP &optional OBJECT AT-FLAG)
Sextents.c
Fput-text-property
Adds the given property/value to all characters in the specified region.
The property is conceptually attached to the characters rather than the
region.  The properties are copied when the characters are copied/pasted.
Fifth argument OBJECT is the buffer or string containing the text, and
defaults to the current buffer.

arguments: (START END PROP VALUE &optional OBJECT)
Sextents.c
Fput-nonduplicable-text-property
Adds the given property/value to all characters in the specified region.
The property is conceptually attached to the characters rather than the
region, however the properties will not be copied when the characters
are copied.
Fifth argument OBJECT is the buffer or string containing the text, and
defaults to the current buffer.

arguments: (START END PROP VALUE &optional OBJECT)
Sextents.c
Fadd-text-properties
Add properties to the characters from START to END.
The third argument PROPS is a property list specifying the property values
to add.  The optional fourth argument, OBJECT, is the buffer or string
containing the text and defaults to the current buffer.  Returns t if
any property was changed, nil otherwise.

arguments: (START END PROPS &optional OBJECT)
Sextents.c
Fadd-nonduplicable-text-properties
Add nonduplicable properties to the characters from START to END.
(The properties will not be copied when the characters are copied.)
The third argument PROPS is a property list specifying the property values
to add.  The optional fourth argument, OBJECT, is the buffer or string
containing the text and defaults to the current buffer.  Returns t if
any property was changed, nil otherwise.

arguments: (START END PROPS &optional OBJECT)
Sextents.c
Fremove-text-properties
Remove the given properties from all characters in the specified region.
PROPS should be a plist, but the values in that plist are ignored (treated
as nil).  Returns t if any property was changed, nil otherwise.
Fourth argument OBJECT is the buffer or string containing the text, and
defaults to the current buffer.

arguments: (START END PROPS &optional OBJECT)
Sextents.c
Ftext-prop-extent-paste-function
Used as the `paste-function' property of `text-prop' extents.

arguments: (EXTENT FROM TO)
Sextents.c
Fnext-single-property-change
Return the position of next property change for a specific property.
Scans characters forward from POS till it finds a change in the PROP
 property, then returns the position of the change.  The optional third
 argument OBJECT is the buffer or string to scan (defaults to the current
 buffer).
The property values are compared with `eq'.
Return nil if the property is constant all the way to the end of OBJECT.
If the value is non-nil, it is a position greater than POS, never equal.

If the optional fourth argument LIMIT is non-nil, don't search
 past position LIMIT; return LIMIT if nothing is found before LIMIT.
If two or more extents with conflicting non-nil values for PROP overlap
 a particular character, it is undefined which value is considered to be
 the value of PROP. (Note that this situation will not happen if you always
 use the text-property primitives.)

This function looks only at extents created using the text-property primitives.
To look at all extents, use `next-single-char-property-change'.

arguments: (POS PROP &optional OBJECT LIMIT)
Sextents.c
Fprevious-single-property-change
Return the position of next property change for a specific property.
Scans characters backward from POS till it finds a change in the PROP
 property, then returns the position of the change.  The optional third
 argument OBJECT is the buffer or string to scan (defaults to the current
 buffer).
The property values are compared with `eq'.
Return nil if the property is constant all the way to the start of OBJECT.
If the value is non-nil, it is a position less than POS, never equal.

If the optional fourth argument LIMIT is non-nil, don't search back
 past position LIMIT; return LIMIT if nothing is found until LIMIT.
If two or more extents with conflicting non-nil values for PROP overlap
 a particular character, it is undefined which value is considered to be
 the value of PROP. (Note that this situation will not happen if you always
 use the text-property primitives.)

This function looks only at extents created using the text-property primitives.
To look at all extents, use `previous-single-char-property-change'.

arguments: (POS PROP &optional OBJECT LIMIT)
Sextents.c
Fnext-single-char-property-change
Return the position of next property change for a specific property.
Scans characters forward from POS till it finds a change in the PROP
 property, then returns the position of the change.  The optional third
 argument OBJECT is the buffer or string to scan (defaults to the current
 buffer).
The property values are compared with `eq'.
Return nil if the property is constant all the way to the end of OBJECT.
If the value is non-nil, it is a position greater than POS, never equal.

If the optional fourth argument LIMIT is non-nil, don't search
 past position LIMIT; return LIMIT if nothing is found before LIMIT.
If two or more extents with conflicting non-nil values for PROP overlap
 a particular character, it is undefined which value is considered to be
 the value of PROP. (Note that this situation will not happen if you always
 use the text-property primitives.)

This function looks at all extents.  To look at only extents created using the
text-property primitives, use `next-single-property-change'.

arguments: (POS PROP &optional OBJECT LIMIT)
Sextents.c
Fprevious-single-char-property-change
Return the position of next property change for a specific property.
Scans characters backward from POS till it finds a change in the PROP
 property, then returns the position of the change.  The optional third
 argument OBJECT is the buffer or string to scan (defaults to the current
 buffer).
The property values are compared with `eq'.
Return nil if the property is constant all the way to the start of OBJECT.
If the value is non-nil, it is a position less than POS, never equal.

If the optional fourth argument LIMIT is non-nil, don't search back
 past position LIMIT; return LIMIT if nothing is found until LIMIT.
If two or more extents with conflicting non-nil values for PROP overlap
 a particular character, it is undefined which value is considered to be
 the value of PROP. (Note that this situation will not happen if you always
 use the text-property primitives.)

This function looks at all extents.  To look at only extents created using the
text-property primitives, use `previous-single-property-change'.

arguments: (POS PROP &optional OBJECT LIMIT)
Sextents.c
Vdebug-soe
If non-nil, display debugging information about the SOE ("stack of extents").
The SOE is a cache of extents overlapping a specified region, used to
speed up `map-extents' and certain other functions.Sextents.c
Vmouse-highlight-priority
The priority to use for the mouse-highlighting pseudo-extent
that is used to highlight extents with the `mouse-face' attribute set.
See `set-extent-priority'.Sextents.c
Vdefault-text-properties
Property list giving default values for text properties.
Whenever a character does not specify a value for a property, the value
stored in this list is used instead.  This only applies when the
functions `get-text-property' or `get-char-property' are called.Sfaces.c
Ffacep
Return t if OBJECT is a face.

arguments: (OBJECT)
Sfaces.c
Ffind-face
Retrieve the face of the given name.
If FACE-OR-NAME is a face object, it is simply returned.
Otherwise, FACE-OR-NAME should be a symbol.  If there is no such face,
nil is returned.  Otherwise the associated face object is returned.

arguments: (FACE-OR-NAME)
Sfaces.c
Fget-face
Retrieve the face of the given name.
Same as `find-face' except an error is signalled if there is no such
face instead of returning nil.

arguments: (NAME)
Sfaces.c
Fface-name
Return the name of the given face.

arguments: (FACE)
Sfaces.c
Fbuilt-in-face-specifiers
Return a list of all built-in face specifier properties.

This is a copy; there is no way to modify XEmacs' idea of the built-in face
specifier properties from Lisp.

arguments: ()
Sfaces.c
Fface-list
Return a list of the names of all defined faces.
If TEMPORARY is nil, only the permanent faces are included.
If it is t, only the temporary faces are included.  If it is any
other non-nil value both permanent and temporary are included.

arguments: (&optional TEMPORARY)
Sfaces.c
Fmake-face
Define a new face with name NAME (a symbol), described by DOC-STRING.
You can modify the font, color, etc. of a face with the set-face-* functions.
If the face already exists, it is unmodified.
If TEMPORARY is non-nil, this face will cease to exist if not in use.

arguments: (NAME &optional DOC-STRING TEMPORARY)
Sfaces.c
Fcopy-face
Define and return a new face which is a copy of an existing one,
or makes an already-existing face be exactly like another.
LOCALE, TAG-SET, EXACT-P, and HOW-TO-ADD are as in `copy-specifier'.

arguments: (OLD-FACE NEW-NAME &optional LOCALE TAG-SET EXACT-P HOW-TO-ADD)
Sfaces.c
Fspecifier-tag-one-dimensional-p
Return non-nil if (charset-dimension CHARSET) is 1.

Used by the X11 platform font code; see `define-specifier-tag'.  You
shouldn't ever need to call this yourself.

arguments: (CHARSET)
Sfaces.c
Fspecifier-tag-two-dimensional-p
Return non-nil if (charset-dimension CHARSET) is 2.

Used by the X11 platform font code; see `define-specifier-tag'.  You
shouldn't ever need to call this yourself.

arguments: (CHARSET)
Sfaces.c
Fspecifier-tag-final-stage-p
Return non-nil if STAGE is 'final.

Used by the X11 platform font code for giving fallbacks; see
`define-specifier-tag'.  You shouldn't ever need to call this.

arguments: (CHARSET STAGE)
Sfaces.c
Fspecifier-tag-initial-stage-p
Return non-nil if STAGE is 'initial.

Used by the X11 platform font code for giving fallbacks; see
`define-specifier-tag'.  You shouldn't ever need to call this.

arguments: (CHARSET STAGE)
Sfaces.c
Fspecifier-tag-encode-as-utf-8-p
Return t if and only if (charset-property CHARSET 'encode-as-utf-8)).

Used by the X11 platform font code; see `define-specifier-tag'.  You
shouldn't ever need to call this.

arguments: (CHARSET STAGE)
Sfaces.c
Vdebug-x-faces
If non-zero, display debug information about X facesSfile-coding.c
Fvalid-coding-system-type-p
Given a CODING-SYSTEM-TYPE, return non-nil if it is valid.
Valid types depend on how XEmacs was compiled but may include
`undecided', `chain', `integer', `ccl', `iso2022', `big5', `shift-jis',
`utf-16', `ucs-4', `utf-8', etc.

arguments: (CODING-SYSTEM-TYPE)
Sfile-coding.c
Fcoding-system-type-list
Return a list of valid coding system types.

arguments: ()
Sfile-coding.c
Fcoding-system-p
Return t if OBJECT is a coding system.
A coding system is an object that defines how text containing multiple
character sets is encoded into a stream of (typically 8-bit) bytes.
The coding system is used to decode the stream into a series of
characters (which may be from multiple charsets) when the text is read
from a file or process, and is used to encode the text back into the
same format when it is written out to a file or process.

For example, many ISO2022-compliant coding systems (such as Compound
Text, which is used for inter-client data under the X Window System)
use escape sequences to switch between different charsets -- Japanese
Kanji, for example, is invoked with "ESC $ ( B"; ASCII is invoked
with "ESC ( B"; and Cyrillic is invoked with "ESC - L".  See
`make-coding-system' for more information.

Coding systems are normally identified using a symbol, and the
symbol is accepted in place of the actual coding system object whenever
a coding system is called for. (This is similar to how faces work.)

arguments: (OBJECT)
Sfile-coding.c
Ffind-coding-system
Retrieve the coding system of the given name.

If CODING-SYSTEM-OR-NAME is a coding-system object, it is simply
returned.  Otherwise, CODING-SYSTEM-OR-NAME should be a symbol.
If there is no such coding system, nil is returned.  Otherwise the
associated coding system object is returned.

arguments: (CODING-SYSTEM-OR-NAME)
Sfile-coding.c
Fautoload-coding-system
Define SYMBOL as a coding-system that is loaded on demand.

FORM is a form to evaluate to define the coding-system. 

arguments: (SYMBOL FORM)
Sfile-coding.c
Fget-coding-system
Retrieve the coding system of the given name.
Same as `find-coding-system' except that if there is no such
coding system, an error is signaled instead of returning nil.

arguments: (NAME)
Sfile-coding.c
Fcoding-system-list
Return a list of the names of all defined coding systems.
If INTERNAL is nil, only the normal (non-internal) coding systems are
included. (Internal coding systems are created for various internal
purposes, such as implementing EOL types of CRLF and CR; generally, you do
not want to see these.)  If it is t, only the internal coding systems are
included.  If it is any other non-nil value both normal and internal are
included.

arguments: (&optional INTERNAL)
Sfile-coding.c
Fcoding-system-name
Return the name of the given coding system.

arguments: (CODING-SYSTEM)
Sfile-coding.c
Fcoding-system-canonical-name-p
Return t if OBJECT names a coding system, and is not a coding system alias.

arguments: (OBJECT)
Sfile-coding.c
Fmake-coding-system-internal
Create a new coding system object, and register NAME as its name.

With Mule support, this does much of the work of `make-coding-system'.
Without Mule support, it does all the work of that function, and an alias
exists, mapping `make-coding-system' to `make-coding-system-internal'.

You'll need a Mule XEmacs to read the complete docstring. Or you can
just read it in make-coding-system.el; something like the following
should work:

 \[find-function-other-window] find-file RET \[find-file] mule/make-coding-system.el RET


arguments: (NAME TYPE &optional DESCRIPTION PROPS)
Sfile-coding.c
Fcopy-coding-system
Copy OLD-CODING-SYSTEM to NEW-NAME.
If NEW-NAME does not name an existing coding system, a new one will
be created.
If you are using this function to create an alias, think again:
Use `define-coding-system-alias' instead.

arguments: (OLD-CODING-SYSTEM NEW-NAME)
Sfile-coding.c
Fcoding-system-alias-p
Return t if OBJECT is a coding system alias.
All coding system aliases are created by `define-coding-system-alias'.

arguments: (OBJECT)
Sfile-coding.c
Fcoding-system-aliasee
Return the coding-system symbol for which symbol ALIAS is an alias.

arguments: (ALIAS)
Sfile-coding.c
Fdefine-coding-system-alias
Define symbol ALIAS as an alias for coding system ALIASEE.

You can use this function to redefine an alias that has already been defined,
but you cannot redefine a name which is the canonical name for a coding system.
(a canonical name of a coding system is what is returned when you call
`coding-system-name' on a coding system).

ALIASEE itself can be an alias, which allows you to define nested aliases.

You are forbidden, however, from creating alias loops or `dangling' aliases.
These will be detected, and an error will be signaled if you attempt to do so.

If ALIASEE is nil, then ALIAS will simply be undefined.

See also `coding-system-alias-p', `coding-system-aliasee',
and `coding-system-canonical-name-p'.

arguments: (ALIAS ALIASEE)
Sfile-coding.c
Fsubsidiary-coding-system
Return the subsidiary coding system of CODING-SYSTEM with eol type EOL-TYPE.
The logically opposite operation is `coding-system-base'.

arguments: (CODING-SYSTEM EOL-TYPE)
Sfile-coding.c
Fcoding-system-base
Return the base coding system of CODING-SYSTEM.
If CODING-SYSTEM is a subsidiary, this returns its parent; otherwise, it
returns CODING-SYSTEM.
The logically opposite operation is `subsidiary-coding-system'.

arguments: (CODING-SYSTEM)
Sfile-coding.c
Fcoding-system-used-for-io
Return the coding system actually used for I/O.
In some cases (e.g. when a particular EOL type is specified) this won't be
the coding system itself.  This can be useful when trying to determine
precisely how data was decoded.

arguments: (CODING-SYSTEM)
Sfile-coding.c
Fcoding-system-description
Return the description for CODING-SYSTEM.
The `description' of a coding system is a short English phrase giving the
name rendered according to English punctuation rules, plus possibly some
explanatory text (typically in the form of a parenthetical phrase).  The
description is intended to be short enough that it can appear as a menu item,
and clear enough to be recognizable even to someone who is assumed to have
some basic familiarity with different encodings but may not know all the
technical names; thus, for `cn-gb-2312' is described as "Chinese EUC" and
`hz-gb-2312' is described as "Hz/ZW (Chinese)", where the actual name of
the encoding is given, followed by a note that this is a Chinese encoding,
because the great majority of people encountering this would have no idea
what it is, and giving the language indicates whether the encoding should
just be ignored or (conceivably) investigated more thoroughly.

arguments: (CODING-SYSTEM)
Sfile-coding.c
Fcoding-system-type
Return the type of CODING-SYSTEM.

arguments: (CODING-SYSTEM)
Sfile-coding.c
Fcoding-system-property
Return the PROP property of CODING-SYSTEM.

arguments: (CODING-SYSTEM PROP)
Sfile-coding.c
Fdecode-coding-region
Decode the text between START and END which is encoded in CODING-SYSTEM.
This is useful if you've read in encoded text from a file without decoding
it (e.g. you read in a JIS-formatted file but used the `binary' or
`no-conversion' coding system, so that it shows up as "^[$B!<!+^[(B").
Return length of decoded text.
BUFFER defaults to the current buffer if unspecified, and when interactive.

arguments: (START END CODING-SYSTEM &optional BUFFER)
Sfile-coding.c
Fencode-coding-region
Encode the text between START and END using CODING-SYSTEM.
This will, for example, convert Japanese characters into stuff such as
"^[$B!<!+^[(B" if you use the JIS encoding.  Return length of encoded text.
BUFFER defaults to the current buffer if unspecified, and when interactive.

arguments: (START END CODING-SYSTEM &optional BUFFER)
Sfile-coding.c
Fquery-coding-region
Work out whether CODING-SYSTEM can losslessly encode a region.

START and END are the beginning and end of the region to check.
CODING-SYSTEM is the coding system to try.

Optional argument BUFFER is the buffer to check, and defaults to the current
buffer.

IGNORE-INVALID-SEQUENCESP, also an optional argument, says to treat XEmacs
characters which have an unambiguous encoded representation, despite being
undefined in what they represent, as encodable.  These chiefly arise with
variable-length encodings like UTF-8 and UTF-16, where an invalid sequence
is passed through to XEmacs as a sequence of characters with a defined
correspondence to the octets on disk, but no non-error semantics; see the
`invalid-sequence-coding-system' argument to `set-language-info'.

They can also arise with fixed-length encodings like ISO 8859-7, where
certain octets on disk have undefined values, and treating them as
corresponding to the ISO 8859-1 characters with the same numerical values
may lead to data that is not understood by other applications.

Optional argument ERRORP says to signal a `text-conversion-error' if some
character in the region cannot be encoded, and defaults to nil.

Optional argument HIGHLIGHT says to display unencodable characters in the
region using `query-coding-warning-face'. It defaults to nil.

This function can return multiple values; the intention is that callers use
`multiple-value-bind' or the related CL multiple value functions to deal
with it.  The first result is `t' if the region can be encoded using
CODING-SYSTEM, or `nil' if not.  If the region cannot be encoded using
CODING-SYSTEM, the second result is a range table describing the positions
of the unencodable characters.

Ranges that describe characters that would be ignored were
IGNORE-INVALID-SEQUENCESP non-nil map to the symbol `invalid-sequence';
other ranges map to the symbol `unencodable'.  If IGNORE-INVALID-SEQUENCESP
is non-nil, all ranges will map to the symbol `unencodable'.  See
`make-range-table' for more details of range tables.

arguments: (START END CODING-SYSTEM &optional BUFFER IGNORE-INVALID-SEQUENCESP ERRORP HIGHLIGHT)
Sfile-coding.c
Fcoding-category-list
Return a list of all recognized coding categories.

arguments: ()
Sfile-coding.c
Fset-coding-priority-list
Change the priority order of the coding categories.
LIST should be list of coding categories, in descending order of
priority.  Unspecified coding categories will be lower in priority
than all specified ones, in the same relative order they were in
previously.

arguments: (LIST)
Sfile-coding.c
Fcoding-priority-list
Return a list of coding categories in descending order of priority.

arguments: ()
Sfile-coding.c
Fset-coding-category-system
Change the coding system associated with a coding category.

arguments: (CODING-CATEGORY CODING-SYSTEM)
Sfile-coding.c
Fcoding-category-system
Return the coding system associated with a coding category.

arguments: (CODING-CATEGORY)
Sfile-coding.c
Fdetect-coding-region
Detect coding system of the text in the region between START and END.
Return a list of possible coding systems ordered by priority.
If only ASCII characters are found, return `undecided' or one of
its subsidiary coding systems according to a detected end-of-line
type.  Optional arg BUFFER defaults to the current buffer.

arguments: (START END &optional BUFFER)
Sfile-coding.c
Ffind-coding-system-magic-cookie-in-file
Look for the coding-system magic cookie in FILENAME.
The coding-system magic cookie is either the local variable specification
-*- ... coding: ... -*- on the first line, or the exact string
";;;###coding system: " somewhere within the first 3000 characters
of the file.  If found, the coding system name (as a string) is returned;
otherwise nil is returned.  Note that it is extremely unlikely that
either such string would occur coincidentally as the result of encoding
some characters in a non-ASCII charset, and that the spaces make it
even less likely since the space character is not a valid octet in any
ISO 2022 encoding of most non-ASCII charsets.

arguments: (FILENAME)
Sfile-coding.c
Vkeyboard-coding-system
Default coding system used for TTY and X11 keyboard input.
Under X11, used only to interpret the character for a key event when that
event has a KeySym of NoSymbol but does have an associated string keysym,
something that's seen with input methods.

If you need to set these things to different coding systems, call the
function `set-console-tty-coding-system' for the TTY and use this variable
for X11.Sfile-coding.c
Vterminal-coding-system
Coding system used for TTY display output.
Not used under a windowing system.Sfile-coding.c
Vcoding-system-for-read
Overriding coding system used when reading from a file or process.
You should bind this variable with `let', but do not set it globally.
If this is non-nil, it specifies the coding system that will be used
to decode input on read operations, such as from a file or process.
It overrides `buffer-file-coding-system-for-read',
`insert-file-contents-pre-hook', etc.  Use those variables instead of
this one for permanent changes to the environment.  
Sfile-coding.c
Vcoding-system-for-write
Overriding coding system used when writing to a file or process.
You should bind this variable with `let', but do not set it globally.
If this is non-nil, it specifies the coding system that will be used
to encode output for write operations, such as to a file or process.
It overrides `buffer-file-coding-system', `write-region-pre-hook', etc.
Use those variables instead of this one for permanent changes to the
environment.  
Sfile-coding.c
Vfile-name-coding-system
Coding system used to convert pathnames when accessing files.Sfile-coding.c
Venable-multibyte-characters
Setting this has no effect.  It is purely for FSF compatibility.Sfile-coding.c
Vdebug-coding-detection
If non-nil, display debug information about detection operations in progress.
Information is displayed on stderr.Sfileio.c
Ffind-file-name-handler
Return FILENAME's handler function for OPERATION, if it has one.
Otherwise, return nil.
A file name is handled if one of the regular expressions in
`file-name-handler-alist' matches it.

If OPERATION equals `inhibit-file-name-operation', then we ignore
any handlers that are members of `inhibit-file-name-handlers',
but we still do run any other handlers.  This lets handlers
use the standard functions without calling themselves recursively.

Otherwise, OPERATION is the name of a funcall'able function.

arguments: (FILENAME &optional OPERATION)
Sfileio.c
Ffile-name-directory
Return the directory component in file name FILENAME.
Return nil if FILENAME does not include a directory.
Otherwise return a directory spec.
Given a Unix syntax file name, returns a string ending in slash.

arguments: (FILENAME)
Sfileio.c
Ffile-name-nondirectory
Return file name FILENAME sans its directory.
For example, in a Unix-syntax file name,
this is everything after the last slash,
or the entire name if it contains no slash.

arguments: (FILENAME)
Sfileio.c
Funhandled-file-name-directory
Return a directly usable directory name somehow associated with FILENAME.
A `directly usable' directory name is one that may be used without the
intervention of any file handler.
If FILENAME is a directly usable file itself, return
(file-name-directory FILENAME).
The `call-process' and `start-process' functions use this function to
get a current directory to run processes in.

arguments: (FILENAME)
Sfileio.c
Ffile-name-as-directory
Return a string representing file FILENAME interpreted as a directory.
This operation exists because a directory is also a file, but its name as
a directory is different from its name as a file.
The result can be used as the value of `default-directory'
or passed as second argument to `expand-file-name'.
For a Unix-syntax file name, just appends a slash,
except for (file-name-as-directory "") => "./".

arguments: (FILENAME)
Sfileio.c
Fdirectory-file-name
Return the file name of the directory named DIRECTORY.
This is the name of the file that holds the data for the directory.
This operation exists because a directory is also a file, but its name as
a directory is different from its name as a file.
In Unix-syntax, this function just removes the final slash.

arguments: (DIRECTORY)
Sfileio.c
Fmake-temp-name
Generate a temporary file name starting with PREFIX.
The Emacs process number forms part of the result, so there is no
danger of generating a name being used by another process.

In addition, this function makes an attempt to choose a name that
does not specify an existing file.  To make this work, PREFIX should
be an absolute file name.

This function is analogous to mktemp(3) under POSIX, and as with it, there
exists a race condition between the test for the existence of the new file
and its creation.  See `make-temp-file' for a function which avoids this
race condition by specifying the appropriate flags to `write-region'. 

arguments: (PREFIX)
Sfileio.c
Fexpand-file-name
Convert filename NAME to absolute, and canonicalize it.
Second arg DEFAULT-DIRECTORY is directory to start with if NAME is relative
 (does not start with slash); if DEFAULT-DIRECTORY is nil or missing,
the current buffer's value of `default-directory' is used.
File name components that are `.' are removed, and
so are file name components followed by `..', along with the `..' itself;
note that these simplifications are done without checking the resulting
file names in the file system.
An initial `~/' expands to your home directory.
An initial `~USER/' expands to USER's home directory.
See also the function `substitute-in-file-name'.

arguments: (NAME &optional DEFAULT-DIRECTORY)
Sfileio.c
Ffile-truename
Return the canonical name of FILENAME.
Second arg DEFAULT is directory to start with if FILENAME is relative
 (does not start with slash); if DEFAULT is nil or missing,
 the current buffer's value of `default-directory' is used.
No component of the resulting pathname will be a symbolic link, as
 in the realpath() function.

arguments: (FILENAME &optional DEFAULT)
Sfileio.c
Fsubstitute-in-file-name
Substitute environment variables referred to in FILENAME.
`$FOO' where FOO is an environment variable name means to substitute
the value of that variable.  The variable name should be terminated
with a character, not a letter, digit or underscore; otherwise, enclose
the entire variable name in braces.
If `/~' appears, all of FILENAME through that `/' is discarded.

arguments: (FILENAME)
Sfileio.c
Fcopy-file
Copy FILENAME to NEWNAME.  Both args must be strings.
Signals a `file-already-exists' error if file NEWNAME already exists,
unless a third argument OK-IF-ALREADY-EXISTS is supplied and non-nil.
A number as third arg means request confirmation if NEWNAME already exists.
This is what happens in interactive use with M-x.
Fourth arg KEEP-TIME non-nil means give the new file the same
last-modified time as the old one.  (This works on only some systems.)
A prefix arg makes KEEP-TIME non-nil.

arguments: (FILENAME NEWNAME &optional OK-IF-ALREADY-EXISTS KEEP-TIME)
Sfileio.c
Fmake-directory-internal
Create a directory.  One argument, a file name string.

arguments: (DIRNAME)
Sfileio.c
Fdelete-directory
Delete a directory.  One argument, a file name or directory name string.

arguments: (DIRNAME)
Sfileio.c
Fdelete-file
Delete the file named FILENAME (a string).
If FILENAME has multiple names, it continues to exist with the other names.

arguments: (FILENAME)
Sfileio.c
Frename-file
Rename FILENAME as NEWNAME.  Both args must be strings.
If file has names other than FILENAME, it continues to have those names.
Signals a `file-already-exists' error if a file NEWNAME already exists
unless optional third argument OK-IF-ALREADY-EXISTS is non-nil.
A number as third arg means request confirmation if NEWNAME already exists.
This is what happens in interactive use with M-x.

arguments: (FILENAME NEWNAME &optional OK-IF-ALREADY-EXISTS)
Sfileio.c
Fadd-name-to-file
Give FILENAME additional name NEWNAME.  Both args must be strings.
Signals a `file-already-exists' error if a file NEWNAME already exists
unless optional third argument OK-IF-ALREADY-EXISTS is non-nil.
A number as third arg means request confirmation if NEWNAME already exists.
This is what happens in interactive use with M-x.

arguments: (FILENAME NEWNAME &optional OK-IF-ALREADY-EXISTS)
Sfileio.c
Fmake-symbolic-link
Make a symbolic link to FILENAME, named LINKNAME.  Both args strings.
Signals a `file-already-exists' error if a file LINKNAME already exists
unless optional third argument OK-IF-ALREADY-EXISTS is non-nil.
A number as third arg means request confirmation if LINKNAME already exists.
This happens for interactive use with M-x.

On platforms where symbolic links are not available, any file handlers will
be run, but the check for the existence of LINKNAME will not be done, and
the symbolic link will not be created.

arguments: (FILENAME LINKNAME &optional OK-IF-ALREADY-EXISTS)
Sfileio.c
Fsysnetunam
Open a network connection to PATH using LOGIN as the login string.

arguments: (PATH LOGIN)
Sfileio.c
Ffile-name-absolute-p
Return t if file FILENAME specifies an absolute path name.
On Unix, this is a name starting with a `/' or a `~'.

arguments: (FILENAME)
Sfileio.c
Ffile-exists-p
Return t if file FILENAME exists.  (This does not mean you can read it.)
See also `file-readable-p' and `file-attributes'.

arguments: (FILENAME)
Sfileio.c
Ffile-executable-p
Return t if FILENAME can be executed by you.
For a directory, this means you can access files in that directory.

arguments: (FILENAME)
Sfileio.c
Ffile-readable-p
Return t if file FILENAME exists and you can read it.
See also `file-exists-p' and `file-attributes'.

arguments: (FILENAME)
Sfileio.c
Ffile-writable-p
Return t if file FILENAME can be written or created by you.

arguments: (FILENAME)
Sfileio.c
Ffile-symlink-p
Return non-nil if file FILENAME is the name of a symbolic link.
The value is the name of the file to which it is linked.
Otherwise returns nil.

arguments: (FILENAME)
Sfileio.c
Ffile-directory-p
Return t if file FILENAME is the name of a directory as a file.
A directory name spec may be given instead; then the value is t
if the directory so specified exists and really is a directory.

arguments: (FILENAME)
Sfileio.c
Ffile-accessible-directory-p
Return t if file FILENAME is the name of a directory as a file,
and files in that directory can be opened by you.  In order to use a
directory as a buffer's current directory, this predicate must return true.
A directory name spec may be given instead; then the value is t
if the directory so specified exists and really is a readable and
searchable directory.

arguments: (FILENAME)
Sfileio.c
Ffile-regular-p
Return t if file FILENAME is the name of a regular file.
This is the sort of file that holds an ordinary stream of data bytes.

arguments: (FILENAME)
Sfileio.c
Ffile-modes
Return mode bits of file named FILENAME, as an integer.

arguments: (FILENAME)
Sfileio.c
Fset-file-modes
Set mode bits of file named FILENAME to MODE (an integer).
Only the 12 low bits of MODE are used.

arguments: (FILENAME MODE)
Sfileio.c
Fset-default-file-modes
Set the file permission bits for newly created files.
The argument MODE should be an integer; if a bit in MODE is 1,
subsequently created files will not have the permission corresponding
to that bit enabled.  Only the low 9 bits are used.
This setting is inherited by subprocesses.

arguments: (MODE)
Sfileio.c
Fdefault-file-modes
Return the default file protection for created files.
The umask value determines which permissions are enabled in newly
created files.  If a permission's bit in the umask is 1, subsequently
created files will not have that permission enabled.

arguments: ()
Sfileio.c
Funix-sync
Tell Unix to finish all pending disk updates.

arguments: ()
Sfileio.c
Ffile-newer-than-file-p
Return t if file FILE1 is newer than file FILE2.
If FILE1 does not exist, the answer is nil;
otherwise, if FILE2 does not exist, the answer is t.

arguments: (FILE1 FILE2)
Sfileio.c
Finsert-file-contents-internal
Insert contents of file FILENAME after point; no coding-system frobbing.
This function is identical to `insert-file-contents' except for the
handling of the CODESYS and USED-CODESYS arguments.

The file is decoded according to CODESYS; if omitted, no conversion
happens.  If USED-CODESYS is non-nil, it should be a symbol, and the actual
coding system that was used for the decoding is stored into it.  It will in
general be different from CODESYS if CODESYS specifies automatic encoding
detection or end-of-line detection.

Currently START and END refer to byte positions (as opposed to character
positions), even in Mule and under MS Windows. (Fixing this, particularly
under Mule, is very difficult.)

arguments: (FILENAME &optional VISIT START END REPLACE CODESYS USED-CODESYS)
Sfileio.c
Fwrite-region-internal
Write current region into specified file; no coding-system frobbing.

This function is almost identical to `write-region'; see that function for
documentation of the START, END, FILENAME, APPEND, VISIT, and LOCKNAME
arguments.  CODESYS specifies the encoding to be used for the file; if it is
nil, no code conversion occurs. (With `write-region' the coding system is
determined automatically if not specified.)

MUSTBENEW specifies that a check for an existing file of the same name
should be made.  If it is 'excl, XEmacs will error on detecting such a file
and never write it.  If it is some other non-nil value, the user will be
prompted to confirm the overwriting of an existing file.  If it is nil,
existing files are silently overwritten when file system permissions allow
this.

As a special kludge to support auto-saving, when START is nil START and
END are set to the beginning and end, respectively, of the buffer,
regardless of any restrictions.  Don't use this feature.  It is documented
here because write-region handler writers need to be aware of it.


arguments: (START END FILENAME &optional APPEND VISIT LOCKNAME CODESYS MUSTBENEW)
Sfileio.c
Fencrypt-string
Encrypt STRING using KEY.

arguments: (STRING KEY)
Sfileio.c
Fdecrypt-string
Decrypt STRING using KEY.

arguments: (STRING KEY)
Sfileio.c
Fverify-visited-file-modtime
Return t if last mod time of BUFFER's visited file matches what BUFFER records.
This means that the file has not been changed since it was visited or saved.

arguments: (BUFFER)
Sfileio.c
Fclear-visited-file-modtime
Clear out records of last mod time of visited file.
Next attempt to save will certainly not complain of a discrepancy.

arguments: ()
Sfileio.c
Fvisited-file-modtime
Return the current buffer's recorded visited file modification time.
The value is a list of the form (HIGH . LOW), like the time values
that `file-attributes' returns.

arguments: ()
Sfileio.c
Fset-visited-file-modtime
Update buffer's recorded modification time from the visited file's time.
Useful if the buffer was not read from the file normally
or if the file itself has been changed for some known benign reason.
An argument specifies the modification time value to use
(instead of that of the visited file), in the form of a list
(HIGH . LOW) or (HIGH LOW).

arguments: (&optional TIME-LIST)
Sfileio.c
Fdo-auto-save
Auto-save all buffers that need it.
This is all buffers that have auto-saving enabled
and are changed since last auto-saved.
Auto-saving writes the buffer into a file
so that your editing is not lost if the system crashes.
This file is not the file you visited; that changes only when you save.
Normally we run the normal hook `auto-save-hook' before saving.

Non-nil first argument means do not print any message if successful.
Non-nil second argument means save only current buffer.

arguments: (&optional NO-MESSAGE CURRENT-ONLY)
Sfileio.c
Fset-buffer-auto-saved
Mark current buffer as auto-saved with its current text.
No auto-save file will be written until the buffer changes again.

arguments: ()
Sfileio.c
Fclear-buffer-auto-save-failure
Clear any record of a recent auto-save failure in the current buffer.

arguments: ()
Sfileio.c
Frecent-auto-save-p
Return t if buffer has been auto-saved since last read in or saved.

arguments: ()
Sfileio.c
Vauto-save-file-format
*Format in which to write auto-save files.
Should be a list of symbols naming formats that are defined in `format-alist'.
If it is t, which is the default, auto-save files are written in the
same format as a regular save would use.Sfileio.c
Vfile-name-handler-alist
*Alist of elements (REGEXP . HANDLER) for file names handled specially.
If a file name matches REGEXP, then all I/O on that file is done by calling
HANDLER.

The first argument given to HANDLER is the name of the I/O primitive
to be handled; the remaining arguments are the arguments that were
passed to that primitive.  For example, if you do
    (file-exists-p FILENAME)
and FILENAME is handled by HANDLER, then HANDLER is called like this:
    (funcall HANDLER 'file-exists-p FILENAME)
The function `find-file-name-handler' checks this list for a handler
for its argument.Sfileio.c
Vafter-insert-file-functions
A list of functions to be called at the end of `insert-file-contents'.
Each is passed one argument, the number of bytes inserted.  It should return
the new byte count, and leave point the same.  If `insert-file-contents' is
intercepted by a handler from `file-name-handler-alist', that handler is
responsible for calling the after-insert-file-functions if appropriate.Sfileio.c
Vwrite-region-annotate-functions
A list of functions to be called at the start of `write-region'.
Each is passed two arguments, START and END, as for `write-region'.
It should return a list of pairs (POSITION . STRING) of strings to be
effectively inserted at the specified positions of the file being written
(1 means to insert before the first byte written).  The POSITIONs must be
sorted into increasing order.  If there are several functions in the list,
the several lists are merged destructively.Sfileio.c
Vwrite-region-annotations-so-far
When an annotation function is called, this holds the previous annotations.
These are the annotations made by other annotation functions
that were already called.  See also `write-region-annotate-functions'.Sfileio.c
Vinhibit-file-name-handlers
A list of file name handlers that temporarily should not be used.
This applies only to the operation `inhibit-file-name-operation'.Sfileio.c
Vinhibit-file-name-operation
The operation for which `inhibit-file-name-handlers' is applicable.Sfileio.c
Vauto-save-list-file-name
File name in which we write a list of all auto save file names.Sfileio.c
Vwrite-region-inhibit-fsync
*Non-nil means don't call fsync in `write-region'.
This variable affects calls to `write-region' as well as save commands.
A non-nil value may result in data loss!Sfileio.c
Vauto-save-list-file-prefix
Prefix for generating auto-save-list-file-name.
Emacs's pid and the system name will be appended to
this prefix to create a unique file name.Sfileio.c
Vinhibit-auto-save-session
When non-nil, inhibit auto save list file creation.Sfileio.c
Vdisable-auto-save-when-buffer-shrinks
If non-nil, auto-saving is disabled when a buffer shrinks too much.
This is to prevent you from losing your edits if you accidentally
delete a large chunk of the buffer and don't notice it until too late.
Saving the buffer normally turns auto-save back on.Sfileio.c
Vdirectory-sep-char
Directory separator character for built-in functions that return file names.
The value should be either ?/ or ?\ (any other value is treated as ?\).
This variable affects the built-in functions only on Windows,
on other platforms, it is initialized so that Lisp code can find out
what the normal separator is.Sfileio.c
Vdefault-file-system-ignore-case
What `file-system-ignore-case-p' returns by default.
This is in the case that nothing in `file-system-case-alist' matches.Sfloatfns.c
Facos
Return the inverse cosine of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fasin
Return the inverse sine of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fatan
Return the inverse tangent of NUMBER.
If optional second argument NUMBER2 is provided,
return atan2 (NUMBER, NUMBER2).

arguments: (NUMBER &optional NUMBER2)
Sfloatfns.c
Fcos
Return the cosine of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fsin
Return the sine of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Ftan
Return the tangent of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fbessel-j0
Return the bessel function j0 of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fbessel-j1
Return the bessel function j1 of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fbessel-jn
Return the order N bessel function output jn of NUMBER.
The first number (the order) is truncated to an integer.

arguments: (NUMBER1 NUMBER2)
Sfloatfns.c
Fbessel-y0
Return the bessel function y0 of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fbessel-y1
Return the bessel function y1 of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fbessel-yn
Return the order N bessel function output yn of NUMBER.
The first number (the order) is truncated to an integer.

arguments: (NUMBER1 NUMBER2)
Sfloatfns.c
Ferf
Return the mathematical error function of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Ferfc
Return the complementary error function of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Flog-gamma
Return the log gamma of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fexp
Return the exponential base e of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fexpt
Return the exponential NUMBER1 ** NUMBER2.

arguments: (NUMBER1 NUMBER2)
Sfloatfns.c
Flog
Return the natural logarithm of NUMBER.
If second optional argument BASE is given, return the logarithm of
NUMBER using that base.

arguments: (NUMBER &optional BASE)
Sfloatfns.c
Flog10
Return the logarithm base 10 of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fsqrt
Return the square root of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fcube-root
Return the cube root of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Facosh
Return the inverse hyperbolic cosine of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fasinh
Return the inverse hyperbolic sine of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fatanh
Return the inverse hyperbolic tangent of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fcosh
Return the hyperbolic cosine of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fsinh
Return the hyperbolic sine of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Ftanh
Return the hyperbolic tangent of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Fabs
Return the absolute value of NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Ffloat
Return the floating point number numerically equal to NUMBER.

arguments: (NUMBER)
Sfloatfns.c
Flogb
Return largest integer <= the base 2 log of the magnitude of NUMBER.
This is the same as the exponent of a float.

arguments: (NUMBER)
Sfloatfns.c
Fceiling
Return the smallest integer no less than NUMBER.  (Round toward +inf.)

With optional argument DIVISOR, return the smallest integer no less than
the quotient of NUMBER and DIVISOR.

This function returns multiple values; see `multiple-value-bind' and
`multiple-value-call'.  The second returned value is the remainder in the
calculation, which will be one minus the fractional part of NUMBER if DIVISOR
is omitted or one.

arguments: (NUMBER &optional DIVISOR)
Sfloatfns.c
Ffloor
Return the largest integer no greater than NUMBER.  (Round towards -inf.)
With optional second argument DIVISOR, return the largest integer no
greater than the quotient of NUMBER and DIVISOR.

This function returns multiple values; see `multiple-value-call' and
`multiple-value-bind'.  The second returned value is the remainder in the
calculation, which will just be the fractional part if DIVISOR is omitted or
one.

arguments: (NUMBER &optional DIVISOR)
Sfloatfns.c
Fround
Return the nearest integer to NUMBER.
If NUMBER is exactly halfway between two integers, return the one that
is even.

Optional argument DIVISOR means return the nearest integer to NUMBER
divided by DIVISOR.

This function returns multiple values; see `multiple-value-call' and
`multiple-value-bind'.  The second returned value is the remainder
in the calculation.

arguments: (NUMBER &optional DIVISOR)
Sfloatfns.c
Ftruncate
Truncate a floating point number to an integer.
Rounds the value toward zero.

Optional argument DIVISOR means truncate NUMBER divided by DIVISOR.

This function returns multiple values; see `multiple-value-call' and
`multiple-value-bind'.  The second returned value is the remainder.

arguments: (NUMBER &optional DIVISOR)
Sfloatfns.c
Ffceiling
Return the smallest integer no less than NUMBER, as a float.
(Round toward +inf.)

With optional argument DIVISOR, return the smallest integer no less than the
quotient of NUMBER and DIVISOR, as a float.

This function returns multiple values; the second value is the remainder in
the calculation.

arguments: (NUMBER &optional DIVISOR)
Sfloatfns.c
Fffloor
Return the largest integer no greater than NUMBER, as a float.
(Round towards -inf.)

With optional argument DIVISOR, return the largest integer no greater than
the quotient of NUMBER and DIVISOR, as a float.

This function returns multiple values; the second value is the remainder in
the calculation.

arguments: (NUMBER &optional DIVISOR)
Sfloatfns.c
Ffround
Return the nearest integer to NUMBER, as a float.
If NUMBER is exactly halfway between two integers, return the one that is
even.

With optional argument DIVISOR, return the nearest integer to the quotient
of NUMBER and DIVISOR, as a float.

This function returns multiple values; the second value is the remainder in
the calculation.

arguments: (NUMBER &optional DIVISOR)
Sfloatfns.c
Fftruncate
Truncate a floating point number to an integral float value.
Rounds the value toward zero.

With optional argument DIVISOR, truncate the quotient of NUMBER and DIVISOR,
to an integral float value.

This function returns multiple values; the second value is the remainder in
the calculation.

arguments: (NUMBER &optional DIVISOR)
Sfns.c
Fidentity
Return the argument unchanged.

arguments: (ARG)
Sfns.c
Frandom
Return a pseudo-random number.
All fixnums are equally likely.  On most systems, this is 31 bits' worth.
With positive integer argument LIMIT, return random number in interval [0,
LIMIT).  LIMIT can be a bignum, in which case the range of possible values
is extended.  With argument t, set the random number seed from the current
time and pid.

arguments: (&optional LIMIT)
Sfns.c
Fsafe-length
Return the length of a list, but avoid error or infinite loop.
This function never gets an error.  If LIST is not really a list,
it returns 0.  If LIST is circular, it returns a finite value
which is at least the number of distinct elements.

arguments: (LIST)
Sfns.c
Flist-length
Return the length of LIST.  Return nil if LIST is circular.
Error if LIST is dotted.

arguments: (LIST)
Sfns.c
Fstring-equal
Return t if two strings have identical contents.
Case is significant.  Text properties are ignored.
(Under XEmacs, `equal' also ignores text properties and extents in
strings, but this is not the case under FSF Emacs 19.  In FSF Emacs 20
`equal' is the same as in XEmacs, in that respect.)
Symbols are also allowed; their print names are used instead.

arguments: (STRING1 STRING2)
Sfns.c
Fcompare-strings
Compare the contents of two strings, maybe ignoring case.
In string STR1, skip the first START1 characters and stop at END1.
In string STR2, skip the first START2 characters and stop at END2.
END1 and END2 default to the full lengths of the respective strings,
and arguments that are outside the string (negative STARTi or ENDi
greater than length) are coerced to 0 or string length as appropriate.

Optional IGNORE-CASE non-nil means use case-insensitive comparison.
Case is significant by default.

The value is t if the strings (or specified portions) match.
If string STR1 is less, the value is a negative number N;
  - 1 - N is the number of characters that match at the beginning.
If string STR1 is greater, the value is a positive number N;
  N - 1 is the number of characters that match at the beginning.

arguments: (STR1 START1 END1 STR2 START2 END2 &optional IGNORE-CASE)
Sfns.c
Fstring-lessp
Return t if first arg string is less than second in lexicographic order.
Comparison is simply done on a character-by-character basis using the
numeric value of a character. (Note that this may not produce
particularly meaningful results under Mule if characters from
different charsets are being compared.)

Symbols are also allowed; their print names are used instead.

Currently we don't do proper language-specific collation or handle
multiple character sets.  This may be changed when Unicode support
is implemented.

arguments: (STRING1 STRING2)
Sfns.c
Fstring-modified-tick
Return STRING's tick counter, incremented for each change to the string.
Each string has a tick counter which is incremented each time the contents
of the string are changed (e.g. with `aset').  It wraps around occasionally.

arguments: (STRING)
Sfns.c
Fappend
Concatenate all the arguments and make the result a list.
The result is a list whose elements are the elements of all the arguments.
Each argument may be a list, vector, bit vector, or string.
The last argument is not copied, just used as the tail of the new list.
Also see: `nconc'.

arguments: (&rest ARGS)Sfns.c
Fconcat
Concatenate all the arguments and make the result a string.
The result is a string whose elements are the elements of all the arguments.
Each argument may be a string or a list or vector of characters.

As of XEmacs 21.0, this function does NOT accept individual integers
as arguments.  Old code that relies on, for example, (concat "foo" 50)
returning "foo50" will fail.  To fix such code, either apply
`int-to-string' to the integer argument, or use `format'.

arguments: (&rest ARGS)Sfns.c
Fvconcat
Concatenate all the arguments and make the result a vector.
The result is a vector whose elements are the elements of all the arguments.
Each argument may be a list, vector, bit vector, or string.

arguments: (&rest ARGS)Sfns.c
Fbvconcat
Concatenate all the arguments and make the result a bit vector.
The result is a bit vector whose elements are the elements of all the
arguments.  Each argument may be a list, vector, bit vector, or string.

arguments: (&rest ARGS)Sfns.c
Fcopy-list
Return a copy of list LIST, which may be a dotted list.
The elements of LIST are not copied; they are shared
with the original.

arguments: (LIST)
Sfns.c
Fcopy-sequence
Return a copy of list, vector, bit vector or string SEQUENCE.
The elements of a list or vector are not copied; they are shared
with the original. SEQUENCE may be a dotted list.

arguments: (SEQUENCE)
Sfns.c
Fcopy-alist
Return a copy of ALIST.
This is an alist which represents the same mapping from objects to objects,
but does not share the alist structure with ALIST.
The objects mapped (cars and cdrs of elements of the alist)
are shared, however.
Elements of ALIST that are not conses are also shared.

arguments: (ALIST)
Sfns.c
Fsubstring-no-properties
Return a substring of STRING, without copying the extents.
END may be nil or omitted; then the substring runs to the end of STRING.
If START or END is negative, it counts from the end.

With one argument, copy STRING without its properties.

arguments: (STRING &optional START END)
Sfns.c
Fsplit-string-by-char
Split STRING into a list of substrings originally separated by SEPCHAR.

With optional ESCAPE-CHAR, any instances of SEPCHAR preceded by that
character will not split the string, and a double instance of ESCAPE-CHAR
will be necessary for a single ESCAPE-CHAR to appear in the output string.

arguments: (STRING SEPCHAR &optional ESCAPE-CHAR)
Sfns.c
Fnthcdr
Take cdr N times on LIST, and return the result.

arguments: (N LIST)
Sfns.c
Fnth
Return the Nth element of LIST.
N counts from zero.  If LIST is not that long, nil is returned.

arguments: (N LIST)
Sfns.c
Flast
Return the tail of list LIST, of length N (default 1).
LIST may be a dotted list, but not a circular list.
Optional argument N must be a non-negative integer.
If N is zero, then the atom that terminates the list is returned.
If N is greater than the length of LIST, then LIST itself is returned.

arguments: (LIST &optional N)
Sfns.c
Fnbutlast
Modify LIST to remove the last N (default 1) elements.

If LIST has N or fewer elements, nil is returned and LIST is unmodified.
Otherwise, LIST may be dotted, but not circular.

arguments: (LIST &optional N)
Sfns.c
Fbutlast
Return a copy of LIST with the last N (default 1) elements removed.

If LIST has N or fewer elements, nil is returned.
Otherwise, LIST may be dotted, but not circular, and `(butlast LIST 0)'
converts a dotted into a true list.

arguments: (LIST &optional N)
Sfns.c
Fplists-eq
Return non-nil if property lists A and B are `eq'.
A property list is an alternating list of keywords and values.
 This function does order-insensitive comparisons of the property lists:
 For example, the property lists '(a 1 b 2) and '(b 2 a 1) are equal.
 Comparison between values is done using `eq'.  See also `plists-equal'.
If optional arg NIL-MEANS-NOT-PRESENT is non-nil, then a property with
 a nil value is ignored.  This feature is a virus that has infected
 old Lisp implementations, but should not be used except for backward
 compatibility.

arguments: (A B &optional NIL-MEANS-NOT-PRESENT)
Sfns.c
Fplists-equal
Return non-nil if property lists A and B are `equal'.
A property list is an alternating list of keywords and values.  This
 function does order-insensitive comparisons of the property lists: For
 example, the property lists '(a 1 b 2) and '(b 2 a 1) are equal.
 Comparison between values is done using `equal'.  See also `plists-eq'.
If optional arg NIL-MEANS-NOT-PRESENT is non-nil, then a property with
 a nil value is ignored.  This feature is a virus that has infected
 old Lisp implementations, but should not be used except for backward
 compatibility.

arguments: (A B &optional NIL-MEANS-NOT-PRESENT)
Sfns.c
Flax-plists-eq
Return non-nil if lax property lists A and B are `eq'.
A property list is an alternating list of keywords and values.
 This function does order-insensitive comparisons of the property lists:
 For example, the property lists '(a 1 b 2) and '(b 2 a 1) are equal.
 Comparison between values is done using `eq'.  See also `plists-equal'.
A lax property list is like a regular one except that comparisons between
 keywords is done using `equal' instead of `eq'.
If optional arg NIL-MEANS-NOT-PRESENT is non-nil, then a property with
 a nil value is ignored.  This feature is a virus that has infected
 old Lisp implementations, but should not be used except for backward
 compatibility.

arguments: (A B &optional NIL-MEANS-NOT-PRESENT)
Sfns.c
Flax-plists-equal
Return non-nil if lax property lists A and B are `equal'.
A property list is an alternating list of keywords and values.  This
 function does order-insensitive comparisons of the property lists: For
 example, the property lists '(a 1 b 2) and '(b 2 a 1) are equal.
 Comparison between values is done using `equal'.  See also `plists-eq'.
A lax property list is like a regular one except that comparisons between
 keywords is done using `equal' instead of `eq'.
If optional arg NIL-MEANS-NOT-PRESENT is non-nil, then a property with
 a nil value is ignored.  This feature is a virus that has infected
 old Lisp implementations, but should not be used except for backward
 compatibility.

arguments: (A B &optional NIL-MEANS-NOT-PRESENT)
Sfns.c
Fplist-get
Extract a value from a property list.
PLIST is a property list, which is a list of the form
(PROPERTY1 VALUE1 PROPERTY2 VALUE2...).
PROPERTY is usually a symbol.
This function returns the value corresponding to the PROPERTY,
or DEFAULT if PROPERTY is not one of the properties on the list.

arguments: (PLIST PROPERTY &optional DEFAULT)
Sfns.c
Fplist-put
Change value in PLIST of PROPERTY to VALUE.
PLIST is a property list, which is a list of the form
(PROPERTY1 VALUE1 PROPERTY2 VALUE2 ...).
PROPERTY is usually a symbol and VALUE is any object.
If PROPERTY is already a property on the list, its value is set to VALUE,
otherwise the new PROPERTY VALUE pair is added.
The new plist is returned; use `(setq x (plist-put x property value))'
to be sure to use the new value.  PLIST is modified by side effect.

arguments: (PLIST PROPERTY VALUE)
Sfns.c
Fplist-remprop
Remove from PLIST the property PROPERTY and its value.
PLIST is a property list, which is a list of the form
(PROPERTY1 VALUE1 PROPERTY2 VALUE2 ...).
PROPERTY is usually a symbol.
The new plist is returned; use `(setq x (plist-remprop x property))'
to be sure to use the new value.  PLIST is modified by side effect.

arguments: (PLIST PROPERTY)
Sfns.c
Fplist-member
Return t if PROPERTY has a value specified in PLIST.

arguments: (PLIST PROPERTY)
Sfns.c
Fcheck-valid-plist
Given a plist, signal an error if there is anything wrong with it.
This means that it's a malformed or circular plist.

arguments: (PLIST)
Sfns.c
Fvalid-plist-p
Given a plist, return non-nil if its format is correct.
If it returns nil, `check-valid-plist' will signal an error when given
the plist; that means it's a malformed or circular plist.

arguments: (PLIST)
Sfns.c
Fcanonicalize-plist
Destructively remove any duplicate entries from a plist.
In such cases, the first entry applies.

If optional arg NIL-MEANS-NOT-PRESENT is non-nil, then a property with
 a nil value is removed.  This feature is a virus that has infected
 old Lisp implementations, but should not be used except for backward
 compatibility.

The new plist is returned.  If NIL-MEANS-NOT-PRESENT is given, the
 return value may not be EQ to the passed-in value, so make sure to
 `setq' the value back into where it came from.

arguments: (PLIST &optional NIL-MEANS-NOT-PRESENT)
Sfns.c
Flax-plist-get
Extract a value from a lax property list.
LAX-PLIST is a lax property list, which is a list of the form
(PROPERTY1 VALUE1 PROPERTY2 VALUE2...), where comparisons between
properties is done using `equal' instead of `eq'.
PROPERTY is usually a symbol.
This function returns the value corresponding to PROPERTY,
or DEFAULT if PROPERTY is not one of the properties on the list.

arguments: (LAX-PLIST PROPERTY &optional DEFAULT)
Sfns.c
Flax-plist-put
Change value in LAX-PLIST of PROPERTY to VALUE.
LAX-PLIST is a lax property list, which is a list of the form
(PROPERTY1 VALUE1 PROPERTY2 VALUE2...), where comparisons between
properties is done using `equal' instead of `eq'.
PROPERTY is usually a symbol and VALUE is any object.
If PROPERTY is already a property on the list, its value is set to
VALUE, otherwise the new PROPERTY VALUE pair is added.
The new plist is returned; use `(setq x (lax-plist-put x property value))'
to be sure to use the new value.  LAX-PLIST is modified by side effect.

arguments: (LAX-PLIST PROPERTY VALUE)
Sfns.c
Flax-plist-remprop
Remove from LAX-PLIST the property PROPERTY and its value.
LAX-PLIST is a lax property list, which is a list of the form
(PROPERTY1 VALUE1 PROPERTY2 VALUE2...), where comparisons between
properties is done using `equal' instead of `eq'.
PROPERTY is usually a symbol.
The new plist is returned; use `(setq x (lax-plist-remprop x property))'
to be sure to use the new value.  LAX-PLIST is modified by side effect.

arguments: (LAX-PLIST PROPERTY)
Sfns.c
Flax-plist-member
Return t if PROPERTY has a value specified in LAX-PLIST.
LAX-PLIST is a lax property list, which is a list of the form
(PROPERTY1 VALUE1 PROPERTY2 VALUE2...), where comparisons between
properties is done using `equal' instead of `eq'.

arguments: (LAX-PLIST PROPERTY)
Sfns.c
Fcanonicalize-lax-plist
Destructively remove any duplicate entries from a lax plist.
In such cases, the first entry applies.

If optional arg NIL-MEANS-NOT-PRESENT is non-nil, then a property with
 a nil value is removed.  This feature is a virus that has infected
 old Lisp implementations, but should not be used except for backward
 compatibility.

The new plist is returned.  If NIL-MEANS-NOT-PRESENT is given, the
 return value may not be EQ to the passed-in value, so make sure to
 `setq' the value back into where it came from.

arguments: (LAX-PLIST &optional NIL-MEANS-NOT-PRESENT)
Sfns.c
Fdestructive-alist-to-plist
Convert association list ALIST into the equivalent property-list form.
The plist is returned.  This converts from

((a . 1) (b . 2) (c . 3))

into

(a 1 b 2 c 3)

The original alist is destroyed in the process of constructing the plist.
See also `alist-to-plist'.

arguments: (ALIST)
Sfns.c
Fget
Return the value of OBJECT's PROPERTY property.
This is the last VALUE stored with `(put OBJECT PROPERTY VALUE)'.
If there is no such property, return optional third arg DEFAULT
(which defaults to `nil').  OBJECT can be a symbol, string, extent,
face, glyph, or process.  See also `put', `remprop', `object-plist', and
`object-setplist'.

arguments: (OBJECT PROPERTY &optional DEFAULT)
Sfns.c
Fput
Set OBJECT's PROPERTY to VALUE.
It can be subsequently retrieved with `(get OBJECT PROPERTY)'.
OBJECT can be a symbol, face, extent, or string.
For a string, no properties currently have predefined meanings.
For the predefined properties for extents, see `set-extent-property'.
For the predefined properties for faces, see `set-face-property'.
See also `get', `remprop', and `object-plist'.

arguments: (OBJECT PROPERTY VALUE)
Sfns.c
Fremprop
Remove, from OBJECT's property list, PROPERTY and its corresponding value.
OBJECT can be a symbol, string, extent, face, glyph, or process.
Return non-nil if the property list was actually modified (i.e. if PROPERTY
was present in the property list).  See also `get', `put', `object-plist',
and `object-setplist'.

arguments: (OBJECT PROPERTY)
Sfns.c
Fobject-plist
Return a property list of OBJECT's properties.
For a symbol, this is equivalent to `symbol-plist'.
OBJECT can be a symbol, string, extent, face, or glyph.
Do not modify the returned property list directly;
this may or may not have the desired effects.  Use `put' instead.

arguments: (OBJECT)
Sfns.c
Fobject-setplist
Set OBJECT's property list to NEWPLIST, and return NEWPLIST.
For a symbol, this is equivalent to `setplist'.

OBJECT can be a symbol or a process, other objects with visible plists do
not allow their modification with `object-setplist'.

arguments: (OBJECT NEWPLIST)
Sfns.c
Fequal
Return t if two Lisp objects have similar structure and contents.
They must have the same data type.
Conses are compared by comparing the cars and the cdrs.
Vectors and strings are compared element by element.
Numbers are compared by value.  Symbols must match exactly.

arguments: (OBJECT1 OBJECT2)
Sfns.c
Fequalp
Return t if two Lisp objects have similar structure and contents.

This is like `equal', except that it accepts numerically equal
numbers of different types (float, integer, bignum, bigfloat), and also
compares strings and characters case-insensitively.

Type objects that are arrays (that is, strings, bit-vectors, and vectors)
of the same length and with contents that are `equalp' are themselves
`equalp', regardless of whether the two objects have the same type.

Other objects whose primary purpose is as containers of other objects are
`equalp' if they would otherwise be equal (same length, type, etc.) and
their contents are `equalp'.  This goes for conses, weak lists,
weak boxes, ephemerons, specifiers, hash tables, char tables and range
tables.  However, objects that happen to contain other objects but are not
primarily designed for this purpose (e.g. compiled functions, events or
display-related objects such as glyphs, faces or extents) are currently
compared using `equalp' the same way as using `equal'.

More specifically, two hash tables are `equalp' if they have the same test
(see `hash-table-test'), the same number of entries, and the same value for
`hash-table-weakness', and if, for each entry in one hash table, its key is
equivalent to a key in the other hash table using the hash table test, and
its value is `equalp' to the other hash table's value for that key.

arguments: (OBJECT1 OBJECT2)
Sfns.c
Fold-member
Return non-nil if ELT is an element of LIST.  Comparison done with `old-equal'.
The value is actually the tail of LIST whose car is ELT.
This function is provided only for byte-code compatibility with v19.
Do not use it.

arguments: (ELT LIST)
Sfns.c
Fold-memq
Return non-nil if ELT is an element of LIST.  Comparison done with `old-eq'.
The value is actually the tail of LIST whose car is ELT.
This function is provided only for byte-code compatibility with v19.
Do not use it.

arguments: (ELT LIST)
Sfns.c
Fold-assoc
Return non-nil if KEY is `old-equal' to the car of an element of ALIST.
The value is actually the element of ALIST whose car equals KEY.

arguments: (KEY ALIST)
Sfns.c
Fold-assq
Return non-nil if KEY is `old-eq' to the car of an element of ALIST.
The value is actually the element of ALIST whose car is KEY.
Elements of ALIST that are not conses are ignored.
This function is provided only for byte-code compatibility with v19.
Do not use it.

arguments: (KEY ALIST)
Sfns.c
Fold-rassq
Return non-nil if VALUE is `old-eq' to the cdr of an element of ALIST.
The value is actually the element of ALIST whose cdr is VALUE.

arguments: (VALUE ALIST)
Sfns.c
Fold-rassoc
Return non-nil if VALUE is `old-equal' to the cdr of an element of ALIST.
The value is actually the element of ALIST whose cdr equals VALUE.

arguments: (VALUE ALIST)
Sfns.c
Fold-delete
Delete by side effect any occurrences of ELT as a member of LIST.
The modified LIST is returned.  Comparison is done with `old-equal'.
If the first member of LIST is ELT, there is no way to remove it by side
effect; therefore, write `(setq foo (old-delete element foo))' to be sure
of changing the value of `foo'.

arguments: (ELT LIST)
Sfns.c
Fold-delq
Delete by side effect any occurrences of ELT as a member of LIST.
The modified LIST is returned.  Comparison is done with `old-eq'.
If the first member of LIST is ELT, there is no way to remove it by side
effect; therefore, write `(setq foo (old-delq element foo))' to be sure of
changing the value of `foo'.

arguments: (ELT LIST)
Sfns.c
Fold-equal
Return t if two Lisp objects have similar structure and contents.
They must have the same data type.
(Note, however, that an exception is made for characters and integers;
this is known as the "char-int confoundance disease." See `eq' and
`old-eq'.)
This function is provided only for byte-code compatibility with v19.
Do not use it.

arguments: (OBJECT1 OBJECT2)
Sfns.c
Fold-eq
Return t if the two args are (in most cases) the same Lisp object.

Special kludge: A character is considered `old-eq' to its equivalent integer
even though they are not the same object and are in fact of different
types.  This is ABSOLUTELY AND UTTERLY HORRENDOUS but is necessary to
preserve byte-code compatibility with v19.  This kludge is known as the
"char-int confoundance disease" and appears in a number of other
functions with `old-foo' equivalents.

Do not use this function!

arguments: (OBJECT1 OBJECT2)
Sfns.c
Fnconc
Concatenate any number of lists by altering them.
Only the last argument is not altered, and need not be a list.
Also see: `append'.
If the first argument is nil, there is no way to modify it by side
effect; therefore, write `(setq foo (nconc foo list))' to be sure of
changing the value of `foo'.

arguments: (&rest ARGS)Sfns.c
Fmaplist
Call FUNCTION on each sublist of LIST and LISTS.
Like `mapcar', except applies to lists and their cdr's rather than to
the elements themselves."

arguments: (FUNCTION LIST &rest LISTS)Sfns.c
Fmapl
Like `maplist', but do not accumulate values returned by the function.

arguments: (FUNCTION LIST &rest LISTS)Sfns.c
Fmapcon
Like `maplist', but chains together the values returned by FUNCTION.

FUNCTION must return a list (unless it happens to be the last
iteration); the results will be concatenated together using `nconc'.

arguments: (FUNCTION LIST &rest LISTS)Sfns.c
Freplace-list
Destructively replace the list OLD with NEW.
This is like (copy-sequence NEW) except that it reuses the
conses in OLD as much as possible.  If OLD and NEW are the same
length, no consing will take place.

arguments: (OLD NEW)
Sfns.c
Fload-average
Return list of 1 minute, 5 minute and 15 minute load averages.
Each of the three load averages is multiplied by 100,
then converted to integer.

When USE-FLOATS is non-nil, floats will be used instead of integers.
These floats are not multiplied by 100.

If the 5-minute or 15-minute load averages are not available, return a
shortened list, containing only those averages which are available.

On some systems, this won't work due to permissions on /dev/kmem,
in which case you can't use this.

arguments: (&optional USE-FLOATS)
Sfns.c
Ffeaturep
Return non-nil if feature FEXP is present in this Emacs.
Use this to conditionalize execution of lisp code based on the
 presence or absence of emacs or environment extensions.
FEXP can be a symbol, a number, or a list.
If it is a symbol, that symbol is looked up in the `features' variable,
 and non-nil will be returned if found.
If it is a number, the function will return non-nil if this Emacs
 has an equal or greater version number than FEXP.
If it is a list whose car is the symbol `and', it will return
 non-nil if all the features in its cdr are non-nil.
If it is a list whose car is the symbol `or', it will return non-nil
 if any of the features in its cdr are non-nil.
If it is a list whose car is the symbol `not', it will return
 non-nil if the feature is not present.

Examples:

  (featurep 'xemacs)
    => ; Non-nil on XEmacs.

  (featurep '(and xemacs gnus))
    => ; Non-nil on XEmacs with Gnus loaded.

  (featurep '(or tty-frames (and emacs 19.30)))
    => ; Non-nil if this Emacs supports TTY frames.

  (featurep '(or (and xemacs 19.15) (and emacs 19.34)))
    => ; Non-nil on XEmacs 19.15 and later, or FSF Emacs 19.34 and later.

  (featurep '(and xemacs 21.02))
    => ; Non-nil on XEmacs 21.2 and later.

NOTE: The advanced arguments of this function (anything other than a
symbol) are not yet supported by FSF Emacs.  If you feel they are useful
for supporting multiple Emacs variants, lobby Richard Stallman at
<bug-gnu-emacs@gnu.org>.

arguments: (FEXP)
Sfns.c
Fprovide
Announce that FEATURE is a feature of the current Emacs.
This function updates the value of the variable `features'.

arguments: (FEATURE)
Sfns.c
Frequire
Ensure that FEATURE is present in the Lisp environment.
FEATURE is a symbol naming a collection of resources (functions, etc).
Optional FILENAME is a library from which to load resources; it defaults to
the print name of FEATURE.
Optional NOERROR, if non-nil, causes require to return nil rather than signal
`file-error' if loading the library fails.

If feature FEATURE is present in `features', update `load-history' to reflect
the require and return FEATURE.  Otherwise, try to load it from a library.
The normal messages at start and end of loading are suppressed.
If the library is successfully loaded and it calls `(provide FEATURE)', add
FEATURE to `features', update `load-history' and return FEATURE.
If the load succeeds but FEATURE is not provided by the library, signal
`invalid-state'.

The byte-compiler treats top-level calls to `require' specially, by evaluating
them at compile time (and then compiling them normally).  Thus a library may
request that definitions that should be inlined such as macros and defsubsts
be loaded into its compilation environment.  Achieving this in other contexts
requires an explicit (eval-and-compile ...) block.

arguments: (FEATURE &optional FILENAME NOERROR)
Sfns.c
Fbase64-encode-region
Base64-encode the region between START and END.
Return the length of the encoded text.
Optional third argument NO-LINE-BREAK means do not break long lines
into shorter lines.

arguments: (START END &optional NO-LINE-BREAK)
Sfns.c
Fbase64-encode-string
Base64 encode STRING and return the result.
Optional argument NO-LINE-BREAK means do not break long lines
into shorter lines.

arguments: (STRING &optional NO-LINE-BREAK)
Sfns.c
Fbase64-decode-region
Base64-decode the region between START and END.
Return the length of the decoded text.
If the region can't be decoded, return nil and don't modify the buffer.
Characters out of the base64 alphabet are ignored.

arguments: (START END)
Sfns.c
Fbase64-decode-string
Base64-decode STRING and return the result.
Characters out of the base64 alphabet are ignored.

arguments: (STRING)
Sfns.c
Vpath-separator
The directory separator in search paths, as a string.Sfns.c
Vfeatures
A list of symbols which are the features of the executing emacs.
Used by `featurep' and `require', and altered by `provide'.Sfont-lock.c
Fbuffer-syntactic-context
Return the syntactic context of BUFFER at point.
If BUFFER is nil or omitted, the current buffer is assumed.
The returned value is one of the following symbols:

	nil		; meaning no special interpretation
	string		; meaning point is within a string
	comment		; meaning point is within a line comment
	block-comment	; meaning point is within a block comment

See also the function `buffer-syntactic-context-depth', which returns
the current nesting-depth within all parenthesis-syntax delimiters
and the function `syntactically-sectionize', which will map a function
over each syntactic context in a region.

WARNING: this may alter match-data.

arguments: (&optional BUFFER)
Sfont-lock.c
Fbuffer-syntactic-context-depth
Return the depth within all parenthesis-syntax delimiters at point.
If BUFFER is nil or omitted, the current buffer is assumed.
WARNING: this may alter match-data.

arguments: (&optional BUFFER)
Sfont-lock.c
Fsyntactically-sectionize
Call FUNCTION for each contiguous syntactic context in the region.
Call the given function with four arguments: the start and end of the
region, a symbol representing the syntactic context, and the current
depth (as returned by the functions `buffer-syntactic-context' and
`buffer-syntactic-context-depth').  When this function is called, the
current buffer will be set to BUFFER.

WARNING: this may alter match-data.

arguments: (FUNCTION START END &optional BUFFER)
Sframe.c
Fmake-frame
Create and return a new frame, displaying the current buffer.
Runs the functions listed in `create-frame-hook' after frame creation.

Optional argument PROPS is a property list (a list of alternating
keyword-value specifications) of properties for the new frame.
(An alist is accepted for backward compatibility but should not
be passed in.)

See `set-frame-properties', `default-x-frame-plist', and
`default-tty-frame-plist' for the specially-recognized properties.

arguments: (&optional PROPS DEVICE)
Sframe.c
Fframep
Return non-nil if OBJECT is a frame.
Also see `frame-live-p'.
Note that FSF Emacs kludgily returns a value indicating what type of
frame this is.  Use the cleaner function `frame-type' for that.

arguments: (OBJECT)
Sframe.c
Fframe-live-p
Return non-nil if OBJECT is a frame which has not been deleted.

arguments: (OBJECT)
Sframe.c
Fframe-device
Return the device that FRAME is on.
If omitted, FRAME defaults to the currently selected frame.

arguments: (&optional FRAME)
Sframe.c
Ffocus-frame
Select FRAME and give it the window system focus.
This function is not affected by the value of `focus-follows-mouse'.

arguments: (FRAME)
Sframe.c
Fselect-frame
Select the frame FRAME.
Subsequent editing commands apply to its selected window.
The selection of FRAME lasts until the next time the user does
something to select a different frame, or until the next time this
function is called.

Note that this does not actually cause the window-system focus to be
set to this frame, or the `select-frame-hook' or `deselect-frame-hook'
to be run, until the next time that XEmacs is waiting for an event.

Also note that when focus-follows-mouse is non-nil, the frame
selection is temporary and is reverted when the current command
terminates, much like the buffer selected by `set-buffer'.  In order
to effect a permanent focus change, use `focus-frame'.

arguments: (FRAME)
Sframe.c
Fhandle-switch-frame
Handle a switch-frame event EVENT.
Switch-frame events are usually bound to this function.
A switch-frame event tells Emacs that the window manager has requested
that the user's events be directed to the frame mentioned in the event.
This function selects the selected window of the frame of EVENT.

If EVENT is frame object, handle it as if it were a switch-frame event
to that frame.

arguments: (FRAME &optional NO-ENTER)
Sframe.c
Fignore-event
Do nothing, but preserve any prefix argument already specified.
This is a suitable binding for iconify-frame and make-frame-visible.

arguments: ()
Sframe.c
Fselected-frame
Return the frame that is now selected on device DEVICE.
If DEVICE is not specified, the selected device will be used.
If no frames exist on the device, nil is returned.

arguments: (&optional DEVICE)
Sframe.c
Factive-minibuffer-window
Return the currently active minibuffer window, or nil if none.

arguments: ()
Sframe.c
Flast-nonminibuf-frame
Return the most-recently-selected non-minibuffer-only frame on CONSOLE.
This will always be the same as (selected-frame device) unless the
selected frame is a minibuffer-only frame.
CONSOLE defaults to the selected console if omitted.

arguments: (&optional CONSOLE)
Sframe.c
Fframe-root-window
Return the root-window of FRAME.
If omitted, FRAME defaults to the currently selected frame.

arguments: (&optional FRAME)
Sframe.c
Fframe-selected-window
Return the selected window of frame object FRAME.
If omitted, FRAME defaults to the currently selected frame.

arguments: (&optional FRAME)
Sframe.c
Fset-frame-selected-window
Set the selected window of FRAME to WINDOW.
If FRAME is nil, the selected frame is used.
If FRAME is the selected frame, this makes WINDOW the selected window.

arguments: (FRAME WINDOW)
Sframe.c
Fdisable-frame
Disable frame FRAME, so that it cannot have the focus or receive user input.
This is normally used during modal dialog boxes.
WARNING: Be very careful not to wedge XEmacs!
Use an `unwind-protect' that re-enables the frame to avoid this.

arguments: (FRAME)
Sframe.c
Fenable-frame
Enable frame FRAME, so that it can have the focus and receive user input.
Frames are normally enabled, unless explicitly disabled using `disable-frame'.

arguments: (FRAME)
Sframe.c
Fnext-frame
Return the next frame of the right type in the frame list after FRAME.
WHICH-FRAMES controls which frames are eligible to be returned; all
others will be skipped.  Note that if there is only one eligible
frame, then `next-frame' called repeatedly will always return
the same frame, and if there is no eligible frame, then FRAME is
returned.

Possible values for WHICH-FRAMES are

`visible'                 Consider only frames that are visible.
`iconic'                  Consider only frames that are iconic.
`invisible'               Consider only frames that are invisible
			  (this is different from iconic).
`visible-iconic'          Consider frames that are visible or iconic.
`invisible-iconic'        Consider frames that are invisible or iconic.
`nomini'                  Consider all frames except minibuffer-only ones.
`visible-nomini'          Like `visible' but omits minibuffer-only frames.
`iconic-nomini'           Like `iconic' but omits minibuffer-only frames.
`invisible-nomini'        Like `invisible' but omits minibuffer-only frames.
`visible-iconic-nomini'   Like `visible-iconic' but omits minibuffer-only
			  frames.
`invisible-iconic-nomini' Like `invisible-iconic' but omits minibuffer-only
			  frames.
any other value           Consider all frames.

If WHICH-FRAMES is omitted, `nomini' is used.  A value for WHICH-FRAMES
of 0 (a number) is treated like `iconic', for backwards compatibility.

If WHICH-FRAMES is a window, include only its own frame and any frame
now using that window as the minibuffer.

The optional third argument WHICH-DEVICES further clarifies on which
devices to search for frames as specified by WHICH-FRAMES.
If nil or omitted, search all devices on FRAME's console.
If a device, only search that device.
If a console, search all devices on that console.
If a device type, search all devices of that type.
If `window-system', search all window-system devices.
Any other non-nil value means search all devices.

arguments: (&optional FRAME WHICH-FRAMES WHICH-DEVICES)
Sframe.c
Fprevious-frame
Return the next frame of the right type in the frame list after FRAME.
WHICH-FRAMES controls which frames are eligible to be returned; all
others will be skipped.  Note that if there is only one eligible
frame, then `previous-frame' called repeatedly will always return
the same frame, and if there is no eligible frame, then FRAME is
returned.

See `next-frame' for an explanation of the WHICH-FRAMES and WHICH-DEVICES
arguments.

arguments: (&optional FRAME WHICH-FRAMES WHICH-DEVICES)
Sframe.c
Fdelete-frame
Delete FRAME, permanently eliminating it from use.
If omitted, FRAME defaults to the selected frame.
A frame may not be deleted if its minibuffer is used by other frames.
Normally, you cannot delete the last non-minibuffer-only frame (you must
use `save-buffers-kill-emacs' or `kill-emacs').  However, if optional
second argument FORCE is non-nil, you can delete the last frame. (This
will automatically call `save-buffers-kill-emacs'.)

arguments: (&optional FRAME FORCE)
Sframe.c
Fmouse-pixel-position
Return a list (WINDOW X . Y) giving the current mouse window and position.
The position is given in pixel units, where (0, 0) is the upper-left corner
of the window.

When the cursor is not over a window, the return value is a list (nil nil).

DEVICE specifies the device on which to read the mouse position, and
defaults to the selected device.  If the device is a mouseless terminal
or XEmacs hasn't been programmed to read its mouse position, it returns
the device's selected window for WINDOW and nil for X and Y.

arguments: (&optional DEVICE)
Sframe.c
Fmouse-position
Return a list (WINDOW X . Y) giving the current mouse window and position.
The position is of a character under cursor, where (0, 0) is the upper-left
corner of the window.

When the cursor is not over a character, or not over a window, the return
value is a list (nil nil).

DEVICE specifies the device on which to read the mouse position, and
defaults to the selected device.  If the device is a mouseless terminal
or Emacs hasn't been programmed to read its mouse position, it returns
the device's selected window for WINDOW and nil for X and Y.

arguments: (&optional DEVICE)
Sframe.c
Fmouse-position-as-motion-event
Return the current mouse position as a motion event.
This allows you to call the standard event functions such as
`event-over-toolbar-p' to determine where the mouse is.

DEVICE specifies the device on which to read the mouse position, and
defaults to the selected device.  If the mouse position can't be determined
(e.g. DEVICE is a TTY device), nil is returned instead of an event.

arguments: (&optional DEVICE)
Sframe.c
Fset-mouse-position
Move the mouse pointer to the center of character cell (X,Y) in WINDOW.
Note, this is a no-op for an X frame that is not visible.
If you have just created a frame, you must wait for it to become visible
before calling this function on it, like this.
  (while (not (frame-visible-p frame)) (sleep-for .5))
Note also: Warping the mouse is contrary to the ICCCM, so be very sure
 that the behavior won't end up being obnoxious!

arguments: (WINDOW X Y)
Sframe.c
Fset-mouse-pixel-position
Move the mouse pointer to pixel position (X,Y) in WINDOW.
Note, this is a no-op for an X frame that is not visible.
If you have just created a frame, you must wait for it to become visible
before calling this function on it, like this.
  (while (not (frame-visible-p frame)) (sleep-for .5))

arguments: (WINDOW X Y)
Sframe.c
Fmake-frame-visible
Make the frame FRAME visible (assuming it is an X-window).
If omitted, FRAME defaults to the currently selected frame.
Also raises the frame so that nothing obscures it.

arguments: (&optional FRAME)
Sframe.c
Fmake-frame-invisible
Unconditionally removes frame from the display (assuming it is an X-window).
If omitted, FRAME defaults to the currently selected frame.
If what you want to do is iconify the frame (if the window manager uses
icons) then you should call `iconify-frame' instead.
Normally you may not make FRAME invisible if all other frames are invisible
and uniconified, but if the second optional argument FORCE is non-nil,
you may do so.

arguments: (&optional FRAME FORCE)
Sframe.c
Ficonify-frame
Make the frame FRAME into an icon, if the window manager supports icons.
If omitted, FRAME defaults to the currently selected frame.

arguments: (&optional FRAME)
Sframe.c
Fdeiconify-frame
Open (de-iconify) the iconified frame FRAME.
Under X, this is currently the same as `make-frame-visible'.
If omitted, FRAME defaults to the currently selected frame.
Also raises the frame so that nothing obscures it.

arguments: (&optional FRAME)
Sframe.c
Fframe-visible-p
Return non NIL if FRAME is now "visible" (actually in use for display).
A frame that is not visible is not updated, and, if it works through a
window system, may not show at all.
N.B. Under X "visible" means Mapped. It the window is mapped but not
actually visible on screen then `frame-visible-p' returns `hidden'.

arguments: (&optional FRAME)
Sframe.c
Fframe-totally-visible-p
Return t if frame is not obscured by any other window system windows.
Always returns t for tty frames.

arguments: (&optional FRAME)
Sframe.c
Fframe-iconified-p
Return t if FRAME is iconified.
Not all window managers use icons; some merely unmap the window, so this
function is not the inverse of `frame-visible-p'.  It is possible for a
frame to not be visible and not be iconified either.  However, if the
frame is iconified, it will not be visible.

arguments: (&optional FRAME)
Sframe.c
Fvisible-frame-list
Return a list of all frames now "visible" (being updated).
If DEVICE is specified only frames on that device will be returned.
Note that under virtual window managers not all these frames are
necessarily really updated.

arguments: (&optional DEVICE)
Sframe.c
Fraise-frame
Bring FRAME to the front, so it occludes any frames it overlaps.
If omitted, FRAME defaults to the currently selected frame.
If FRAME is invisible, make it visible.
If Emacs is displaying on an ordinary terminal or some other device which
doesn't support multiple overlapping frames, this function does nothing.

arguments: (&optional FRAME)
Sframe.c
Flower-frame
Send FRAME to the back, so it is occluded by any frames that overlap it.
If omitted, FRAME defaults to the currently selected frame.
If Emacs is displaying on an ordinary terminal or some other device which
doesn't support multiple overlapping frames, this function does nothing.

arguments: (&optional FRAME)
Sframe.c
Fprint-job-page-number
Return current page number for the print job FRAME.

arguments: (FRAME)
Sframe.c
Fprint-job-eject-page
Eject page in the print job FRAME.

arguments: (FRAME)
Sframe.c
Fframe-name
Return the name of FRAME (defaulting to the selected frame).
This is not the same as the `title' of the frame.

arguments: (&optional FRAME)
Sframe.c
Fframe-modified-tick
Return FRAME's tick counter, incremented for each change to the frame.
Each frame has a tick counter which is incremented each time the frame
is resized, a window is resized, added, or deleted, a face is changed,
`set-window-buffer' or `select-window' is called on a window in the
frame, the window-start of a window in the frame has changed, or
anything else interesting has happened.  It wraps around occasionally.
No argument or nil as argument means use selected frame as FRAME.

arguments: (&optional FRAME)
Sframe.c
Fset-frame-properties
Change some properties of a frame.
PLIST is a property list.
You can also change frame properties individually using `set-frame-property',
but it may be more efficient to change many properties at once.

Frame properties can be retrieved using `frame-property' or `frame-properties'.

The following symbols etc. have predefined meanings:

 name		Name of the frame.  Used with X resources.
		Unchangeable after creation.

 height		Height of the frame, in lines.

 width		Width of the frame, in characters.

 minibuffer	Gives the minibuffer behavior for this frame.  Either
		t (frame has its own minibuffer), `only' (frame is
		a minibuffer-only frame), `none' (frame has no minibuffer)
		or a window (frame uses that window, which is on another
		frame, as the minibuffer).

 unsplittable	If non-nil, frame cannot be split by `display-buffer'.

 current-display-table, menubar-visible-p, left-margin-width,
 right-margin-width, minimum-line-ascent, minimum-line-descent,
 use-left-overflow, use-right-overflow, scrollbar-width, scrollbar-height,
 default-toolbar, top-toolbar, bottom-toolbar, left-toolbar, right-toolbar,
 default-toolbar-height, default-toolbar-width, top-toolbar-height,
 bottom-toolbar-height, left-toolbar-width, right-toolbar-width,
 default-toolbar-visible-p, top-toolbar-visible-p, bottom-toolbar-visible-p,
 left-toolbar-visible-p, right-toolbar-visible-p, toolbar-buttons-captioned-p,
 top-toolbar-border-width, bottom-toolbar-border-width,
 left-toolbar-border-width, right-toolbar-border-width,
 modeline-shadow-thickness, has-modeline-p,
 default-gutter, top-gutter, bottom-gutter, left-gutter, right-gutter,
 default-gutter-height, default-gutter-width, top-gutter-height,
 bottom-gutter-height, left-gutter-width, right-gutter-width,
 default-gutter-visible-p, top-gutter-visible-p, bottom-gutter-visible-p,
 left-gutter-visible-p, right-gutter-visible-p, top-gutter-border-width,
 bottom-gutter-border-width, left-gutter-border-width, right-gutter-border-width,
		[Giving the name of any built-in specifier variable is
		equivalent to calling `set-specifier' on the specifier,
		with a locale of FRAME.  Giving the name to `frame-property'
		calls `specifier-instance' on the specifier.]

 text-pointer-glyph, nontext-pointer-glyph, modeline-pointer-glyph,
 selection-pointer-glyph, busy-pointer-glyph, toolbar-pointer-glyph,
 menubar-pointer-glyph, scrollbar-pointer-glyph, gc-pointer-glyph,
 octal-escape-glyph, control-arrow-glyph, invisible-text-glyph,
 hscroll-glyph, truncation-glyph, continuation-glyph
		[Giving the name of any glyph variable is equivalent to
		calling `set-glyph-image' on the glyph, with a locale
		of FRAME.  Giving the name to `frame-property' calls
		`glyph-image-instance' on the glyph.]

 [default foreground], [default background], [default font],
 [modeline foreground], [modeline background], [modeline font],
 etc.
		[Giving a vector of a face and a property is equivalent
		to calling `set-face-property' on the face and property,
		with a locale of FRAME.  Giving the vector to
		`frame-property' calls `face-property-instance' on the
		face and property.]

Finally, if a frame property symbol has the property `frame-property-alias'
on it, then the value will be used in place of that symbol when looking
up and setting frame property values.  This allows you to alias one
frame property name to another.

See the variables `default-x-frame-plist', `default-tty-frame-plist'
and `default-mswindows-frame-plist' for a description of the properties
recognized for particular types of frames.

arguments: (FRAME PLIST)
Sframe.c
Fframe-property
Return FRAME's value for property PROPERTY.
Return DEFAULT if there is no such property.
See `set-frame-properties' for the built-in property names.

arguments: (FRAME PROPERTY &optional DEFAULT)
Sframe.c
Fframe-properties
Return a property list of the properties of FRAME.
Do not modify this list; use `set-frame-property' instead.

arguments: (&optional FRAME)
Sframe.c
Fframe-pixel-height
Return the total height in pixels of FRAME.

arguments: (&optional FRAME)
Sframe.c
Fframe-displayable-pixel-height
Return the height of the displayable area in pixels of FRAME.

arguments: (&optional FRAME)
Sframe.c
Fframe-pixel-width
Return the total width in pixels of FRAME.

arguments: (&optional FRAME)
Sframe.c
Fframe-displayable-pixel-width
Return the width of the displayable area in pixels of FRAME.

arguments: (&optional FRAME)
Sframe.c
Fset-frame-height
Specify that the frame FRAME has LINES lines.
Optional third arg non-nil means that redisplay should use LINES lines
but that the idea of the actual height of the frame should not be changed.

arguments: (FRAME LINES &optional PRETEND)
Sframe.c
Fset-frame-pixel-height
Specify that the frame FRAME is a total of HEIGHT pixels tall.
Optional third arg non-nil means that redisplay should be HEIGHT pixels tall
but that the idea of the actual height of the frame should not be changed.

arguments: (FRAME HEIGHT &optional PRETEND)
Sframe.c
Fset-frame-displayable-pixel-height
Specify that the displayable area of frame FRAME is HEIGHT pixels tall.
Optional third arg non-nil means that redisplay should be HEIGHT pixels tall
but that the idea of the actual height of the frame should not be changed.

arguments: (FRAME HEIGHT &optional PRETEND)
Sframe.c
Fset-frame-width
Specify that the frame FRAME has COLS columns.
Optional third arg non-nil means that redisplay should use COLS columns
but that the idea of the actual width of the frame should not be changed.

arguments: (FRAME COLS &optional PRETEND)
Sframe.c
Fset-frame-pixel-width
Specify that the frame FRAME is a total of WIDTH pixels wide.
Optional third arg non-nil means that redisplay should be WIDTH wide
but that the idea of the actual height of the frame should not be changed.

arguments: (FRAME WIDTH &optional PRETEND)
Sframe.c
Fset-frame-displayable-pixel-width
Specify that the displayable area of frame FRAME is WIDTH pixels wide.
Optional third arg non-nil means that redisplay should be WIDTH wide
but that the idea of the actual height of the frame should not be changed.

arguments: (FRAME WIDTH &optional PRETEND)
Sframe.c
Fset-frame-size
Set the size of FRAME to COLS by ROWS, measured in characters.
Optional fourth arg non-nil means that redisplay should use COLS by ROWS
but that the idea of the actual size of the frame should not be changed.

arguments: (FRAME COLS ROWS &optional PRETEND)
Sframe.c
Fset-frame-pixel-size
Set the total size of FRAME to WIDTH by HEIGHT, measured in pixels.
Optional fourth arg non-nil means that redisplay should use WIDTH by HEIGHT
but that the idea of the actual size of the frame should not be changed.

arguments: (FRAME WIDTH HEIGHT &optional PRETEND)
Sframe.c
Fset-frame-displayable-pixel-size
Set the displayable size of FRAME to WIDTH by HEIGHT, measured in pixels.
Optional fourth arg non-nil means that redisplay should use WIDTH by HEIGHT
but that the idea of the actual size of the frame should not be changed.

arguments: (FRAME WIDTH HEIGHT &optional PRETEND)
Sframe.c
Fset-frame-position
Set position of FRAME in pixels to XOFFSET by YOFFSET.
This is actually the position of the upper left corner of the frame.
Negative values for XOFFSET or YOFFSET are interpreted relative to
the rightmost or bottommost possible position (that stays within the screen).

arguments: (FRAME XOFFSET YOFFSET)
Sframe.c
Fset-frame-pointer
Set the mouse pointer of FRAME to the given pointer image instance.
You should not call this function directly.  Instead, set one of
the variables `text-pointer-glyph', `nontext-pointer-glyph',
`modeline-pointer-glyph', `selection-pointer-glyph',
`busy-pointer-glyph', or `toolbar-pointer-glyph'.

arguments: (FRAME IMAGE-INSTANCE)
Sframe.c
Vselect-frame-hook
Function or functions to run just after a new frame is given the focus.
Note that calling `select-frame' does not necessarily set the focus:
The actual window-system focus will not be changed until the next time
that XEmacs is waiting for an event, and even then, the window manager
may refuse the focus-change request.Sframe.c
Vdeselect-frame-hook
Function or functions to run just before a frame loses the focus.
See `select-frame-hook'.Sframe.c
Vdelete-frame-hook
Function or functions to call when a frame is deleted.
One argument, the about-to-be-deleted frame.Sframe.c
Vcreate-frame-hook
Function or functions to call when a frame is created.
One argument, the newly-created frame.Sframe.c
Vmouse-enter-frame-hook
Function or functions to call when the mouse enters a frame.
One argument, the frame.
Be careful not to make assumptions about the window manager's focus model.
In most cases, the `deselect-frame-hook' is more appropriate.Sframe.c
Vmouse-leave-frame-hook
Function or functions to call when the mouse leaves a frame.
One argument, the frame.
Be careful not to make assumptions about the window manager's focus model.
In most cases, the `select-frame-hook' is more appropriate.Sframe.c
Vmap-frame-hook
Function or functions to call when a frame is mapped.
One argument, the frame.Sframe.c
Vunmap-frame-hook
Function or functions to call when a frame is unmapped.
One argument, the frame.Sframe.c
Vallow-deletion-of-last-visible-frame
*Non-nil means to assume the force option to delete-frame.Sframe.c
Vadjust-frame-function
Function or constant controlling adjustment of frame.
When scrollbars, toolbars, default font etc. change in frame, the frame
needs to be adjusted. The adjustment is controlled by this variable.
Legal values are:
  nil to keep character frame size unchanged when possible (resize)
  t   to keep pixel size unchanged (never resize)
  function symbol or lambda form. This function must return boolean
      value which is treated as above. Function is passed one parameter,
      the frame being adjusted. It function should not modify or delete
      the frame.Sframe.c
Vmouse-motion-handler
Handler for motion events.  Must be a function taking one argument, the event.
For most applications, you should use `mode-motion-hook' instead of this.
The default value is `default-mouse-motion-handler'.

Note that this is NOT a hook variable, so there is no standard way to remove
actions from it.  Instead, when adding a new kind of action, a hook variable
should be defined and initialized to the current value of this variable, then
this variable set to a function that runs the new hook.  To disable the new
actions, use `remove-hook' rather than setting `mouse-motion-handler'.

`mouse-motion-hook' in the balloon-help library exemplifies this pattern.Sframe.c
Vsynchronize-minibuffers
Set to t if all minibuffer windows are to be synchronized.
This will cause echo area messages to appear in the minibuffers of all
visible frames.Sframe.c
Vframe-title-format
Controls the title of the window-system window of the selected frame.
This is the same format as `modeline-format' with the exception that
%- is ignored.Sframe.c
Vframe-icon-title-format
Controls the title of the icon corresponding to the selected frame.
See also the variable `frame-title-format'.Sframe.c
Vdefault-frame-name
The default name to assign to newly-created frames.
This can be overridden by arguments to `make-frame'.  This must be a string.
This is used primarily for picking up X resources, and is *not* the title
of the frame. (See `frame-title-format'.)

Previous to 21.5.21, this defaulted to `emacs'; since that release, it has
defaulted to `XEmacs'. In the short term you can restore the old default by
setting the environment variable USE_EMACS_AS_DEFAULT_APPLICATION_CLASS
(which does affect the frame name, despite what it's called) to some value
before starting XEmacs, but this is deprecated.Sframe.c
Vdefault-frame-plist
Plist of default values for frame creation, other than the first one.
These may be set in your init file, like this:

  (setq default-frame-plist '(width 80 height 55))

Predefined properties are described in `set-frame-properties'.

The properties may be in alist format for backward compatibility
but you should not rely on this behavior.

These override values given in window system configuration data,
including X Windows' defaults database.

Values for the first Emacs frame are taken from `initial-frame-plist'.
Since the first X frame is created before loading your .emacs file, you
may wish use the X resource database to avoid flashing.

For values specific to the separate minibuffer frame, see
`minibuffer-frame-plist'.  See also the variables `default-x-frame-plist'
and `default-tty-frame-plist', which are like `default-frame-plist'
except that they apply only to X or tty frames, respectively (whereas
`default-frame-plist' applies to all types of frames).Sframe.c
Vframe-icon-glyph
Icon glyph used to iconify a frame.Sgc.c
Fgc-stats
Return statistics about garbage collection cycles in a property list.

arguments: ()
Sgc.c
Fgc-full
This function performs a full garbage collection. If an incremental
garbage collection is already running, it completes without any
further interruption.  This function guarantees that unused objects
are freed when it returns. Garbage collection happens automatically if
the client allocates more than `gc-cons-threshold' bytes of Lisp data
since the previous garbage collection.

arguments: ()
Sgc.c
Fgc-incremental
This function starts an incremental garbage collection. If an
incremental garbage collection is already running, the next cycle
starts. Note that this function has not necessarily freed any memory
when it returns. This function only guarantees, that the traversal of
the heap makes progress.  The next cycle of incremental garbage
collection happens automatically if the client allocates more than
`gc-incremental-cons-threshold' bytes of Lisp data since previous
garbage collection.

arguments: ()
Sgc.c
Vgc-cons-threshold
*Number of bytes of consing between full garbage collections.
"Consing" is a misnomer in that this actually counts allocation
of all different kinds of objects, not just conses.
Garbage collection can happen automatically once this many bytes have been
allocated since the last garbage collection.  All data types count.

Garbage collection happens automatically when `eval' or `funcall' are
called.  (Note that `funcall' is called implicitly as part of evaluation.)
By binding this temporarily to a large number, you can effectively
prevent garbage collection during a part of the program.

Normally, you cannot set this value less than 10,000 (if you do, it is
automatically reset during the next garbage collection).  However, if
XEmacs was compiled with DEBUG_XEMACS, this does not happen, allowing
you to set this value very low to track down problems with insufficient
GCPRO'ing.  If you set this to a negative number, garbage collection will
happen at *EVERY* call to `eval' or `funcall'.  This is an extremely
effective way to check GCPRO problems, but be warned that your XEmacs
will be unusable!  You almost certainly won't have the patience to wait
long enough to be able to set it back.
 
See also `consing-since-gc' and `gc-cons-percentage'.Sgc.c
Vgc-cons-percentage
*Percentage of memory allocated between garbage collections.

Garbage collection will happen if this percentage of the total amount of
memory used for data (see `lisp-object-memory-usage') has been allocated
since the last garbage collection.  However, it will not happen if less
than `gc-cons-threshold' bytes have been allocated -- this sets an absolute
minimum in case very little data has been allocated or the percentage is
set very low.  Set this to 0 to have garbage collection always happen after
`gc-cons-threshold' bytes have been allocated, regardless of current memory
usage.

See also `consing-since-gc' and `gc-cons-threshold'.Sgc.c
Vgc-cons-incremental-threshold
*Number of bytes of consing between cycles of incremental garbage
collections.  "Consing" is a misnomer in that this actually counts
allocation of all different kinds of objects, not just conses.  The
next garbage collection cycle can happen automatically once this many
bytes have been allocated since the last garbage collection cycle.
All data types count.

See also `gc-cons-threshold'.Sgc.c
Vgc-incremental-traversal-threshold
*Number of elements processed in one cycle of incremental travesal.Sgc.c
Vpurify-flag
Non-nil means loading Lisp code in order to dump an executable.
This means that certain objects should be allocated in readonly space.Sgc.c
Vgarbage-collection-messages
*Non-nil means display messages at start and end of garbage collection.Sgc.c
Vpre-gc-hook
Function or functions to be run just before each garbage collection.
Interrupts, garbage collection, and errors are inhibited while this hook
runs, so be extremely careful in what you add here.  In particular, avoid
consing, and do not interact with the user.Sgc.c
Vpost-gc-hook
Function or functions to be run just after each garbage collection.
Interrupts, garbage collection, and errors are inhibited while this hook
runs.  Each hook is called with one argument which is an alist with
finalization data.Sgc.c
Vgc-message
String to print to indicate that a garbage collection is in progress.
This is printed in the echo area.  If the selected frame is on a
window system and `gc-pointer-glyph' specifies a value (i.e. a pointer
image instance) in the domain of the selected frame, the mouse pointer
will change instead of this message being printed.Sgc.c
Vgc-pointer-glyph
Pointer glyph used to indicate that a garbage collection is in progress.
If the selected window is on a window system and this glyph specifies a
value (i.e. a pointer image instance) in the domain of the selected
window, the pointer will be changed as specified during garbage collection.
Otherwise, a message will be printed in the echo area, as controlled
by `gc-message'.Sgc.c
Vallow-incremental-gc
*Non-nil means to allow incremental garbage collection. Nil prevents
*incremental garbage collection, the garbage collector then only does
*full collects (even if (gc-incremental) is called).Sglyphs.c
Fvalid-image-instantiator-format-p
Given an IMAGE-INSTANTIATOR-FORMAT, return non-nil if it is valid.
If LOCALE is non-nil then the format is checked in that locale.
If LOCALE is nil the current console is used.

Valid formats are some subset of `nothing', `string', `formatted-string',
`xpm', `xbm', `xface', `gif', `jpeg', `png', `tiff', `cursor-font', `font',
`autodetect', `subwindow', `inherit', `mswindows-resource', `bmp',
`native-layout', `layout', `label', `tab-control', `tree-view',
`progress-gauge', `scrollbar', `combo-box', `edit-field', `button',
`widget', `pointer', and `text', depending on how XEmacs was compiled.

arguments: (IMAGE-INSTANTIATOR-FORMAT &optional LOCALE)
Sglyphs.c
Fimage-instantiator-format-list
Return a list of valid image-instantiator formats.

arguments: ()
Sglyphs.c
Fset-console-type-image-conversion-list
Set the image-conversion-list for consoles of the given CONSOLE-TYPE.
The image-conversion-list specifies how image instantiators that
are strings should be interpreted.  Each element of the list should be
a list of two elements (a regular expression string and a vector) or
a list of three elements (the preceding two plus an integer index into
the vector).  The string is converted to the vector associated with the
first matching regular expression.  If a vector index is specified, the
string itself is substituted into that position in the vector.

Note: The conversion above is applied when the image instantiator is
added to an image specifier, not when the specifier is actually
instantiated.  Therefore, changing the image-conversion-list only affects
newly-added instantiators.  Existing instantiators in glyphs and image
specifiers will not be affected.

arguments: (CONSOLE-TYPE LIST)
Sglyphs.c
Fconsole-type-image-conversion-list
Return the image-conversion-list for devices of the given CONSOLE-TYPE.
The image-conversion-list specifies how to interpret image string
instantiators for the specified console type.  See
`set-console-type-image-conversion-list' for a description of its syntax.

arguments: (CONSOLE-TYPE)
Sglyphs.c
Fset-instantiator-property
Destructively set the property KEYWORD of INSTANTIATOR to VALUE.
If the property is not set then it is added to a copy of the
instantiator and the new instantiator returned.
Use `set-glyph-image' on glyphs to register instantiator changes.  


arguments: (INSTANTIATOR KEYWORD VALUE)
Sglyphs.c
Fvalid-image-instance-type-p
Given an IMAGE-INSTANCE-TYPE, return non-nil if it is valid.
Valid types are some subset of `nothing', `text', `mono-pixmap',
`color-pixmap', `pointer', `subwindow', and `widget', depending on how
XEmacs was compiled.

arguments: (IMAGE-INSTANCE-TYPE)
Sglyphs.c
Fimage-instance-type-list
Return a list of valid image-instance types.

arguments: ()
Sglyphs.c
Fmake-image-instance
Return a new `image-instance' object.

Image-instance objects encapsulate the way a particular image (pixmap,
etc.) is displayed on a particular device.  In most circumstances, you
do not need to directly create image instances; use a glyph instead.
However, it may occasionally be useful to explicitly create image
instances, if you want more control over the instantiation process.

DATA is an image instantiator, which describes the image; see
`make-image-specifier' for a description of the allowed values.

DEST-TYPES should be a list of allowed image instance types that can
be generated.  The recognized image instance types are

`nothing'
  Nothing is displayed.
`text'
  Displayed as text.  The foreground and background colors and the
  font of the text are specified independent of the pixmap.  Typically
  these attributes will come from the face of the surrounding text,
  unless a face is specified for the glyph in which the image appears.
`mono-pixmap'
  Displayed as a mono pixmap (a pixmap with only two colors where the
  foreground and background can be specified independent of the pixmap;
  typically the pixmap assumes the foreground and background colors of
  the text around it, unless a face is specified for the glyph in which
  the image appears).
`color-pixmap'
  Displayed as a color pixmap.
`pointer'
  Used as the mouse pointer for a window.
`subwindow'
  A child window that is treated as an image.  This allows (e.g.)
  another program to be responsible for drawing into the window.
`widget'
  A child window that contains a window-system widget, e.g. a push
  button, text field, or slider.

The DEST-TYPES list is unordered.  If multiple destination types are
possible for a given instantiator, the "most natural" type for the
instantiator's format is chosen. (For XBM, the most natural types are
`mono-pixmap', followed by `color-pixmap', followed by `pointer'.  For
the other normal image formats, the most natural types are
`color-pixmap', followed by `mono-pixmap', followed by `pointer'.  For
the string and formatted-string formats, the most natural types are
`text', followed by `mono-pixmap' (not currently implemented),
followed by `color-pixmap' (not currently implemented).  For MS
Windows resources, the most natural type for pointer resources is
`pointer', and for the others it's `color-pixmap'.  The other formats
can only be instantiated as one type. (If you want to control more
specifically the order of the types into which an image is
instantiated, just call `make-image-instance' repeatedly until it
succeeds, passing less and less preferred destination types each
time.)

See `make-image-specifier' for a description of the different image
instantiator formats.

If DEST-TYPES is omitted, all possible types are allowed.

DOMAIN specifies the domain to which the image instance will be attached.
This domain is termed the "governing domain".  The type of the governing
domain depends on the image instantiator format. (Although, more correctly,
it should probably depend on the image instance type.) For example, pixmap
image instances are specific to a device, but widget image instances are
specific to a particular XEmacs window because in order to display such a
widget when two windows onto the same buffer want to display the widget,
two separate underlying widgets must be created. (That's because a widget
is actually a child window-system window, and all window-system windows have
a unique existence on the screen.) This means that the governing domain for
a pixmap image instance will be some device (most likely, the only existing
device), whereas the governing domain for a widget image instance will be
some XEmacs window.

If you specify an overly general DOMAIN (e.g. a frame when a window was
wanted), an error is signaled.  If you specify an overly specific DOMAIN
(e.g. a window when a device was wanted), the corresponding general domain
is fetched and used instead.  For `make-image-instance', it makes no
difference whether you specify an overly specific domain or the properly
general domain derived from it.  However, it does matter when creating an
image instance by instantiating a specifier or glyph (e.g. with
`glyph-image-instance'), because the more specific domain causes spec lookup
to start there and proceed to more general domains. (It would also matter
when creating an image instance with an instantiator format of `inherit',
but we currently disallow this. #### We should fix this.)

If omitted, DOMAIN defaults to the selected window.

NOERROR controls what happens when the image cannot be generated.
If nil, an error message is generated.  If t, no messages are
generated and this function returns nil.  If anything else, a warning
message is generated and this function returns nil.

arguments: (DATA &optional DOMAIN DEST-TYPES NOERROR)
Sglyphs.c
Fimage-instance-p
Return non-nil if OBJECT is an image instance.

arguments: (OBJECT)
Sglyphs.c
Fimage-instance-type
Return the type of the given image instance.
The return value will be one of `nothing', `text', `mono-pixmap',
`color-pixmap', `pointer', `subwindow', or `widget'.

arguments: (IMAGE-INSTANCE)
Sglyphs.c
Fimage-instance-name
Return the name of the given image instance.

arguments: (IMAGE-INSTANCE)
Sglyphs.c
Fimage-instance-instantiator
Return the instantiator that was used to create the image instance.

arguments: (IMAGE-INSTANCE)
Sglyphs.c
Fimage-instance-domain
Return the governing domain of the given image instance.
The governing domain of an image instance is the domain that the image
instance is specific to.  It is NOT necessarily the domain that was
given to the call to `specifier-instance' that resulted in the creation
of this image instance.  See `make-image-instance' for more information
on governing domains.

arguments: (IMAGE-INSTANCE)
Sglyphs.c
Fimage-instance-string
Return the string of the given image instance.
This will only be non-nil for text image instances and widgets.

arguments: (IMAGE-INSTANCE)
Sglyphs.c
Fimage-instance-property
Return the given property of the given image instance.
Returns nil if the property or the property method do not exist for
the image instance in the domain.

arguments: (IMAGE-INSTANCE PROP)
Sglyphs.c
Fimage-instance-file-name
Return the file name from which IMAGE-INSTANCE was read, if known.

arguments: (IMAGE-INSTANCE)
Sglyphs.c
Fimage-instance-mask-file-name
Return the file name from which IMAGE-INSTANCE's mask was read, if known.

arguments: (IMAGE-INSTANCE)
Sglyphs.c
Fimage-instance-depth
Return the depth of the image instance.
This is 0 for a bitmap, or a positive integer for a pixmap.

arguments: (IMAGE-INSTANCE)
Sglyphs.c
Fimage-instance-height
Return the height of the image instance, in pixels.

arguments: (IMAGE-INSTANCE)
Sglyphs.c
Fimage-instance-width
Return the width of the image instance, in pixels.

arguments: (IMAGE-INSTANCE)
Sglyphs.c
Fimage-instance-hotspot-x
Return the X coordinate of the image instance's hotspot, if known.
This is a point relative to the origin of the pixmap.  When an image is
 used as a mouse pointer, the hotspot is the point on the image that sits
 over the location that the pointer points to.  This is, for example, the
 tip of the arrow or the center of the crosshairs.
This will always be nil for a non-pointer image instance.

arguments: (IMAGE-INSTANCE)
Sglyphs.c
Fimage-instance-hotspot-y
Return the Y coordinate of the image instance's hotspot, if known.
This is a point relative to the origin of the pixmap.  When an image is
 used as a mouse pointer, the hotspot is the point on the image that sits
 over the location that the pointer points to.  This is, for example, the
 tip of the arrow or the center of the crosshairs.
This will always be nil for a non-pointer image instance.

arguments: (IMAGE-INSTANCE)
Sglyphs.c
Fimage-instance-foreground
Return the foreground color of IMAGE-INSTANCE, if applicable.
This will be a color instance or nil. (It will only be non-nil for
colorized mono pixmaps and for pointers.)

arguments: (IMAGE-INSTANCE)
Sglyphs.c
Fimage-instance-background
Return the background color of IMAGE-INSTANCE, if applicable.
This will be a color instance or nil. (It will only be non-nil for
colorized mono pixmaps and for pointers.)

arguments: (IMAGE-INSTANCE)
Sglyphs.c
Fcolorize-image-instance
Make the image instance be displayed in the given colors.
This function returns a new image instance that is exactly like the
specified one except that (if possible) the foreground and background
colors and as specified.  Currently, this only does anything if the image
instance is a mono pixmap; otherwise, the same image instance is returned.

arguments: (IMAGE-INSTANCE FOREGROUND BACKGROUND)
Sglyphs.c
Fimage-specifier-p
Return non-nil if OBJECT is an image specifier.
See `make-image-specifier' for a description of image instantiators.

arguments: (OBJECT)
Sglyphs.c
Fvalid-glyph-type-p
Given a GLYPH-TYPE, return non-nil if it is valid.
Valid types are `buffer', `pointer', and `icon'.

arguments: (GLYPH-TYPE)
Sglyphs.c
Fglyph-type-list
Return a list of valid glyph types.

arguments: ()
Sglyphs.c
Fmake-glyph-internal
Create and return a new uninitialized glyph of type TYPE.

TYPE specifies the type of the glyph; this should be one of `buffer',
`pointer', or `icon', and defaults to `buffer'.  The type of the glyph
specifies in which contexts the glyph can be used, and controls the
allowable image types into which the glyph's image can be
instantiated.

`buffer' glyphs can be used as the begin-glyph or end-glyph of an
extent, in the modeline, and in the toolbar.  Their image can be
instantiated as `nothing', `mono-pixmap', `color-pixmap', `text',
and `subwindow'.

`pointer' glyphs can be used to specify the mouse pointer.  Their
image can be instantiated as `pointer'.

`icon' glyphs can be used to specify the icon used when a frame is
iconified.  Their image can be instantiated as `mono-pixmap' and
`color-pixmap'.

arguments: (&optional TYPE)
Sglyphs.c
Fglyphp
Return non-nil if OBJECT is a glyph.

A glyph is an object used for pixmaps, widgets and the like.  It is used
in begin-glyphs and end-glyphs attached to extents, in marginal and textual
annotations, in overlay arrows (overlay-arrow-* variables), in toolbar
buttons, and the like.  Much more detailed information can be found at
`make-glyph'.  Its image is described using an image specifier --
see `make-image-specifier'.  See also `make-image-instance' for further
information.

arguments: (OBJECT)
Sglyphs.c
Fglyph-type
Return the type of the given glyph.
The return value will be one of `buffer', `pointer', or `icon'.

arguments: (GLYPH)
Sglyphs.c
Fglyph-width
Return the width of GLYPH on WINDOW.
This may not be exact as it does not take into account all of the context
that redisplay will.

arguments: (GLYPH &optional WINDOW)
Sglyphs.c
Fglyph-ascent
Return the ascent value of GLYPH on WINDOW.
This may not be exact as it does not take into account all of the context
that redisplay will.

arguments: (GLYPH &optional WINDOW)
Sglyphs.c
Fglyph-descent
Return the descent value of GLYPH on WINDOW.
This may not be exact as it does not take into account all of the context
that redisplay will.

arguments: (GLYPH &optional WINDOW)
Sglyphs.c
Fglyph-height
Return the height of GLYPH on WINDOW.
This may not be exact as it does not take into account all of the context
that redisplay will.

arguments: (GLYPH &optional WINDOW)
Sglyphs.c
Fsubwindowp
Return non-nil if OBJECT is a subwindow.

arguments: (OBJECT)
Sglyphs.c
Fimage-instance-subwindow-id
Return the window id of SUBWINDOW as a number.

arguments: (SUBWINDOW)
Sglyphs.c
Fresize-subwindow
Resize SUBWINDOW to WIDTH x HEIGHT.
If a value is nil that parameter is not changed.

arguments: (SUBWINDOW &optional WIDTH HEIGHT)
Sglyphs.c
Fforce-subwindow-map
Generate a Map event for SUBWINDOW.

arguments: (SUBWINDOW)
Sglyphs.c
Fglyph-animated-timeout-handler
Callback function for updating animated images.
Don't use this.

arguments: (ARG)
Sglyphs.c
Vxpm-color-symbols
Definitions of logical color-names used when reading XPM files.
Elements of this list should be of the form (COLOR-NAME FORM-TO-EVALUATE).
The COLOR-NAME should be a string, which is the name of the color to define;
the FORM should evaluate to a `color' specifier object, or a string to be
passed to `make-color-instance'.  If a loaded XPM file references a symbolic
color called COLOR-NAME, it will display as the computed color instead.

The default value of this variable defines the logical color names
"foreground" and "background" to be the colors of the `default' face.Sglyphs.c
Vdisable-animated-pixmaps
Whether animated pixmaps should be animated.
Default is t.Sglyphs.c
Vcurrent-display-table
*The display table currently in use.
This is a specifier; use `set-specifier' to change it.

Display tables are used to control how characters are displayed.  Each
time that redisplay processes a character, it is looked up in all the
display tables that apply (obtained by calling `specifier-instance' on
`current-display-table' and any overriding display tables specified in
currently active faces).  The first entry found that matches the
character determines how the character is displayed.  If there is no
matching entry, the default display method is used. (Non-control
characters are displayed as themselves and control characters are
displayed according to the buffer-local variable `ctl-arrow'.  Control
characters are further affected by `control-arrow-glyph' and
`octal-escape-glyph'.)

Each instantiator in this specifier and the display-table specifiers
in faces is a display table or a list of such tables.  If a list, each
table will be searched in turn for an entry matching a particular
character.  Each display table is one of

-- a vector, specifying values for characters starting at 0
-- a char table, either of type `char' or `generic'
-- a range table

Each entry in a display table should be one of

-- nil (this entry is ignored and the search continues)
-- a character (use this character; if it happens to be the same as
   the original character, default processing happens, otherwise
   redisplay attempts to display this character directly;
   #### At some point recursive display-table lookup will be
   implemented.)
-- a string (display each character in the string directly;
   #### At some point recursive display-table lookup will be
   implemented.)
-- a glyph (display the glyph;
   #### At some point recursive display-table lookup will be
   implemented when a string glyph is being processed.)
-- a cons of the form (format "STRING") where STRING is a printf-like
   spec used to process the character. #### Unfortunately no
   formatting directives other than %% are implemented.
-- a vector (each element of the vector is processed recursively;
   in such a case, nil elements in the vector are simply ignored)

#### At some point in the near future, display tables are likely to
be expanded to include other features, such as referencing characters
in particular fonts and allowing the character search to continue
all the way up the chain of specifier instantiators.  These features
are necessary to properly display Unicode characters.Sglyphs.c
Vtruncation-glyph
What to display at the end of truncated lines.Sglyphs.c
Vcontinuation-glyph
What to display at the end of wrapped lines.Sglyphs.c
Voctal-escape-glyph
What to prefix character codes displayed in octal with.Sglyphs.c
Vcontrol-arrow-glyph
What to use as an arrow for control characters.Sglyphs.c
Vinvisible-text-glyph
What to use to indicate the presence of invisible text.
This is the glyph that is displayed when an ellipsis is called for
(see `selective-display-ellipses' and `buffer-invisibility-spec').
Normally this is three dots ("...").Sglyphs.c
Vhscroll-glyph
What to display at the beginning of horizontally scrolled lines.Sglyphs.c
Vxemacs-logo
The glyph used to display the XEmacs logo at startup.Sglyphs-widget.c
Fwidget-logical-to-character-width
Convert the width in logical widget units to characters.
Logical widget units do not take into account adjustments made for
layout borders, so this adjustment is approximated.

arguments: (WIDTH &optional FACE DOMAIN)
Sglyphs-widget.c
Fwidget-logical-to-character-height
Convert the height in logical widget units to characters.
Logical widget units do not take into account adjustments made for
layout borders, so this adjustment is approximated.

If the components of a widget layout are justified to the top or the
bottom then they are aligned in terms of `logical units'. This is a
size quantity that is designed to be big enough to accommodate the
largest `single height' widget. It is dependent on the widget face and
some combination of spacing and border-width. Thus if you specify top
or bottom justification in a vertical layout the subcontrols are laid
out one per logical unit. This allows adjoining layouts to have
identical alignment for their subcontrols.

Since frame sizes are measured in characters, this function allows you
to do appropriate conversion between logical units and characters.

arguments: (HEIGHT &optional FACE DOMAIN)
Sglyphs-widget.c
Vwidget-border-width
*Border width of widgets.
This is a specifier; use `set-specifier' to change it.Sgpmevent.c
Freceive-gpm-event
Run GPM_GetEvent().
This function is the process handler for the GPM connection.

arguments: (&optional PROCESS STRING)
Sgpmevent.c
Fgpm-enabled-p
Return non-nil if GPM mouse support is currently enabled on DEVICE.

arguments: (&optional DEVICE)
Sgpmevent.c
Fgpm-enable
Toggle accepting of GPM mouse events.

arguments: (&optional DEVICE ARG)
Sgui.c
Fpopup-up-p
Return t if a popup menu or dialog box is up, nil otherwise.
See `popup-menu' and `popup-dialog-box'.

arguments: ()
Sgui.c
Vmenu-no-selection-hook
Function or functions to call when a menu or dialog box is dismissed
without a selection having been made.Smenubar.c
Fmenu-find-real-submenu
Find a submenu descriptor within DESC by following PATH.
This function finds a submenu descriptor, either from the description
DESC or generated by a filter within DESC. The function regards :config
and :included keywords in the DESC, and expands submenus along the
PATH using :filter functions. Return value is a descriptor for the
submenu, NOT expanded and NOT checked against :config and :included.
Also, individual menu items are not looked for, only submenus.

See also 'find-menu-item'.

arguments: (DESC PATH)
Smenubar.c
Fpopup-menu
Pop up the menu described by MENU-DESCRIPTION.
A menu description is a list of menu items, strings, and submenus.

The first element of a menu must be a string, which is the name of the menu.
This is the string that will be displayed in the parent menu, if any.  For
toplevel menus, it is ignored.  This string is not displayed in the menu
itself.

If an element of a menu is a string, then that string will be presented in
the menu as unselectable text.

If an element of a menu is a string consisting solely of hyphens, then that
item will be presented as a solid horizontal line.

If an element of a menu is a list, it is treated as a submenu.  The name of
that submenu (the first element in the list) will be used as the name of the
item representing this menu on the parent.

Otherwise, the element must be a vector, which describes a menu item.
A menu item can have any of the following forms:

 [ "name" callback <active-p> ]
 [ "name" callback <active-p> <suffix> ]
 [ "name" callback :<keyword> <value>  :<keyword> <value> ... ]

The name is the string to display on the menu; it is filtered through the
resource database, so it is possible for resources to override what string
is actually displayed.

If the `callback' of a menu item is a symbol, then it must name a command.
It will be invoked with `call-interactively'.  If it is a list, then it is
evaluated with `eval'.

The possible keywords are this:

 :active   <form>    Same as <active-p> in the first two forms: the
                     expression is evaluated just before the menu is
                     displayed, and the menu will be selectable only if
                     the result is non-nil.

 :suffix   <form>    Same as <suffix> in the second form: the expression
                     is evaluated just before the menu is displayed and
		     resulting string is appended to the displayed name,
		     providing a convenient way of adding the name of a
		     command's ``argument'' to the menu, like
		     ``Kill Buffer NAME''.

 :keys     "string"  Normally, the keyboard equivalents of commands in
                     menus are displayed when the `callback' is a symbol.
                     This can be used to specify keys for more complex menu
                     items.  It is passed through `substitute-command-keys'
                     first.

 :style    <style>   Specifies what kind of object this menu item is:

                        nil     A normal menu item.
                        toggle  A toggle button.
                        radio   A radio button.

                     The only difference between toggle and radio buttons is
                     how they are displayed.  But for consistency, a toggle
                     button should be used when there is one option whose
                     value can be turned on or off, and radio buttons should
                     be used when there is a set of mutually exclusive
                     options.  When using a group of radio buttons, you
                     should arrange for no more than one to be marked as
                     selected at a time.

 :selected <form>    Meaningful only when STYLE is `toggle' or `radio'.
                     This specifies whether the button will be in the
                     selected or unselected state.

For example:

 [ "Save As..."    write-file  t ]
 [ "Revert Buffer" revert-buffer (buffer-modified-p) ]
 [ "Read Only"     toggle-read-only :style toggle :selected buffer-read-only ]

See menubar.el for many more examples.

arguments: (MENU-DESCRIPTION &optional EVENT)
Smenubar.c
Fcompare-menu-text
Compare the text of two menu items, ignoring accelerator specs and case.
Also treat %% as a single %.  Return < 0 if STRING1 is less than STRING2,
0 if equal, > 0 if STRING1 is greater than STRING2.

arguments: (STRING1 STRING2)
Smenubar.c
Fnormalize-menu-text
Convert a menu item name string into normal form, and return the new string.
Menu item names should be converted to normal form before being compared.
This removes %_'s (accelerator indications) and converts %% to %.
The returned string may be the same string as the original.

arguments: (NAME)
Smenubar.c
Vpopup-menu-titles
If true, popup menus will have title bars at the top.Smenubar.c
Vcurrent-menubar
The current menubar.  This may be buffer-local.

When the menubar is changed, the function `set-menubar-dirty-flag' has to
be called for the menubar to be updated on the frame.  See `set-menubar'
and `set-buffer-menubar'.

A menubar is a list of menus and menu-items.
A menu is a list of menu items, keyword-value pairs, strings, and submenus.

The first element of a menu must be a string, which is the name of the menu.
This is the string that will be displayed in the parent menu, if any.  For
toplevel menus, it is ignored.  This string is not displayed in the menu
itself.

Menu accelerators can be indicated in the string by putting the
sequence "%_" before the character corresponding to the key that will
invoke the menu or menu item.  Uppercase and lowercase accelerators
are equivalent.  The sequence "%%" is also special, and is translated
into a single %.

If no menu accelerator is present in the string, XEmacs will act as if
the first character has been tagged as an accelerator.

Immediately following the name string of the menu, various optional
keyword-value pairs are permitted: currently, :filter, :active, :included,
:visible, and :config. (See below.)

If an element of a menu (or menubar) is a string, then that string will be
presented as unselectable text.

If an element of a menu is a string consisting solely of hyphens, then that
item will be presented as a solid horizontal line.

If an element of a menu is a string beginning with "--:", it will be
presented as a line whose appearance is controlled by the rest of the
text in the string.  The allowed line specs are system-dependent, and
currently work only under X Windows (with Lucid and Motif menubars);
otherwise, a solid horizontal line is presented, as if the string were
all hyphens.

The possibilities are:

  "--:singleLine"
  "--:doubleLine"
  "--:singleDashedLine"
  "--:doubleDashedLine"
  "--:noLine"
  "--:shadowEtchedIn"
  "--:shadowEtchedOut"
  "--:shadowEtchedInDash"
  "--:shadowEtchedOutDash"
  "--:shadowDoubleEtchedIn" (Lucid menubars only)
  "--:shadowDoubleEtchedOut" (Lucid menubars only)
  "--:shadowDoubleEtchedInDash" (Lucid menubars only)
  "--:shadowDoubleEtchedOutDash" (Lucid menubars only)

If an element of a menu is a list, it is treated as a submenu.  The name of
that submenu (the first element in the list) will be used as the name of the
item representing this menu on the parent.

If an element of a menubar is `nil', then it is used to represent the
division between the set of menubar-items which are flushleft and those
which are flushright.

Otherwise, the element must be a vector, which describes a menu item.
A menu item is of the following form:

 [ "name" callback :<keyword> <value> :<keyword> <value> ... ]

The following forms are also accepted for compatibility, but deprecated:

 [ "name" callback <active-p> ]
 [ "name" callback <active-p> <suffix> ]

The name is the string to display on the menu; it is filtered through the
resource database, so it is possible for resources to override what string
is actually displayed.  Menu accelerator indicators (the sequence `%_') are
also processed; see above.  If the name is not a string, it will be
evaluated with `eval', and the result should be a string.

If the `callback' of a menu item is a symbol, then it must name a command.
It will be invoked with `call-interactively'.  If it is a list, then it is
evaluated with `eval'.

In the deprecated forms, <active-p> is equivalent to using the :active
keyword, and <suffix> is equivalent to using the :suffix keyword.

The possible keywords are:

 :active   <form>    The expression is evaluated just before the menu is
                     displayed, and the menu will be selectable only if
                     the result is non-nil.

 :suffix   <form>    The expression is evaluated just before the menu is
                     displayed and the resulting string is appended to
                     the displayed name, providing a convenient way of
                     adding the name of a command's ``argument'' to the
                     menu, like ``Kill Buffer NAME''.

 :keys     "string"  Normally, the keyboard equivalents of commands in
                     menus are displayed when the `callback' is a symbol.
                     This can be used to specify keys for more complex menu
                     items.  It is passed through `substitute-command-keys'
                     first.

 :style    <style>   Specifies what kind of object this menu item is:

                        nil     A normal menu item.
                        toggle  A toggle button.
                        radio   A radio button.
                        button  A menubar button.

                     The only difference between toggle and radio buttons is
                     how they are displayed.  But for consistency, a toggle
                     button should be used when there is one option whose
                     value can be turned on or off, and radio buttons should
                     be used when there is a set of mutually exclusive
                     options.  When using a group of radio buttons, you
                     should arrange for no more than one to be marked as
                     selected at a time.

 :selected <form>    Meaningful only when STYLE is `toggle', `radio' or
                     `button'.  This specifies whether the button will be in
		     the selected or unselected state.

 :included <form>    This can be used to control the visibility of a menu or
		     menu item.  The form is evaluated and the menu or menu
		     item is only displayed if the result is non-nil.  The
		     keyword :visible is an alias for :included.

 :config  <symbol>   This is an efficient shorthand for
		         :included (memq symbol menubar-configuration)
	             See the variable `menubar-configuration'.

 :filter <function>  A menu filter can only be used at the beginning of a
                     submenu description (i.e. not in a menu item itself).
		     (Remember that most of the keywords can take evaluated
		     expressions as well as constants.)  The filter is used to
		     incrementally create a submenu only when it is selected
                     by the user and not every time the menubar is activated.
                     The filter function is passed the list of menu items in
                     the submenu and must return the modified list to be
		     actually used.  The filter MUST NOT destructively modify
                     the list of menu items passed to it.  It is called only
		     when the menu is about to be displayed, so other menus
		     may already be displayed.  Vile and terrible things will
		     happen if a menu filter function changes the current
		     buffer, window, or frame.  It also should not raise,
		     lower, or iconify any frames.  Basically, the filter
		     function should have no side-effects.

 :key-sequence keys  Used in FSF Emacs as an hint to an equivalent keybinding.
                     Ignored by XEmacs for easymenu.el compatibility.
		     (XEmacs computes this information automatically.)

For example:

 ("%_File"
  :filter file-menu-filter	; file-menu-filter is a function that takes
				; one argument (a list of menu items) and
				; returns a list of menu items
  [ "Save %_As..."    write-file  t ]
  [ "%_Revert Buffer" revert-buffer (buffer-modified-p) ]
  [ "R%_ead Only"     toggle-read-only :style toggle
		      :selected buffer-read-only ]
  )

See menubar-items.el for many more examples.

After the menubar is clicked upon, but before any menus are popped up,
the functions on the `activate-menubar-hook' are invoked to make top-level
changes to the menus and menubar.  Note, however, that the use of menu
filters (using the :filter keyword) is usually a more efficient way to
dynamically alter or sensitize menus.  
Smenubar.c
Vactivate-menubar-hook
Function or functions called before a menubar menu is pulled down.
These functions are called with no arguments, and should interrogate and
modify the value of `current-menubar' as desired.

The functions on this hook are invoked after the mouse goes down, but before
the menu is mapped, and may be used to activate, deactivate, add, or delete
items from the menus.  However, it is probably the case that using a :filter
keyword in a submenu would be a more efficient way of updating menus.  See
the documentation of `current-menubar'.

These functions may return the symbol `t' to assert that they have made
no changes to the menubar.  If any other value is returned, the menubar is
recomputed.  If `t' is returned but the menubar has been changed, then the
changes may not show up right away.  Returning `nil' when the menubar has
not changed is not so bad; more computation will be done, but redisplay of
the menubar will still be performed optimally.Smenubar.c
Vmenubar-show-keybindings
If true, the menubar will display keyboard equivalents.
If false, only the command names will be displayed.Smenubar.c
Vmenubar-configuration
A list of symbols, against which the value of the :config tag for each
menubar item will be compared.  If a menubar item has a :config tag, then
it is omitted from the menubar if that tag is not a member of the
`menubar-configuration' list.Smenubar.c
Vmenubar-pointer-glyph
*The shape of the mouse-pointer when over the menubar.
This is a glyph; use `set-glyph-image' to change it.
If unspecified in a particular domain, the window-system-provided
default pointer is used.Smenubar.c
Vmenu-accelerator-prefix
Prefix key(s) that must be typed before menu accelerators will be activated.
Set this to a value acceptable by define-key.

NOTE: This currently only has any effect under X Windows.Smenubar.c
Vmenu-accelerator-modifiers
Modifier keys which must be pressed to get to the top level menu accelerators.
This is a list of modifier key symbols.  All modifier keys must be held down
while a valid menu accelerator key is pressed in order for the top level
menu to become active.

NOTE: This currently only has any effect under X Windows.

See also menu-accelerator-enabled and menu-accelerator-prefix.Smenubar.c
Vmenu-accelerator-enabled
Whether menu accelerator keys can cause the menubar to become active.
If `menu-force' or `menu-fallback', then menu accelerator keys can
be used to activate the top level menu.  Once the menubar becomes active, the
accelerator keys can be used regardless of the value of this variable.

menu-force is used to indicate that the menu accelerator key takes
precedence over bindings in the current keymap(s).  menu-fallback means
that bindings in the current keymap take precedence over menu accelerator keys.
Thus a top level menu with an accelerator of "T" would be activated on a
keypress of Meta-t if menu-accelerator-enabled is menu-force.
However, if menu-accelerator-enabled is menu-fallback, then
Meta-t will not activate the menubar and will instead run the function
transpose-words, to which it is normally bound.

See also menu-accelerator-modifiers and menu-accelerator-prefix.Smenubar.c
Vmenu-accelerator-map
Keymap for use when the menubar is active.
The actions menu-quit, menu-up, menu-down, menu-left, menu-right,
menu-select and menu-escape can be mapped to keys in this map.
NOTE: This currently only has any effect under X Windows.

menu-quit    Immediately deactivate the menubar and any open submenus without
             selecting an item.
menu-up      Move the menu cursor up one row in the current menu.  If the
             move extends past the top of the menu, wrap around to the bottom.
menu-down    Move the menu cursor down one row in the current menu.  If the
             move extends past the bottom of the menu, wrap around to the top.
             If executed while the cursor is in the top level menu, move down
             into the selected menu.
menu-left    Move the cursor from a submenu into the parent menu.  If executed
             while the cursor is in the top level menu, move the cursor to the
             left.  If the move extends past the left edge of the menu, wrap
             around to the right edge.
menu-right   Move the cursor into a submenu.  If the cursor is located in the
             top level menu or is not currently on a submenu heading, then move
             the cursor to the next top level menu entry.  If the move extends
             past the right edge of the menu, wrap around to the left edge.
menu-select  Activate the item under the cursor.  If the cursor is located on
             a submenu heading, then move the cursor into the submenu.
menu-escape  Pop up to the next level of menus.  Moves from a submenu into its
             parent menu.  From the top level menu, this deactivates the
             menubar.

This keymap can also contain normal key-command bindings, in which case the
menubar is deactivated and the corresponding command is executed.

The action bindings used by the menu accelerator code are designed to mimic
the actions of menu traversal keys in a commonly used PC operating system.Smenubar.c
Vmenubar-visible-p
*Whether the menubar is visible.
This is a specifier; use `set-specifier' to change it.Sscrollbar.c
Fscrollbar-line-up
Function called when the line-up arrow on the scrollbar is clicked.
This is the little arrow at the top of the scrollbar.  One argument, the
scrollbar's window.  You can advise this function to change the scrollbar
behavior.

arguments: (WINDOW)
Sscrollbar.c
Fscrollbar-line-down
Function called when the line-down arrow on the scrollbar is clicked.
This is the little arrow at the bottom of the scrollbar.  One argument, the
scrollbar's window.  You can advise this function to change the scrollbar
behavior.

arguments: (WINDOW)
Sscrollbar.c
Fscrollbar-page-up
Function called when the user gives the "page-up" scrollbar action.
(The way this is done can vary from scrollbar to scrollbar.) One argument,
a cons containing the scrollbar's window and a value (#### document me!
This value is nil for Motif/Lucid scrollbars and a number for Athena
scrollbars).  You can advise this function to change the scrollbar
behavior.

arguments: (OBJECT)
Sscrollbar.c
Fscrollbar-page-down
Function called when the user gives the "page-down" scrollbar action.
(The way this is done can vary from scrollbar to scrollbar.) One argument,
a cons containing the scrollbar's window and a value (#### document me!
This value is nil for Motif/Lucid scrollbars and a number for Athena
scrollbars).  You can advise this function to change the scrollbar
behavior.

arguments: (OBJECT)
Sscrollbar.c
Fscrollbar-to-top
Function called when the user invokes the "to-top" scrollbar action.
The way this is done can vary from scrollbar to scrollbar, but
C-button1 on the up-arrow is very common. One argument, the
scrollbar's window.  You can advise this function to change the
scrollbar behavior.

arguments: (WINDOW)
Sscrollbar.c
Fscrollbar-to-bottom
Function called when the user invokes the "to-bottom" scrollbar action.
The way this is done can vary from scrollbar to scrollbar, but
C-button1 on the down-arrow is very common. One argument, the
scrollbar's window.  You can advise this function to change the
scrollbar behavior.

arguments: (WINDOW)
Sscrollbar.c
Fscrollbar-vertical-drag
Function called when the user drags the vertical scrollbar slider.
One argument, a cons containing the scrollbar's window and a value
between point-min and point-max.  You can advise this function to
change the scrollbar behavior.

arguments: (OBJECT)
Sscrollbar.c
Fscrollbar-set-hscroll
Set WINDOW's hscroll position to VALUE.
This ensures that VALUE is in the proper range for the horizontal scrollbar.

arguments: (WINDOW VALUE)
Sscrollbar.c
Vscrollbar-pointer-glyph
*The shape of the mouse-pointer when over a scrollbar.
This is a glyph; use `set-glyph-image' to change it.
If unspecified in a particular domain, the window-system-provided
default pointer is used.Sscrollbar.c
Vscrollbar-width
*Width of vertical scrollbars.
This is a specifier; use `set-specifier' to change it.Sscrollbar.c
Vscrollbar-height
*Height of horizontal scrollbars.
This is a specifier; use `set-specifier' to change it.Sscrollbar.c
Vhorizontal-scrollbar-visible-p
*Whether the horizontal scrollbar is visible.
This is a specifier; use `set-specifier' to change it.Sscrollbar.c
Vvertical-scrollbar-visible-p
*Whether the vertical scrollbar is visible.
This is a specifier; use `set-specifier' to change it.Sscrollbar.c
Vscrollbar-on-left-p
*Whether the vertical scrollbar is on the left side of window or frame.
This is a specifier; use `set-specifier' to change it.Sscrollbar.c
Vscrollbar-on-top-p
*Whether the horizontal scrollbar is on the top side of window or frame.
This is a specifier; use `set-specifier' to change it.Sdialog.c
Fmake-dialog-box-internal
Internal helper function for `make-dialog-box'.
This handles all dialog-box types except `general'.
TYPE is the same as the first argument to `make-dialog-box', and KEYS
a list of the remaining arguments.

arguments: (TYPE KEYS)
Sdialog.c
Vdelete-dialog-box-hook
Function or functions to call when a dialog box is about to be deleted.
One arg, the dialog box id.Stoolbar.c
Ftoolbar-button-p
Return non-nil if OBJECT is a toolbar button.

arguments: (OBJECT)
Stoolbar.c
Ftoolbar-button-callback
Return the callback function associated with the toolbar BUTTON.

arguments: (BUTTON)
Stoolbar.c
Ftoolbar-button-help-string
Return the help string function associated with the toolbar BUTTON.

arguments: (BUTTON)
Stoolbar.c
Ftoolbar-button-enabled-p
Return t if BUTTON is active.

arguments: (BUTTON)
Stoolbar.c
Fset-toolbar-button-down-flag
Don't touch.

arguments: (BUTTON FLAG)
Stoolbar.c
Fset-default-toolbar-position
Set the position that the `default-toolbar' will be displayed at.
Valid positions are `top', `bottom', `left' and `right'.
See `default-toolbar-position'.

arguments: (POSITION)
Stoolbar.c
Fdefault-toolbar-position
Return the position that the `default-toolbar' will be displayed at.
The `default-toolbar' will only be displayed here if the corresponding
position-specific toolbar specifier does not provide a value.

arguments: ()
Stoolbar.c
Fcheck-toolbar-button-syntax
Verify the syntax of entry BUTTON in a toolbar description list.
If you want to verify the syntax of a toolbar description list as a
whole, use `check-valid-instantiator' with a specifier type of `toolbar'.

arguments: (BUTTON &optional NOERROR)
Stoolbar.c
Ftoolbar-specifier-p
Return non-nil if OBJECT is a toolbar specifier.

See `make-toolbar-specifier' for a description of possible toolbar
instantiators.

arguments: (OBJECT)
Stoolbar.c
Vdefault-toolbar
Specifier for a fallback toolbar.
Use `set-specifier' to change this.

The position of this toolbar is specified in the function
`default-toolbar-position'.  If the corresponding position-specific
toolbar (e.g. `top-toolbar' if `default-toolbar-position' is `top')
does not specify a toolbar in a particular domain (usually a window),
then the value of `default-toolbar' in that domain, if any, will be
used instead.

Note that the toolbar at any particular position will not be
displayed unless its visibility flag is true and its thickness
(width or height, depending on orientation) is non-zero.  The
visibility is controlled by the specifiers `top-toolbar-visible-p',
`bottom-toolbar-visible-p', `left-toolbar-visible-p', and
`right-toolbar-visible-p', and the thickness is controlled by the
specifiers `top-toolbar-height', `bottom-toolbar-height',
`left-toolbar-width', and `right-toolbar-width'.

Note that one of the four visibility specifiers inherits from
`default-toolbar-visibility' and one of the four thickness
specifiers inherits from either `default-toolbar-width' or
`default-toolbar-height' (depending on orientation), just
like for the toolbar description specifiers (e.g. `top-toolbar')
mentioned above.

Therefore, if you are setting `default-toolbar', you should control
the visibility and thickness using `default-toolbar-visible-p',
`default-toolbar-width', and `default-toolbar-height', rather than
using position-specific specifiers.  That way, you will get sane
behavior if the user changes the default toolbar position.

The format of the instantiator for a toolbar is a list of
toolbar-button-descriptors.  Each toolbar-button-descriptor
is a vector in one of the following formats:

  [GLYPH-LIST FUNCTION ENABLED-P HELP] or
  [:style 2D-OR-3D] or
  [:style 2D-OR-3D :size WIDTH-OR-HEIGHT] or
  [:size WIDTH-OR-HEIGHT :style 2D-OR-3D]

Optionally, one of the toolbar-button-descriptors may be nil
instead of a vector; this signifies the division between
the toolbar buttons that are to be displayed flush-left,
and the buttons to be displayed flush-right.

The first vector format above specifies a normal toolbar button;
the others specify blank areas in the toolbar.

For the first vector format:

-- GLYPH-LIST should be a list of one to six glyphs (as created by
   `make-glyph') or a symbol whose value is such a list.  The first
   glyph, which must be provided, is the glyph used to display the
   toolbar button when it is in the "up" (not pressed) state.  The
   optional second glyph is for displaying the button when it is in
   the "down" (pressed) state.  The optional third glyph is for when
   the button is disabled.  The optional fourth, fifth and sixth glyphs
   are used to specify captioned versions for the up, down and disabled
   states respectively.  The function `toolbar-make-button-list' is
   useful in creating these glyph lists.  The specifier variable
   `toolbar-buttons-captioned-p' controls which glyphs are actually used.

-- Even if you do not provide separate down-state and disabled-state
   glyphs, the user will still get visual feedback to indicate which
   state the button is in.  Buttons in the up-state are displayed
   with a shadowed border that gives a raised appearance to the
   button.  Buttons in the down-state are displayed with shadows that
   give a recessed appearance.  Buttons in the disabled state are
   displayed with no shadows, giving a 2-d effect.

-- If some of the toolbar glyphs are not provided, they inherit as follows:

     UP:                up
     DOWN:              down -> up
     DISABLED:          disabled -> up
     CAP-UP:            cap-up -> up
     CAP-DOWN:          cap-down -> cap-up -> down -> up
     CAP-DISABLED:      cap-disabled -> cap-up -> disabled -> up

-- The second element FUNCTION is a function to be called when the
   toolbar button is activated (i.e. when the mouse is released over
   the toolbar button, if the press occurred in the toolbar).  It
   can be any form accepted by `call-interactively', since this is
   how it is invoked.

-- The third element ENABLED-P specifies whether the toolbar button
   is enabled (disabled buttons do nothing when they are activated,
   and are displayed differently; see above).  It should be either
   a boolean or a form that evaluates to a boolean.

-- The fourth element HELP, if non-nil, should be a string.  This
   string is displayed in the echo area when the mouse passes over
   the toolbar button.

For the other vector formats (specifying blank areas of the toolbar):

-- 2D-OR-3D should be one of the symbols `2d' or `3d', indicating
   whether the area is displayed with shadows (giving it a raised,
   3-d appearance) or without shadows (giving it a flat appearance).

-- WIDTH-OR-HEIGHT specifies the length, in pixels, of the blank
   area.  If omitted, it defaults to a device-specific value
   (8 pixels for X devices).Stoolbar.c
Vtop-toolbar
Specifier for the toolbar at the top of the frame.
Use `set-specifier' to change this.
See `default-toolbar' for a description of a valid toolbar instantiator.Stoolbar.c
Vbottom-toolbar
Specifier for the toolbar at the bottom of the frame.
Use `set-specifier' to change this.
See `default-toolbar' for a description of a valid toolbar instantiator.

Note that, unless the `default-toolbar-position' is `bottom', by
default the height of the bottom toolbar (controlled by
`bottom-toolbar-height') is 0; thus, a bottom toolbar will not be
displayed even if you provide a value for `bottom-toolbar'.Stoolbar.c
Vleft-toolbar
Specifier for the toolbar at the left edge of the frame.
Use `set-specifier' to change this.
See `default-toolbar' for a description of a valid toolbar instantiator.

Note that, unless the `default-toolbar-position' is `left', by
default the height of the left toolbar (controlled by
`left-toolbar-width') is 0; thus, a left toolbar will not be
displayed even if you provide a value for `left-toolbar'.Stoolbar.c
Vright-toolbar
Specifier for the toolbar at the right edge of the frame.
Use `set-specifier' to change this.
See `default-toolbar' for a description of a valid toolbar instantiator.

Note that, unless the `default-toolbar-position' is `right', by
default the height of the right toolbar (controlled by
`right-toolbar-width') is 0; thus, a right toolbar will not be
displayed even if you provide a value for `right-toolbar'.Stoolbar.c
Vdefault-toolbar-height
*Height of the default toolbar, if it's oriented horizontally.
This is a specifier; use `set-specifier' to change it.

The position of the default toolbar is specified by the function
`set-default-toolbar-position'.  If the corresponding position-specific
toolbar thickness specifier (e.g. `top-toolbar-height' if
`default-toolbar-position' is `top') does not specify a thickness in a
particular domain (a window or a frame), then the value of
`default-toolbar-height' or `default-toolbar-width' (depending on the
toolbar orientation) in that domain, if any, will be used instead.

Note that `default-toolbar-height' is only used when
`default-toolbar-position' is `top' or `bottom', and `default-toolbar-width'
is only used when `default-toolbar-position' is `left' or `right'.

Note that all of the position-specific toolbar thickness specifiers
have a fallback value of zero when they do not correspond to the
default toolbar.  Therefore, you will have to set a non-zero thickness
value if you want a position-specific toolbar to be displayed.

Internally, toolbar thickness specifiers are instantiated in both
window and frame domains, for different purposes.  The value in the
domain of a frame's selected window specifies the actual toolbar
thickness that you will see in that frame.  The value in the domain of
a frame itself specifies the toolbar thickness that is used in frame
geometry calculations.

Thus, for example, if you set the frame width to 80 characters and the
left toolbar width for that frame to 68 pixels, then the frame will
be sized to fit 80 characters plus a 68-pixel left toolbar.  If you
then set the left toolbar width to 0 for a particular buffer (or if
that buffer does not specify a left toolbar or has a nil value
specified for `left-toolbar-visible-p'), you will find that, when
that buffer is displayed in the selected window, the window will have
a width of 86 or 87 characters -- the frame is sized for a 68-pixel
left toolbar but the selected window specifies that the left toolbar
is not visible, so it is expanded to take up the slack.Stoolbar.c
Vdefault-toolbar-width
*Width of the default toolbar, if it's oriented vertically.
This is a specifier; use `set-specifier' to change it.

See `default-toolbar-height' for more information.Stoolbar.c
Vtop-toolbar-height
*Height of the top toolbar.
This is a specifier; use `set-specifier' to change it.

See `default-toolbar-height' for more information.Stoolbar.c
Vbottom-toolbar-height
*Height of the bottom toolbar.
This is a specifier; use `set-specifier' to change it.

See `default-toolbar-height' for more information.Stoolbar.c
Vleft-toolbar-width
*Width of left toolbar.
This is a specifier; use `set-specifier' to change it.

See `default-toolbar-height' for more information.Stoolbar.c
Vright-toolbar-width
*Width of right toolbar.
This is a specifier; use `set-specifier' to change it.

See `default-toolbar-height' for more information.Stoolbar.c
Vtoolbar-shadow-thickness
*Width of shadows around toolbar buttons.
This is a specifier; use `set-specifier' to change it.Stoolbar.c
Vdefault-toolbar-border-width
*Width of the border around the default toolbar.
This is a specifier; use `set-specifier' to change it.

The position of the default toolbar is specified by the function
`set-default-toolbar-position'.  If the corresponding position-specific
toolbar border width specifier (e.g. `top-toolbar-border-width' if
`default-toolbar-position' is `top') does not specify a border width in a
particular domain (a window or a frame), then the value of
`default-toolbar-border-width' in that domain, if any, will be used
instead.

Internally, toolbar border width specifiers are instantiated in both
window and frame domains, for different purposes.  The value in the
domain of a frame's selected window specifies the actual toolbar border
width that you will see in that frame.  The value in the domain of a
frame itself specifies the toolbar border width that is used in frame
geometry calculations.  Changing the border width value in the frame
domain will result in a size change in the frame itself, while changing
the value in a window domain will not.Stoolbar.c
Vtop-toolbar-border-width
*Border width of the top toolbar.
This is a specifier; use `set-specifier' to change it.

See `default-toolbar-height' for more information.Stoolbar.c
Vbottom-toolbar-border-width
*Border width of the bottom toolbar.
This is a specifier; use `set-specifier' to change it.

See `default-toolbar-height' for more information.Stoolbar.c
Vleft-toolbar-border-width
*Border width of left toolbar.
This is a specifier; use `set-specifier' to change it.

See `default-toolbar-height' for more information.Stoolbar.c
Vright-toolbar-border-width
*Border width of right toolbar.
This is a specifier; use `set-specifier' to change it.

See `default-toolbar-height' for more information.Stoolbar.c
Vdefault-toolbar-visible-p
*Whether the default toolbar is visible.
This is a specifier; use `set-specifier' to change it.

The position of the default toolbar is specified by the function
`set-default-toolbar-position'.  If the corresponding position-specific
toolbar visibility specifier (e.g. `top-toolbar-visible-p' if
`default-toolbar-position' is `top') does not specify a visible-p value
in a particular domain (a window or a frame), then the value of
`default-toolbar-visible-p' in that domain, if any, will be used
instead.

Both window domains and frame domains are used internally, for
different purposes.  The distinction here is exactly the same as
for thickness specifiers; see `default-toolbar-height' for more
information.

`default-toolbar-visible-p' and all of the position-specific toolbar
visibility specifiers have a fallback value of true.Stoolbar.c
Vtop-toolbar-visible-p
*Whether the top toolbar is visible.
This is a specifier; use `set-specifier' to change it.

See `default-toolbar-visible-p' for more information.Stoolbar.c
Vbottom-toolbar-visible-p
*Whether the bottom toolbar is visible.
This is a specifier; use `set-specifier' to change it.

See `default-toolbar-visible-p' for more information.Stoolbar.c
Vleft-toolbar-visible-p
*Whether the left toolbar is visible.
This is a specifier; use `set-specifier' to change it.

See `default-toolbar-visible-p' for more information.Stoolbar.c
Vright-toolbar-visible-p
*Whether the right toolbar is visible.
This is a specifier; use `set-specifier' to change it.

See `default-toolbar-visible-p' for more information.Stoolbar.c
Vtoolbar-buttons-captioned-p
*Whether the toolbar buttons are captioned.
This will only have a visible effect for those toolbar buttons which had
captioned versions specified.
This is a specifier; use `set-specifier' to change it.Sgutter.c
Fset-default-gutter-position
Set the position that the `default-gutter' will be displayed at.
Valid positions are `top', `bottom', `left' and `right'.
See `default-gutter-position'.

arguments: (POSITION)
Sgutter.c
Fdefault-gutter-position
Return the position that the `default-gutter' will be displayed at.
The `default-gutter' will only be displayed here if the corresponding
position-specific gutter specifier does not provide a value.

arguments: ()
Sgutter.c
Fgutter-pixel-width
Return the pixel width of the gutter at POS in LOCALE.
POS defaults to the default gutter position. LOCALE defaults to
the current window.

arguments: (&optional POS LOCALE)
Sgutter.c
Fgutter-pixel-height
Return the pixel height of the gutter at POS in LOCALE.
POS defaults to the default gutter position. LOCALE defaults to
the current window.

arguments: (&optional POS LOCALE)
Sgutter.c
Fgutter-specifier-p
Return non-nil if OBJECT is a gutter specifier.

See `make-gutter-specifier' for a description of possible gutter
instantiators.

arguments: (OBJECT)
Sgutter.c
Fgutter-size-specifier-p
Return non-nil if OBJECT is a gutter-size specifier.

See `make-gutter-size-specifier' for a description of possible gutter-size
instantiators.

arguments: (OBJECT)
Sgutter.c
Fgutter-visible-specifier-p
Return non-nil if OBJECT is a gutter-visible specifier.

See `make-gutter-visible-specifier' for a description of possible
gutter-visible instantiators.

arguments: (OBJECT)
Sgutter.c
Fredisplay-gutter-area
Ensure that all gutters are correctly showing their gutter specifier.

arguments: ()
Sgutter.c
Vdefault-gutter
Specifier for a fallback gutter.
Use `set-specifier' to change this.

The position of this gutter is specified in the function
`default-gutter-position'.  If the corresponding position-specific
gutter (e.g. `top-gutter' if `default-gutter-position' is `top')
does not specify a gutter in a particular domain (usually a window),
then the value of `default-gutter' in that domain, if any, will be
used instead.

Note that the gutter at any particular position will not be
displayed unless its visibility flag is true and its thickness
(width or height, depending on orientation) is non-zero.  The
visibility is controlled by the specifiers `top-gutter-visible-p',
`bottom-gutter-visible-p', `left-gutter-visible-p', and
`right-gutter-visible-p', and the thickness is controlled by the
specifiers `top-gutter-height', `bottom-gutter-height',
`left-gutter-width', and `right-gutter-width'.

Note that one of the four visibility specifiers inherits from
`default-gutter-visibility' and one of the four thickness
specifiers inherits from either `default-gutter-width' or
`default-gutter-height' (depending on orientation), just
like for the gutter description specifiers (e.g. `top-gutter')
mentioned above.

Therefore, if you are setting `default-gutter', you should control
the visibility and thickness using `default-gutter-visible-p',
`default-gutter-width', and `default-gutter-height', rather than
using position-specific specifiers.  That way, you will get sane
behavior if the user changes the default gutter position.

The gutter value should be a string, a property list of strings or
nil. You can attach extents and glyphs to the string and hence display
glyphs and text in other fonts in the gutter area. If the gutter value
is a property list then the strings will be concatenated together
before being displayed.  
Sgutter.c
Vtop-gutter
Specifier for the gutter at the top of the frame.
Use `set-specifier' to change this.
See `default-gutter' for a description of a valid gutter instantiator.Sgutter.c
Vbottom-gutter
Specifier for the gutter at the bottom of the frame.
Use `set-specifier' to change this.
See `default-gutter' for a description of a valid gutter instantiator.

Note that, unless the `default-gutter-position' is `bottom', by
default the height of the bottom gutter (controlled by
`bottom-gutter-height') is 0; thus, a bottom gutter will not be
displayed even if you provide a value for `bottom-gutter'.Sgutter.c
Vleft-gutter
Specifier for the gutter at the left edge of the frame.
Use `set-specifier' to change this.
See `default-gutter' for a description of a valid gutter instantiator.

Note that, unless the `default-gutter-position' is `left', by
default the height of the left gutter (controlled by
`left-gutter-width') is 0; thus, a left gutter will not be
displayed even if you provide a value for `left-gutter'.Sgutter.c
Vright-gutter
Specifier for the gutter at the right edge of the frame.
Use `set-specifier' to change this.
See `default-gutter' for a description of a valid gutter instantiator.

Note that, unless the `default-gutter-position' is `right', by
default the height of the right gutter (controlled by
`right-gutter-width') is 0; thus, a right gutter will not be
displayed even if you provide a value for `right-gutter'.Sgutter.c
Vdefault-gutter-height
*Height of the default gutter, if it's oriented horizontally.
This is a specifier; use `set-specifier' to change it.

The position of the default gutter is specified by the function
`set-default-gutter-position'.  If the corresponding position-specific
gutter thickness specifier (e.g. `top-gutter-height' if
`default-gutter-position' is `top') does not specify a thickness in a
particular domain (a window or a frame), then the value of
`default-gutter-height' or `default-gutter-width' (depending on the
gutter orientation) in that domain, if any, will be used instead.

Note that `default-gutter-height' is only used when
`default-gutter-position' is `top' or `bottom', and `default-gutter-width'
is only used when `default-gutter-position' is `left' or `right'.

Note that all of the position-specific gutter thickness specifiers
have a fallback value of zero when they do not correspond to the
default gutter.  Therefore, you will have to set a non-zero thickness
value if you want a position-specific gutter to be displayed.

If you set the height to `autodetect' the size of the gutter will be
calculated to be large enough to hold the contents of the gutter. This
is the default.Sgutter.c
Vdefault-gutter-width
*Width of the default gutter, if it's oriented vertically.
This is a specifier; use `set-specifier' to change it.

See `default-gutter-height' for more information.Sgutter.c
Vtop-gutter-height
*Height of the top gutter.
This is a specifier; use `set-specifier' to change it.

See `default-gutter-height' for more information.Sgutter.c
Vbottom-gutter-height
*Height of the bottom gutter.
This is a specifier; use `set-specifier' to change it.

See `default-gutter-height' for more information.Sgutter.c
Vleft-gutter-width
*Width of left gutter.
This is a specifier; use `set-specifier' to change it.

See `default-gutter-height' for more information.Sgutter.c
Vright-gutter-width
*Width of right gutter.
This is a specifier; use `set-specifier' to change it.

See `default-gutter-height' for more information.Sgutter.c
Vdefault-gutter-border-width
*Width of the border around the default gutter.
This is a specifier; use `set-specifier' to change it.

The position of the default gutter is specified by the function
`set-default-gutter-position'.  If the corresponding position-specific
gutter border width specifier (e.g. `top-gutter-border-width' if
`default-gutter-position' is `top') does not specify a border width in a
particular domain (a window or a frame), then the value of
`default-gutter-border-width' in that domain, if any, will be used
instead.
Sgutter.c
Vtop-gutter-border-width
*Border width of the top gutter.
This is a specifier; use `set-specifier' to change it.

See `default-gutter-height' for more information.Sgutter.c
Vbottom-gutter-border-width
*Border width of the bottom gutter.
This is a specifier; use `set-specifier' to change it.

See `default-gutter-height' for more information.Sgutter.c
Vleft-gutter-border-width
*Border width of left gutter.
This is a specifier; use `set-specifier' to change it.

See `default-gutter-height' for more information.Sgutter.c
Vright-gutter-border-width
*Border width of right gutter.
This is a specifier; use `set-specifier' to change it.

See `default-gutter-height' for more information.Sgutter.c
Vdefault-gutter-visible-p
*Whether the default gutter is visible.
This is a specifier; use `set-specifier' to change it.

The position of the default gutter is specified by the function
`set-default-gutter-position'.  If the corresponding position-specific
gutter visibility specifier (e.g. `top-gutter-visible-p' if
`default-gutter-position' is `top') does not specify a visible-p value
in a particular domain (a window or a frame), then the value of
`default-gutter-visible-p' in that domain, if any, will be used
instead.

`default-gutter-visible-p' and all of the position-specific gutter
visibility specifiers have a fallback value of true.Sgutter.c
Vtop-gutter-visible-p
*Whether the top gutter is visible.
This is a specifier; use `set-specifier' to change it.

See `default-gutter-visible-p' for more information.Sgutter.c
Vbottom-gutter-visible-p
*Whether the bottom gutter is visible.
This is a specifier; use `set-specifier' to change it.

See `default-gutter-visible-p' for more information.Sgutter.c
Vleft-gutter-visible-p
*Whether the left gutter is visible.
This is a specifier; use `set-specifier' to change it.

See `default-gutter-visible-p' for more information.Sgutter.c
Vright-gutter-visible-p
*Whether the right gutter is visible.
This is a specifier; use `set-specifier' to change it.

See `default-gutter-visible-p' for more information.Sindent.c
Fcurrent-column
Return the horizontal position of point.  Beginning of line is column 0.
This is calculated by adding together the widths of all the displayed
 representations of the character between the start of the previous line
 and point. (e.g. control characters will have a width of 2 or 4, tabs
 will have a variable width.)
Ignores finite width of frame, which means that this function may return
 values greater than (frame-width).
Whether the line is visible (if `selective-display' is t) has no effect;
 however, ^M is treated as end of line when `selective-display' is t.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Sindent.c
Findent-to
Indent from point with tabs and spaces until COLUMN is reached.
Optional second argument MINIMUM says always do at least MINIMUM spaces
 even if that goes past COLUMN; by default, MINIMUM is zero.
If BUFFER is nil, the current buffer is assumed.

arguments: (COLUMN &optional MINIMUM BUFFER)
Sindent.c
Fcurrent-indentation
Return the indentation of the current line.
This is the horizontal position of the character
following any initial whitespace.

arguments: (&optional BUFFER)
Sindent.c
Fmove-to-column
Move point to column COLUMN in the current line.
The column of a character is calculated by adding together the widths
as displayed of the previous characters in the line.
This function ignores line-continuation;
there is no upper limit on the column number a character can have
and horizontal scrolling has no effect.

If specified column is within a character, point goes after that character.
If it's past end of line, point goes to end of line.

A value of `coerce' for the second (optional) argument FORCE means if
COLUMN is in the middle of a tab character, change it to spaces.
Any other non-nil value means the same, plus if the line is too short to
reach column COLUMN, then add spaces/tabs to get there.

Returns the actual column that it moved to.

arguments: (COLUMN &optional FORCE BUFFER)
Sindent.c
Fcompute-motion
"Scan through the current buffer, calculating screen position.
Scan the current buffer forward from offset FROM,
assuming it is at position FROMPOS--a cons of the form (HPOS . VPOS)--
to position TO or position TOPOS--another cons of the form (HPOS . VPOS)--
and return the ending buffer position and screen location.

There are three additional arguments:

WIDTH is the number of columns available to display text;
this affects handling of continuation lines.
This is usually the value returned by `window-width', less one (to allow
for the continuation glyph).

OFFSETS is either nil or a cons cell (HSCROLL . TAB-OFFSET).
HSCROLL is the number of columns not being displayed at the left
margin; this is usually taken from a window's hscroll member.
TAB-OFFSET is the number of columns of the first tab that aren't
being displayed, perhaps because the line was continued within it.
If OFFSETS is nil, HSCROLL and TAB-OFFSET are assumed to be zero.

WINDOW is the window to operate on.  Currently this is used only to
find the display table.  It does not matter what buffer WINDOW displays;
`compute-motion' always operates on the current buffer.

The value is a list of five elements:
  (POS HPOS VPOS PREVHPOS CONTIN)
POS is the buffer position where the scan stopped.
VPOS is the vertical position where the scan stopped.
HPOS is the horizontal position where the scan stopped.

PREVHPOS is the horizontal position one character back from POS.
CONTIN is t if a line was continued after (or within) the previous character.

For example, to find the buffer position of column COL of line LINE
of a certain window, pass the window's starting location as FROM
and the window's upper-left coordinates as FROMPOS.
Pass the buffer's (point-max) as TO, to limit the scan to the end of the
visible section of the buffer, and pass LINE and COL as TOPOS.

arguments: (FROM FROMPOS TO TOPOS WIDTH OFFSETS WINDOW)
Sindent.c
Fvertical-motion
Move to start of frame line LINES lines down.
If LINES is negative, this is moving up.
Optional second argument is WINDOW to move in,
the default is the selected window.

Sets point to position found; this may be start of line
or just the start of a continuation line.
If optional third argument PIXELS is nil, returns number
of lines moved; may be closer to zero than LINES if beginning
or end of buffer was reached.  If PIXELS is non-nil, the
vertical pixel height of the motion which took place is
returned instead of the actual number of lines moved.  A
motion of zero lines returns the height of the current line.

NOTE NOTE NOTE: GNU Emacs/XEmacs difference.

What `vertical-motion' actually does is set WINDOW's buffer's point
if WINDOW is the selected window; else, it sets WINDOW's point.
This is unfortunately somewhat tricky to work with, and different
from GNU Emacs, which always uses the current buffer, not WINDOW's
buffer, always sets current buffer's point, and, from the
perspective of this function, temporarily makes WINDOW display
the current buffer if it wasn't already.

arguments: (LINES &optional WINDOW PIXELS)
Sindent.c
Fvertical-motion-pixels
Move to start of frame line PIXELS vertical pixels down.
If PIXELS is negative, this is moving up.
The actual vertical motion in pixels is returned.

Optional second argument is WINDOW to move in,
the default is the selected window.

Optional third argument HOW specifies when to stop.  A value
less than zero indicates that the motion should be no more
than PIXELS.  A value greater than zero indicates that the
motion should be at least PIXELS.  Any other value indicates
that the motion should be as close as possible to PIXELS.

arguments: (PIXELS &optional WINDOW HOW)
Sindent.c
Vindent-tabs-mode
*Indentation can insert tabs if this is non-nil.
Setting this variable automatically makes it local to the current buffer.Sintl.c
Fcurrent-locale
Return the current locale.
This is of the form LANG_COUNTRY.ENCODING, or LANG_COUNTRY, or LANG,
or .ENCODING.  Unfortunately, the meanings of these three values are
system-dependent, and there is no universal agreement.

arguments: ()
Sintl.c
Fset-current-locale
Set the user's current locale.
Takes a string, the value passed to setlocale().
This is of the form LANG_COUNTRY.ENCODING, or LANG_COUNTRY, or LANG,
or .ENCODING.  Unfortunately, the meanings of these three values are
system-dependent, and there is no universal agreement.  This function
is meant to be called only from `set-language-environment', which
keeps tables to figure out the values to use for particular systems.

If the empty string is passed in, the locale is initialized from
environment variables.

Returns nil if the call failed (typically, an invalid locale was given).
Otherwise, returns the locale, or possibly a more-specified version.

arguments: (LOCALE)
Sintl.c
Fignore-defer-gettext
If OBJECT is of the form (defer-gettext "string"), return the string.
The purpose of the defer-gettext symbol is to identify strings which
are translated when they are referenced instead of when they are defined.

arguments: (OBJECT)
Sintl.c
Fgettext
Look up STRING in the default message domain and return its translation.
This function does nothing if I18N3 was not enabled when Emacs was compiled.

arguments: (STRING)
Skeymap.c
Fmake-keymap
Construct and return a new keymap object.
All entries in it are nil, meaning "command undefined".

Optional argument NAME specifies a name to assign to the keymap,
as in `set-keymap-name'.  This name is only a debugging convenience;
it is not used except when printing the keymap.

arguments: (&optional NAME)
Skeymap.c
Fmake-sparse-keymap
Construct and return a new keymap object.
All entries in it are nil, meaning "command undefined".  The only
difference between this function and `make-keymap' is that this function
returns a "smaller" keymap (one that is expected to contain fewer
entries).  As keymaps dynamically resize, this distinction is not great.

Optional argument NAME specifies a name to assign to the keymap,
as in `set-keymap-name'.  This name is only a debugging convenience;
it is not used except when printing the keymap.

arguments: (&optional NAME)
Skeymap.c
Fkeymap-parents
Return the `parent' keymaps of KEYMAP, or nil.
The parents of a keymap are searched for keybindings when a key sequence
isn't bound in this one.  `(current-global-map)' is the default parent
of all keymaps.

arguments: (KEYMAP)
Skeymap.c
Fset-keymap-parents
Set the `parent' keymaps of KEYMAP to PARENTS.
The parents of a keymap are searched for keybindings when a key sequence
isn't bound in this one.  `(current-global-map)' is the default parent
of all keymaps.

arguments: (KEYMAP PARENTS)
Skeymap.c
Fset-keymap-name
Set the `name' of the KEYMAP to NEW-NAME.
The name is only a debugging convenience; it is not used except
when printing the keymap.

arguments: (KEYMAP NEW-NAME)
Skeymap.c
Fkeymap-name
Return the `name' of KEYMAP.
The name is only a debugging convenience; it is not used except
when printing the keymap.

arguments: (KEYMAP)
Skeymap.c
Fset-keymap-prompt
Set the `prompt' of KEYMAP to string NEW-PROMPT, or `nil'
if no prompt is desired.  The prompt is shown in the echo-area
when reading a key-sequence to be looked-up in this keymap.

arguments: (KEYMAP NEW-PROMPT)
Skeymap.c
Fkeymap-prompt
Return the `prompt' of KEYMAP.
If non-nil, the prompt is shown in the echo-area
when reading a key-sequence to be looked-up in this keymap.

arguments: (KEYMAP &optional USE-INHERITED)
Skeymap.c
Fset-keymap-default-binding
Sets the default binding of KEYMAP to COMMAND, or `nil'
if no default is desired.  The default-binding is returned when
no other binding for a key-sequence is found in the keymap.
If a keymap has a non-nil default-binding, neither the keymap's
parents nor the current global map are searched for key bindings.

arguments: (KEYMAP COMMAND)
Skeymap.c
Fkeymap-default-binding
Return the default binding of KEYMAP, or `nil' if it has none.
The default-binding is returned when no other binding for a key-sequence
is found in the keymap.
If a keymap has a non-nil default-binding, neither the keymap's
parents nor the current global map are searched for key bindings.

arguments: (KEYMAP)
Skeymap.c
Fkeymapp
Return t if OBJECT is a keymap object.
The keymap may be autoloaded first if necessary.

arguments: (OBJECT)
Skeymap.c
Fcopy-keymap
Return a copy of the keymap KEYMAP.
The copy starts out with the same definitions of KEYMAP,
but changing either the copy or KEYMAP does not affect the other.
Any key definitions that are subkeymaps are recursively copied.

arguments: (KEYMAP)
Skeymap.c
Fkeymap-fullness
Return the number of bindings in the keymap.

arguments: (KEYMAP)
Skeymap.c
Fevent-matches-key-specifier-p
Return non-nil if EVENT matches KEY-SPECIFIER.
This can be useful, e.g., to determine if the user pressed `help-char' or
`quit-char'.

KEY-SPECIFIER can be a character, integer, a symbol, a list of modifiers
and symbols, or an event.

What this actually happens is this:

(1) Return no, if EVENT is not a key press event or if KEY-SPECIFIER is nil
    or an integer that cannot be converted to a character.

(2) If KEY-SPECIFIER is a character or integer,
    (event-to-character EVENT nil nil nil) is called, and the characters are
    compared to get the result.  The reason for special-casing this and doing
    it this way is to ensure that, e.g., a KEY-SPECIFIER of 27 matches both
    a key-press `escape' and a key-press `control ['. #### Think about META
    argument to event-to-character.

(3) If KEY-SPECIFIER is an event, fine; else, convert to an event using
    (character-to-event KEY-SPECIFIER nil nil nil).  If EVENT is not on a TTY,
    we just compare keysyms and modifiers and return yes if both are equal.
    For TTY, we do character-level comparison by converting both to a character
    with (event-to-character ... nil nil nil) and comparing the characters.


arguments: (EVENT KEY-SPECIFIER)
Skeymap.c
Fdefine-key
Define key sequence KEYS, in KEYMAP, as DEF.
KEYMAP is a keymap object.
KEYS is the key sequence to bind, described below.
DEF is anything that can be a key's definition:
 nil (means key is undefined in this keymap);
 a command (a Lisp function suitable for interactive calling);
 a string or key sequence vector (treated as a keyboard macro);
 a keymap (to define a prefix key);
 a symbol; when the key is looked up, the symbol will stand for its
    function definition, that should at that time be one of the above,
    or another symbol whose function definition is used, and so on.
 a cons (STRING . DEFN), meaning that DEFN is the definition
    (DEFN should be a valid definition in its own right);
 or a cons (KEYMAP . CHAR), meaning use definition of CHAR in map KEYMAP.

A `key sequence' is a vector of one or more keystrokes.
A `keystroke' is a list containing a key and zero or more modifiers.  The
key must be the last element of the list.
A `key' is a symbol corresponding to a key on the keyboard, or to a mouse
gesture.  Mouse clicks are denoted by symbols prefixed with "button",
followed by a digit for which button, and optionally "up".  Thus `button1'
means the down-stroke and `button1up' means the up-stroke when clicking
mouse button 1.
A `modifier' is a symbol naming a physical key which is only "noticed" by
XEmacs when chorded with another key.  The `shift' modifier is a special
case.  You cannot use `(meta shift a)' to mean `(meta A)', since for
characters that have ASCII equivalents, the state of the shift key is
implicit in the keysym (a vs. A).  You also cannot say `(shift =)' to mean
`+', as that correspondence varies from keyboard to keyboard.  The shift
modifier can only be applied to keys that do not have a second keysym on the
same key, such as `backspace' and `tab'.  A mouse click may be combined with
modifiers to create a compound "keystroke".

The keys, mouse gestures, and modifiers that are available depend on your
console and its driver.  At a minimum the ASCII graphic characters will be
available as keys, and shift, control, and meta as modifiers.

To find out programmatically what a key is bound to, use `key-binding' to
check all applicable keymaps, or `lookup-key' to check a specific keymap.
The documentation for `key-binding' also contains a description of which
keymaps are applicable in various situations.  `where-is-internal' does
the opposite of `key-binding', i.e. searches keymaps for the keys that
map to a particular binding.

If you are confused about why a particular key sequence is generating a
particular binding, and looking through the keymaps doesn't help, setting
the variable `debug-emacs-events' may help.  If not, try checking
what's in `function-key-map' and `key-translation-map'.

When running under a window system, typically the repertoire of keys is
vastly expanded.  XEmacs does its best to use the names defined on each
platform.  Also, when running under a window system, XEmacs can tell the
difference between the keystrokes control-h, control-shift-h, and backspace.
If the symbols differ, you can bind different actions to each.  For mouse
clicks, different commands may be bound to the up and down strokes, though
that is probably not what you want, so be careful.

Variant representations:

Besides the canonical representation as a vector of lists of symbols,
`define-key' also accepts a number of abbreviations, aliases, and variants
for convenience, compatibility, and internal use.

A key sequence can also be the vector [remap COMMAND]; this shadows any
bindings for COMMAND in KEYMAP, using DEF instead of COMMAND.  See
`command-remapping' and `remap-command'.  Specify [(remap) KEYSTROKE] if
your keyboard has a key with the name `remap' and you'd like to use it as a
prefix.

A keystroke may be represented by a key; this is treated as though it were a
list containing that key as the only element.  A keystroke may also be
represented by an event object, as returned by the `next-command-event' and
`read-key-sequence' functions.  A key sequence may be represented by a
single keystroke; this is treated as a vector containing that keystroke as
its only element.

A key may be represented by a character or its equivalent integer code,
if and only if it is equivalent to a character with a code in the range
32 - 255.

For backward compatibility, a key sequence may also be represented by a
string.  In this case, it represents the key sequence(s) that would
produce that sequence of ASCII characters in a purely ASCII world.  An
alternative string representation is keyboard macro notation, which can
be translated to the canonical representation with `kbd'.

Examples:

The key sequence `A' (which invokes `self-insert-command') is represented
by all of these forms:
	A	?A	65	(A)	(?A)	(65)
	[A]	[?A]	[65]	[(A)]	[(?A)]	[(65)]

The key sequence `control-a' is represented by these forms:
	(control A)	(control ?A)	(control 65)
	[(control A)]	[(control ?A)]	[(control 65)]

The key sequence `control-c control-a' is represented by these forms:
	[(control c) (control a)]	[(control ?c) (control ?a)]
	[(control 99) (control 65)]	etc.

The keystroke `control-b' *may not* be represented by the number 2 (the
ASCII code for ^B) or the character `?^B'.

The `break' key may be represented only by the symbol `break'.

Mouse button clicks work just like keypresses: (control button1) means
pressing the left mouse button while holding down the control key.

A string containing the ASCII backspace character, "\^H", would represent
two key sequences: `(control h)' and `backspace'.  Binding a
command to this will actually bind both of those key sequences.  Likewise
for the following pairs:

		control h	backspace
		control i   	tab
		control m   	return
		control j   	linefeed
		control [   	escape
		control @	control space

After binding a command to two key sequences with a form like

	(define-key global-map "\^X\^I" 'command-1)

it is possible to redefine only one of those sequences like so:

	(define-key global-map [(control x) (control i)] 'command-2)
	(define-key global-map [(control x) tab] 'command-3)

arguments: (KEYMAP KEYS DEF)
Skeymap.c
Fremap-command
Ensure that NEW is called when previously OLD would be, in KEYMAP.

NEW and OLD are both command symbols.  KEYMAP is a keymap object.

This is equivalent to `(define-key KEYMAP [remap OLD] NEW])'.  See also
`substitute-key-definition', an older way of doing a similar thing.

arguments: (KEYMAP OLD NEW)
Skeymap.c
Fcommand-remapping
Return the remapping for command COMMAND.

Return nil if COMMAND is not remapped (or not a symbol).  The remapping is
the command that is executed when some key sequence in the relevant keymaps
would normally execute COMMAND, but this has been intercepted by
`remap-command' or the [remap COMMAND] syntax for KEYS in `define-key'.

If the optional argument POSITION is non-nil, it specifies an event, and the
remapping occurs in the keymaps associated with it.  It can also be a number
or marker, in which case the keymap properties at the specified buffer
position instead of point are used.  The KEYMAPS argument is ignored if
POSITION is non-nil.

If the optional argument KEYMAPS is non-nil, it should be a list of
keymaps to search for command remapping.  Otherwise, search for the
remapping in all currently active keymaps.

arguments: (COMMAND &optional POSITION KEYMAPS)
Skeymap.c
Fcommands-remapped-to
Return a list of symbols for which COMMAND is their remapping in KEYMAPS.

This is the inverse operation of `command-remapping', which see.

arguments: (COMMAND &optional KEYMAPS POSITION)
Skeymap.c
Flookup-key
In keymap KEYMAP, look up key-sequence KEYS.  Return the definition.
Nil is returned if KEYS is unbound.  See documentation of `define-key'
for valid key definitions and key-sequence specifications.
A number is returned if KEYS is "too long"; that is, the leading
characters fail to be a valid sequence of prefix characters in KEYMAP.
The number is how many key strokes at the front of KEYS it takes to
reach a non-prefix command.

arguments: (KEYMAP KEYS &optional ACCEPT-DEFAULT)
Skeymap.c
Fcurrent-keymaps
Return a list of the current keymaps that will be searched for bindings.
This lists keymaps such as the current local map and the minor-mode maps,
 but does not list the parents of those keymaps.
EVENT-OR-KEYS controls which keymaps will be listed.
If EVENT-OR-KEYS is a mouse event (or a vector whose last element is a
 mouse event), the keymaps for that mouse event will be listed (see
 `key-binding').  Otherwise, the keymaps for key presses will be listed.
See `key-binding' for a description of which keymaps are searched in
various situations.

arguments: (&optional EVENT-OR-KEYS)
Skeymap.c
Fkey-binding
Return the binding for command KEYS in current keymaps.

KEYS is a string, a vector of events, or a vector of key-description lists
as described in the documentation for the `define-key' function.

NO-REMAP, if non-nil, specifies that any substitutions that have been
specified by `remap-command' (or, equivalently, by `(define-key KEYMAP
[remap OLD] NEW)') should be ignored.

POSITION, if non-nil, specifies a marker (and its associated buffer) or an
integer position (in the current buffer) to examine for relevant keymaps.
It can also be an event, in which case the associated buffer and position of
that event will be used.

The binding is probably a symbol with a function definition; see the
documentation for `lookup-key' for more information.

For key-presses, the order of keymaps searched is:
  - the `keymap' property of any extent(s) at point;
  - any applicable minor-mode maps;
  - the current local map of the current-buffer;
  - either `global-tty-map' or `global-window-system-map', depending on
    whether the current console is a TTY or non-TTY console;
  - the current global map.

For mouse-clicks, the order of keymaps searched is:
  - the current-local-map of the `mouse-grabbed-buffer' if any;
  - vertical-divider-map, if the event happened over a vertical divider
  - the `keymap' property of any extent(s) at the position of the click
    (this includes modeline extents);
  - the modeline-map of the buffer corresponding to the modeline under
    the mouse (if the click happened over a modeline);
  - the value of `toolbar-map' in the current-buffer (if the click
    happened over a toolbar);
  - the current local map of the buffer under the mouse (does not
    apply to toolbar clicks);
  - any applicable minor-mode maps;
  - either `global-tty-map' or `global-window-system-map', depending on
    whether the current console is a TTY or non-TTY console;
  - the current global map.

Note that if `overriding-local-map' or `overriding-terminal-local-map'
is non-nil, *only* those two maps and the current global map are searched.

Note also that key sequences actually received from the keyboard driver
may be processed in various ways to generate the key sequence that is
actually looked up in the keymaps.  In particular:

-- Keysyms are individually passed through `keyboard-translate-table' before
   any other processing.
-- After this, key sequences as a whole are passed through
   `key-translation-map'.
-- The resulting key sequence is actually looked up in the keymaps.
-- If there's no binding found, the key sequence is passed through
   `function-key-map' and looked up again.
-- If no binding is found and `retry-undefined-key-binding-unshifted' is
   set (it usually is) and the final keysym is an uppercase character,
   we lowercase it and start over from the `key-translation-map' stage.
-- If no binding is found and we're on MS Windows and have international
   support, we successively remap the key sequence using the keyboard layouts
   of various default locales (current language environment, user default,
   system default, US ASCII) and try again.  This makes (e.g.) sequences
   such as `C-x b' work in a Russian locale, where the alphabetic keys are
   actually generating Russian characters and not the Roman letters written
   on the keycaps. (Not yet implemented)
-- Finally, if the last keystroke matches `help-char', we automatically
   generate and display a list of possible key sequences and bindings
   given the prefix so far generated.

arguments: (KEYS &optional ACCEPT-DEFAULT NO-REMAP POSITION)
Skeymap.c
Fuse-global-map
Select KEYMAP as the global keymap.

arguments: (KEYMAP)
Skeymap.c
Fuse-local-map
Select KEYMAP as the local keymap in BUFFER.
If KEYMAP is nil, that means no local keymap.
If BUFFER is nil, the current buffer is assumed.

arguments: (KEYMAP &optional BUFFER)
Skeymap.c
Fcurrent-local-map
Return BUFFER's local keymap, or nil if it has none.
If BUFFER is nil, the current buffer is assumed.

arguments: (&optional BUFFER)
Skeymap.c
Fcurrent-global-map
Return the current global keymap.

arguments: ()
Skeymap.c
Fmap-keymap
Apply FUNCTION to each element of KEYMAP.
FUNCTION will be called with two arguments: a key-description list, and
the binding.  The order in which the elements of the keymap are passed to
the function is unspecified.  If the function inserts new elements into
the keymap, it may or may not be called with them later.  No element of
the keymap will ever be passed to the function more than once.

The function will not be called on elements of this keymap's parents
(see the function `keymap-parents') or upon keymaps which are contained
within this keymap (multi-character definitions).
It will be called on "meta" characters since they are not really
two-character sequences.

If the optional third argument SORT-FIRST is non-nil, then the elements of
the keymap will be passed to the mapper function in a canonical order.
Otherwise, they will be passed in hash (that is, random) order, which is
faster.

arguments: (FUNCTION KEYMAP &optional SORT-FIRST)
Skeymap.c
Faccessible-keymaps
Find all keymaps accessible via prefix characters from KEYMAP.
Returns a list of elements of the form (KEYS . MAP), where the sequence
KEYS starting from KEYMAP gets you to MAP.  These elements are ordered
so that the KEYS increase in length.  The first element is ([] . KEYMAP).
An optional argument PREFIX, if non-nil, should be a key sequence;
then the value includes only maps for prefixes that start with PREFIX.

arguments: (KEYMAP &optional PREFIX)
Skeymap.c
Fkey-description
Return a pretty description of key-sequence KEYS.
Control characters turn into "C-foo" sequences, meta into "M-foo",
spaces are put between sequence elements, etc...

arguments: (KEYS)
Skeymap.c
Fsingle-key-description
Return a pretty description of command character KEY.
Control characters turn into C-whatever, etc.
This differs from `text-char-description' in that it returns a description
of a key read from the user rather than a character from a buffer.

arguments: (KEY)
Skeymap.c
Ftext-char-description
Return a pretty description of file-character CHR.
Unprintable characters turn into "^char" or \NNN, depending on the value
of the `ctl-arrow' variable.
This differs from `single-key-description' in that it returns a description
of a character from a buffer rather than a key read from the user.

arguments: (CHR)
Skeymap.c
Fwhere-is-internal
Return list of keys that invoke DEFINITION in KEYMAPS.
KEYMAPS can be either a keymap (meaning search in that keymap and the
current global keymap) or a list of keymaps (meaning search in exactly
those keymaps and no others).

If optional 3rd arg FIRSTONLY is non-nil, return a vector representing
 the first key sequence found, rather than a list of all possible key
 sequences.

Optional 4th argument NOINDIRECT is ignored.  (GNU Emacs uses it to allow
searching for an indirect keymap by inhibiting following of indirections to
keymaps or slots, but XEmacs doesn't need it because keymaps are a type.)

If optional 5th argument EVENT-OR-KEYS is non-nil and KEYMAPS is nil,
search in the currently applicable maps for EVENT-OR-KEYS (this is
equivalent to specifying `(current-keymaps EVENT-OR-KEYS)' as the
argument to KEYMAPS).

arguments: (DEFINITION &optional KEYMAPS FIRSTONLY NOINDIRECT EVENT-OR-KEYS)
Skeymap.c
Fdescribe-bindings-internal
Insert a list of all defined keys and their definitions in MAP.
Optional second argument ALL says whether to include even "uninteresting"
definitions (ie symbols with a non-nil `suppress-keymap' property.
Third argument SHADOW is a list of keymaps whose bindings shadow those
of map; if a binding is present in any shadowing map, it is not printed.
Fourth argument PREFIX, if non-nil, should be a key sequence;
only bindings which start with that key sequence will be printed.
Fifth argument MOUSE-ONLY-P says to only print bindings for mouse clicks.

arguments: (MAP &optional ALL SHADOW PREFIX MOUSE-ONLY-P)
Skeymap.c
Vmeta-prefix-char
Meta-prefix character.
This character followed by some character `foo' turns into `Meta-foo'.
This can be any form recognized as a single key specifier.
To disable the meta-prefix-char, set it to a negative number.Skeymap.c
Vmouse-grabbed-buffer
A buffer which should be consulted first for all mouse activity.
When a mouse-click is processed, it will first be looked up in the
local-map of this buffer, and then through the normal mechanism if there
is no binding for that click.  This buffer's value of `mode-motion-hook'
will be consulted instead of the `mode-motion-hook' of the buffer of the
window under the mouse.  You should *bind* this, not set it.Skeymap.c
Voverriding-local-map
Keymap that overrides all other local keymaps.
If this variable is non-nil, it is used as a keymap instead of the
buffer's local map, and the minor mode keymaps and extent-local keymaps.
You should *bind* this, not set it.Skeymap.c
Vkey-translation-map
Keymap of key translations that can override keymaps.

This keymap works like `function-key-map', but is searched before it,
and applies even for keys that have ordinary bindings.

The `read-key-sequence' function replaces any subsequence bound by
`key-translation-map' with its binding.  More precisely, when the active
keymaps have no binding for the current key sequence but
`key-translation-map' binds a suffix of the sequence to a vector or string,
`read-key-sequence' replaces the matching suffix with its binding, and
continues with the new sequence.  See `key-binding' for details.

The events that come from bindings in `key-translation-map' are not
themselves looked up in `key-translation-map'.

#### FIXME: stolen from `function-key-map'; need better example.
#### I guess you could implement a Dvorak keyboard with this?
For example, suppose `key-translation-map' binds `ESC O P' to [f1].
Typing `ESC O P' to `read-key-sequence' would return
[#<keypress-event f1>].  Typing `C-x ESC O P' would return
[#<keypress-event control-X> #<keypress-event f1>].  If [f1]
were a prefix key, typing `ESC O P x' would return
[#<keypress-event f1> #<keypress-event x>].Skeymap.c
Vglobal-tty-map
Global keymap that applies only to TTY's.
Key bindings are looked up in this map just before looking in the global map,
but only when the current console is a TTY console.  See also
`global-window-system-map'.Skeymap.c
Vglobal-window-system-map
Global keymap that applies only to window systems.
Key bindings are looked up in this map just before looking in the global map,
but only when the current console is not a TTY console.  See also
`global-tty-map'.Skeymap.c
Vvertical-divider-map
Keymap which handles mouse clicks over vertical dividers.Skeymap.c
Vkeymap-tick
Incremented for each change to any keymap.Slread.c
Fload-internal
Execute a file of Lisp code named FILE; no coding-system frobbing.
This function is identical to `load' except for the handling of the
CODESYS and USED-CODESYS arguments under XEmacs/Mule. (When Mule
support is not present, both functions are identical and ignore the
CODESYS and USED-CODESYS arguments.)

If support for Mule exists in this Emacs, the file is decoded
according to CODESYS; if omitted, no conversion happens.  If
USED-CODESYS is non-nil, it should be a symbol, and the actual coding
system that was used for the decoding is stored into it.  It will in
general be different from CODESYS if CODESYS specifies automatic
encoding detection or end-of-line detection.

arguments: (FILE &optional NOERROR NOMESSAGE NOSUFFIX CODESYS USED-CODESYS)
Slread.c
Flocate-file
Search for FILENAME through PATH-LIST.

If SUFFIXES is non-nil, it should be a list of suffixes to append to
file name when searching.

If MODE is non-nil, it should be a symbol or a list of symbol representing
requirements.  Allowed symbols are `exists', `executable', `writable', and
`readable'.  If MODE is nil, it defaults to `readable'.

Filenames are checked against `load-suppress-alist' to determine if they
should be ignored.

`locate-file' keeps hash tables of the directories it searches through,
in order to speed things up.  It tries valiantly to not get confused in
the face of a changing and unpredictable environment, but can occasionally
get tripped up.  In this case, you will have to call
`locate-file-clear-hashing' to get it back on track.  See that function
for details.

arguments: (FILENAME PATH-LIST &optional SUFFIXES MODE)
Slread.c
Flocate-file-clear-hashing
Clear the hash records for the specified list of directories.
`locate-file' uses a hashing scheme to speed lookup, and will correctly
track the following environmental changes:

-- changes of any sort to the list of directories to be searched.
-- addition and deletion of non-shadowing files (see below) from the
   directories in the list.
-- byte-compilation of a .el file into a .elc file.

`locate-file' will primarily get confused if you add a file that shadows
(i.e. has the same name as) another file further down in the directory list.
In this case, you must call `locate-file-clear-hashing'.

If PATH is t, it means to fully clear all the accumulated hashes.  This
can be used if the internal tables grow too large, or when dumping.

arguments: (PATH)
Slread.c
Feval-buffer
Execute BUFFER as Lisp code.
Programs can pass two arguments, BUFFER and PRINTFLAG.
BUFFER is the buffer to evaluate (nil means use current buffer).
PRINTFLAG controls printing of output:
nil means discard it; anything else is a stream for printing.

If there is no error, point does not move.  If there is an error,
point remains at the end of the last character read from the buffer.

arguments: (&optional BUFFER PRINTFLAG)
Slread.c
Feval-current-buffer
Execute the current buffer as Lisp code.
Programs can pass argument PRINTFLAG which controls printing of output:
nil means discard it; anything else is stream for print.

If there is no error, point does not move.  If there is an error,
point remains at the end of the last character read from the buffer.

arguments: (&optional PRINTFLAG)
Slread.c
Feval-region
Execute the region as Lisp code.
When called from programs, expects two arguments START and END
giving starting and ending indices in the current buffer
of the text to be executed.
Programs can pass third optional argument STREAM which controls output:
nil means discard it; anything else is stream for printing it.

If there is no error, point does not move.  If there is an error,
point remains at the end of the last character read from the buffer.

Note:  Before evaling the region, this function narrows the buffer to it.
If the code being eval'd should happen to trigger a redisplay you may
see some text temporarily disappear because of this.

arguments: (START END &optional STREAM)
Slread.c
Fread
Read one Lisp expression as text from STREAM, return as Lisp object.
If STREAM is nil, use the value of `standard-input' (which see).
STREAM or the value of `standard-input' may be:
 a buffer (read from point and advance it)
 a marker (read from where it points and advance it)
 a function (call it with no arguments for each character,
     call it with a char as argument to push a char back)
 a string (takes text from string, starting at the beginning)
 t (read text line using minibuffer and use it).

arguments: (&optional STREAM)
Slread.c
Fread-from-string
Read one Lisp expression which is represented as text by STRING.
Returns a cons: (OBJECT-READ . FINAL-STRING-INDEX).
START and END optionally delimit a substring of STRING from which to read;
 they default to 0 and (length STRING) respectively.

arguments: (STRING &optional START END)
Slread.c
Vvalues
List of values of all expressions which were read, evaluated and printed.
Order is reverse chronological.Slread.c
Vstandard-input
Stream for read to get input from.
See documentation of `read' for possible values.Slread.c
Vload-path
*List of directories to search for files to load.
Each element is a string (directory name) or nil (try default directory).

Note that the elements of this list *may not* begin with "~", so you must
call `expand-file-name' on them before adding them to this list.

Initialized based on EMACSLOADPATH environment variable, if any,
otherwise to default specified in by file `paths.h' when XEmacs was built.
If there were no paths specified in `paths.h', then XEmacs chooses a default
value for this variable by looking around in the file-system near the
directory in which the XEmacs executable resides.Slread.c
Vload-in-progress
Non-nil iff inside of `load'.Slread.c
Vload-suppress-alist
An alist of expressions controlling whether particular files can be loaded.
Each element looks like (FILENAME EXPR).
FILENAME should be a full pathname, but without the .el suffix.
When `load' is run and is about to load the specified file, it evaluates
the form to determine if the file can be loaded.
This variable is normally initialized automatically.Slread.c
Vafter-load-alist
An alist of expressions to be evalled when particular files are loaded.
Each element looks like (FILENAME FORMS...).
When `load' is run and the file-name argument is FILENAME,
the FORMS in the corresponding element are executed at the end of loading.

FILENAME must match exactly!  Normally FILENAME is the name of a library,
with no directory specified, since that is how `load' is normally called.
An error in FORMS does not undo the load,
but does prevent execution of the rest of the FORMS.Slread.c
Vload-warn-when-source-newer
*Whether `load' should check whether the source is newer than the binary.
If this variable is true, then when a `.elc' file is being loaded and the
corresponding `.el' is newer, a warning message will be printed.Slread.c
Vload-warn-when-source-only
*Whether `load' should warn when loading a `.el' file instead of an `.elc'.
If this variable is true, then when `load' is called with a filename without
an extension, and the `.elc' version doesn't exist but the `.el' version does,
then a message will be printed.  If an explicit extension is passed to `load',
no warning will be printed.Slread.c
Vload-ignore-elc-files
*Whether `load' should ignore `.elc' files when a suffix is not given.
This is normally used only to bootstrap the `.elc' files when building XEmacs.Slread.c
Vload-ignore-out-of-date-elc-files
*Whether `load' should ignore out-of-date `.elc' files when no suffix is given.
This is normally used when compiling packages of elisp files that may have
complex dependencies.  Ignoring all elc files with `load-ignore-elc-files'
would also be safe, but much slower.Slread.c
Vload-always-display-messages
*Whether `load' should always display loading messages.
If this is true, every file loaded will be shown, regardless of the setting
of the NOMESSAGE parameter, and even when files are loaded indirectly, e.g.
due to `require'.Slread.c
Vload-show-full-path-in-messages
*Whether `load' should show the full path in all loading messages.Slread.c
Vload-history
Alist mapping source file names to symbols and features.
Each alist element is a list that starts with a file name,
except for one element (optional) that starts with nil and describes
definitions evaluated from buffers not visiting files.
The remaining elements of each list are symbols defined as functions
or variables, and cons cells `(provide . FEATURE)' and `(require . FEATURE)'.Slread.c
Vcurrent-load-list
Used for internal purposes by `load'.Slread.c
Vload-file-name
Full name of file being loaded by `load'.Slread.c
Vload-read-function
Function used by `load' and `eval-region' for reading expressions.
The default is nil, which means use the function `read'.Slread.c
Vload-force-doc-strings
Non-nil means `load' should force-load all dynamic doc strings.
This is useful when the file being loaded is a temporary copy.Slread.c
Vfail-on-bucky-bit-character-escapes
Whether `read' should signal an error when it encounters unsupported
character escape syntaxes or just read them incorrectly.Slstream.c
Ffixed-buffer
rSmc-alloc.c
Fmc-alloc-memory-usage
Returns stats about the mc-alloc memory usage. See diagnose.el.

arguments: ()
Svdb.c
Ftest-vdb
Test virtual dirty bit implementation. Prints results to stderr.

arguments: ()
Svdb.c
Ftest-segfault
Test virtual dirty bit implementation: provoke a segfault on purpose.
WARNING: this function causes a SEGFAULT on purpose and thus crashes
XEmacs!  This is only used for debbugging, e.g. for testing how the
debugger behaves when XEmacs segfaults and the write barrier is
enabled.

arguments: ()
Smacros.c
Fstart-kbd-macro
Record subsequent keyboard and menu input, defining a keyboard macro.
The commands are recorded even as they are executed.
Use \[end-kbd-macro] to finish recording and make the macro available.
Use \[name-last-kbd-macro] to give it a permanent name.
Non-nil arg (prefix arg) means append to last macro defined;
 This begins by re-executing that macro as if you typed it again.

arguments: (APPEND)
Smacros.c
Fend-kbd-macro
Finish defining a keyboard macro.
The definition was started by \[start-kbd-macro].
The macro is now available for use via \[call-last-kbd-macro],
or it can be given a name with \[name-last-kbd-macro] and then invoked
under that name.

With numeric arg, repeat macro now that many times,
counting the definition just completed as the first repetition.
An argument of zero means repeat until error.

arguments: (&optional ARG)
Smacros.c
Fzap-last-kbd-macro-event
Don't look at this lest you vomit or spontaneously combust.

arguments: ()
Smacros.c
Fcancel-kbd-macro-events
Cancel the events added to a keyboard macro for this command.

arguments: ()
Smacros.c
Fcall-last-kbd-macro
Call the last keyboard macro that you defined with \[start-kbd-macro].

A prefix argument serves as a repeat count.  Zero means repeat until error.

To make a macro permanent so you can call it even after
defining others, use \[name-last-kbd-macro].

arguments: (&optional PREFIX)
Smacros.c
Fexecute-kbd-macro
Execute MACRO as string of editor command characters.
If MACRO is a symbol, its function definition is used.
COUNT is a repeat count, or nil for once, or 0 for infinite loop.

arguments: (MACRO &optional COUNT)
Smacros.c
Vexecuting-macro
Currently executing keyboard macro (a vector of events or string);
nil if none executing.Smacros.c
Vexecuting-kbd-macro
Currently executing keyboard macro (a vector of events or string);
nil if none executing.Smarker.c
Fmarker-buffer
Return the buffer that MARKER points into, or nil if none.
Return nil if MARKER points into a dead buffer or doesn't point anywhere.

arguments: (MARKER)
Smarker.c
Fmarker-position
Return the position MARKER points at, as a character number.
Return `nil' if marker doesn't point anywhere.

arguments: (MARKER)
Smarker.c
Fset-marker
Move MARKER to position POSITION in BUFFER.
POSITION can be a marker, an integer or nil.  If POSITION is an
integer, make MARKER point before the POSITIONth character in BUFFER.
If POSITION is nil, makes MARKER point nowhere.  Then it no longer
slows down editing in any buffer.  If POSITION is less than 1, move
MARKER to the beginning of BUFFER.  If POSITION is greater than the
size of BUFFER, move MARKER to the end of BUFFER.
BUFFER defaults to the current buffer.
If this marker was returned by (point-marker t), then changing its
position moves point.  You cannot change its buffer or make it point
nowhere.
The return value is MARKER.

arguments: (MARKER POSITION &optional BUFFER)
Smarker.c
Fcopy-marker
Return a new marker pointing at the same place as MARKER-OR-INTEGER.
If MARKER-OR-INTEGER is an integer, return a new marker pointing
at that position in the current buffer.
Optional argument MARKER-TYPE specifies the insertion type of the new
marker; see `marker-insertion-type'.

arguments: (MARKER-OR-INTEGER &optional MARKER-TYPE)
Smarker.c
Fmarker-insertion-type
Return insertion type of MARKER: t if it stays after inserted text.
nil means the marker stays before text inserted there.

arguments: (MARKER)
Smarker.c
Fset-marker-insertion-type
Set the insertion-type of MARKER to TYPE.
If TYPE is t, it means the marker advances when you insert text at it.
If TYPE is nil, it means the marker stays behind when you insert text at it.

arguments: (MARKER TYPE)
Smarker.c
Fbuffer-has-markers-at
Return t if there are markers pointing at POSITION in the current buffer.

arguments: (POSITION)
Smd5.c
Fmd5
Return the MD5 message digest of OBJECT, a buffer or string.

Optional arguments START and END denote positions for computing the
digest of a portion of OBJECT.

The optional CODING argument specifies the coding system the text is to be
represented in while computing the digest.  If unspecified, it defaults
to the current format of the data, or is guessed.

If NOERROR is non-nil, silently assume binary coding if the guesswork
fails.  Normally, an error is signaled in such case.

CODING and NOERROR arguments are meaningful only in XEmacsen with
file-coding or Mule support.  Otherwise, they are ignored.

arguments: (OBJECT &optional START END CODING NOERROR)
Sminibuf.c
Fminibuffer-depth
Return current depth of activations of minibuffer, a nonnegative integer.

arguments: ()
Sminibuf.c
Fset-minibuffer-preprompt
Set the minibuffer preprompt string to PREPROMPT. This is used by language
input methods to relay state information to the user.

arguments: (PREPROMPT)
Sminibuf.c
Fread-minibuffer-internal
Lowest-level interface to minibuffers.  Don't call this.

arguments: (PROMPT)
Sminibuf.c
Ftry-completion
Return common substring of all completions of STRING in COLLECTION.
COLLECTION must be a list, a hash table, an obarray, or a function.

Each string (or symbol) in COLLECTION is tested to see if it (or its
name) begins with STRING.  All that match are compared together; the
longest initial sequence common to all matches is returned as a
string.  If there is no match at all, nil is returned.  For an exact
match, t is returned.

If COLLECTION is a list, the elements of the list that are not cons
cells and the cars of the elements of the list that are cons cells
(which must be strings or symbols) form the set of possible
completions.

If COLLECTION is a hash table, all the keys that are strings or symbols
are the possible completions.

If COLLECTION is an obarray, the names of all symbols in the obarray
are the possible completions.

If COLLECTION is a function, it is called with three arguments: the
values STRING, PREDICATE and nil.  Whatever it returns becomes the
value of `try-completion'.

If optional third argument PREDICATE is non-nil, it is used to test
each possible match.  The match is a candidate only if PREDICATE
returns non-nil.  The argument given to PREDICATE is the alist element
or the symbol from the obarray.  If COLLECTION is a hash table,
PREDICATE is passed two arguments, the key and the value of the hash
table entry.

arguments: (STRING COLLECTION &optional PREDICATE)
Sminibuf.c
Fall-completions
Search for partial matches to STRING in COLLECTION.
COLLECTION must be an list, a hash table, an obarray, or a function.

Each string (or symbol) in COLLECTION is tested to see if it (or its
name) begins with STRING.  The value is a list of all the strings from
COLLECTION that match.

If COLLECTION is a list, the elements of the list that are not cons
cells and the cars of the elements of the list that are cons cells
(which must be strings or symbols) form the set of possible
completions.

If COLLECTION is a hash-table, all the keys that are strings or symbols
are the possible completions.

If COLLECTION is an obarray, the names of all symbols in the obarray
are the possible completions.

If COLLECTION is a function, it is called with three arguments: the
values STRING, PREDICATE and t.  Whatever it returns becomes the
value of `all-completions'.

If optional third argument PREDICATE is non-nil, it is used to test
each possible match.  The match is a candidate only if PREDICATE
returns non-nil.  The argument given to PREDICATE is the alist element
or the symbol from the obarray.  If COLLECTION is a hash table,
PREDICATE is passed two arguments, the key and the value of the hash
table entry.

arguments: (STRING COLLECTION &optional PREDICATE)
Sminibuf.c
Ftest-completion
Return non-nil if STRING is an exact completion in COLLECTION.

COLLECTION must be a list, a hash table, an obarray, or a function.

Each string (or symbol) in COLLECTION is tested to see if it (or its
name) begins with STRING, until a valid, exact completion is found.

If COLLECTION is a list, the elements of the list that are not cons
cells and the cars of the elements of the list that are cons cells
(which must be strings or symbols) form the set of possible
completions.

If COLLECTION is a hash-table, all the keys that are strings or symbols
are the possible completions.

If COLLECTION is an obarray, the names of all symbols in the obarray
are the possible completions.

If COLLECTION is a function, it is called with three arguments: the
values STRING, PREDICATE and the symbol `lambda'.  Whatever it returns
is passed back by `test-completion'.

If optional third argument PREDICATE is non-nil, it is used to test
for possible matches.  The match is a candidate only if PREDICATE
returns non-nil.  The argument given to PREDICATE is the alist element
or the symbol from the obarray.  If COLLECTION is a hash table,
PREDICATE is passed two arguments, the key and the value of the hash
table entry.

arguments: (STRING COLLECTION &optional PREDICATE)
Sminibuf.c
Fminibuffer-prompt
Return the prompt string of the currently-active minibuffer.
If no minibuffer is active, return nil.

arguments: ()
Sminibuf.c
Fminibuffer-prompt-width
Return the display width of the minibuffer prompt.

arguments: ()
Sminibuf.c
Vminibuffer-setup-hook
Normal hook run just after entry to minibuffer.Sminibuf.c
Vcompletion-ignore-case
Non-nil means don't consider case significant in completion.Sminibuf.c
Vcompletion-regexp-list
List of regexps that should restrict possible completions.
Each completion has to match all regexps in this list.Sfontcolor.c
Fmake-color-instance
Return a new `color-instance' object named NAME (a string).

Optional argument DEVICE specifies the device this object applies to
and defaults to the selected device.

An error is signaled if the color is unknown or cannot be allocated;
however, if optional argument NOERROR is non-nil, nil is simply
returned in this case. (And if NOERROR is other than t, a warning may
be issued.)

The returned object is a normal, first-class lisp object.  The way you
`deallocate' the color is the way you deallocate any other lisp object:
you drop all pointers to it and allow it to be garbage collected.  When
these objects are GCed, the underlying window-system data (e.g. X object)
is deallocated as well.

arguments: (NAME &optional DEVICE NOERROR)
Sfontcolor.c
Fcolor-instance-p
Return non-nil if OBJECT is a color instance.

arguments: (OBJECT)
Sfontcolor.c
Fcolor-instance-name
Return the name used to allocate COLOR-INSTANCE.

arguments: (COLOR-INSTANCE)
Sfontcolor.c
Fcolor-instance-rgb-components
Return a three element list containing the red, green, and blue
color components of COLOR-INSTANCE, or nil if unknown.
Component values range from 0 to 65535.

arguments: (COLOR-INSTANCE)
Sfontcolor.c
Fvalid-color-name-p
Return true if COLOR names a valid color for the current device.

Valid color names for X are listed in the file /usr/lib/X11/rgb.txt, or
whatever the equivalent is on your system.

Valid color names for TTY are those which have an ISO 6429 (ANSI) sequence.
In addition to being a color this may be one of a number of attributes
such as `blink'.

arguments: (COLOR &optional DEVICE)
Sfontcolor.c
Fcolor-list
Return a list of color names.
DEVICE specifies which device to return names for, and defaults to the
currently selected device.

arguments: (&optional DEVICE)
Sfontcolor.c
Fmake-font-instance
Return a new `font-instance' object named NAME.
DEVICE specifies the device this object applies to and defaults to the
selected device.  An error is signalled if the font is unknown or cannot
be allocated; however, if NOERROR is non-nil, nil is simply returned in
this case.  CHARSET is used internally.  #### make helper function?

The returned object is a normal, first-class lisp object.  The way you
`deallocate' the font is the way you deallocate any other lisp object:
you drop all pointers to it and allow it to be garbage collected.  When
these objects are GCed, the underlying GUI data is deallocated as well.

arguments: (NAME &optional DEVICE NOERROR CHARSET)
Sfontcolor.c
Ffont-instance-p
Return non-nil if OBJECT is a font instance.

arguments: (OBJECT)
Sfontcolor.c
Ffont-instance-name
Return the name used to allocate FONT-INSTANCE.

arguments: (FONT-INSTANCE)
Sfontcolor.c
Ffont-instance-ascent
Return the ascent in pixels of FONT-INSTANCE.
The returned value is the maximum ascent for all characters in the font,
where a character's ascent is the number of pixels above (and including)
the baseline.

arguments: (FONT-INSTANCE)
Sfontcolor.c
Ffont-instance-descent
Return the descent in pixels of FONT-INSTANCE.
The returned value is the maximum descent for all characters in the font,
where a character's descent is the number of pixels below the baseline.
(Many characters to do not have any descent.  Typical characters with a
descent are lowercase p and lowercase g.)

arguments: (FONT-INSTANCE)
Sfontcolor.c
Ffont-instance-width
Return the width in pixels of FONT-INSTANCE.
The returned value is the average width for all characters in the font.

arguments: (FONT-INSTANCE)
Sfontcolor.c
Ffont-instance-proportional-p
Return whether FONT-INSTANCE is proportional.
This means that different characters in the font have different widths.

arguments: (FONT-INSTANCE)
Sfontcolor.c
Ffont-instance-truename
Return the canonical name of FONT-INSTANCE.
Font names are patterns which may match any number of fonts, of which
the first found is used.  This returns an unambiguous name for that font
(but not necessarily its only unambiguous name).

arguments: (FONT-INSTANCE)
Sfontcolor.c
Ffont-instance-charset
Return the Mule charset that FONT-INSTANCE was allocated to handle.

arguments: (FONT-INSTANCE)
Sfontcolor.c
Ffont-instance-properties
Return the properties (an alist or nil) of FONT-INSTANCE.

arguments: (FONT-INSTANCE)
Sfontcolor.c
Ffont-list
Return a list of font names matching the given pattern.
DEVICE specifies which device to search for names, and defaults to the
currently selected device.

arguments: (PATTERN &optional DEVICE MAXNUMBER)
Sfontcolor.c
Fcolor-specifier-p
Return t if OBJECT is a color specifier.

See `make-color-specifier' for a description of possible color instantiators.

arguments: (OBJECT)
Sfontcolor.c
Ffont-specifier-p
Return non-nil if OBJECT is a font specifier.

See `make-font-specifier' for a description of possible font instantiators.

arguments: (OBJECT)
Sfontcolor.c
Fface-boolean-specifier-p
Return non-nil if OBJECT is a face-boolean specifier.

See `make-face-boolean-specifier' for a description of possible
face-boolean instantiators.

arguments: (OBJECT)
Sfontcolor.c
Fface-background-placement-specifier-p
Return non-nil if OBJECT is a face-background-placement specifier.

See `make-face-background-placement-specifier' for a description of possible
face-background-placement instantiators.

arguments: (OBJECT)
Sprint.c
Fwrite-char
Output character CHARACTER to stream STREAM.
STREAM defaults to the value of `standard-output' (which see).

arguments: (CHARACTER &optional STREAM)
Sprint.c
Fwith-output-to-temp-buffer
Bind `standard-output' to buffer BUFNAME, eval BODY, then show that buffer.
The buffer is cleared out initially, and marked as unmodified when done.
All output done by BODY is inserted in that buffer by default.
The buffer is displayed in another window, but not selected.
The value of the last form in BODY is returned.
If BODY does not finish normally, the buffer BUFNAME is not displayed.

If variable `temp-buffer-show-function' is non-nil, call it at the end
to get the buffer displayed.  It gets one argument, the buffer to display.

arguments: (BUFNAME &rest BODY)Sprint.c
Fterpri
Output a newline to STREAM.
If STREAM is omitted or nil, the value of `standard-output' is used.

arguments: (&optional STREAM)
Sprint.c
Fprin1
Output the printed representation of OBJECT, any Lisp object.
Quoting characters are printed when needed to make output that `read'
can handle, whenever this is possible.
Output stream is STREAM, or value of `standard-output' (which see).

arguments: (OBJECT &optional STREAM)
Sprint.c
Fprin1-to-string
Return a string containing the printed representation of OBJECT,
any Lisp object.  Quoting characters are used when needed to make output
that `read' can handle, whenever this is possible, unless the optional
second argument NOESCAPE is non-nil.

arguments: (OBJECT &optional NOESCAPE)
Sprint.c
Fprinc
Output the printed representation of OBJECT, any Lisp object.
No quoting characters are used; no delimiters are printed around
the contents of strings.
Output stream is STREAM, or value of `standard-output' (which see).

arguments: (OBJECT &optional STREAM)
Sprint.c
Fprint
Output the printed representation of OBJECT, with newlines around it.
Quoting characters are printed when needed to make output that `read'
can handle, whenever this is possible.
Output stream is STREAM, or value of `standard-output' (which see).

arguments: (OBJECT &optional STREAM)
Sprint.c
Ferror-message-string
Convert ERROR-OBJECT to an error message, and return it.

The format of ERROR-OBJECT should be (ERROR-SYMBOL . DATA).  The
message is equivalent to the one that would be issued by
`display-error' with the same argument.

arguments: (ERROR-OBJECT)
Sprint.c
Fdisplay-error
Display ERROR-OBJECT on STREAM in a user-friendly way.

arguments: (ERROR-OBJECT STREAM)
Sprint.c
Falternate-debugging-output
Append CHARACTER to the array `alternate_do_string'.
This can be used in place of `external-debugging-output' as a function
to be passed to `print'.  Before calling `print', set `alternate_do_pointer'
to 0.

arguments: (CHARACTER)
Sprint.c
Fset-device-clear-left-side
Set whether to output a newline before the next output to a stream device.
This will happen only if the most recently-outputted character was not
a newline -- i.e. it will make sure the left side is "clear" of text.

arguments: (DEVICE VALUE)
Sprint.c
Fdevice-left-side-clear-p
For stream devices, true if the most recent-outputted character was a newline.

arguments: (&optional DEVICE)
Sprint.c
Fexternal-debugging-output
Write CHAR-OR-STRING to stderr or stdout.
If optional arg STDOUT-P is non-nil, write to stdout; otherwise, write
to stderr.  You can use this function to write directly to the terminal.
This function can be used as the STREAM argument of Fprint() or the like.

Under MS Windows, this writes output to the console window (which is
created, if necessary), unless XEmacs is being run noninteractively
(i.e. using the `-batch' argument).

If you have opened a termscript file (using `open-termscript'), then
the output also will be logged to this file.

arguments: (CHAR-OR-STRING &optional STDOUT-P DEVICE)
Sprint.c
Fopen-termscript
Start writing all terminal output to FILENAME as well as the terminal.
FILENAME = nil means just close any termscript file currently open.

arguments: (FILENAME)
Sprint.c
Vstandard-output
Output stream `print' uses by default for outputting a character.
This may be any function of one argument.
It may also be a buffer (output is inserted before point)
or a marker (output is inserted and the marker is advanced)
or the symbol t (output appears in the minibuffer line).Sprint.c
Vfloat-output-format
The format descriptor string that lisp uses to print floats.
This is a %-spec like those accepted by `printf' in C,
but with some restrictions.  It must start with the two characters `%.'.
After that comes an integer precision specification,
and then a letter which controls the format.
The letters allowed are `e', `f' and `g'.
Use `e' for exponential notation "DIG.DIGITSeEXPT"
Use `f' for decimal point notation "DIGITS.DIGITS".
Use `g' to choose the shorter of those two formats for the number at hand.
The precision in any of these cases is the number of digits following
the decimal point.  With `f', a precision of 0 means to omit the
decimal point.  0 is not allowed with `f' or `g'.

A value of nil means to use `%.16g'.

Regardless of the value of `float-output-format', a floating point number
will never be printed in such a way that it is ambiguous with an integer;
that is, a floating-point number will always be printed with a decimal
point and/or an exponent, even if the digits following the decimal point
are all zero.  This is to preserve read-equivalence.Sprint.c
Vprint-length
Maximum length of list or vector to print before abbreviating.
A value of nil means no limit.Sprint.c
Vprint-string-length
Maximum length of string to print before abbreviating.
A value of nil means no limit.Sprint.c
Vprint-level
Maximum depth of list nesting to print before abbreviating.
A value of nil means no limit.Sprint.c
Vprint-escape-newlines
Non-nil means print newlines in strings as backslash-n.Sprint.c
Vprint-readably
If non-nil, then all objects will be printed in a readable form.
If an object has no readable representation, then an error is signalled.
When print-readably is true, compiled-function objects will be written in
 #[...] form instead of in #<compiled-function [...]> form, and two-element
 lists of the form (quote object) will be written as the equivalent 'object.
Do not SET this variable; bind it instead.Sprint.c
Vprint-gensym
If non-nil, then uninterned symbols will be printed specially.
Uninterned symbols are those which are not present in `obarray', that is,
those which were made with `make-symbol' or by calling `intern' with a
second argument.

When print-gensym is true, such symbols will be preceded by "#:",
which causes the reader to create a new symbol instead of interning
and returning an existing one.  Beware: the #: syntax creates a new
symbol each time it is seen, so if you print an object which contains
two pointers to the same uninterned symbol, `read' will not duplicate
that structure.

If the value of `print-continuous-numbering' is non-nil, the table used by
`print-gensym' and `print-circle' (which see) will not be reset on entry to
and exit from printing functions, so that the use of #...# and #...= can
carry over for several separately printed objects.Sprint.c
Vprint-circle
Non-nil means print recursive structures using #N= and #N# syntax.

If nil, XEmacs detects recursive structures and truncates them in an
unreadable fashion.

If non-nil, shared substructures anywhere in the structure are printed
with `#N=' before the first occurrence (in the order of the print
representation) and `#N#' in place of each subsequent occurrence,
where N is a positive decimal integer.

If the value of `print-continuous-numbering' is non-nil, the table used by
`print-gensym' (which see) and `print-circle' will not be reset on entry to
and exit from printing functions, so that the use of #...# and #...= can
carry over for several separately printed objects.Sprint.c
Vprint-continuous-numbering
Non-nil means number continuously across print calls, mostly for symbols.
This affects the numbers printed for #N= labels and #M# references.
See also `print-circle' and `print-gensym'.
This variable should not be set with `setq'; bind it with a `let' instead.Sprint.c
Vprint-message-label
Label for minibuffer messages created with `print'.  This should
generally be bound with `let' rather than set.  (See `display-message'.)Sprocess.c
Fprocessp
Return t if OBJECT is a process.

arguments: (OBJECT)
Sprocess.c
Fprocess-live-p
Return t if OBJECT is a process that is alive.

arguments: (OBJECT)
Sprocess.c
Fprocess-readable-p
Return t if OBJECT is a process from which input may be available.

arguments: (OBJECT)
Sprocess.c
Fprocess-list
Return a list of all processes.

arguments: ()
Sprocess.c
Fget-process
Return the process named PROCESS-NAME (a string), or nil if there is none.
PROCESS-NAME may also be a process; if so, the value is that process.

arguments: (PROCESS-NAME)
Sprocess.c
Fget-buffer-process
Return the (or, a) process associated with BUFFER.
BUFFER may be a buffer or the name of one.

arguments: (BUFFER)
Sprocess.c
Fprocess-id
Return the process id of PROCESS.
This is the pid of the Unix process which PROCESS uses or talks to.
For a network connection, this value is a cons of
 (foreign-network-port . foreign-host-name).

arguments: (PROCESS)
Sprocess.c
Fprocess-name
Return the name of PROCESS, as a string.
This is the name of the program invoked in PROCESS,
possibly modified to make it unique among process names.

arguments: (PROCESS)
Sprocess.c
Fprocess-command
Return the command that was executed to start PROCESS.
This is a list of strings, the first string being the program executed
and the rest of the strings being the arguments given to it.

arguments: (PROCESS)
Sprocess.c
Fstart-process-internal
Internal function to start a program in a subprocess.
Lisp callers should use `start-process' instead.

Returns the process object for it.
Args are NAME BUFFER PROGRAM &rest PROGRAM-ARGS
NAME is name for process.  It is modified if necessary to make it unique.
BUFFER is the buffer or (buffer-name) to associate with the process.
 Process output goes at end of that buffer, unless you specify
 an output stream or filter function to handle the output.
 BUFFER may be also nil, meaning that this process is not associated
 with any buffer.
BUFFER can also have the form (REAL-BUFFER STDERR-BUFFER); in that case,
 REAL-BUFFER says what to do with standard output, as above,
 while STDERR-BUFFER says what to do with standard error in the child.
 STDERR-BUFFER may be nil (discard standard error output, unless a stderr
 filter is set).  Note that if you do not use this form at process creation,
 stdout and stderr will be mixed in the output buffer, and this cannot be
 changed, even by setting a stderr filter.
Third arg is program file name.  It is searched for as in the shell.
Remaining arguments are strings to give program as arguments.

Read and write coding systems for the process are determined from
`coding-system-for-read' and `coding-system-for-write' (intended as
overriding coding systems to be *bound* by Lisp code, not set), or
from `default-process-coding-system' if either or both are nil.  You can
change the coding systems later on using `set-process-coding-system',
`set-process-input-coding-system', or `set-process-output-coding-system'.

See also `set-process-filter' and `set-process-stderr-filter'.

arguments: (NAME BUFFER PROGRAM &rest PROGRAM-ARGS)Sprocess.c
Fopen-network-stream-internal
Open a TCP connection for a service to a host.
Return a process object to represent the connection.
Input and output work as for subprocesses; `delete-process' closes it.

NAME is name for process.  It is modified if necessary to make it unique.
BUFFER is the buffer (or buffer-name) to associate with the process.
 Process output goes at end of that buffer, unless you specify
 an output stream or filter function to handle the output.
 BUFFER may also be nil, meaning that this process is not associated
 with any buffer.
Third arg HOST (a string) is  the name of the host to connect to,
 or its IP address.
Fourth arg SERVICE is the name of the service desired (a string),
 or an integer specifying a port number to connect to.
Optional fifth arg PROTOCOL is a network protocol.  Currently only `tcp'
 (Transmission Control Protocol) and `udp' (User Datagram Protocol) are
 supported.  When omitted, `tcp' is assumed.

Output via `process-send-string' and input via buffer or filter (see
`set-process-filter') are stream-oriented.  That means UDP datagrams are
not guaranteed to be sent and received in discrete packets. (But small
datagrams around 500 bytes that are not truncated by `process-send-string'
are usually fine.)  Note further that the UDP protocol does not guard
against lost packets.

arguments: (NAME BUFFER HOST SERVICE &optional PROTOCOL)
Sprocess.c
Fopen-multicast-group-internal
Open a multicast connection on the specified dest/port/ttl.
Return a process object to represent the connection.
Input and output work as for subprocesses; `delete-process' closes it.

NAME is name for process.  It is modified if necessary to make it unique.
BUFFER is the buffer (or buffer-name) to associate with the process.
 Process output goes at end of that buffer, unless you specify
 an output stream or filter function to handle the output.
 BUFFER may also be nil, meaning that this process is not associated
 with any buffer.
Third, fourth and fifth args are the multicast destination group, port and ttl.
 dest must be an internet address between 224.0.0.0 and 239.255.255.255
 port is a communication port like in traditional unicast
 ttl is the time-to-live (15 for site, 63 for region and 127 for world)

arguments: (NAME BUFFER DEST PORT TTL)
Sprocess.c
Fset-process-window-size
Tell PROCESS that it has logical window size HEIGHT and WIDTH.

arguments: (PROCESS HEIGHT WIDTH)
Sprocess.c
Fprocess-has-separate-stderr-p
Return non-nil if process has stderr separate from stdout.

arguments: (PROCESS)
Sprocess.c
Fprocess-tty-name
Return the name of the terminal PROCESS uses, or nil if none.
This is the terminal that the process itself reads and writes on,
not the name of the pty that Emacs uses to talk with that terminal.

arguments: (PROCESS)
Sprocess.c
Fset-process-buffer
Set buffer associated with PROCESS to BUFFER (a buffer, or nil).
Output from PROCESS is inserted in this buffer unless PROCESS has a filter.

arguments: (PROCESS BUFFER)
Sprocess.c
Fprocess-buffer
Return the buffer PROCESS is associated with.
Output from PROCESS is inserted in this buffer unless PROCESS has a filter.
Set the buffer with `set-process-buffer'.

arguments: (PROCESS)
Sprocess.c
Fset-process-stderr-buffer
Output from the stderr of PROCESS is inserted in this buffer unless
PROCESS has a stderr filter.
Set stderr buffer associated with PROCESS to BUFFER (a buffer, or nil).

arguments: (PROCESS BUFFER)
Sprocess.c
Fprocess-stderr-buffer
Return the stderr buffer PROCESS is associated with.
Output from the stderr of PROCESS is inserted in this buffer unless PROCESS
has a stderr filter.  Set the buffer with `set-process-stderr-buffer'.

arguments: (PROCESS)
Sprocess.c
Fprocess-mark
Return the marker for the end of the last output from PROCESS.

arguments: (PROCESS)
Sprocess.c
Fprocess-stderr-mark
Return the marker for the end of the last stderr output from PROCESS.

arguments: (PROCESS)
Sprocess.c
Fset-process-filter
Give PROCESS the filter function FILTER; nil means no filter.
t means stop accepting output from the process. (If process was created
with
When a process has a filter, each time it does output
the entire string of output is passed to the filter.
The filter gets two arguments: the process and the string of output.
If the process has a filter, its buffer is not used for output.

arguments: (PROCESS FILTER)
Sprocess.c
Fset-process-stderr-filter
Give PROCESS the stderr filter function FILTER; nil means no filter.
t means stop accepting output from the process.
When a process has a filter, each time it does output
the entire string of output is passed to the filter.
The filter gets two arguments: the process and the string of output.
If the process has a filter, its buffer is not used for output.

arguments: (PROCESS FILTER)
Sprocess.c
Fprocess-filter
Return the filter function of PROCESS; nil if none.
See `set-process-filter' for more info on filter functions.

arguments: (PROCESS)
Sprocess.c
Fprocess-stderr-filter
Return the filter function of PROCESS; nil if none.
See `set-process-stderr-filter' for more info on filter functions.

arguments: (PROCESS)
Sprocess.c
Fprocess-send-region
Send current contents of the region between START and END as input to PROCESS.
PROCESS may be a process or the name of a process, or a buffer or the
name of a buffer, in which case the buffer's process is used.  If it
is nil, the current buffer's process is used.
BUFFER specifies the buffer to look in; if nil, the current buffer is used.
If the region is more than 100 or so characters long, it may be sent in
several chunks.  This may happen even for shorter regions.  Output
from processes can arrive in between chunks.

arguments: (PROCESS START END &optional BUFFER)
Sprocess.c
Fprocess-send-string
Send PROCESS the contents of STRING as input.
PROCESS may be a process or the name of a process, or a buffer or the
name of a buffer, in which case the buffer's process is used.  If it
is nil, the current buffer's process is used.
Optional arguments START and END specify part of STRING; see `substring'.
If STRING is more than 100 or so characters long, it may be sent in
several chunks.  This may happen even for shorter strings.  Output
from processes can arrive in between chunks.

arguments: (PROCESS STRING &optional START END)
Sprocess.c
Fprocess-input-coding-system
Return PROCESS's input coding system.

arguments: (PROCESS)
Sprocess.c
Fprocess-output-coding-system
Return PROCESS's output coding system.

arguments: (PROCESS)
Sprocess.c
Fprocess-coding-system
Return a pair of coding-system for decoding and encoding of PROCESS.

arguments: (PROCESS)
Sprocess.c
Fset-process-input-coding-system
Set PROCESS's input coding system to CODESYS.
This is used for reading data from PROCESS.

arguments: (PROCESS CODESYS)
Sprocess.c
Fset-process-output-coding-system
Set PROCESS's output coding system to CODESYS.
This is used for writing data to PROCESS.

arguments: (PROCESS CODESYS)
Sprocess.c
Fset-process-coding-system
Set coding-systems of PROCESS to DECODING and ENCODING.
DECODING will be used to decode subprocess output and ENCODING to
encode subprocess input.

arguments: (PROCESS &optional DECODING ENCODING)
Sprocess.c
Fset-process-sentinel
Give PROCESS the sentinel SENTINEL; nil for none.
The sentinel is called as a function when the process changes state.
It gets two arguments: the process, and a string describing the change.

arguments: (PROCESS SENTINEL)
Sprocess.c
Fprocess-sentinel
Return the sentinel of PROCESS; nil if none.
See `set-process-sentinel' for more info on sentinels.

arguments: (PROCESS)
Sprocess.c
Fprocess-status
Return the status of PROCESS.
This is a symbol, one of these:

run    -- for a process that is running.
stop   -- for a process stopped but continuable.
exit   -- for a process that has exited.
signal -- for a process that has got a fatal signal.
open   -- for a network stream connection that is open.
closed -- for a network stream connection that is closed.
nil    -- if arg is a process name and no such process exists.

PROCESS may be a process, a buffer, the name of a process or buffer, or
nil, indicating the current buffer's process.

arguments: (PROCESS)
Sprocess.c
Fprocess-exit-status
Return the exit status of PROCESS or the signal number that killed it.
If PROCESS has not yet exited or died, return 0.

arguments: (PROCESS)
Sprocess.c
Fprocess-send-signal
Send signal SIGNAL to process PROCESS.
SIGNAL may be an integer, or a symbol naming a signal, like `SIGSEGV'.
PROCESS may be a process, a buffer, the name of a process or buffer, or
nil, indicating the current buffer's process.
Third arg CURRENT-GROUP non-nil means send signal to the current
foreground process group of the process's controlling terminal rather
than to the process's own process group.
If the process is a shell that supports job control, this means
send the signal to the current subjob rather than the shell.

arguments: (SIGNAL &optional PROCESS CURRENT-GROUP)
Sprocess.c
Finterrupt-process
Interrupt process PROCESS.
See function `process-send-signal' for more details on usage.

arguments: (&optional PROCESS CURRENT-GROUP)
Sprocess.c
Fkill-process
Kill process PROCESS.
See function `process-send-signal' for more details on usage.

arguments: (&optional PROCESS CURRENT-GROUP)
Sprocess.c
Fquit-process
Send QUIT signal to process PROCESS.
See function `process-send-signal' for more details on usage.

arguments: (&optional PROCESS CURRENT-GROUP)
Sprocess.c
Fstop-process
Stop process PROCESS.
See function `process-send-signal' for more details on usage.

arguments: (&optional PROCESS CURRENT-GROUP)
Sprocess.c
Fcontinue-process
Continue process PROCESS.
See function `process-send-signal' for more details on usage.

arguments: (&optional PROCESS CURRENT-GROUP)
Sprocess.c
Fsignal-process
Send the process with process id PID the signal with code SIGNAL.
PID must be an integer.  The process need not be a child of this Emacs.
SIGNAL may be an integer, or a symbol naming a signal, like `SIGSEGV'.

arguments: (PID SIGNAL)
Sprocess.c
Fprocess-send-eof
Make PROCESS see end-of-file in its input.
PROCESS may be a process, a buffer, the name of a process or buffer, or
nil, indicating the current buffer's process.
If PROCESS is a network connection, or is a process communicating
through a pipe (as opposed to a pty), then you cannot send any more
text to PROCESS after you call this function.

arguments: (&optional PROCESS)
Sprocess.c
Fdelete-process
Delete PROCESS: kill it and forget about it immediately.
PROCESS may be a process or the name of one, or a buffer name.

arguments: (PROCESS)
Sprocess.c
Fprocess-kill-without-query
Say no query needed if PROCESS is running when Emacs is exited.
Optional second argument if non-nil says to require a query.
Value is t if a query was formerly required.

arguments: (PROCESS &optional REQUIRE-QUERY-P)
Sprocess.c
Fprocess-kill-without-query-p
Return t if PROCESS will be killed without query when emacs is exited.

arguments: (PROCESS)
Sprocess.c
Fprocess-connection
Return the connection type of `PROCESS'.  This can be nil (pipe),
t or pty (pty) or stream (socket connection).

arguments: (&optional PROCESS)
Sprocess.c
Fgetenv
Return the value of environment variable VAR, as a string.
VAR is a string, the name of the variable.
When invoked interactively, prints the value in the echo area.

arguments: (VAR &optional INTERACTIVEP)
Sprocess.c
Vdelete-exited-processes
*Non-nil means delete processes immediately when they exit.
nil means don't delete them until `list-processes' is run.Sprocess.c
Vnull-device
Name of the null device, which differs from system to system.
The null device is a filename that acts as a sink for arbitrary amounts of
data, which is discarded, or as a source for a zero-length file.
It is available on all the systems that we currently support, but with
different names (typically either `/dev/null' or `nul').

Note that there is also a /dev/zero on most modern Unix versions (including
Cygwin), which acts like /dev/null when used as a sink, but as a source
it sends a non-ending stream of zero bytes.  It's used most often along
with memory-mapping.  We don't provide a Lisp variable for this because
the operations needing this are lower level than what ELisp programs
typically do, and in any case no equivalent exists under native MS Windows.Sprocess.c
Vprocess-connection-type
Control type of device used to communicate with subprocesses.
Values are nil to use a pipe, or t or `pty' to use a pty.
The value has no effect if the system has no ptys or if all ptys are busy:
then a pipe is used in any case.
The value takes effect when `start-process' is called.Sprocess.c
Vwindowed-process-io
Enables input/output on standard handles of a windowed process.
When this variable is nil (the default), XEmacs does not attempt to read
standard output handle of a windowed process. Instead, the process is
immediately marked as exited immediately upon successful launching. This is
done because normal windowed processes do not use standard I/O, as they are
not connected to any console.

When launching a specially crafted windowed process, which expects to be
launched by XEmacs, or by other program which pipes its standard input and
output, this variable must be set to non-nil, in which case XEmacs will
treat this process just like a console process.

NOTE: You should never set this variable, only bind it.

Only Windows processes can be "windowed" or "console". This variable has no
effect on UNIX processes, because all UNIX processes are "console".Sprocess.c
Vdebug-process-io
If non-zero, display data sent to or received from a process.Sprocess.c
Vdefault-process-coding-system
Cons of coding systems used for process I/O by default.
May also be nil, interpreted as (nil . nil).
The car part is used for reading (decoding) data from a process, and
the cdr part is used for writing (encoding) data to a process.Sprocess.c
Vdefault-network-coding-system
Cons of coding systems used for network I/O by default.
May also be nil, interpreted as (nil . nil).
The car part is used for reading (decoding) data from a process, and
the cdr part is used for writing (encoding) data to a process.Sprocess.c
Vnetwork-stream-blocking-port-list
List of port numbers or port names to set a blocking I/O mode with connection.
Nil value means to set a default (non-blocking) I/O mode.
The value takes effect when `open-network-stream-internal' is called.Sprocess.c
Vshell-file-name
*File name to load inferior shells from.
Initialized from the SHELL environment variable.Sprocess.c
Vprocess-environment
List of environment variables for subprocesses to inherit.
Each element should be a string of the form ENVVARNAME=VALUE.
The environment which Emacs inherits is placed in this variable
when Emacs starts.Sprofile.c
Fstart-profiling
Start profiling, with profile queries every MICROSECS.
If MICROSECS is nil or omitted, the value of `default-profiling-interval'
is used.

Information on function timings and call counts is currently recorded.
You can retrieve the recorded profiling info using `get-profiling-info',
or the higher-level function `profile-results'.

Starting and stopping profiling does not clear the currently recorded
info.  Thus you can start and stop as many times as you want and everything
will be properly accumulated. (To clear, use `clear-profiling-info'.)

arguments: (&optional MICROSECS)
Sprofile.c
Fstop-profiling
Stop profiling.

arguments: ()
Sprofile.c
Fclear-profiling-info
Clear out the recorded profiling info.
This clears both the internal timing information and the call counts in
`call-count-profile-table'.

arguments: ()
Sprofile.c
Fget-profiling-info
Return the currently recorded profiling info.
The format is a plist of symbols describing type of info recorded and
an associated type-specific entry.  Currently, the following info types
are recorded

`timing'
  A hash table of function descriptions (funcallable objects or strings
  describing internal processing operations -- redisplay, garbage
  collection, etc.), along with associated tick counts (the frequency of
  ticks is controlled by `default-profiling-interval' or the argument to
  `start-profiling').

`total-timing'
  A hash table of function descriptions and associated timing count for
  the function and all descendants.

`call-count'
  A hash table of function descriptions and associated call counts.

`gc-usage'
  A hash table of function descriptions and associated amount of consing.

`total-gc-usage'
  A hash table of function descriptions and associated amount of consing
  in the function and all descendants.

arguments: ()
Sprofile.c
Fset-profiling-info
Set the currently recorded profiling info.
INFO should be in the same format returned by `get-profiling-info',
as described there.

arguments: (INFO)
Sprofile.c
Fprofiling-active-p
Return non-nil if profiling information is currently being recorded.

arguments: ()
Sprofile.c
Vdefault-profiling-interval
Default CPU time in microseconds between profiling sampling.
Used when the argument to `start-profiling' is nil or omitted.
Under Unix, the time in question is CPU time (when the program is executing
or the kernel is executing on behalf of the program) and not real time.
Under MS Windows and Cygwin, the time is real time, but time spent blocking
while waiting for an event is ignored, to get more accurate results.
Note that there is usually a machine-dependent limit on how small this
value can be.Srangetab.c
Frange-table-p
Return non-nil if OBJECT is a range table.

arguments: (OBJECT)
Srangetab.c
Frange-table-type
Return the type of RANGE-TABLE.

This will be a symbol describing how ranges in RANGE-TABLE function at their
ends; see `make-range-table'.

arguments: (RANGE-TABLE)
Srangetab.c
Fmake-range-table
Return a new, empty range table.
You can manipulate it using `put-range-table', `get-range-table',
`remove-range-table', and `clear-range-table'.
Range tables allow you to efficiently set values for ranges of integers.

 TYPE is a symbol indicating how ranges are assumed to function at their
 ends.  It can be one of
 
 SYMBOL                                     RANGE-START         RANGE-END
 ------                                     -----------         ---------
 `start-closed-end-open'  (the default)     closed              open
 `start-closed-end-closed'                  closed              closed
 `start-open-end-open'                      open                open
 `start-open-end-closed'                    open                closed
 
 A `closed' endpoint of a range means that the number at that end is included
 in the range.  For an `open' endpoint, the number would not be included.
 
 For example, a closed-open range from 5 to 20 would be indicated as [5,
 20) where a bracket indicates a closed end and a parenthesis an open end,
 and would mean `all the numbers between 5 and 20', including 5 but not 20.
 This seems a little strange at first but is in fact extremely common in
 the outside world as well as in computers and makes things work sensibly.
 For example, if I say "there are seven days between today and next week
 today", I'm including today but not next week today; if I included both,
 there would be eight days.  Similarly, there are 15 (= 20 - 5) elements in
 the range [5, 20), but 16 in the range [5, 20].

arguments: (&optional TYPE)
Srangetab.c
Fcopy-range-table
Return a new range table which is a copy of RANGE-TABLE.
It will contain the same values for the same ranges as RANGE-TABLE.
The values will not themselves be copied.

arguments: (RANGE-TABLE)
Srangetab.c
Fget-range-table
Find value for position POS in RANGE-TABLE.
If there is no corresponding value, return DEFAULT (defaults to nil).

arguments: (POS RANGE-TABLE &optional DEFAULT)
Srangetab.c
Fput-range-table
Set the value for range START .. END to be VALUE in RANGE-TABLE.

arguments: (START END VALUE RANGE-TABLE)
Srangetab.c
Fremove-range-table
Remove the value for range START .. END in RANGE-TABLE.

arguments: (START END RANGE-TABLE)
Srangetab.c
Fclear-range-table
Flush RANGE-TABLE.

arguments: (RANGE-TABLE)
Srangetab.c
Fmap-range-table
Map FUNCTION over entries in RANGE-TABLE, calling it with three args,
the beginning and end of the range and the corresponding value.

Results are guaranteed to be correct (i.e. each entry processed
exactly once) if FUNCTION modifies or deletes the current entry
(i.e. passes the current range to `put-range-table' or
`remove-range-table').  If FUNCTION modifies or deletes any other entry,
this guarantee doesn't hold.

arguments: (FUNCTION RANGE-TABLE)
Sredisplay.c
Fredisplay-echo-area
Ensure that all minibuffers are correctly showing the echo area.

arguments: ()
Sredisplay.c
Fredraw-frame
Clear frame FRAME and output again what is supposed to appear on it.
FRAME defaults to the selected frame if omitted.
Normally, redisplay is preempted as normal if input arrives.  However,
if optional second arg NO-PREEMPT is non-nil, redisplay will not stop for
input and is guaranteed to proceed to completion.

arguments: (&optional FRAME NO-PREEMPT)
Sredisplay.c
Fredisplay-frame
Ensure that FRAME's contents are correctly displayed.
This differs from `redraw-frame' in that it only redraws what needs to
be updated, as opposed to unconditionally clearing and redrawing
the frame.
FRAME defaults to the selected frame if omitted.
Normally, redisplay is preempted as normal if input arrives.  However,
if optional second arg NO-PREEMPT is non-nil, redisplay will not stop for
input and is guaranteed to proceed to completion.

arguments: (&optional FRAME NO-PREEMPT)
Sredisplay.c
Fredraw-device
Clear device DEVICE and output again what is supposed to appear on it.
DEVICE defaults to the selected device if omitted.
Normally, redisplay is preempted as normal if input arrives.  However,
if optional second arg NO-PREEMPT is non-nil, redisplay will not stop for
input and is guaranteed to proceed to completion.

arguments: (&optional DEVICE NO-PREEMPT)
Sredisplay.c
Fredisplay-device
Ensure that DEVICE's contents are correctly displayed.
This differs from `redraw-device' in that it only redraws what needs to
be updated, as opposed to unconditionally clearing and redrawing
the device.
DEVICE defaults to the selected device if omitted.
Normally, redisplay is preempted as normal if input arrives.  However,
if optional second arg NO-PREEMPT is non-nil, redisplay will not stop for
input and is guaranteed to proceed to completion.

Note: If you simply want everything redisplayed, the current idiom is
`(sit-for 0)'.

arguments: (&optional DEVICE NO-PREEMPT)
Sredisplay.c
Fredraw-modeline
Force the modeline of the current buffer to be redisplayed.
With optional non-nil ALL, force redisplay of all modelines.

arguments: (&optional ALL)
Sredisplay.c
Fforce-cursor-redisplay
Force an immediate update of the cursor on FRAME.
FRAME defaults to the selected frame if omitted.

arguments: (&optional FRAME)
Sredisplay.c
Vredisplay-cache-adjustment
(Temporary) Setting this will impact the performance of the internal
line start cache.Sredisplay.c
Vmaximum-preempts
Maximum number of times redisplay can be preempted by user input.Sredisplay.c
Vpixel-vertical-clip-threshold
Minimum pixel height for clipped bottom display line.
A clipped line shorter than this won't be displayed.Sredisplay.c
Vpixel-horizontal-clip-threshold
Minimum visible area for clipped glyphs at right boundary.
Clipped glyphs shorter than this won't be displayed.
Only pixmap glyph instances are currently allowed to be clipped.Sredisplay.c
Vglobal-mode-string
String displayed by modeline-format's "%m" specification.Sredisplay.c
Voverlay-arrow-position
Marker for where to display an arrow on top of the buffer text.
This must be the beginning of a line in order to work.
See also `overlay-arrow-string'.Sredisplay.c
Voverlay-arrow-string
String or glyph to display as an arrow.  See also `overlay-arrow-position'.
(Note that despite the name of this variable, it can be set to a glyph as
well as a string.)Sredisplay.c
Vscroll-step
*The number of lines to try scrolling a window by when point moves out.
If that fails to bring point back on frame, point is centered instead.
If this is zero, point is always centered after it moves off screen.Sredisplay.c
Vscroll-conservatively
*Scroll up to this many lines, to bring point back on screen.Sredisplay.c
Vtruncate-partial-width-windows
*Non-nil means truncate lines in all windows less than full frame wide.Sredisplay.c
Vvisible-bell
*Non-nil substitutes a visual signal for the audible bell.

Default behavior is to flash the whole screen.  On some platforms,
special effects are available using the following values:

`display'       Flash the whole screen (ie, the default behavior).
`top-bottom'    Flash only the top and bottom lines of the selected frame.

When effects are unavailable on a platform, the visual bell is the
default, whole screen.  (Currently only X supports any special effects.)Sredisplay.c
Vno-redraw-on-reenter
*Non-nil means no need to redraw entire frame after suspending.
A non-nil value is useful if the terminal can automatically preserve
Emacs's frame display when you reenter Emacs.
It is up to you to set this variable if your terminal can do that.Sredisplay.c
Vwindow-system
A symbol naming the window-system under which Emacs is running,
such as `x', or nil if emacs is running on an ordinary terminal.

Do not use this variable, except for GNU Emacs compatibility, as it
gives wrong values in a multi-device environment.  Use `console-type'
instead.Sredisplay.c
Vinitial-device-type
The type of the first XEmacs device to be created.

This is constant; it's used by the command line handling code to communicate
to Lisp what type the initial device to be created should be.Sredisplay.c
Vcursor-in-echo-area
Non-nil means put cursor in minibuffer, at end of any message there.Sredisplay.c
Vbar-cursor
*Use vertical bar cursor if non-nil.  If t width is 1 pixel, otherwise 2.Sredisplay.c
Vbuffer-list-changed-hook
Function or functions to call when a frame's buffer list has changed.
This is called during redisplay, before redisplaying each frame.
Functions on this hook are called with one argument, the frame.Sredisplay.c
Vdisplay-warning-tick
Bump this to tell the C code to call `display-warning-buffer'
at next redisplay.  You should not normally change this; the function
`display-warning' automatically does this at appropriate times.Sredisplay.c
Vinhibit-warning-display
Non-nil means inhibit display of warning messages.
You should *bind* this, not set it.  Any pending warning messages
will be displayed when the binding no longer applies.Sredisplay.c
Vcolumn-number-start-at-one
*Non-nil means column display number starts at 1.Sredisplay.c
Vleft-margin-width
*Width of left margin.
This is a specifier; use `set-specifier' to change it.Sredisplay.c
Vright-margin-width
*Width of right margin.
This is a specifier; use `set-specifier' to change it.Sredisplay.c
Vminimum-line-ascent
*Minimum ascent height of lines.
This is a specifier; use `set-specifier' to change it.Sredisplay.c
Vminimum-line-descent
*Minimum descent height of lines.
This is a specifier; use `set-specifier' to change it.Sredisplay.c
Vuse-left-overflow
*Non-nil means use the left outside margin as extra whitespace when
displaying `whitespace' or `inside-margin' glyphs.
This is a specifier; use `set-specifier' to change it.Sredisplay.c
Vuse-right-overflow
*Non-nil means use the right outside margin as extra whitespace when
displaying `whitespace' or `inside-margin' glyphs.
This is a specifier; use `set-specifier' to change it.Sredisplay.c
Vtext-cursor-visible-p
*Non-nil means the text cursor is visible (this is usually the case).
This is a specifier; use `set-specifier' to change it.Ssearch.c
Flooking-at
Return t if text after point matches regular expression REGEXP.
When the match is successful, this function modifies the match data
that `match-beginning', `match-end' and `match-data' access; save the
match data with `match-data' and restore it with `store-match-data' if
you want to preserve them.  If the match fails, the match data from the
previous success match is preserved.

Optional argument BUFFER defaults to the current buffer.

arguments: (REGEXP &optional BUFFER)
Ssearch.c
Fposix-looking-at
Return t if text after point matches regular expression REGEXP.
Find the longest match, in accord with Posix regular expression rules.
When the match is successful, this function modifies the match data
that `match-beginning', `match-end' and `match-data' access; save the
match data with `match-data' and restore it with `store-match-data' if
you want to preserve them.  If the match fails, the match data from the
previous success match is preserved.

Optional argument BUFFER defaults to the current buffer.

arguments: (REGEXP &optional BUFFER)
Ssearch.c
Fstring-match
Return index of start of first match for REGEXP in STRING, or nil.
If third arg START is non-nil, start search at that index in STRING.
For index of first char beyond the match, do (match-end 0).
`match-end' and `match-beginning' also give indices of substrings
matched by parenthesis constructs in the pattern.

Optional arg BUFFER controls how case folding and syntax and category
lookup is done (according to the value of `case-fold-search' in that buffer
and that buffer's case tables, syntax tables, and category table).  If nil
or unspecified, it defaults *NOT* to the current buffer but instead:

-- the value of `case-fold-search' in the current buffer is still respected
   because of idioms like

      (let ((case-fold-search nil))
         (string-match "^foo.*bar" string))

   but the case, syntax, and category tables come from the standard tables,
   which are accessed through functions `default-{case,syntax,category}-table'
   and serve as the parents of the tables in particular buffer.

When the match is successful, this function modifies the match data
that `match-beginning', `match-end' and `match-data' access; save the
match data with `match-data' and restore it with `store-match-data' if
you want to preserve them.  If the match fails, the match data from the
previous success match is preserved.

arguments: (REGEXP STRING &optional START BUFFER)
Ssearch.c
Fposix-string-match
Return index of start of first match for REGEXP in STRING, or nil.
Find the longest match, in accord with Posix regular expression rules.
If third arg START is non-nil, start search at that index in STRING.
For index of first char beyond the match, do (match-end 0).
`match-end' and `match-beginning' also give indices of substrings
matched by parenthesis constructs in the pattern.

Optional arg BUFFER controls how case folding is done (according to
the value of `case-fold-search' in that buffer and that buffer's case
tables) and defaults to the current buffer.

When the match is successful, this function modifies the match data
that `match-beginning', `match-end' and `match-data' access; save the
match data with `match-data' and restore it with `store-match-data' if
you want to preserve them.  If the match fails, the match data from the
previous success match is preserved.

arguments: (REGEXP STRING &optional START BUFFER)
Ssearch.c
Fskip-chars-forward
Move point forward, stopping before a char not in STRING, or at pos LIMIT.
STRING is like the inside of a `[...]' in a regular expression
except that `]' is never special and `\' quotes `^', `-' or `\'.
Thus, with arg "a-zA-Z", this skips letters stopping before first nonletter.
With arg "^a-zA-Z", skips nonletters stopping before first letter.
Returns the distance traveled, either zero or positive.

Optional argument BUFFER defaults to the current buffer.

arguments: (STRING &optional LIMIT BUFFER)
Ssearch.c
Fskip-chars-backward
Move point backward, stopping after a char not in STRING, or at pos LIMIT.
See `skip-chars-forward' for details.
Returns the distance traveled, either zero or negative.

Optional argument BUFFER defaults to the current buffer.

arguments: (STRING &optional LIMIT BUFFER)
Ssearch.c
Fskip-syntax-forward
Move point forward across chars in specified syntax classes.
SYNTAX is a string of syntax code characters.
Stop before a char whose syntax is not in SYNTAX, or at position LIMIT.
If SYNTAX starts with ^, skip characters whose syntax is NOT in SYNTAX.
This function returns the distance traveled, either zero or positive.

Optional argument BUFFER defaults to the current buffer.

arguments: (SYNTAX &optional LIMIT BUFFER)
Ssearch.c
Fskip-syntax-backward
Move point backward across chars in specified syntax classes.
SYNTAX is a string of syntax code characters.
Stop on reaching a char whose syntax is not in SYNTAX, or at position LIMIT.
If SYNTAX starts with ^, skip characters whose syntax is NOT in SYNTAX.
This function returns the distance traveled, either zero or negative.

Optional argument BUFFER defaults to the current buffer.

arguments: (SYNTAX &optional LIMIT BUFFER)
Ssearch.c
Fsearch-backward
Search backward from point for STRING.
Set point to the beginning of the occurrence found, and return point.

Optional second argument LIMIT bounds the search; it is a buffer
position.  The match found must not extend before that position.
The value nil is equivalent to (point-min).

Optional third argument NOERROR, if t, means just return nil (no
error) if the search fails.  If neither nil nor t, set point to LIMIT
and return nil.

Optional fourth argument COUNT is a repeat count--search for
successive occurrences.

Optional fifth argument BUFFER specifies the buffer to search in and
defaults to the current buffer.

When the match is successful, this function modifies the match data
that `match-beginning', `match-end' and `match-data' access; save the
match data with `match-data' and restore it with `store-match-data' if
you want to preserve them.  If the match fails, the match data from the
previous success match is preserved.

See also the function `replace-match'.

arguments: (STRING &optional LIMIT NOERROR COUNT BUFFER)
Ssearch.c
Fsearch-forward
Search forward from point for STRING.
Set point to the end of the occurrence found, and return point.

Optional second argument LIMIT bounds the search; it is a buffer
position.  The match found must not extend after that position.  The
value nil is equivalent to (point-max).

Optional third argument NOERROR, if t, means just return nil (no
error) if the search fails.  If neither nil nor t, set point to LIMIT
and return nil.

Optional fourth argument COUNT is a repeat count--search for
successive occurrences.

Optional fifth argument BUFFER specifies the buffer to search in and
defaults to the current buffer.

When the match is successful, this function modifies the match data
that `match-beginning', `match-end' and `match-data' access; save the
match data with `match-data' and restore it with `store-match-data' if
you want to preserve them.  If the match fails, the match data from the
previous success match is preserved.

See also the function `replace-match'.

arguments: (STRING &optional LIMIT NOERROR COUNT BUFFER)
Ssearch.c
Fword-search-backward
Search backward from point for STRING, ignoring differences in punctuation.
Set point to the beginning of the occurrence found, and return point.

Optional second argument LIMIT bounds the search; it is a buffer
position.  The match found must not extend before that position.
The value nil is equivalent to (point-min).

Optional third argument NOERROR, if t, means just return nil (no
error) if the search fails.  If neither nil nor t, set point to LIMIT
and return nil.

Optional fourth argument COUNT is a repeat count--search for
successive occurrences.

Optional fifth argument BUFFER specifies the buffer to search in and
defaults to the current buffer.

When the match is successful, this function modifies the match data
that `match-beginning', `match-end' and `match-data' access; save the
match data with `match-data' and restore it with `store-match-data' if
you want to preserve them.  If the match fails, the match data from the
previous success match is preserved.

See also the function `replace-match'.

arguments: (STRING &optional LIMIT NOERROR COUNT BUFFER)
Ssearch.c
Fword-search-forward
Search forward from point for STRING, ignoring differences in punctuation.
Set point to the end of the occurrence found, and return point.

Optional second argument LIMIT bounds the search; it is a buffer
position.  The match found must not extend after that position.  The
value nil is equivalent to (point-max).

Optional third argument NOERROR, if t, means just return nil (no
error) if the search fails.  If neither nil nor t, set point to LIMIT
and return nil.

Optional fourth argument COUNT is a repeat count--search for
successive occurrences.

Optional fifth argument BUFFER specifies the buffer to search in and
defaults to the current buffer.

When the match is successful, this function modifies the match data
that `match-beginning', `match-end' and `match-data' access; save the
match data with `match-data' and restore it with `store-match-data' if
you want to preserve them.  If the match fails, the match data from the
previous success match is preserved.

See also the function `replace-match'.

arguments: (STRING &optional LIMIT NOERROR COUNT BUFFER)
Ssearch.c
Fre-search-backward
Search backward from point for match for regular expression REGEXP.
Set point to the beginning of the match, and return point.
The match found is the one starting last in the buffer
and yet ending before the origin of the search.

Optional second argument LIMIT bounds the search; it is a buffer
position.  The match found must not extend before that position.
The value nil is equivalent to (point-min).

Optional third argument NOERROR, if t, means just return nil (no
error) if the search fails.  If neither nil nor t, set point to LIMIT
and return nil.

Optional fourth argument COUNT is a repeat count--search for
successive occurrences.

Optional fifth argument BUFFER specifies the buffer to search in and
defaults to the current buffer.

When the match is successful, this function modifies the match data
that `match-beginning', `match-end' and `match-data' access; save the
match data with `match-data' and restore it with `store-match-data' if
you want to preserve them.  If the match fails, the match data from the
previous success match is preserved.

See also the function `replace-match'.

arguments: (REGEXP &optional LIMIT NOERROR COUNT BUFFER)
Ssearch.c
Fre-search-forward
Search forward from point for regular expression REGEXP.
Set point to the end of the occurrence found, and return point.

Optional second argument LIMIT bounds the search; it is a buffer
position.  The match found must not extend after that position.  The
value nil is equivalent to (point-max).

Optional third argument NOERROR, if t, means just return nil (no
error) if the search fails.  If neither nil nor t, set point to LIMIT
and return nil.

Optional fourth argument COUNT is a repeat count--search for
successive occurrences.

Optional fifth argument BUFFER specifies the buffer to search in and
defaults to the current buffer.

When the match is successful, this function modifies the match data
that `match-beginning', `match-end' and `match-data' access; save the
match data with `match-data' and restore it with `store-match-data' if
you want to preserve them.  If the match fails, the match data from the
previous success match is preserved.

See also the function `replace-match'.

arguments: (REGEXP &optional LIMIT NOERROR COUNT BUFFER)
Ssearch.c
Fposix-search-backward
Search backward from point for match for regular expression REGEXP.
Find the longest match in accord with Posix regular expression rules.
Set point to the beginning of the match, and return point.
The match found is the one starting last in the buffer
and yet ending before the origin of the search.

Optional second argument LIMIT bounds the search; it is a buffer
position.  The match found must not extend before that position.
The value nil is equivalent to (point-min).

Optional third argument NOERROR, if t, means just return nil (no
error) if the search fails.  If neither nil nor t, set point to LIMIT
and return nil.

Optional fourth argument COUNT is a repeat count--search for
successive occurrences.

Optional fifth argument BUFFER specifies the buffer to search in and
defaults to the current buffer.

When the match is successful, this function modifies the match data
that `match-beginning', `match-end' and `match-data' access; save the
match data with `match-data' and restore it with `store-match-data' if
you want to preserve them.  If the match fails, the match data from the
previous success match is preserved.

See also the function `replace-match'.

arguments: (REGEXP &optional LIMIT NOERROR COUNT BUFFER)
Ssearch.c
Fposix-search-forward
Search forward from point for regular expression REGEXP.
Find the longest match in accord with Posix regular expression rules.
Set point to the end of the occurrence found, and return point.

Optional second argument LIMIT bounds the search; it is a buffer
position.  The match found must not extend after that position.  The
value nil is equivalent to (point-max).

Optional third argument NOERROR, if t, means just return nil (no
error) if the search fails.  If neither nil nor t, set point to LIMIT
and return nil.

Optional fourth argument COUNT is a repeat count--search for
successive occurrences.

Optional fifth argument BUFFER specifies the buffer to search in and
defaults to the current buffer.

When the match is successful, this function modifies the match data
that `match-beginning', `match-end' and `match-data' access; save the
match data with `match-data' and restore it with `store-match-data' if
you want to preserve them.  If the match fails, the match data from the
previous success match is preserved.

See also the function `replace-match'.

arguments: (REGEXP &optional LIMIT NOERROR COUNT BUFFER)
Ssearch.c
Freplace-match
Replace text matched by last search with REPLACEMENT.
Leaves point at end of replacement text.
Optional boolean FIXEDCASE inhibits matching case of REPLACEMENT to source.
Optional boolean LITERAL inhibits interpretation of escape sequences.
Optional STRING provides the source text to replace.
Optional STRBUFFER may be a buffer, providing match context, or an integer
 specifying the subexpression to replace.

If FIXEDCASE is non-nil, do not alter case of replacement text.
Otherwise maybe capitalize the whole text, or maybe just word initials,
based on the replaced text.
If the replaced text has only capital letters and has at least one
multiletter word, convert REPLACEMENT to all caps.
If the replaced text has at least one word starting with a capital letter,
then capitalize each word in REPLACEMENT.

If LITERAL is non-nil, insert REPLACEMENT literally.
Otherwise treat `\' as special:
  `\&' in REPLACEMENT means substitute original matched text.
  `\N' means substitute what matched the Nth `\(...\)'.
       If Nth parens didn't match, substitute nothing.
  `\\' means insert one `\'.
  `\u' means upcase the next character.
  `\l' means downcase the next character.
  `\U' means begin upcasing all following characters.
  `\L' means begin downcasing all following characters.
  `\E' means terminate the effect of any `\U' or `\L'.
  Case changes made with `\u', `\l', `\U', and `\L' override
  all other case changes that may be made in the replaced text.

If non-nil, STRING is the source string, and a new string with the specified
replacements is created and returned.  Otherwise the current buffer is the
source text.

If non-nil, STRBUFFER may be an integer, interpreted as the index of the
subexpression to replace in the source text, or a buffer to provide the
syntax table and case table.  If nil, then the "subexpression" is 0, i.e.,
the whole match, and the current buffer provides the syntax and case tables.
If STRING is nil, STRBUFFER must be nil or an integer.

Specifying a subexpression is only useful after a regular expression match,
since a fixed string search has no non-trivial subexpressions.

It is not possible to specify both a buffer and a subexpression.  If that is
desired, the idiom `(with-current-buffer BUFFER (replace-match ... INTEGER))'
may be appropriate.

If STRING is nil but the last thing matched (or searched) was a string, or
STRING is a string but the last thing matched was a buffer, an
`invalid-argument' error will be signaled.  (XEmacs does not check that the
last thing searched is the source string, but it is not useful to use a
different string as source.)

If no match (including searches) has been successful or the requested
subexpression was not matched, an `args-out-of-range' error will be
signaled.  (If no match has ever been conducted in this instance of
XEmacs, an `invalid-operation' error will be signaled.  This is very
rare.)

arguments: (REPLACEMENT &optional FIXEDCASE LITERAL STRING STRBUFFER)
Ssearch.c
Fmatch-beginning
Return position of start of text matched by last regexp search.
NUM, specifies which parenthesized expression in the last regexp.
 Value is nil if NUMth pair didn't match, or there were less than NUM pairs.
Zero means the entire text matched by the whole regexp or whole string.

arguments: (NUM)
Ssearch.c
Fmatch-end
Return position of end of text matched by last regexp search.
NUM specifies which parenthesized expression in the last regexp.
 Value is nil if NUMth pair didn't match, or there were less than NUM pairs.
Zero means the entire text matched by the whole regexp or whole string.

arguments: (NUM)
Ssearch.c
Fmatch-data
Return a list containing all info on what the last regexp search matched.
Element 2N is `(match-beginning N)'; element 2N + 1 is `(match-end N)'.
All the elements are markers or nil (nil if the Nth pair didn't match)
if the last match was on a buffer; integers or nil if a string was matched.
Use `store-match-data' to reinstate the data in this list.

If INTEGERS (the optional first argument) is non-nil, always use integers
(rather than markers) to represent buffer positions.
If REUSE is a list, reuse it as part of the value.  If REUSE is long enough
to hold all the values, and if INTEGERS is non-nil, no consing is done.

arguments: (&optional INTEGERS REUSE)
Ssearch.c
Fstore-match-data
Set internal data on last search match from elements of LIST.
LIST should have been created by calling `match-data' previously,
or be nil, to clear the internal match data.

arguments: (LIST)
Ssearch.c
Fregexp-quote
Return a regexp string which matches exactly STRING and nothing else.

arguments: (STRING)
Ssearch.c
Fset-word-regexp
Set the regexp to be used to match a word in regular-expression searching.
#### Not yet implemented.  Currently does nothing.
#### Do not use this yet.  Its calling interface is likely to change.

arguments: (REGEXP)
Ssearch.c
Vforward-word-regexp
*Regular expression to be used in `forward-word'.
#### Not yet implemented.Ssearch.c
Vbackward-word-regexp
*Regular expression to be used in `backward-word'.
#### Not yet implemented.Ssearch.c
Vwarn-about-possibly-incompatible-back-references
If true, issue warnings when new-semantics back references occur.
This is to catch places where old code might inadvertently have changed
semantics.  This will occur in old code only where more than nine groups
occur and a back reference to one of them is directly followed by a digit.Ssearch.c
Vdebug-searches
If non-zero, bind `search-algorithm-used' to `boyer-moore' or `simple-search',
depending on the algorithm used for each search.  Used for testing.Ssearch.c
Vdebug-regexps
List of areas to display debug info about during regexp operation.
The following areas are recognized:

`compilation'    Display the result of compiling a regexp.
`failure-point'	 Display info about failure points reached.
`matching'	 Display info about the process of matching a regex against
                 text.Sselect.c
Fown-selection-internal
Give the selection SELECTION-NAME the value SELECTION-VALUE.
SELECTION-NAME is a symbol, typically PRIMARY, SECONDARY, or CLIPBOARD.
SELECTION-VALUE is typically a string, or a cons of two markers, but may be
anything that the functions on selection-converter-out-alist know about.
Optional arg HOW-TO-ADD specifies how the selection will be combined
with any existing selection(s) - see `own-selection' for more
information.
Optional arg DATA-TYPE is a window-system-specific type.
Optional arg DEVICE specifies the device on which to assert the selection.
It defaults to the selected device.

arguments: (SELECTION-NAME SELECTION-VALUE &optional HOW-TO-ADD DATA-TYPE DEVICE)
Sselect.c
Fregister-selection-data-type
Register a new selection data type DATA-TYPE, optionally on the specified
DEVICE. Returns the device-specific data type identifier, or nil if the
device does not support this feature or the registration fails. 


arguments: (DATA-TYPE &optional DEVICE)
Sselect.c
Fselection-data-type-name
Retrieve the name of the specified selection data type DATA-TYPE, optionally
on the specified DEVICE. Returns either a string or a symbol on success, and
nil if the device does not support this feature or the type is not known. 


arguments: (DATA-TYPE &optional DEVICE)
Sselect.c
Favailable-selection-types
Retrieve a list of currently available types of selection associated with
the given SELECTION-NAME, optionally on the specified DEVICE. This list
does not take into account any possible conversions that might take place,
so it should be taken as a minimal estimate of what is available.

arguments: (SELECTION-NAME &optional DEVICE)
Sselect.c
Fdisown-selection-internal
If we own the named selection, then disown it (make there be no selection).

arguments: (SELECTION-NAME &optional SELECTION-TIME DEVICE)
Sselect.c
Fselection-owner-p
Return t if the current emacs process owns SELECTION.
SELECTION should be the name of the selection in question, typically one of
the symbols PRIMARY, SECONDARY, or CLIPBOARD.  (For convenience, the symbol
nil is the same as PRIMARY, and t is the same as SECONDARY.)

arguments: (&optional SELECTION)
Sselect.c
Fselection-exists-p
Whether there is currently an owner for SELECTION.
SELECTION should be the name of the selection in question, typically one of
the symbols PRIMARY, SECONDARY, or CLIPBOARD.  (For convenience, the symbol
nil is the same as PRIMARY, and t is the same as SECONDARY.)
Optionally, the window-system DATA-TYPE and the DEVICE may be specified.

arguments: (&optional SELECTION DATA-TYPE DEVICE)
Sselect.c
Fget-xemacs-selection-timestamp
Return timestamp for SELECTION, if it belongs to XEmacs and exists.

The timestamp is a cons of two integers, the first being the higher-order
sixteen bits of the device-specific thirty-two-bit quantity, the second
being the lower-order sixteen bits of same. Expect to see this API change
when and if redisplay on a window system with timestamps wider than 32bits
happens.

arguments: (SELECTION)
Sselect.c
Fget-selection-internal
Return text selected from some window-system window.
SELECTION is a symbol, typically PRIMARY, SECONDARY, or CLIPBOARD.
TARGET-TYPE is the type of data desired, typically STRING or COMPOUND_TEXT.
Under Mule, if the resultant data comes back as 8-bit data in type
TEXT or COMPOUND_TEXT, it will be decoded as Compound Text.

arguments: (SELECTION TARGET-TYPE &optional DEVICE)
Sselect.c
Vselection-converter-alist
An alist associating selection-types (such as STRING and TIMESTAMP) with
functions.  This is an alias for `selection-converter-out-alist', and should
be considered obsolete.  Use the new name instead. 
Sselect.c
Vselection-converter-out-alist
An alist associating selection-types (such as STRING and TIMESTAMP) with
functions.  These functions will be called with three args: the name
of the selection (typically PRIMARY, SECONDARY, or CLIPBOARD); a
desired type to which the selection should be converted; and the local
selection value (whatever had been passed to `own-selection').

The return type of these functions depends upon the device in question;
for mswindows, a string should be returned containing data in the requested
format, or nil to indicate that the conversion could not be done.  Additionally,
it is permissible to return a cons of the form (DATA-TYPE . STRING) suggesting
a new data type to use instead.

For X, the return value should be one of:

-- nil (the conversion could not be done)
-- a cons of a symbol and any of the following values; the symbol
   explicitly specifies the type that will be sent.
-- a string (If the type is not specified, then if Mule support exists,
             the string will be converted to Compound Text and sent in
             the `COMPOUND_TEXT' format; otherwise (no Mule support),
             the string will be left as-is and sent in the `STRING'
             format.  If the type is specified, the string will be
             left as-is (or converted to binary format under Mule).
             In all cases, 8-bit data it sent.)
-- a character (With Mule support, will be converted to Compound Text
                whether or not a type is specified.  If a type is not
                specified, a type of `STRING' or `COMPOUND_TEXT' will be
		sent, as for strings.)
-- the symbol `NULL' (Indicates that there is no meaningful return value.
                     Empty 32-bit data with a type of `NULL' will be sent.)
-- a symbol (Will be converted into an atom.  If the type is not specified,
             a type of `ATOM' will be sent.)
-- an integer (Will be converted into a 16-bit or 32-bit integer depending
               on the value.  If the type is not specified, a type of
	       `INTEGER' will be sent.)
-- a cons (HIGH . LOW) of integers (Will be converted into a 32-bit integer.
                                    If the type is not specified, a type of
				    `INTEGER' will be sent.)
-- a vector of symbols (Will be converted into a list of atoms.  If the type
                        is not specified, a type of `ATOM' will be sent.)
-- a vector of integers (Will be converted into a list of 16-bit integers.
                         If the type is not specified, a type of `INTEGER'
			 will be sent.)
-- a vector of integers and/or conses (HIGH . LOW) of integers
                        (Will be converted into a list of 16-bit integers.
                         If the type is not specified, a type of `INTEGER'
			 will be sent.)Sselect.c
Vselection-converter-in-alist
An alist associating selection-types (such as STRING and TIMESTAMP) with
functions.  These functions will be called with three args: the name
of the selection (typically PRIMARY, SECONDARY or CLIPBOARD); the
type from which the selection should be converted; and the selection
value.  These functions should return a suitable representation of the
value, or nil to indicate that the conversion was not possible.

See also `selection-converter-out-alist'. 
Sselect.c
Vselection-coercion-alist
An alist associating selection-types (such as STRING and TIMESTAMP) with
functions.  These functions will be called with three args; the name
of the selection (typically PRIMARY, SECONDARY or CLIPBOARD); the type
from which the selection should be converted, and the selection value.
The value passed will be *exactly the same value* that was given to
`own-selection'; it should be converted into something suitable for
return to a program calling `get-selection' with the appropriate
parameters.

See also `selection-converter-in-alist' and
`selection-converter-out-alist'. 
Sselect.c
Vselection-appender-alist
An alist associating selection-types (such as STRING and TIMESTAMP) with
functions.  These functions will be called with four args; the name
of the selection (typically PRIMARY, SECONDARY or CLIPBOARD); the type
of the selection; and two selection values.  The functions are expected to
return a value representing the catenation of the two values, or nil to
indicate that this was not possible. 
Sselect.c
Vselection-buffer-killed-alist
An alist associating selection-types (such as STRING and TIMESTAMP) with
functions.  These functions will be called whenever a buffer is killed,
with four args: the name of the selection (typically PRIMARY, SECONDARY
or CLIPBOARD); the type of the selection; the value of the selection; and
the buffer that has just been killed.  These functions should return a new
selection value, or nil to indicate that the selection value should be
deleted. 
Sselect.c
Vselection-coercible-types
A list of selection types that are coercible---that is, types that may be
automatically converted to another type. Selection values with types in this
list may be subject to conversion attempts to other types. 
Sselect.c
Vlost-selection-hooks
A function or functions to be called after we have been notified
that we have lost the selection.  The function(s) will be called with one
argument, a symbol naming the selection (typically PRIMARY, SECONDARY, or
CLIPBOARD).Ssequence.c
Flength
Return the length of vector, bit vector, list or string SEQUENCE.

arguments: (SEQUENCE)
Ssequence.c
Fcount
Count the number of occurrences of ITEM in SEQUENCE.

See `remove*' for the meaning of the keywords.

arguments: (ITEM SEQUENCE &key (TEST #'eql) (KEY #'identity) (START 0) END FROM-END TEST-NOT)Ssequence.c
Fsubseq
Return the subsequence of SEQUENCE starting at START and ending before END.
END may be omitted; then the subsequence runs to the end of SEQUENCE.

If START or END is negative, it counts from the end, in contravention of
Common Lisp.
The returned subsequence is always of the same type as SEQUENCE.
If SEQUENCE is a string, relevant parts of the string-extent-data
are copied to the new string.

See also `substring-no-properties', which only operates on strings, and does
not copy extent data.

arguments: (SEQUENCE START &optional END)
Ssequence.c
Felt
Return element of SEQUENCE at index N.

arguments: (SEQUENCE N)
Ssequence.c
Fcopy-tree
Return a copy of a list and substructures.
The argument is copied, and any lists contained within it are copied
recursively.  Circularities and shared substructures are not preserved.
Second arg VECP causes vectors to be copied, too.  Strings and bit vectors
are not copied.

arguments: (ARG &optional VECP)
Ssequence.c
Fmember
Return non-nil if ELT is an element of LIST.  Comparison done with `equal'.
The value is actually the tail of LIST whose car is ELT.

arguments: (ELT LIST)
Ssequence.c
Fmemq
Return non-nil if ELT is an element of LIST.  Comparison done with `eq'.
The value is actually the tail of LIST whose car is ELT.

arguments: (ELT LIST)
Ssequence.c
Fmember*
Return the first sublist of LIST with car ITEM, or nil if no such sublist.

The keyword :test specifies a two-argument function that is used to compare
ITEM with elements in LIST; if omitted, it defaults to `eql'.

The keyword :test-not is similar, but specifies a negated function.  That
is, ITEM is considered equal to an element in LIST if the given function
returns nil.  Common Lisp deprecates :test-not, and if both are specified,
XEmacs signals an error.

:key specifies a one-argument function that transforms elements of LIST into
"comparison keys" before the test predicate is applied.  For example,
if :key is #'car, then ITEM is compared with the car of elements from LIST.
The :key function, however, is not applied to ITEM, and does not affect the
elements in the returned list, which are taken directly from the elements in
LIST.

arguments: (ITEM LIST &key (TEST #'eql) TEST-NOT (KEY #'identity))Ssequence.c
Fadjoin
Return ITEM consed onto the front of LIST, if not already in LIST.

Otherwise, return LIST unmodified.

See `member*' for the meaning of the keywords.

arguments: (ITEM LIST &key (TEST #'eql) (KEY #'identity) TEST-NOT)Ssequence.c
Fassoc
Return non-nil if KEY is `equal' to the car of an element of ALIST.
The value is actually the element of ALIST whose car equals KEY.

arguments: (KEY ALIST)
Ssequence.c
Fassq
Return non-nil if KEY is `eq' to the car of an element of ALIST.
The value is actually the element of ALIST whose car is KEY.
Elements of ALIST that are not conses are ignored.

arguments: (KEY ALIST)
Ssequence.c
Fassoc*
Find the first item whose car matches ITEM in ALIST.

See `member*' for the meaning of :test, :test-not and :key.

arguments: (ITEM ALIST &key (TEST #'eql) (KEY #'identity) TEST-NOT)Ssequence.c
Frassoc
Return non-nil if VALUE is `equal' to the cdr of an element of ALIST.
The value is actually the element of ALIST whose cdr equals VALUE.

arguments: (VALUE ALIST)
Ssequence.c
Frassq
Return non-nil if VALUE is `eq' to the cdr of an element of ALIST.
The value is actually the element of ALIST whose cdr is VALUE.

arguments: (VALUE ALIST)
Ssequence.c
Frassoc*
Find the first item whose cdr matches ITEM in ALIST.

See `member*' for the meaning of :test, :test-not and :key.

arguments: (ITEM ALIST &key (TEST #'eql) (KEY #'identity) TEST-NOT)Ssequence.c
Fposition
Return the index of the first occurrence of ITEM in SEQUENCE.

Return nil if not found. See `remove*' for the meaning of the keywords.

arguments: (ITEM SEQUENCE &key (TEST #'eql) (KEY #'identity) (START 0) (END (length SEQUENCE)) FROM-END TEST-NOT)Ssequence.c
Ffind
Find the first occurrence of ITEM in SEQUENCE.

Return the matching ITEM, or nil if not found.  See `remove*' for the
meaning of the keywords.

The keyword :default, not specified by Common Lisp, designates an object to
return instead of nil if ITEM is not found.

arguments: (ITEM SEQUENCE &key (TEST #'eql) (KEY #'identity) (START 0) (END (length SEQUENCE)) DEFAULT FROM-END TEST-NOT)Ssequence.c
Fdelete*
Remove all occurrences of ITEM in SEQUENCE, destructively.

If SEQUENCE is a non-nil list, this modifies the list directly.  A non-list
SEQUENCE will not be destructively modified, rather, if ITEM occurs in it, a
new SEQUENCE of the same type without ITEM will be returned.

See `remove*' for a non-destructive alternative, and for explanation of the
keyword arguments.

arguments: (ITEM SEQUENCE &key (TEST #'eql) (KEY #'identity) (START 0) (END (length SEQUENCE)) FROM-END COUNT TEST-NOT)Ssequence.c
Fremove*
Remove all occurrences of ITEM in SEQUENCE, non-destructively.

If SEQUENCE is a list, `remove*' makes a copy if that is necessary to avoid
corrupting the original SEQUENCE.

The keywords :test and :test-not specify two-argument test and negated-test
predicates, respectively; :test defaults to `eql'.  :key specifies a
one-argument function that transforms elements of SEQUENCE into "comparison
keys" before the test predicate is applied.  See `member*' for more
information on these keywords.

:start and :end, if given, specify indices of a subsequence of SEQUENCE to
be processed.  Indices are 0-based and processing involves the subsequence
starting at the index given by :start and ending just before the index given
by :end.

:count, if given, limits the number of items removed to the number
specified.  :from-end, if given, causes processing to proceed starting from
the end instead of the beginning; in this case, this matters only if :count
is given.

arguments: (ITEM SEQUENCE &key (TEST #'eql) (KEY #'identity) (START 0) (END (length SEQUENCE)) FROM-END COUNT TEST-NOT)Ssequence.c
Fdelete-duplicates
Remove all duplicate elements from SEQUENCE, destructively.

If SEQUENCE is a list and has duplicates, modify and return it.  Note that
SEQUENCE may start with an element to be deleted; because of this, if
modifying a variable, be sure to write `(setq VARIABLE (delete-duplicates
VARIABLE))' to be certain to have a list without duplicate elements.

If SEQUENCE is an array and has duplicates, return a newly-allocated array
of the same type comprising all unique elements of SEQUENCE.

If there are no duplicate elements in SEQUENCE, return it unmodified.

See `remove*' for the meaning of the keywords.  See `remove-duplicates' for
a non-destructive version of this function.

arguments: (SEQUENCE &key (TEST #'eql) (KEY #'identity) (START 0) END FROM-END TEST-NOT)Ssequence.c
Fremove-duplicates
Remove duplicate elements from SEQUENCE, non-destructively.

If there are no duplicate elements in SEQUENCE, return it unmodified;
otherwise, return a new object.  If SEQUENCE is a list, the new object may
share list structure with SEQUENCE.

See `remove*' for the meaning of the keywords.

arguments: (SEQUENCE &key (TEST #'eql) (KEY #'identity) (START 0) END FROM-END TEST-NOT)Ssequence.c
Fnreverse
Reverse SEQUENCE, destructively.

Return the beginning of the reversed sequence, which will be a distinct Lisp
object if SEQUENCE is a list with length greater than one.  See also
`reverse', the non-destructive version of this function.

arguments: (SEQUENCE)
Ssequence.c
Freverse
Reverse SEQUENCE, copying.  Return the reversed sequence.
See also the function `nreverse', which is used more often.

arguments: (SEQUENCE)
Ssequence.c
Fmerge
Destructively merge SEQUENCE-ONE and SEQUENCE-TWO, producing a new sequence.

TYPE is the type of sequence to return.  PREDICATE is a `less-than'
predicate on the elements.

Optional keyword argument KEY is a function used to extract an object to be
used for comparison from each element of SEQUENCE-ONE and SEQUENCE-TWO.

arguments: (TYPE SEQUENCE-ONE SEQUENCE-TWO PREDICATE &key (KEY #'IDENTITY))Ssequence.c
Fsort*
Sort SEQUENCE, comparing elements using PREDICATE.
Returns the sorted sequence.  SEQUENCE is modified by side effect.

PREDICATE is called with two elements of SEQUENCE, and should return t if
the first element is `less' than the second.

Optional keyword argument KEY is a function used to extract an object to be
used for comparison from each element of SEQUENCE.

In this implementation, sorting is always stable; but call `stable-sort' if
this stability is important to you, other implementations may not make the
same guarantees.

arguments: (SEQUENCE PREDICATE &key (KEY #'IDENTITY))Ssequence.c
Ffill
Destructively modify SEQUENCE by replacing each element with ITEM.
SEQUENCE is a list, vector, bit vector, or string.

Optional keyword START is the index of the first element of SEQUENCE
to be modified, and defaults to zero.  Optional keyword END is the
exclusive upper bound on the elements of SEQUENCE to be modified, and
defaults to the length of SEQUENCE.

arguments: (SEQUENCE ITEM &key (START 0) (END (length SEQUENCE)))Ssequence.c
Fmapconcat
Call FUNCTION on each element of SEQUENCE, and concat results to a string.
Between each pair of results, insert SEPARATOR.

Each result, and SEPARATOR, should be strings.  Thus, using " " as SEPARATOR
results in spaces between the values returned by FUNCTION.  SEQUENCE itself
may be a list, a vector, a bit vector, or a string.

With optional SEQUENCES, call FUNCTION each time with as many arguments as
there are SEQUENCES, plus one for the element from SEQUENCE.  One element
from each sequence will be used each time FUNCTION is called, and
`mapconcat' will give up once the shortest sequence is exhausted.

arguments: (FUNCTION SEQUENCE SEPARATOR &rest SEQUENCES)Ssequence.c
Fmapcar*
Call FUNCTION on each element of SEQUENCE; return a list of the results.
The result is a list of the same length as SEQUENCE.
SEQUENCE may be a list, a vector, a bit vector, or a string.

With optional SEQUENCES, call FUNCTION each time with as many arguments as
there are SEQUENCES, plus one for the element from SEQUENCE.  One element
from each sequence will be used each time FUNCTION is called, and `mapcar'
stops calling FUNCTION once the shortest sequence is exhausted.

arguments: (FUNCTION SEQUENCE &rest SEQUENCES)Ssequence.c
Fmapvector
Call FUNCTION on each element of SEQUENCE; return a vector of the results.
The result is a vector of the same length as SEQUENCE.
SEQUENCE may be a list, a vector, a bit vector, or a string.

With optional SEQUENCES, call FUNCTION each time with as many arguments as
there are SEQUENCES, plus one for the element from SEQUENCE.  One element
from each sequence will be used each time FUNCTION is called, and
`mapvector' stops calling FUNCTION once the shortest sequence is exhausted.

arguments: (FUNCTION SEQUENCE &rest SEQUENCES)Ssequence.c
Fmapcan
Call FUNCTION on each element of SEQUENCE; chain the results together.

FUNCTION must normally return a list; the results will be concatenated
together using `nconc'.

With optional SEQUENCES, call FUNCTION each time with as many arguments as
there are SEQUENCES, plus one for the element from SEQUENCE.  One element
from each sequence will be used each time FUNCTION is called, and
`mapcan' stops calling FUNCTION once the shortest sequence is exhausted.

arguments: (FUNCTION SEQUENCE &rest SEQUENCES)Ssequence.c
Fmapc
Call FUNCTION on each element of SEQUENCE.

SEQUENCE may be a list, a vector, a bit vector, or a string.
This function is like `mapcar' but does not accumulate the results,
which is more efficient if you do not use the results.

With optional SEQUENCES, call FUNCTION each time with as many arguments as
there are SEQUENCES, plus one for the elements from SEQUENCE.  One element
from each sequence will be used each time FUNCTION is called, and
`mapc' stops calling FUNCTION once the shortest sequence is exhausted.

Return SEQUENCE.

arguments: (FUNCTION SEQUENCE &rest SEQUENCES)Ssequence.c
Fmap
Map FUNCTION across one or more sequences, returning a sequence.

TYPE is the sequence type to return, FUNCTION is the function, SEQUENCE is
the first argument sequence, SEQUENCES are the other argument sequences.

FUNCTION will be called with (1+ (length SEQUENCES)) arguments, and must be
capable of accepting this number of arguments.

Certain TYPEs are recognised internally by `map', but others are not, and
`coerce' may throw an error on an attempt to convert to a TYPE it does not
understand.  A null TYPE means do not accumulate any values.

arguments: (TYPE FUNCTION SEQUENCE &rest SEQUENCES)Ssequence.c
Fmap-into
Modify RESULT-SEQUENCE using the return values of FUNCTION on SEQUENCES.

RESULT-SEQUENCE and SEQUENCES can be lists or arrays.

FUNCTION must accept at least as many arguments as there are SEQUENCES
(possibly zero).  If RESULT-SEQUENCE and the elements of SEQUENCES are not
the same length, stop when the shortest is exhausted; any elements of
RESULT-SEQUENCE beyond that are unmodified.

Return RESULT-SEQUENCE.

arguments: (RESULT-SEQUENCE FUNCTION &rest SEQUENCES)Ssequence.c
Fsome
Return true if PREDICATE gives non-nil for an element of SEQUENCE.

If so, return the value (possibly multiple) given by PREDICATE.

With optional SEQUENCES, call PREDICATE each time with as many arguments as
there are SEQUENCES (plus one for the element from SEQUENCE).

See also `find-if', which returns the corresponding element of SEQUENCE,
rather than the value given by PREDICATE, and accepts bounding index
keywords.

arguments: (PREDICATE SEQUENCE &rest SEQUENCES)Ssequence.c
Fevery
Return true if PREDICATE is true of every element of SEQUENCE.

With optional SEQUENCES, call PREDICATE each time with as many arguments as
there are SEQUENCES (plus one for the element from SEQUENCE).

In contrast to `some', `every' never returns multiple values.

arguments: (PREDICATE SEQUENCE &rest SEQUENCES)Ssequence.c
Freduce
Combine the elements of SEQUENCE using FUNCTION, a binary operation.

For example, `(reduce #'+ SEQUENCE)' returns the sum of all elements in
SEQUENCE, and `(reduce #'union SEQUENCE)' returns the union of all elements
in SEQUENCE.

Keywords supported:  :start :end :from-end :initial-value :key
See `remove*' for the meaning of :start, :end, :from-end and :key.

:initial-value specifies an element (typically an identity element, such as
0) that is conceptually prepended to the sequence (or appended, when
:from-end is given).

If the sequence has one element, that element is returned directly.
If the sequence has no elements, :initial-value is returned if given;
otherwise, FUNCTION is called with no arguments, and its result returned.

arguments: (FUNCTION SEQUENCE &key (START 0) (END (length SEQUENCE)) FROM-END INITIAL-VALUE (KEY #'identity))Ssequence.c
Freplace
Replace the elements of SEQUENCE-ONE with the elements of SEQUENCE-TWO.

SEQUENCE-ONE is destructively modified, and returned.  Its length is not
changed.

Keywords :start1 and :end1 specify a subsequence of SEQUENCE-ONE, and
:start2 and :end2 a subsequence of SEQUENCE-TWO.  See `search' for more
information.

arguments: (SEQUENCE-ONE SEQUENCE-TWO &key (START1 0) (END1 (length SEQUENCE-ONE)) (START2 0) (END2 (length SEQUENCE-TWO)))Ssequence.c
Fnsubstitute
Substitute NEW for OLD in SEQUENCE.

This is a destructive function; it reuses the storage of SEQUENCE whenever
possible.  See `remove*' for the meaning of the keywords.

arguments: (NEW OLD SEQUENCE &key (TEST #'eql) (KEY #'identity) (START 0) (END (length SEQUENCE)) FROM-END COUNT)Ssequence.c
Fsubstitute
Substitute NEW for OLD in SEQUENCE.

This is a non-destructive function; it makes a copy of SEQUENCE if necessary
to avoid corrupting the original SEQUENCE.

See `remove*' for the meaning of the keywords.

arguments: (NEW OLD SEQUENCE &key (TEST #'eql) (KEY #'identity) (START 0) (END (length SEQUENCE)) COUNT)Ssequence.c
Fsublis
Perform substitutions indicated by ALIST in TREE (non-destructively).
Return a copy of TREE with all matching elements replaced.

See `member*' for the meaning of :test, :test-not and :key.

arguments: (ALIST TREE &key (TEST #'eql) (KEY #'identity) TEST-NOT)Ssequence.c
Fnsublis
Perform substitutions indicated by ALIST in TREE (destructively).
Any matching element of TREE is changed via a call to `setcar'.

See `member*' for the meaning of :test, :test-not and :key.

arguments: (ALIST TREE &key (TEST #'eql) (KEY #'identity) TEST-NOT)Ssequence.c
Fsubst
Substitute NEW for OLD everywhere in TREE (non-destructively).

Return a copy of TREE with all elements `eql' to OLD replaced by NEW.

See `member*' for the meaning of :test, :test-not and :key.

arguments: (NEW OLD TREE &key (TEST #'eql) (KEY #'identity) TEST-NOT)Ssequence.c
Fnsubst
Substitute NEW for OLD everywhere in TREE (destructively).

Any element of TREE which is `eql' to OLD is changed to NEW (via a call to
`setcar').

See `member*' for the meaning of the keywords.  The keyword
:descend-structures, not specified by Common Lisp, allows callers to specify
that non-cons objects (vectors and range tables, among others) should also
undergo substitution.

arguments: (NEW OLD TREE &key (TEST #'eql) (KEY #'identity) TEST-NOT DESCEND-STRUCTURES)Ssequence.c
Ftree-equal
Return t if TREE1 and TREE2 have `eql' leaves.

Atoms are compared by `eql', unless another test is specified using
:test; cons cells are compared recursively.

See `union' for the meaning of :test, :test-not and :key.

arguments: (TREE1 TREE2 &key (TEST #'eql) (KEY #'identity) TEST-NOT)Ssequence.c
Fmismatch
Compare SEQUENCE1 with SEQUENCE2, return index of first mismatching element.

Return nil if the sequences match.  If one sequence is a prefix of the
other, the return value indicates the end of the shorter sequence.  A
non-nil return value always reflects an index into SEQUENCE1.

See `search' for the meaning of the keywords."

arguments: (SEQUENCE1 SEQUENCE2 &key (TEST #'eql) (KEY #'identity) (START1 0) END1 (START2 0) END2 FROM-END TEST-NOT)Ssequence.c
Fsearch
Search for SEQUENCE1 as a subsequence of SEQUENCE2.

Return the index of the leftmost element of the first match found; return
nil if there are no matches.

In this function, :start1 and :end1 specify a subsequence of SEQUENCE1, and
:start2 and :end2 specify a subsequence of SEQUENCE2.  See `remove*' for
details of the other keywords.

arguments: (SEQUENCE1 SEQUENCE2 &key (TEST #'eql) (KEY #'identity) (START1 0) END1 (START2 0) END2 FROM-END TEST-NOT)Ssequence.c
Fintersection
Combine LIST1 and LIST2 using a set-intersection operation.

The result list contains all items that appear in both LIST1 and LIST2.
This is a non-destructive function; it makes a copy of the data if necessary
to avoid corrupting the original LIST1 and LIST2.

A non-nil value for the :stable keyword, not specified by Common Lisp, means
return the items in the order they appear in LIST1.

See `union' for the meaning of :test, :test-not and :key."

arguments: (LIST1 LIST2 &key (TEST #'eql) (KEY #'identity) TEST-NOT STABLE)Ssequence.c
Fnintersection
Combine LIST1 and LIST2 using a set-intersection operation.

The result list contains all items that appear in both LIST1 and LIST2.
This is a destructive function; it reuses the storage of LIST1 whenever
possible.

See `union' for the meaning of :test, :test-not and :key."

arguments: (LIST1 LIST2 &key (TEST #'eql) (KEY #'identity) TEST-NOT)Ssequence.c
Fsubsetp
Return non-nil if every element of LIST1 also appears in LIST2.

See `union' for the meaning of the keyword arguments.

arguments: (LIST1 LIST2 &key (TEST #'eql) (KEY #'identity) TEST-NOT)Ssequence.c
Fset-difference
Combine LIST1 and LIST2 using a set-difference operation.

The result list contains all items that appear in LIST1 but not LIST2.  This
is a non-destructive function; it makes a copy of the data if necessary to
avoid corrupting the original LIST1 and LIST2.

See `union' for the meaning of :test, :test-not and :key.

A non-nil value for the :stable keyword, not specified by Common Lisp, means
return the items in the order they appear in LIST1.

arguments: (LIST1 LIST2 &key (TEST #'eql) (KEY #'identity) TEST-NOT STABLE)Ssequence.c
Fnset-difference
Combine LIST1 and LIST2 using a set-difference operation.

The result list contains all items that appear in LIST1 but not LIST2.  This
is a destructive function; it reuses the storage of LIST1 whenever possible.

See `union' for the meaning of :test, :test-not and :key."

arguments: (LIST1 LIST2 &key (TEST #'eql) (KEY #'identity) TEST-NOT)Ssequence.c
Fnunion
Combine LIST1 and LIST2 using a set-union operation.
The result list contains all items that appear in either LIST1 or LIST2.

This is a destructive function, it reuses the storage of LIST1 whenever
possible.

See `union' for the meaning of :test, :test-not and :key.

arguments: (LIST1 LIST2 &key (TEST #'eql) (KEY #'identity) TEST-NOT)Ssequence.c
Funion
Combine LIST1 and LIST2 using a set-union operation.
The result list contains all items that appear in either LIST1 or LIST2.
This is a non-destructive function; it makes a copy of the data if necessary
to avoid corrupting the original LIST1 and LIST2.

The keywords :test and :test-not specify two-argument test and negated-test
predicates, respectively; :test defaults to `eql'.  See `member*' for more
information.

:key specifies a one-argument function that transforms elements of LIST1
and LIST2 into "comparison keys" before the test predicate is applied.
For example, if :key is #'car, then the car of elements from LIST1 is
compared with the car of elements from LIST2.  The :key function, however,
does not affect the elements in the returned list, which are taken directly
from the elements in LIST1 and LIST2.

A non-nil value for the :stable keyword, not specified by Common Lisp, means
return the items of LIST1 in order, followed by the remaining items of LIST2
in the order they occur in LIST2.

arguments: (LIST1 LIST2 &key (TEST #'eql) (KEY #'identity) TEST-NOT STABLE)Ssequence.c
Fset-exclusive-or
Combine LIST1 and LIST2 using a set-exclusive-or operation.

The result list contains all items that appear in exactly one of LIST1, LIST2.
This is a non-destructive function; it makes a copy of the data if necessary
to avoid corrupting the original LIST1 and LIST2.

See `union' for the meaning of :test, :test-not and :key.

A non-nil value for the :stable keyword, not specified by Common Lisp, means
return the items in the order they appear in LIST1, followed by the
remaining items in the order they appear in LIST2.

arguments: (LIST1 LIST2 &key (TEST #'eql) (KEY #'identity) TEST-NOT STABLE)Ssequence.c
Fnset-exclusive-or
Combine LIST1 and LIST2 using a set-exclusive-or operation.

The result list contains all items that appear in exactly one of LIST1 and
LIST2.  This is a destructive function; it reuses the storage of LIST1 and
LIST2 whenever possible.

See `union' for the meaning of :test, :test-not and :key.

arguments: (LIST1 LIST2 &key (TEST #'eql) (KEY #'identity) TEST-NOT)Ssignal.c
Fwaiting-for-user-input-p
Return non-nil if XEmacs is waiting for input from the user.
This is intended for use by asynchronous timeout callbacks and by
asynchronous process output filters and sentinels (not yet implemented
in XEmacs).  It will always be nil if XEmacs is not inside of
an asynchronous timeout or process callback.

arguments: ()
Ssound.c
Fplay-sound-file
Play the named sound file on DEVICE's speaker at the specified volume
(0-100, default specified by the `bell-volume' variable).
On Unix machines the sound file must be in the Sun/NeXT U-LAW format
except under Linux where WAV files are also supported.  On Microsoft
Windows the sound file must be in WAV format.
  DEVICE defaults to the selected device.

arguments: (FILE &optional VOLUME DEVICE)
Ssound.c
Fplay-sound
Play a sound of the provided type.

SOUND can a symbol, specifying a sound to be looked up in `sound-alist'
(generally, either the symbol directly maps to a sound or is an "abstract"
symbol that maps to another symbol and is used to specify the sound that is
played when a particular behavior occurs.  `ding' lists the built-in
abstract sounds and their intended purpose.

SOUND can also be a string, which directly encodes the sound data to be played.

If SOUND is nil, the abstract sound `default' will be used.

VOLUME controls the volume (max is around 150? not sure).

DEVICE is the device to play the sound on (defaults to the selected device).

If the sound cannot be played in any other way, the standard "bell" will sound.

arguments: (SOUND &optional VOLUME DEVICE)
Ssound.c
Fdevice-sound-enabled-p
Return t if DEVICE is able to play sound.  Defaults to selected device.

arguments: (&optional DEVICE)
Ssound.c
Fding
Beep, or flash the frame.

(See `visible-bell'; setting this makes the frame flash instead of
beeping.)  Also, unless NO-TERMINATE is given, terminate any keyboard macro
currently executing.  SOUND specifies the sound to make and DEVICE the
device to make it on (defaults to the selected device).

SOUND is either a string (raw data to be played directly), a symbol, or
`nil' (equivalent to the symbol `default').  Sound symbols are looked up in
`sound-alist', and resolve either to strings of data or to other symbols.
Sound symbols that map directly to data should be considered named sounds;
sound symbols that map to other sounds should be considered abstract
sounds, and are used when a particular behavior or state occurs.

Remember that the sound symbol is the *second* argument to `ding', not the
first.

The following abstract sounds are used by XEmacs itself:

    alarm		when a package wants to remind the user
    auto-save-error	when an auto-save does not succeed
    buffer-bound	when you attempt to move off the end of a buffer
    command-error	any uncaught error (i.e. any error that the user
                        sees) except those handled by undefined-click,
			undefined-key, buffer-bound, or read-only
    default		used when nothing else is appropriate.
    isearch-failed      unable to locate search text during incremental search
    isearch-quit        when you delete chars past the beginning of the search
                        text in isearch
    no-completion	during completing-read
    quit		when C-g is typed
    read-only           when you try to modify a read-only buffer
    ready		when a compile or other time-consuming task is done
    undefined-click	when you use an undefined mouse-click combination
    undefined-key	when you type a key that is undefined
    warp		XEmacs has changed the selected-window or frame
			asynchronously -- e.g. a debugger breakpoint is hit
			in an asynchronous process filter
    y-or-n-p		when you type something other than 'y' or 'n'
    yes-or-no-p  	when you type something other than 'yes' or 'no'
    
Other lisp packages may use other beep types, but these are the ones that
the C kernel of Emacs uses.


arguments: (&optional NO-TERMINATE SOUND DEVICE)
Ssound.c
Fwait-for-sounds
Wait for all sounds to finish playing on DEVICE.

arguments: (&optional DEVICE)
Ssound.c
Fconnected-to-nas-p
Return t if connected to NAS server for sounds on DEVICE.

arguments: (&optional DEVICE)
Ssound.c
Vbell-volume
*How loud to be, from 0 to 100.Ssound.c
Vbell-inhibit-time
*Don't ring the bell on the same device more than once within this many seconds.Ssound.c
Vsound-alist
An alist associating names with sounds.
When `beep' or `ding' is called with one of the name symbols, the associated
sound will be generated instead of the standard beep.

Each element of `sound-alist' is a list describing a sound.
The first element of the list is the name of the sound being defined.
Subsequent elements of the list are alternating keyword/value pairs:

   Keyword:	Value:
   -------	-----
   sound	A string of raw sound data, or the name of another sound to
		play.   The symbol `t' here means use the default X beep.
   volume	An integer from 0-100, defaulting to `bell-volume'
   pitch	If using the default X beep, the pitch (Hz) to generate.
   duration	If using the default X beep, the duration (milliseconds).

For compatibility, elements of `sound-alist' may also be:

   ( sound-name . <sound> )
   ( sound-name <volume> <sound> )

You should probably add things to this list by calling the function
load-sound-file.

Caveats:
 - XEmacs must be built with sound support for your system.  Not all
   systems support sound. 

 - The pitch, duration, and volume options are available everywhere, but
   many X servers ignore the `pitch' option.

Sound symbols that map directly to data should be considered named sounds;
sound symbols that map to other sounds should be considered abstract
sounds, and are used when a particular behavior or state occurs.  See
`ding' for a list of the standard abstract sounds.Ssound.c
Vsynchronous-sounds
Play sounds synchronously, if non-nil.
Only applies if NAS is used and supports asynchronous playing
of sounds.  Otherwise, sounds are always played synchronously.Ssound.c
Vnative-sound-only-on-console
Non-nil value means play sounds only if XEmacs is running
on the system console.
Nil means always play sounds, even if running on a non-console tty
or a secondary X display.

This variable only applies to native sound support.Sspecifier.c
Fvalid-specifier-type-p
Given a SPECIFIER-TYPE, return non-nil if it is valid.
Valid types are `generic', `integer', `boolean', `color', `font', `image',
`face-boolean', and `toolbar'.

arguments: (SPECIFIER-TYPE)
Sspecifier.c
Fspecifier-type-list
Return a list of valid specifier types.

arguments: ()
Sspecifier.c
Fmake-specifier
Return a new specifier object of type TYPE.

A specifier is an object that can be used to keep track of a property
whose value can be per-buffer, per-window, per-frame, or per-device,
and can further be restricted to a particular console-type or
device-class.  Specifiers are used, for example, for the various
built-in properties of a face; this allows a face to have different
values in different frames, buffers, etc.

When speaking of the value of a specifier, it is important to
distinguish between the *setting* of a specifier, called an
"instantiator", and the *actual value*, called an "instance".  You
put various possible instantiators (i.e. settings) into a specifier
and associate them with particular locales (buffer, window, frame,
device, global), and then the instance (i.e. actual value) is
retrieved in a specific domain (window, frame, device) by looking
through the possible instantiators (i.e. settings).  This process is
called "instantiation".

To put settings into a specifier, use `set-specifier', or the
lower-level functions `add-spec-to-specifier' and
`add-spec-list-to-specifier'.  You can also temporarily bind a setting
to a specifier using `let-specifier'.  To retrieve settings, use
`specifier-specs', or its lower-level counterpart
`specifier-spec-list'.

To determine the actual value (i.e. the instance) in a particular domain, use
`specifier-instance'.  To determine the corresponding setting that yielded
the value (i.e. the instantiator), use `specifier-instantiator'.

For more information, see `set-specifier', `specifier-instance',
`specifier-specs', and `add-spec-to-specifier'; or, for a detailed
description of specifiers, including how exactly the instantiation
process works, see the chapter on specifiers in the XEmacs Lisp
Reference Manual.

TYPE specifies the particular type of specifier, and should be one of
the symbols `generic', `integer', `natnum', `boolean', `color', `font',
`image', `face-boolean', `display-table', `gutter', `gutter-size',
`gutter-visible' or `toolbar'.

For more information on particular types of specifiers, see the
functions `make-generic-specifier', `make-integer-specifier',
`make-natnum-specifier', `make-boolean-specifier',
`make-color-specifier', `make-font-specifier', `make-image-specifier',
`make-face-boolean-specifier', `make-gutter-size-specifier',
`make-gutter-visible-specifier', `default-toolbar', `default-gutter',
and `current-display-table'.

arguments: (TYPE)
Sspecifier.c
Fspecifierp
Return t if OBJECT is a specifier.

A specifier is an object that can be used to keep track of a property
whose value can be per-buffer, per-window, per-frame, or per-device,
and can further be restricted to a particular console-type or device-class.
See `make-specifier'.

arguments: (OBJECT)
Sspecifier.c
Fspecifier-type
Return the type of SPECIFIER.

arguments: (SPECIFIER)
Sspecifier.c
Fvalid-specifier-locale-p
Return t if LOCALE is a valid specifier locale.
Valid locales are devices, frames, windows, buffers, and `global'.
(nil is not valid.)

arguments: (LOCALE)
Sspecifier.c
Fvalid-specifier-domain-p
Return t if DOMAIN is a valid specifier domain.
A domain is used to instantiate a specifier (i.e. determine the specifier's
value in that domain).  Valid domains are image instances, windows, frames,
and devices. (nil is not valid.) image instances are pseudo-domains since
instantiation will actually occur in the window the image instance itself is
instantiated in.

arguments: (DOMAIN)
Sspecifier.c
Fvalid-specifier-locale-type-p
Given a specifier LOCALE-TYPE, return non-nil if it is valid.
Valid locale types are `global', `device', `frame', `window', and `buffer'.
(Note, however, that in functions that accept either a locale or a locale
type, `global' is considered an individual locale.)

arguments: (LOCALE-TYPE)
Sspecifier.c
Fspecifier-locale-type-from-locale
Given a specifier LOCALE, return its type.

arguments: (LOCALE)
Sspecifier.c
Fvalid-specifier-tag-p
Return non-nil if TAG is a valid specifier tag.
See also `valid-specifier-tag-set-p'.

arguments: (TAG)
Sspecifier.c
Fvalid-specifier-tag-set-p
Return non-nil if TAG-SET is a valid specifier tag set.

A specifier tag set is an entity that is attached to an instantiator and can
be used to restrict the scope of that instantiator to a particular device
class, device type, or charset.  It can also be used to mark instantiators
added by a particular package so that they can be later removed as a group.

A specifier tag set consists of a list of zero of more specifier tags,
each of which is a symbol that is recognized by XEmacs as a tag.
(The valid device types and device classes are always tags, as are
any tags defined by `define-specifier-tag'.) It is called a "tag set"
(as opposed to a list) because the order of the tags or the number of
times a particular tag occurs does not matter.

Each tag has two predicates associated with it, which specify, respectively,
whether that tag applies to a particular device and whether it applies to a
particular character set.  The predefined tags which are device types and
classes match devices of that type or class.  User-defined tags can have any
device predicate, or none (meaning that all devices match).  When attempting
to instantiate a specifier, a particular instantiator is only considered if
the device of the domain being instantiated over matches all tags in the tag
set attached to that instantiator.

If a charset is to be considered--which is only the case for face
instantiators--this consideration may be done twice.  The first iteration
pays attention to the character set predicates; if no instantiator can be
found in that case, the search is repeated ignoring the character set
predicates.

Most of the time, a tag set is not specified, and the instantiator
gets a null tag set, which matches all devices.

arguments: (TAG-SET)
Sspecifier.c
Fcanonicalize-tag-set
Canonicalize the given tag set.
Two canonicalized tag sets can be compared with `equal' to see if they
represent the same tag set. (Specifically, canonicalizing involves
sorting by symbol name and removing duplicates.)

arguments: (TAG-SET)
Sspecifier.c
Fdevice-matches-specifier-tag-set-p
Return non-nil if DEVICE matches specifier tag set TAG-SET.
This means that DEVICE matches each tag in the tag set. (Every
tag recognized by XEmacs has a predicate associated with it that
specifies which devices match it.)

arguments: (DEVICE TAG-SET)
Sspecifier.c
Fdefine-specifier-tag
Define a new specifier tag.

If DEVICE-PREDICATE is specified, it should be a function of one argument
(a device) that specifies whether the tag matches that particular device.
If DEVICE-PREDICATE is omitted, the tag matches all devices.

If CHARSET-PREDICATE is supplied, it should be a function taking a single
Lisp character set argument.  A tag's charset predicate is primarily used to
determine what font to use for a given (set of) charset(s) when that tag
is used in a set-face-font call; a non-nil return value indicates that the
tag matches the charset.

The font matching process also has a concept of stages; the defined stages
are currently `initial' and `final', and there exist specifier tags with
those names that correspond to those stages.  On X11, 'initial is used when
the font matching process is looking for fonts that match the desired
registries of the charset--see the `charset-registries' function.  If that
match process fails, then the 'final tag becomes relevant; this means that a
more general lookup is desired, and that a font doesn't necessarily have to
match the desired XLFD for the face, just the charset repertoire for this
charset.  It also means that the charset registry and encoding used will be
`iso10646-1', and the characters will be converted to display using that
registry.

If a tag set matches no character set; the two-stage match process will
ignore the tag on its first pass, but if no match is found, it will respect
it on the second pass, where character set information is ignored.

You can redefine an existing user-defined specifier tag.  However, you
cannot redefine most of the built-in specifier tags (the device types and
classes, `initial', and `final') or the symbols nil, t, `all', or `global'.

arguments: (TAG &optional DEVICE-PREDICATE CHARSET-PREDICATE)
Sspecifier.c
Fdevice-matching-specifier-tag-list
Return a list of all specifier tags matching DEVICE.
DEVICE defaults to the selected device if omitted.

arguments: (&optional DEVICE)
Sspecifier.c
Fspecifier-tag-list
Return a list of all currently-defined specifier tags.
This includes the built-in ones (the device types and classes).

arguments: ()
Sspecifier.c
Fspecifier-tag-device-predicate
Return the device predicate for the given specifier tag.

arguments: (TAG)
Sspecifier.c
Fspecifier-tag-charset-predicate
Return the charset predicate for the given specifier tag.

arguments: (TAG)
Sspecifier.c
Fcheck-valid-instantiator
Signal an error if INSTANTIATOR is invalid for SPECIFIER-TYPE.

arguments: (INSTANTIATOR SPECIFIER-TYPE)
Sspecifier.c
Fvalid-instantiator-p
Return non-nil if INSTANTIATOR is valid for SPECIFIER-TYPE.

arguments: (INSTANTIATOR SPECIFIER-TYPE)
Sspecifier.c
Fcheck-valid-inst-list
Signal an error if INST-LIST is invalid for specifier type TYPE.

arguments: (INST-LIST TYPE)
Sspecifier.c
Fvalid-inst-list-p
Return non-nil if INST-LIST is valid for specifier type TYPE.

arguments: (INST-LIST TYPE)
Sspecifier.c
Fcheck-valid-spec-list
Signal an error if SPEC-LIST is invalid for specifier type TYPE.

arguments: (SPEC-LIST TYPE)
Sspecifier.c
Fvalid-spec-list-p
Return non-nil if SPEC-LIST is valid for specifier type TYPE.

arguments: (SPEC-LIST TYPE)
Sspecifier.c
Fadd-spec-to-specifier
Add a specification to SPECIFIER.
The specification maps from LOCALE (which should be a window, buffer,
frame, device, or `global', and defaults to `global') to INSTANTIATOR,
whose allowed values depend on the type of the specifier.  Optional
argument TAG-SET limits the instantiator to apply only to the specified
tag set, which should be a list of tags all of which must match the
device being instantiated over (tags are a device type, a device class,
or tags defined with `define-specifier-tag').  Specifying a single
symbol for TAG-SET is equivalent to specifying a one-element list
containing that symbol.  Optional argument HOW-TO-ADD specifies what to
do if there are already specifications in the specifier.
It should be one of

  `prepend'		Put at the beginning of the current list of
			instantiators for LOCALE.
  `append'		Add to the end of the current list of
			instantiators for LOCALE.
  `remove-tag-set-prepend' (this is the default)
			Remove any existing instantiators whose tag set is
			the same as TAG-SET; then put the new instantiator
			at the beginning of the current list. ("Same tag
			set" means that they contain the same elements.
			The order may be different.)
  `remove-tag-set-append'
			Remove any existing instantiators whose tag set is
			the same as TAG-SET; then put the new instantiator
			at the end of the current list.
  `remove-locale'	Remove all previous instantiators for this locale
			before adding the new spec.
  `remove-locale-type'	Remove all specifications for all locales of the
			same type as LOCALE (this includes LOCALE itself)
			before adding the new spec.
  `remove-all'		Remove all specifications from the specifier
			before adding the new spec.

You can retrieve the specifications for a particular locale or locale type
with the function `specifier-spec-list' or `specifier-specs'.

arguments: (SPECIFIER INSTANTIATOR &optional LOCALE TAG-SET HOW-TO-ADD)
Sspecifier.c
Fadd-spec-list-to-specifier
Add SPEC-LIST (a list of specifications) to SPECIFIER.
The format of SPEC-LIST is

  ((LOCALE (TAG-SET . INSTANTIATOR) ...) ...)

where
  LOCALE := a window, a buffer, a frame, a device, or `global'
  TAG-SET := an unordered list of zero or more TAGS, each of which
	     is a symbol
  TAG := a device class (see `valid-device-class-p'), a device type
	 (see `valid-console-type-p'), or a tag defined with
	 `define-specifier-tag'
  INSTANTIATOR := format determined by the type of specifier

The pair (TAG-SET . INSTANTIATOR) is called an `inst-pair'.
A list of inst-pairs is called an `inst-list'.
The pair (LOCALE . INST-LIST) is called a `specification' or `spec'.
A spec-list, then, can be viewed as a list of specifications.

HOW-TO-ADD specifies how to combine the new specifications with
the existing ones, and has the same semantics as for
`add-spec-to-specifier'.

In many circumstances, the higher-level function `set-specifier' is
more convenient and should be used instead.

arguments: (SPECIFIER SPEC-LIST &optional HOW-TO-ADD)
Sspecifier.c
Fspecifier-spec-list
Return the spec-list of specifications for SPECIFIER in LOCALE.

If LOCALE is a particular locale (a buffer, window, frame, device,
or `global'), a spec-list consisting of the specification for that
locale will be returned.

If LOCALE is a locale type (i.e. `buffer', `window', `frame', or `device'),
a spec-list of the specifications for all locales of that type will be
returned.

If LOCALE is nil or `all', a spec-list of all specifications in SPECIFIER
will be returned.

LOCALE can also be a list of locales, locale types, and/or `all'; the
result is as if `specifier-spec-list' were called on each element of the
list and the results concatenated together.

Only instantiators where TAG-SET (a list of zero or more tags) is a
subset of (or possibly equal to) the instantiator's tag set are returned.
(The default value of nil is a subset of all tag sets, so in this case
no instantiators will be screened out.) If EXACT-P is non-nil, however,
TAG-SET must be equal to an instantiator's tag set for the instantiator
to be returned.

arguments: (SPECIFIER &optional LOCALE TAG-SET EXACT-P)
Sspecifier.c
Fspecifier-specs
Return the specification(s) for SPECIFIER in LOCALE.

If LOCALE is a single locale or is a list of one element containing a
single locale, then a "short form" of the instantiators for that locale
will be returned.  Otherwise, this function is identical to
`specifier-spec-list'.

The "short form" is designed for readability and not for ease of use
in Lisp programs, and is as follows:

1. If there is only one instantiator, then an inst-pair (i.e. cons of
   tag and instantiator) will be returned; otherwise a list of
   inst-pairs will be returned.
2. For each inst-pair returned, if the instantiator's tag is `any',
   the tag will be removed and the instantiator itself will be returned
   instead of the inst-pair.
3. If there is only one instantiator, its value is nil, and its tag is
   `any', a one-element list containing nil will be returned rather
   than just nil, to distinguish this case from there being no
   instantiators at all.

arguments: (SPECIFIER &optional LOCALE TAG-SET EXACT-P)
Sspecifier.c
Fremove-specifier
Remove specification(s) for SPECIFIER.

If LOCALE is a particular locale (a window, buffer, frame, device,
or `global'), the specification for that locale will be removed.

If instead, LOCALE is a locale type (i.e. `window', `buffer', `frame',
or `device'), the specifications for all locales of that type will be
removed.

If LOCALE is nil or `all', all specifications will be removed.

LOCALE can also be a list of locales, locale types, and/or `all'; this
is equivalent to calling `remove-specifier' for each of the elements
in the list.

Only instantiators where TAG-SET (a list of zero or more tags) is a
subset of (or possibly equal to) the instantiator's tag set are removed.
The default value of nil is a subset of all tag sets, so in this case
no instantiators will be screened out. If EXACT-P is non-nil, however,
TAG-SET must be equal to an instantiator's tag set for the instantiator
to be removed.

arguments: (SPECIFIER &optional LOCALE TAG-SET EXACT-P)
Sspecifier.c
Fcopy-specifier
Copy SPECIFIER to DEST, or create a new one if DEST is nil.

If DEST is nil or omitted, a new specifier will be created and the
specifications copied into it.  Otherwise, the specifications will be
copied into the existing specifier in DEST.

If LOCALE is nil or `all', all specifications will be copied.  If LOCALE
is a particular locale, the specification for that particular locale will
be copied.  If LOCALE is a locale type, the specifications for all locales
of that type will be copied.  LOCALE can also be a list of locales,
locale types, and/or `all'; this is equivalent to calling `copy-specifier'
for each of the elements of the list.  See `specifier-spec-list' for more
information about LOCALE.

Only instantiators where TAG-SET (a list of zero or more tags) is a
subset of (or possibly equal to) the instantiator's tag set are copied.
The default value of nil is a subset of all tag sets, so in this case
no instantiators will be screened out. If EXACT-P is non-nil, however,
TAG-SET must be equal to an instantiator's tag set for the instantiator
to be copied.

Optional argument HOW-TO-ADD specifies what to do with existing
specifications in DEST.  If nil, then whichever locales or locale types
are copied will first be completely erased in DEST.  Otherwise, it is
the same as in `add-spec-to-specifier'.

arguments: (SPECIFIER &optional DEST LOCALE TAG-SET EXACT-P HOW-TO-ADD)
Sspecifier.c
Fcheck-valid-specifier-matchspec
Signal an error if MATCHSPEC is invalid for SPECIFIER-TYPE.
See `specifier-matching-instance' for a description of matchspecs.

arguments: (MATCHSPEC SPECIFIER-TYPE)
Sspecifier.c
Fvalid-specifier-matchspec-p
Return non-nil if MATCHSPEC is valid for SPECIFIER-TYPE.
See `specifier-matching-instance' for a description of matchspecs.

arguments: (MATCHSPEC SPECIFIER-TYPE)
Sspecifier.c
Fspecifier-fallback
Return the fallback value for SPECIFIER.
Fallback values are provided by the C code for certain built-in
specifiers to make sure that instantiation won't fail even if all
specs are removed from the specifier, or to implement simple
inheritance behavior (e.g. this method is used to ensure that
faces other than `default' inherit their attributes from `default').
By design, you cannot change the fallback value, and specifiers
created with `make-specifier' will never have a fallback (although
a similar, Lisp-accessible capability may be provided in the future
to allow for inheritance).

The fallback value will be an inst-list that is instantiated like
any other inst-list, a specifier of the same type as SPECIFIER
(results in inheritance), or nil for no fallback.

When you instantiate a specifier, you can explicitly request that the
fallback not be consulted. (The C code does this, for example, when
merging faces.) See `specifier-instance'.

arguments: (SPECIFIER)
Sspecifier.c
Fspecifier-instance
Instantiate SPECIFIER (return its value) in DOMAIN.
If no instance can be generated for this domain, return DEFAULT.

DOMAIN is nearly always a window (defaulting to the selected window if
omitted), but can be a window, frame, or device.  Other values that are legal
as a locale (e.g. a buffer) are not valid as a domain because they do not
provide enough information to identify a particular device (see
`valid-specifier-domain-p').  Window domains are used internally in nearly
all circumstances when computing specifier instances of display properties.
Frame domains are used in a few circumstances (such as when computing the
geometry of a frame based on properties such as the toolbar widths), and
device domains are rarely if ever used internally.

This function looks through the specifications in SPECIFIER that correspond
to DOMAIN, from most specific (specifications for DOMAIN itself) to most
general (global specifications), for matching instantiators, and attempts
to compute an instance value for each instantiator found.  The first
successfully computed value is returned.  The corresponding instantiator
can be returned using `specifier-instantiator'.

A specifier is a generalized object for controlling the value of a property --
typically, but not necessarily, a display-related property -- that can vary
over particular buffers, frames, device types, etc.

A fundamental distinction must be made between the specification of a
property's value, and the resulting value itself.  This distinction is
clearest in the case of an image -- the specification describes the source
of the image (for example, a file of JPEG data), and the resulting value
encapsulates a window-system object describing the image as displayed on a
particular device (for example, a particular X display).  The specification
might also be an instruction of the form "use the background pixmap of the
`modeline' face".  A similar mapping exists between color strings and
color-instance objects, and font strings and font-instance objects.  In
some cases, the specification and the resulting value are of the same type,
but the distinction is still logically made.

The specification of a value is called an instantiator, and the resulting
value the instance.

"Instantiating" a specifier in a particular domain means determining
the specifier's "value" in that domain.  This is accomplished by
searching through the specifications in the specifier that correspond
to all locales that can be derived from the given domain, from specific
to general.  In most cases, the domain is an Emacs window.  In that case
specifications are searched for as follows:

1. A specification whose locale is the window itself;
2. A specification whose locale is the window's buffer;
3. A specification whose locale is the window's frame;
4. A specification whose locale is the window's frame's device;
5. A specification whose locale is `global'.

If all of those fail, then the C-code-provided fallback value for
this specifier is consulted (see `specifier-fallback').  If it is
an inst-list, then this function attempts to instantiate that list
just as when a specification is located in the first five steps above.
If the fallback is a specifier, `specifier-instance' is called
recursively on this specifier and the return value used.  Note,
however, that if the optional argument NO-FALLBACK is non-nil,
the fallback value will not be consulted.

Note that there may be more than one specification matching a particular
locale; all such specifications are considered before looking for any
specifications for more general locales.  Any particular specification
that is found may be rejected because its tag set does not match the
device being instantiated over, or because the specification is not
valid for the device of the given domain (e.g. the font or color name
does not exist for this particular X server).

NOTE: When errors occur in the process of trying a particular instantiator,
and the instantiator is thus skipped, warnings will be issued at level
`debug'.  Normally, such warnings are ignored entirely, but you can change
this by setting `log-warning-minimum-level'.  This is useful if you're
trying to debug why particular instantiators are not being processed.

The returned value is dependent on the type of specifier.  For example,
for a font specifier (as returned by the `face-font' function), the returned
value will be a font-instance object.  For glyphs, the returned value
will be an image-instance object.

See also `specifier-matching-instance'.

arguments: (SPECIFIER &optional DOMAIN DEFAULT NO-FALLBACK)
Sspecifier.c
Fspecifier-instantiator
Return instantiator that would be used to instantiate SPECIFIER in DOMAIN.
If no instance can be generated for this domain, return DEFAULT.

DOMAIN should be a window, frame, or device.  Other values that are legal
as a locale (e.g. a buffer) are not valid as a domain because they do not
provide enough information to identify a particular device (see
`valid-specifier-domain-p').  DOMAIN defaults to the selected window
if omitted.

See `specifier-instance' for more information about the instantiation process.

arguments: (SPECIFIER &optional DOMAIN DEFAULT NO-FALLBACK)
Sspecifier.c
Fspecifier-matching-instance
Return an instance for SPECIFIER in DOMAIN that matches MATCHSPEC.
If no instance can be generated for this domain, return DEFAULT.

This function is identical to `specifier-instance' except that a
specification will only be considered if it matches MATCHSPEC.
The definition of "match", and allowed values for MATCHSPEC, are
dependent on the particular type of specifier.  Here are some examples:

-- For chartable (e.g. display table) specifiers, MATCHSPEC should be a
   character, and the specification (a chartable) must give a value for
   that character in order to be considered.  This allows you to specify,
   e.g., a buffer-local display table that only gives values for particular
   characters.  All other characters are handled as if the buffer-local
   display table is not there. (Chartable specifiers are not yet
   implemented.)

-- For font specifiers, MATCHSPEC should be a cons (CHARSET . STAGE).
   The defined stages are currently `initial' and `final'.  On X11, 'initial
   is used when the font matching process is looking for fonts that match
   the desired registries of the charset--see the `charset-registries'
   function.  If that match process fails, then the 'final stage comes into
   play; this means that a more general lookup is desired, and that a font
   doesn't necessarily have to match the desired XLFD for the face, just the
   charset repertoire for this charset.  It also means that the charset
   registry and encoding used will be `iso10646-1', and the characters will
   be converted to display using that registry.

   See `define-specifier-tag' for details on how to create a tag that
   specifies a given character set and stage combination.  You can supply
   such a tag to `set-face-font' in order to set a face's font for that
   character set and stage combination.

arguments: (SPECIFIER MATCHSPEC &optional DOMAIN DEFAULT NO-FALLBACK)
Sspecifier.c
Fspecifier-matching-instantiator
Return instantiator for instance of SPECIFIER in DOMAIN that matches MATCHSPEC.
If no instance can be generated for this domain, return DEFAULT.

This function is identical to `specifier-matching-instance' but returns
the instantiator used to generate the instance, rather than the actual
instance.

arguments: (SPECIFIER MATCHSPEC &optional DOMAIN DEFAULT NO-FALLBACK)
Sspecifier.c
Fspecifier-instance-from-inst-list
Attempt to convert a particular inst-list into an instance.
This attempts to instantiate INST-LIST in the given DOMAIN,
as if INST-LIST existed in a specification in SPECIFIER.  If
the instantiation fails, DEFAULT is returned.  In most circumstances,
you should not use this function; use `specifier-instance' instead.

arguments: (SPECIFIER DOMAIN INST-LIST &optional DEFAULT)
Sspecifier.c
Fspecifier-instantiator-from-inst-list
Attempt to convert an inst-list into an instance; return instantiator.
This is identical to `specifier-instance-from-inst-list' but returns
the instantiator used to generate the instance, rather than the instance
itself.

arguments: (SPECIFIER DOMAIN INST-LIST &optional DEFAULT)
Sspecifier.c
Fspecifier-matching-instance-from-inst-list
Attempt to convert a particular inst-list into an instance.
This attempts to instantiate INST-LIST in the given DOMAIN
(as if INST-LIST existed in a specification in SPECIFIER),
matching the specifications against MATCHSPEC.

This function is analogous to `specifier-instance-from-inst-list'
but allows for specification-matching as in `specifier-matching-instance'.
See that function for a description of exactly how the matching process
works.

arguments: (SPECIFIER MATCHSPEC DOMAIN INST-LIST &optional DEFAULT)
Sspecifier.c
Fspecifier-matching-instantiator-from-inst-list
Attempt to convert an inst-list into an instance; return instantiator.
This is identical to `specifier-matching-instance-from-inst-list' but returns
the instantiator used to generate the instance, rather than the instance
itself.

arguments: (SPECIFIER MATCHSPEC DOMAIN INST-LIST &optional DEFAULT)
Sspecifier.c
Fset-specifier-dirty-flag
Force recomputation of any caches associated with SPECIFIER.
Note that this automatically happens whenever you change a specification
 in SPECIFIER; you do not have to call this function then.
One example of where this function is useful is when you have a
 toolbar button whose `active-p' field is an expression to be
 evaluated.  Calling `set-specifier-dirty-flag' on the
 toolbar specifier will force the `active-p' fields to be
 recomputed.

arguments: (SPECIFIER)
Sspecifier.c
Fgeneric-specifier-p
Return non-nil if OBJECT is a generic specifier.

See `make-generic-specifier' for a description of possible generic
instantiators.

arguments: (OBJECT)
Sspecifier.c
Finteger-specifier-p
Return non-nil if OBJECT is an integer specifier.

See `make-integer-specifier' for a description of possible integer
instantiators.

arguments: (OBJECT)
Sspecifier.c
Fnatnum-specifier-p
Return non-nil if OBJECT is a natnum (non-negative-integer) specifier.

See `make-natnum-specifier' for a description of possible natnum
instantiators.

arguments: (OBJECT)
Sspecifier.c
Fboolean-specifier-p
Return non-nil if OBJECT is a boolean specifier.

See `make-boolean-specifier' for a description of possible boolean
instantiators.

arguments: (OBJECT)
Sspecifier.c
Fdisplay-table-specifier-p
Return non-nil if OBJECT is a display-table specifier.

See `current-display-table' for a description of possible display-table
instantiators.

arguments: (OBJECT)
Ssymbols.c
Fintern
Return the canonical symbol whose name is STRING.
If there is none, one is created by this function and returned.
Optional second argument OBARRAY specifies the obarray to use;
it defaults to the value of the variable `obarray'.

arguments: (STRING &optional OBARRAY)
Ssymbols.c
Fintern-soft
Return the canonical symbol named NAME, or nil if none exists.
NAME may be a string or a symbol.  If it is a symbol, that exact
symbol is searched for.
Optional second argument OBARRAY specifies the obarray to use;
it defaults to the value of the variable `obarray'.
Optional third argument DEFAULT says what Lisp object to return if there is
no canonical symbol named NAME, and defaults to nil. 

arguments: (NAME &optional OBARRAY DEFAULT)
Ssymbols.c
Funintern
Delete the symbol named NAME, if any, from OBARRAY.
The value is t if a symbol was found and deleted, nil otherwise.
NAME may be a string or a symbol.  If it is a symbol, that symbol
is deleted, if it belongs to OBARRAY--no other symbol is deleted.
OBARRAY defaults to the value of the variable `obarray'.

arguments: (NAME &optional OBARRAY)
Ssymbols.c
Fmapatoms
Call FUNCTION on every symbol in OBARRAY.
OBARRAY defaults to the value of `obarray'.

arguments: (FUNCTION &optional OBARRAY)
Ssymbols.c
Fapropos-internal
Return a list of all symbols whose names contain match for REGEXP.
If optional 2nd arg PREDICATE is non-nil, only symbols for which
(funcall PREDICATE SYMBOL) returns non-nil are returned.

arguments: (REGEXP &optional PREDICATE)
Ssymbols.c
Fboundp
Return t if SYMBOL's value is not void.

arguments: (SYMBOL)
Ssymbols.c
Fglobally-boundp
Return t if SYMBOL has a global (non-bound) value.
This is for the byte-compiler; you really shouldn't be using this.

arguments: (SYMBOL)
Ssymbols.c
Ffboundp
Return t if SYMBOL's function definition is not void.

arguments: (SYMBOL)
Ssymbols.c
Fmakunbound
Make SYMBOL's value be void.

arguments: (SYMBOL)
Ssymbols.c
Ffmakunbound
Make SYMBOL's function definition be void.

arguments: (SYMBOL)
Ssymbols.c
Fsymbol-function
Return SYMBOL's function definition.  Error if that is void.

arguments: (SYMBOL)
Ssymbols.c
Fsymbol-plist
Return SYMBOL's property list.

arguments: (SYMBOL)
Ssymbols.c
Fsymbol-name
Return SYMBOL's name, a string.

arguments: (SYMBOL)
Ssymbols.c
Ffset
Set SYMBOL's function definition to NEWDEF, and return NEWDEF.

arguments: (SYMBOL NEWDEF)
Ssymbols.c
Fdefine-function
Set SYMBOL's function definition to NEWDEF, and return NEWDEF.
Associates the function with the current load file, if any.
If NEWDEF is a compiled-function object, stores the function name in
the `annotated' slot of the compiled-function (retrievable using
`compiled-function-annotation').

arguments: (SYMBOL NEWDEF)
Ssymbols.c
Fsubr-name
Return name of function SUBR.
SUBR must be a built-in function.  

arguments: (SUBR)
Ssymbols.c
Fspecial-operator-p
Return whether SUBR is a special operator.

A special operator is a built-in function (a subr, that is a function
implemented in C, not Lisp) which does not necessarily evaluate all its
arguments.  Much of the basic XEmacs Lisp syntax is implemented by means of
special operators; examples are `let', `condition-case', `setq', and so
on.

If you intend to write a Lisp function that does not necessarily evaluate
all its arguments, the portable (across emacs variants, and across Lisp
implementations) way to go about it is to write a macro instead.  See
`defmacro' and `backquote'.

arguments: (SUBR)
Ssymbols.c
Fsetplist
Set SYMBOL's property list to NEWPLIST, and return NEWPLIST.

arguments: (SYMBOL NEWPLIST)
Ssymbols.c
Fsymbol-value
Return SYMBOL's value.  Error if that is void.

arguments: (SYMBOL)
Ssymbols.c
Fset
Set SYMBOL's value to NEWVAL, and return NEWVAL.

arguments: (SYMBOL NEWVAL)
Ssymbols.c
Fdefault-boundp
Return t if SYMBOL has a non-void default value.
This is the value that is seen in buffers that do not have their own values
for this variable.

arguments: (SYMBOL)
Ssymbols.c
Fdefault-value
Return SYMBOL's default value.
This is the value that is seen in buffers that do not have their own values
for this variable.  The default value is meaningful for variables with
local bindings in certain buffers.

arguments: (SYMBOL)
Ssymbols.c
Fset-default
Set SYMBOL's default value to VALUE.  SYMBOL and VALUE are evaluated.
The default value is seen in buffers that do not have their own values
for this variable.

arguments: (SYMBOL VALUE)
Ssymbols.c
Fsetq-default
Set the default value of variable SYMBOL to VALUE.
SYMBOL, the variable name, is literal (not evaluated);
VALUE is an expression and it is evaluated.
The default value of a variable is seen in buffers
that do not have their own values for the variable.

More generally, you can use multiple variables and values, as in
  (setq-default SYMBOL VALUE SYMBOL VALUE...)
This sets each SYMBOL's default value to the corresponding VALUE.
The VALUE for the Nth SYMBOL can refer to the new default values
of previous SYMBOLs.Ssymbols.c
Fmake-variable-buffer-local
Make VARIABLE have a separate value for each buffer.
At any time, the value for the current buffer is in effect.
There is also a default value which is seen in any buffer which has not yet
set its own value.
Using `set' or `setq' to set the variable causes it to have a separate value
for the current buffer if it was previously using the default value.
The function `default-value' gets the default value and `set-default'
sets it.

arguments: (VARIABLE)
Ssymbols.c
Fmake-local-variable
Make VARIABLE have a separate value in the current buffer.
Other buffers will continue to share a common default value.
(The buffer-local value of VARIABLE starts out as the same value
VARIABLE previously had.  If VARIABLE was void, it remains void.)
See also `make-variable-buffer-local'.

If the variable is already arranged to become local when set,
this function causes a local value to exist for this buffer,
just as setting the variable would do.

Do not use `make-local-variable' to make a hook variable buffer-local.
Use `make-local-hook' instead.

arguments: (VARIABLE)
Ssymbols.c
Fkill-local-variable
Make VARIABLE no longer have a separate value in the current buffer.
From now on the default value will apply in this buffer.

arguments: (VARIABLE)
Ssymbols.c
Fkill-console-local-variable
Make VARIABLE no longer have a separate value in the selected console.
From now on the default value will apply in this console.

arguments: (VARIABLE)
Ssymbols.c
Fsymbol-value-in-buffer
Return the value of SYMBOL in BUFFER, or UNBOUND-VALUE if it is unbound.

arguments: (SYMBOL BUFFER &optional UNBOUND-VALUE)
Ssymbols.c
Fsymbol-value-in-console
Return the value of SYMBOL in CONSOLE, or UNBOUND-VALUE if it is unbound.

arguments: (SYMBOL CONSOLE &optional UNBOUND-VALUE)
Ssymbols.c
Fbuilt-in-variable-type
If SYMBOL is a built-in variable, return info about this; else return nil.
The returned info will be a symbol, one of

`object'		A simple built-in variable.
`const-object'		Same, but cannot be set.
`integer'		A built-in integer variable.
`const-integer'		Same, but cannot be set.
`boolean'		A built-in boolean variable.
`const-boolean'		Same, but cannot be set.
`const-specifier'	Always contains a specifier; e.g. `has-modeline-p'.
`current-buffer'	A built-in buffer-local variable.
`const-current-buffer'	Same, but cannot be set.
`default-buffer'	Forwards to the default value of a built-in
			buffer-local variable.
`selected-console'	A built-in console-local variable.
`const-selected-console' Same, but cannot be set.
`default-console'	Forwards to the default value of a built-in
			console-local variable.

arguments: (SYMBOL)
Ssymbols.c
Flocal-variable-p
Return t if SYMBOL's value is local to BUFFER.
If optional third arg AFTER-SET is non-nil, return t if SYMBOL would be
buffer-local after it is set, regardless of whether it is so presently.
A nil value for BUFFER is *not* the same as (current-buffer), but means
"no buffer".  Specifically:

-- If BUFFER is nil and AFTER-SET is nil, a return value of t indicates that
   the variable is one of the special built-in variables that is always
   buffer-local. (This includes `buffer-file-name', `buffer-read-only',
   `buffer-undo-list', and others.)

-- If BUFFER is nil and AFTER-SET is t, a return value of t indicates that
   the variable has had `make-variable-buffer-local' applied to it.

arguments: (SYMBOL BUFFER &optional AFTER-SET)
Ssymbols.c
Fcustom-variable-p
Return non-nil if SYMBOL names a custom variable.
Does not follow the variable alias chain.

arguments: (SYMBOL)
Ssymbols.c
Fuser-variable-p
Return t if SYMBOL names a variable intended to be set and modified by users.
(The alternative is a variable used internally in a Lisp program.)
A symbol names a user variable if
(1) the first character of its documentation is `*', or
(2) it is customizable (`custom-variable-p' gives t), or
(3) it names a variable alias that eventually resolves to another user variable.

The GNU Emacs implementation of `user-variable-p' returns nil if there is a
loop in the chain of symbols.  Since this is indistinguishable from the case
where a symbol names a non-user variable, XEmacs signals a
`cyclic-variable-indirection' error instead; use `condition-case' to catch
this error if you really want to avoid this.

arguments: (SYMBOL)
Ssymbols.c
Fdontusethis-set-symbol-value-handler
Don't you dare use this.
If you do, suffer the wrath of Ben, who is likely to rename
this function (or change the semantics of its arguments) without
pity, thereby invalidating your code.

arguments: (VARIABLE HANDLER-TYPE HANDLER &optional HARG KEEP-EXISTING)
Ssymbols.c
Fdefvaralias
Define a variable as an alias for another variable.
Thenceforth, any operations performed on VARIABLE will actually be
performed on ALIASED.  Both VARIABLE and ALIASED should be symbols.
If ALIASED is nil and VARIABLE is an existing alias, remove that alias.
ALIASED can itself be an alias, and the chain of variable aliases
will be followed appropriately.
If VARIABLE already has a value, this value will be shadowed
until the alias is removed, at which point it will be restored.
Currently VARIABLE cannot be a built-in variable, a variable that
has a buffer-local value in any buffer, or the symbols nil or t.
(ALIASED, however, can be any type of variable.)

Optional argument DOCSTRING is documentation for VARIABLE in its use as an
alias for ALIASED.  The XEmacs help code ignores this documentation, using
the documentation of ALIASED instead, and the docstring, if specified, is
not shadowed in the same way that the value is.  Only use it if you know
what you're doing.

arguments: (VARIABLE ALIASED &optional DOCSTRING)
Ssymbols.c
Fvariable-alias
If VARIABLE is an alias of another variable, return that variable.
VARIABLE should be a symbol.  If VARIABLE is not an alias, return nil.
Variable aliases are created with `defvaralias'.  See also
`indirect-variable'.

arguments: (VARIABLE &optional FOLLOW-PAST-LISP-MAGIC)
Ssymbols.c
Findirect-variable
Return the variable at the end of OBJECT's variable-alias chain.
If OBJECT is a symbol, follow all variable aliases and return
the final (non-aliased) symbol.  Variable aliases are created with
the function `defvaralias'.
If OBJECT is not a symbol, just return it.
Signal a cyclic-variable-indirection error if there is a loop in the
variable chain of symbols.

arguments: (OBJECT &optional FOLLOW-PAST-LISP-MAGIC)
Ssymbols.c
Fvariable-binding-locus
Return a value indicating where VARIABLE's current binding comes from.
If the current binding is buffer-local, the value is the current buffer.
If the current binding is global (the default), the value is nil. 

arguments: (VARIABLE)
Ssymbols.c
Vobarray
Symbol table for use by `intern' and `read'.
It is a vector whose length ought to be prime for best results.
The vector's contents don't make sense if examined from Lisp programs;
to find all the symbols in an obarray, use `mapatoms'.Ssyntax.c
Fsyntax-table-p
Return t if OBJECT is a syntax table.

arguments: (OBJECT)
Ssyntax.c
Fsyntax-table
Return the current syntax table of BUFFER.
BUFFER defaults to the current buffer.

arguments: (&optional BUFFER)
Ssyntax.c
Fmirror-syntax-table
Return the current mirror syntax table of BUFFER.
BUFFER defaults to the current buffer.  Only useful in debugging internals.

arguments: (&optional BUFFER)
Ssyntax.c
Fsyntax-cache-info
Return a list (START END PREV_CHANGE NEXT_CHANGE) for BUFFER's syntax cache.
BUFFER defaults to the current buffer.

The elements correspond to members of struct syntax_cache of the same names.
START and END should be markers.  PREV_CHANGE and NEXT_CHANGE are integers.
Only useful in debugging internals.

arguments: (&optional BUFFER)
Ssyntax.c
Fstandard-syntax-table
Return the standard syntax table, used for new buffers.

arguments: ()
Ssyntax.c
Fcopy-syntax-table
Return a new syntax table which is a copy of SYNTAX-TABLE.
SYNTAX-TABLE defaults to the standard syntax table.

arguments: (&optional SYNTAX-TABLE)
Ssyntax.c
Fset-syntax-table
Select SYNTAX-TABLE as the new syntax table for BUFFER.
BUFFER defaults to the current buffer if omitted.

arguments: (SYNTAX-TABLE &optional BUFFER)
Ssyntax.c
Fsyntax-designator-chars
Return the string of the recognized syntax designator chars.
The chars are indexed by their internal syntax codes, starting at 0.

arguments: ()
Ssyntax.c
Fchar-syntax
Return the syntax code of CHARACTER, designated by a character.
Optional SYNTAX-TABLE defaults to the current buffer's syntax table.
See `modify-syntax-entry' for the designators of the defined syntax codes.

arguments: (CHARACTER &optional SYNTAX-TABLE)
Ssyntax.c
Fmatching-paren
Return the matching parenthesis of CHARACTER, or nil if none.
Optional SYNTAX-TABLE defaults to the current buffer's syntax table.

arguments: (CHARACTER &optional SYNTAX-TABLE)
Ssyntax.c
Fforward-word
Move point forward COUNT words in BUFFER (backward if COUNT is negative).
COUNT defaults to 1, and BUFFER defaults to the current buffer.

Return t if the motion successfully crosses COUNT words, otherwise nil (if
the motion would cross the buffer boundary).

The characters that are moved over are added to the region if the region
is active, the Shift key is held down, a motion key is used to invoke this
command, and `shifted-motion-keys-select-region' is non-nil; see
the documentation for this variable for more details.

arguments: (&optional COUNT BUFFER)
Ssyntax.c
Fforward-comment
Move forward across COUNT comments in BUFFER (backwards if COUNT is negative).
COUNT defaults to 1, and BUFFER defaults to the current buffer.

Stop scanning if we find something other than a comment or whitespace.
Set point to where scanning stops.
Return t if the motion successfully crosses COUNT comments, otherwise nil (if
the motion would cross the buffer boundary or encounters a noncomment token).

arguments: (&optional COUNT BUFFER)
Ssyntax.c
Fscan-lists
Scan from position FROM across COUNT lists starting from nesting DEPTH.
Returns the position thus found.
Optional BUFFER defaults to the current buffer.
If optional NOERROR is non-nil, scan-lists will return nil instead of
signalling an error when attempting to cross a buffer boundary.

If DEPTH is nonzero, paren depth begins counting from that value,
only places where the depth in parentheses becomes zero
are candidates for stopping; COUNT such places are counted.
Thus, a positive value for DEPTH means go out levels.

Comments are ignored if `parse-sexp-ignore-comments' is non-nil.

If the beginning or end of (the accessible part of) the buffer is reached
and the depth is wrong, an error is signaled.
If the depth is right but the count is not used up, nil is returned.


arguments: (FROM COUNT DEPTH &optional BUFFER NOERROR)
Ssyntax.c
Fscan-sexps
Scan from position FROM by COUNT balanced expressions.
Returns the position thus found.

If COUNT is negative, scan backwards.
Optional BUFFER defaults to the current buffer.
If optional NOERROR is non-nil, scan-sexps will return nil instead of
signalling an error.

Comments are ignored if `parse-sexp-ignore-comments' is non-nil.

If the beginning or end of (the accessible part of) the buffer is reached
in the middle of a parenthetical grouping, an error is signaled.
If the beginning or end is reached between groupings
but before count is used up, nil is returned.

arguments: (FROM COUNT &optional BUFFER NOERROR)
Ssyntax.c
Fbackward-prefix-chars
Move point backward over any number of chars with quote or prefix syntax.
Optional BUFFER defaults to the current buffer.

arguments: (&optional BUFFER)
Ssyntax.c
Fparse-partial-sexp
Parse Lisp syntax starting at FROM until TO; return status of parse at TO.
Parsing stops at TO or when certain criteria are met;
 point is set to where parsing stops.
If fifth arg OLDSTATE is omitted or nil,
 parsing assumes that FROM is the beginning of a function.
Value is a list of nine elements describing final state of parsing:
 0. depth in parens.
 1. character address of start of innermost containing list; nil if none.
 2. character address of start of last complete sexp terminated.
 3. non-nil if inside a string.
    (It is the character that will terminate the string,
     or t if the string should be terminated by an explicit
     `syntax-table' property.)
 4. t if inside a comment.
 5. t if following a quote character.
 6. the minimum paren-depth encountered during this scan.
 7. nil if in comment style a, or not in a comment; t if in comment style b;
    `syntax-table' if given by an explicit `syntax-table' property.
 8. character address of start of last comment or string; nil if none.
 9. Intermediate data for continuation of parsing (subject to change).
If third arg TARGETDEPTH is non-nil, parsing stops if the depth
in parentheses becomes equal to TARGETDEPTH.
Fourth arg STOPBEFORE non-nil means stop when come to
 any character that starts a sexp.
Fifth arg OLDSTATE is a nine-element list like what this function returns.
It is used to initialize the state of the parse.  Its second and third
elements are ignored.
Sixth arg COMMENTSTOP non-nil means stop at the start of a comment. If it
is `syntax-table', stop after the start of a comment or a string, or after
the end of a comment or string.
Seventh arg BUFFER specifies the buffer to do the parsing in, and defaults
to the current buffer.

arguments: (FROM TO &optional TARGETDEPTH STOPBEFORE OLDSTATE COMMENTSTOP BUFFER)
Ssyntax.c
Vparse-sexp-ignore-comments
If non-nil, `forward-sexp' etc. treat comments as whitespace.Ssyntax.c
Vlookup-syntax-properties
If non-nil, `forward-sexp' etc. respect the `syntax-table' text property.
This property can be placed on buffers or strings and can be used to explicitly
specify the syntax table to be used for looking up the syntax of the chars
having this property, or to directly specify the syntax of the chars.

The value of this property should be either a syntax table, or a cons
of the form (SYNTAXCODE . MATCHCHAR), SYNTAXCODE being the numeric
syntax code, MATCHCHAR being nil or the character to match (which is
relevant only when the syntax code is of an open or close type).Ssyntax.c
Vwords-include-escapes
If non-nil, `forward-word' etc. treat escape characters as parts of words.Stext.c
Fmake-char
Make a character from CHARSET and octets ARG1 and ARG2.
ARG2 is required only for characters from two-dimensional charsets.

Each octet should be in the range 32 through 127 for a 96 or 96x96
charset and 33 through 126 for a 94 or 94x94 charset. (Most charsets
are either 96 or 94x94.) Note that this is 32 more than the values
typically given for 94x94 charsets.  When two octets are required, the
order is "standard" -- the same as appears in ISO-2022 encodings,
reference tables, etc.

(Note the following non-obvious result: Computerized translation
tables often encode the two octets as the high and low bytes,
respectively, of a hex short, while when there's only one octet, it
goes in the low byte.  When decoding such a value, you need to treat
the two cases differently when calling make-char: One is (make-char
CHARSET HIGH LOW), the other is (make-char CHARSET LOW).)

For example, (make-char 'latin-iso8859-2 185) or (make-char
'latin-iso8859-2 57) will return the Latin 2 character s with caron.

As another example, the Japanese character for "kawa" (stream), which
looks something like this:

   |     |
   |  |  |
   |  |  |
   |  |  |
  /      |

appears in the Unicode Standard (version 2.0) on page 7-287 with the
following values (see also page 7-4):

U 5DDD     (Unicode)
G 0-2008   (GB 2312-80)
J 0-3278   (JIS X 0208-1990)
K 0-8425   (KS C 5601-1987)
B A474     (Big Five)
C 1-4455   (CNS 11643-1986 (1st plane))
A 213C34   (ANSI Z39.64-1989)

These are equivalent to:

(make-char 'chinese-gb2312 52 40)
(make-char 'japanese-jisx0208 64 110)
(make-char 'korean-ksc5601 116 57)
(make-char 'chinese-cns11643-1 76 87)
(decode-big5-char '(164 . 116))

(All codes above are two decimal numbers except for Big Five and ANSI
Z39.64, which we don't support.  We add 32 to each of the decimal
numbers.  Big Five is split in a rather hackish fashion into two
charsets, `big5-1' and `big5-2', due to its excessive size -- 94x157,
with the first codepoint in the range 0xA1 to 0xFE and the second in
the range 0x40 to 0x7E or 0xA1 to 0xFE.  `decode-big5-char' is used to
generate the char from its codes, and `encode-big5-char' extracts the
codes.)

When compiled without MULE, this function does not do much, but it's
provided for compatibility.  In this case, the following CHARSET symbols
are allowed:

`ascii' -- ARG1 should be in the range 0 through 127.
`control-1' -- ARG1 should be in the range 128 through 159.
 else -- ARG1 is coerced to be between 0 and 255, and then the high
         bit is set.

 `int-to-char of the resulting ARG1' is returned, and ARG2 is always ignored. 

arguments: (CHARSET ARG1 &optional ARG2)
Stext.c
Fchar-charset
Return the character set of char CH.

arguments: (CH)
Stext.c
Fchar-octet
Return the octet numbered N (should be 0 or 1) of char CH.
N defaults to 0 if omitted.

arguments: (CH &optional N)
Stext.c
Fsplit-char
Return list of charset and one or two position-codes of CHAR.

arguments: (CHARACTER)
Stext.c
Fmake-composite-char
Convert a string into a single composite character.
The character is the result of overstriking all the characters in
the string.

arguments: (STRING)
Stext.c
Fcomposite-char-string
Return a string of the characters comprising a composite character.

arguments: (CH)
Sconsole-tty.c
Fconsole-tty-terminal-type
Return the terminal type of TTY console CONSOLE.

arguments: (&optional CONSOLE)
Sconsole-tty.c
Fconsole-tty-controlling-process
Return the controlling process of tty console CONSOLE.

arguments: (&optional CONSOLE)
Sconsole-tty.c
Fconsole-tty-input-coding-system
Return the input coding system of tty console CONSOLE.

arguments: (&optional CONSOLE)
Sconsole-tty.c
Fset-console-tty-input-coding-system
Set the input coding system of tty console CONSOLE to CODESYS.
CONSOLE defaults to the selected console.
CODESYS defaults to the value of `keyboard-coding-system'.

arguments: (&optional CONSOLE CODESYS)
Sconsole-tty.c
Fconsole-tty-output-coding-system
Return TTY CONSOLE's output coding system.

arguments: (&optional CONSOLE)
Sconsole-tty.c
Fset-console-tty-output-coding-system
Set the coding system of tty output of console CONSOLE to CODESYS.
CONSOLE defaults to the selected console.
CODESYS defaults to the value of `terminal-coding-system'.

arguments: (&optional CONSOLE CODESYS)
Sconsole-tty.c
Fconsole-tty-multiple-width
Return whether CONSOLE treats East Asian double-width chars as such. 

CONSOLE defaults to the selected console.  Without XEmacs support for
double-width characters, this always gives nil.

arguments: (&optional CONSOLE)
Sconsole-tty.c
Fset-console-tty-multiple-width
Set whether CONSOLE treats East Asian double-width characters as such.

CONSOLE defaults to the selected console, and VALUE defaults to nil.
Without XEmacs support for double-width characters, this throws an error if
VALUE is non-nil.

arguments: (&optional CONSOLE VALUE)
Sconsole-tty.c
Fset-console-tty-coding-system
Set the input and output coding systems of tty console CONSOLE to CODESYS.
CONSOLE defaults to the selected console.
If CODESYS is nil, the values of `keyboard-coding-system' and
`terminal-coding-system' will be used for the input and
output coding systems of CONSOLE.

arguments: (&optional CONSOLE CODESYS)
Sconsole-tty.c
Vtty-seen-characters
Hash table of non-ASCII characters the TTY subsystem has seen.Sframe-tty.c
Vdefault-tty-frame-plist
Plist of default frame-creation properties for tty frames.
These are in addition to and override what is specified in
`default-frame-plist', but are overridden by the arguments to the
particular call to `make-frame'.Sfontcolor-tty.c
Fregister-tty-color
Register COLOR as a recognized TTY color.
COLOR should be a string.
Strings FG-STRING and BG-STRING should specify the escape sequences to
 set the foreground and background to the given color, respectively.

arguments: (COLOR FG-STRING BG-STRING)
Sfontcolor-tty.c
Funregister-tty-color
Unregister COLOR as a recognized TTY color.

arguments: (COLOR)
Sfontcolor-tty.c
Ffind-tty-color
Look up COLOR in the list of registered TTY colors.
If it is found, return a list (FG-STRING BG-STRING) of the escape
sequences used to set the foreground and background to the color, respectively.
If it is not found, return nil.

arguments: (COLOR)
Sfontcolor-tty.c
Fset-tty-dynamic-color-specs
Set the dynamic color specifications for TTY's.
FG and BG should be either nil or vaguely printf-like strings,
where each occurrence of %s is replaced with the color name and each
occurrence of %% is replaced with a single % character.

arguments: (FG BG)
Sfontcolor-tty.c
Ftty-dynamic-color-specs
Return the dynamic color specifications for TTY's as a list of (FG BG).
See `set-tty-dynamic-color-specs'.

arguments: ()
Sundo.c
Fundo-boundary
Mark a boundary between units of undo.
An undo command will stop at this point,
but another undo command will undo to the previous boundary.

arguments: ()
Sundo.c
Fprimitive-undo
Undo COUNT records from the front of the list LIST.
Return what remains of the list.

arguments: (COUNT LIST)
Sunicode.c
Funicode-precedence-list
Return the precedence order among charsets used for Unicode decoding.

Value is a list of charsets, which are searched in order for a translation
matching a given Unicode character.

The highest precedence is given to the language-specific precedence list of
charsets, defined by `set-language-unicode-precedence-list'.  These are
followed by charsets in the default precedence list, defined by
`set-default-unicode-precedence-list'.  Charsets occurring multiple times are
given precedence according to their first occurrence in either list.  These
are followed by the remaining charsets, in some arbitrary order.

The language-specific precedence list is meant to be set as part of the
language environment initialization; the default precedence list is meant
to be set by the user.

#### NOTE: This interface may be changed.

arguments: ()
Sunicode.c
Fset-language-unicode-precedence-list
Set the language-specific precedence of charsets in Unicode decoding.
LIST is a list of charsets.
See `unicode-precedence-list' for more information.

#### NOTE: This interface may be changed.

arguments: (LIST)
Sunicode.c
Flanguage-unicode-precedence-list
Return the language-specific precedence list used for Unicode decoding.
See `unicode-precedence-list' for more information.

#### NOTE: This interface may be changed.

arguments: ()
Sunicode.c
Fset-default-unicode-precedence-list
Set the default precedence list used for Unicode decoding.
This is intended to be set by the user.  See
`unicode-precedence-list' for more information.

#### NOTE: This interface may be changed.

arguments: (LIST)
Sunicode.c
Fdefault-unicode-precedence-list
Return the default precedence list used for Unicode decoding.
See `unicode-precedence-list' for more information.

#### NOTE: This interface may be changed.

arguments: ()
Sunicode.c
Fset-unicode-conversion
Add conversion information between Unicode codepoints and characters.
Conversions for U+0000 to U+00FF are hardwired to ASCII, Control-1, and
Latin-1.  Attempts to set these values will raise an error.

CHARACTER is one of the following:

-- A character (in which case CODE must be a non-negative integer; values
   above 2^20 - 1 are allowed for the purpose of specifying private
   characters, but are illegal in standard Unicode---they will cause errors
   when converted to utf-16)
-- A vector of characters (in which case CODE must be a vector of integers
   of the same length)

arguments: (CHARACTER CODE)
Sunicode.c
Fchar-to-unicode
Convert character to Unicode codepoint.
When there is no international support (i.e. the `mule' feature is not
present), this function simply does `char-to-int'.

arguments: (CHARACTER)
Sunicode.c
Funicode-to-char
Convert Unicode codepoint to character.
CODE should be a non-negative integer.
If CHARSETS is given, it should be a list of charsets, and only those
charsets will be consulted, in the given order, for a translation.
Otherwise, the default ordering of all charsets will be given (see
`set-unicode-charset-precedence').

When there is no international support (i.e. the `mule' feature is not
present), this function simply does `int-to-char' and ignores the CHARSETS
argument.

If the CODE would not otherwise be converted to an XEmacs character, and the
list of character sets to be consulted is nil or the default, a new XEmacs
character will be created for it in one of the `jit-ucs-charset' Mule
character sets, and that character will be returned.  

This is limited to around 400,000 characters per XEmacs session, though, so
while normal usage will not be problematic, things like:

(dotimes (i #x110000) (decode-char 'ucs i))

will eventually error.  The long-term solution to this is Unicode as an
internal encoding. 

arguments: (CODE &optional CHARSETS)
Sunicode.c
Fload-unicode-mapping-table
Load Unicode tables with the Unicode mapping data in FILENAME for CHARSET.
Data is text, in the form of one translation per line -- charset
codepoint followed by Unicode codepoint.  Numbers are decimal or hex
(preceded by 0x).  Comments are marked with a #.  Charset codepoints
for two-dimensional charsets have the first octet stored in the
high 8 bits of the hex number and the second in the low 8 bits.

If START and END are given, only charset codepoints within the given
range will be processed.  (START and END apply to the codepoints in the
file, before OFFSET is applied.)

If OFFSET is given, that value will be added to all charset codepoints
in the file to obtain the internal charset codepoint.  (We assume
that octets in the table are in the range 33 to 126 or 32 to 127.  If
you have a table in ku-ten form, with octets in the range 1 to 94, you
will have to use an offset of 5140, i.e. 0x2020.)

FLAGS, if specified, control further how the tables are interpreted
and are used to special-case certain known format deviations in the
Unicode tables or in the charset:

`ignore-first-column'
  The JIS X 0208 tables have 3 columns of data instead of 2.  The first
  column contains the Shift-JIS codepoint, which we ignore.
`big5'
  The charset codepoints are Big Five codepoints; convert it to the
  hacked-up Mule codepoint in `chinese-big5-1' or `chinese-big5-2'.

arguments: (FILENAME CHARSET &optional START END OFFSET FLAGS)
Sunicode.c
Fset-unicode-query-skip-chars-args
Specify strings as matching characters known to Unicode coding systems.

QUERY-STRING is a string matching characters that can unequivocally be
encoded by the Unicode coding systems.

INVALID-STRING is a string to match XEmacs characters that represent known
octets on disk, but that are invalid sequences according to Unicode. 

UTF-8-INVALID-STRING is a more restrictive string to match XEmacs characters
that are invalid UTF-8 octets.

All three strings are in the format accepted by `skip-chars-forward'. 

arguments: (QUERY-STRING INVALID-STRING UTF-8-INVALID-STRING)
Sunicode.c
Vunicode-registries
Vector describing the X11 registries searched when using fallback fonts.

"Fallback fonts" here includes by default those fonts used by redisplay when
displaying charsets for which the `encode-as-utf-8' property is true, and
those used when no font matching the charset's registries property has been
found (that is, they're probably Mule-specific charsets like Ethiopic or
IPA.)Sconsole-x.c
Vwedge-metacity
When non-nil, frame geometry management is backward-compatible.
This is known to create inflooping window jitter in metacity, et al.
It also does not conform to Xt conventions for geometry management.
Specifically, all frame resizes, XEmacs-initiated or not, update WM_HINTS.
Furthermore, geometry changes occur in the widget resize method.

The default is nil.  This probably gives correct behavior regardless of the
window manager used.
This variable is deprecated and will be removed.Sdevice-x.c
Fx-debug-mode
With a true arg, make the connection to the X server synchronous.
With false, make it asynchronous.  Synchronous connections are much slower,
but are useful for debugging. (If you get X errors, make the connection
synchronous, and use a debugger to set a breakpoint on `x_error_handler'.
Your backtrace of the C stack will now be useful.  In asynchronous mode,
the stack above `x_error_handler' isn't helpful because of buffering.)
If DEVICE is not specified, the selected device is assumed.

Calling this function is the same as calling the C function `XSynchronize',
or starting the program with the `-sync' command line argument.

arguments: (ARG &optional DEVICE)
Sdevice-x.c
Fx-get-resource
Retrieve an X resource from the resource manager.

The first arg is the name of the resource to retrieve, such as "font".
The second arg is the class of the resource to retrieve, such as "Font".
The third arg must be one of the symbols `string', `integer', `natnum', or
  `boolean', specifying the type of object that the database is searched for.
The fourth arg is the locale to search for the resources on, and can
  currently be a buffer, a frame, a device, or `global'.  If omitted, it
  defaults to `global'.
The fifth arg is the device to search for the resources on. (The resource
  database for a particular device is constructed by combining non-device-
  specific resources such as any command-line resources specified and any
  app-defaults files found [or the fallback resources supplied by XEmacs,
  if no app-defaults file is found] with device-specific resources such as
  those supplied using xrdb.) If omitted, it defaults to the device of
  LOCALE, if a device can be derived (i.e. if LOCALE is a frame or device),
  and otherwise defaults to the value of `default-x-device'.
The sixth arg NOERROR, if non-nil, means do not signal an error if a
  bogus resource specification was retrieved (e.g. if a non-integer was
  given when an integer was requested).  In this case, a warning is issued
  instead, unless NOERROR is t, in which case no warning is issued.

The resource names passed to this function are looked up relative to the
locale.

If you want to search for a subresource, you just need to specify the
resource levels in NAME and CLASS.  For example, NAME could be
"modeline.attributeFont", and CLASS "Face.AttributeFont".

Specifically,

1) If LOCALE is a buffer, a call

    (x-get-resource "foreground" "Foreground" 'string SOME-BUFFER)

is an interface to a C call something like

    XrmGetResource (db, "xemacs.buffer.BUFFER-NAME.foreground",
			"Emacs.EmacsLocaleType.EmacsBuffer.Foreground",
			"String");

2) If LOCALE is a frame, a call

    (x-get-resource "foreground" "Foreground" 'string SOME-FRAME)

is an interface to a C call something like

    XrmGetResource (db, "xemacs.frame.FRAME-NAME.foreground",
			"Emacs.EmacsLocaleType.EmacsFrame.Foreground",
			"String");

3) If LOCALE is a device, a call

    (x-get-resource "foreground" "Foreground" 'string SOME-DEVICE)

is an interface to a C call something like

    XrmGetResource (db, "xemacs.device.DEVICE-NAME.foreground",
			"Emacs.EmacsLocaleType.EmacsDevice.Foreground",
			"String");

4) If LOCALE is `global', a call

    (x-get-resource "foreground" "Foreground" 'string 'global)

is an interface to a C call something like

    XrmGetResource (db, "xemacs.foreground",
			"Emacs.Foreground",
			"String");

Note that for `global', no prefix is added other than that of the
application itself; thus, you can use this locale to retrieve
arbitrary application resources, if you really want to.

The returned value of this function is nil if the queried resource is not
found.  If the third arg is `string', a string is returned, and if it is
`integer', an integer is returned.  If the third arg is `boolean', then the
returned value is the list (t) for true, (nil) for false, and is nil to
mean ``unspecified''.

arguments: (NAME CLASS TYPE &optional LOCALE DEVICE NOERROR)
Sdevice-x.c
Fx-get-resource-prefix
Return the resource prefix for LOCALE on DEVICE.
The resource prefix is the strings used to prefix resources if
the LOCALE and DEVICE arguments were passed to `x-get-resource'.
The returned value is a cons of a name prefix and a class prefix.
For example, if LOCALE is a frame, the returned value might be
("xemacs.frame.FRAME-NAME" . "Emacs.EmacsLocaleType.EmacsFrame").
If no valid X device for resourcing can be obtained, this function
returns nil. (In such a case, `x-get-resource' would always return nil.)

arguments: (LOCALE &optional DEVICE)
Sdevice-x.c
Fx-put-resource
Add a resource to the resource database for DEVICE.
RESOURCE-LINE specifies the resource to add and should be a
standard resource specification.

arguments: (RESOURCE-LINE &optional DEVICE)
Sdevice-x.c
Fdefault-x-device
Return the default X device for resourcing.
This is the first-created X device that still exists.
See also `default-device'.

arguments: ()
Sdevice-x.c
Fx-display-visual-class
Return the visual class of the X display DEVICE is using.
This can be altered from the default at startup using the XResource "EmacsVisual".
The returned value will be one of the symbols `static-gray', `gray-scale',
`static-color', `pseudo-color', `true-color', or `direct-color'.

arguments: (&optional DEVICE)
Sdevice-x.c
Fx-display-visual-depth
Return the bitplane depth of the visual the X display DEVICE is using.

arguments: (&optional DEVICE)
Sdevice-x.c
Fx-server-vendor
Return the vendor ID string of the X server DEVICE is on.
Return the empty string if the vendor ID string cannot be determined.

arguments: (&optional DEVICE)
Sdevice-x.c
Fx-server-version
Return the version numbers of the X server DEVICE is on.
The returned value is a list of three integers: the major and minor
version numbers of the X Protocol in use, and the vendor-specific release
number.  See also `x-server-vendor'.

arguments: (&optional DEVICE)
Sdevice-x.c
Fx-valid-keysym-name-p
Return true if KEYSYM names a keysym that the X library knows about.
Valid keysyms are listed in the files /usr/include/X11/keysymdef.h and in
/usr/lib/X11/XKeysymDB, or whatever the equivalents are on your system.

arguments: (KEYSYM)
Sdevice-x.c
Fx-keysym-hash-table
Return a hash table containing a key for all keysyms on DEVICE.
DEVICE must be an X11 display device.  See `x-keysym-on-keyboard-p'.

arguments: (&optional DEVICE)
Sdevice-x.c
Fx-grab-pointer
Grab the pointer and restrict it to its current window.
If optional DEVICE argument is nil, the default device will be used.
If optional CURSOR argument is non-nil, change the pointer shape to that
 until `x-ungrab-pointer' is called (it should be an object returned by the
 `make-cursor-glyph' function).
If the second optional argument IGNORE-KEYBOARD is non-nil, ignore all
  keyboard events during the grab.
Returns t if the grab is successful, nil otherwise.

arguments: (&optional DEVICE CURSOR IGNORE-KEYBOARD)
Sdevice-x.c
Fx-ungrab-pointer
Release a pointer grab made with `x-grab-pointer'.
If optional first arg DEVICE is nil the default device is used.
If it is t the pointer will be released on all X devices.

arguments: (&optional DEVICE)
Sdevice-x.c
Fx-grab-keyboard
Grab the keyboard on the given device (defaulting to the selected one).
So long as the keyboard is grabbed, all keyboard events will be delivered
to emacs -- it is not possible for other X clients to eavesdrop on them.
Ungrab the keyboard with `x-ungrab-keyboard' (use an unwind-protect).
Returns t if the grab is successful, nil otherwise.

arguments: (&optional DEVICE)
Sdevice-x.c
Fx-ungrab-keyboard
Release a keyboard grab made with `x-grab-keyboard'.

arguments: (&optional DEVICE)
Sdevice-x.c
Fx-get-font-path
Get the X Server's font path.

See also `x-set-font-path'.

arguments: (&optional DEVICE)
Sdevice-x.c
Fx-set-font-path
Set the X Server's font path to FONT-PATH.

There is only one font path per server, not one per client.  Use this
sparingly.  It uncaches all of the X server's font information.

Font directories should end in the path separator and should contain
a file called fonts.dir usually created with the program mkfontdir.

Setting the FONT-PATH to nil tells the X server to use the default
font path.

See also `x-get-font-path'.

arguments: (FONT-PATH &optional DEVICE)
Sdevice-x.c
Vx-emacs-application-class
The X application class of the XEmacs process.
This controls, among other things, the name of the `app-defaults' file
that XEmacs will use.  For changes to this variable to take effect, they
must be made before the connection to the X server is initialized, that is,
this variable may only be changed before emacs is dumped, or by setting it
in the file lisp/term/x-win.el.

If this variable is nil on startup, the application uses `XEmacs'.  Versions
previous to 21.5.21 examined the resource database and used `XEmacs' if any
resources beginning with that string existed, and `Emacs' otherwise, for
greater backward compatibility. However, this has always tended to conflict
with GNU Emacs, so this behavior is deprecated--in the short term, you can
restore it in a post-21.5.21 XEmacs by setting the
USE_EMACS_AS_DEFAULT_APPLICATION_CLASS environment variable to some value,
but in the medium and long term, you should migrate your X resources.Sdevice-x.c
Vx-initial-argv-list
You don't want to know.
This is used during startup to communicate the remaining arguments in
`command-line-args-left' to the C code, which passes the args to
the X initialization code, which removes some args, and then the
args are placed back into `x-initial-arg-list' and thence into
`command-line-args-left'.  Perhaps `command-line-args-left' should
just reside in C.Sdevice-x.c
Vx-app-defaults-directory
Used by the Lisp code to communicate to the low level X initialization
where the localized init files are.Sevent-Xt.c
Vx-allow-sendevents
*Non-nil means to allow synthetic events.  Nil means they are ignored.
Beware: allowing emacs to process SendEvents opens a big security hole.Sevent-Xt.c
Vdebug-x-events
If non-zero, display debug information about X events that XEmacs sees.
Information is displayed on stderr.  Currently defined values are:

1 == non-verbose output
2 == verbose outputSevent-Xt.c
Vx-us-keymap-description
X11-specific vector describing the current keyboard hardware, and how to map
from its keycodes to those alphanumeric and punctuation characters that
would be produced by it if a US layout were configured in software.

We use this to make possible the usage of standard key bindings on keyboards
where the keys that those bindings assume are not available; for example, on
a Russian keyboard, one can type C-Cyrillic_che C-Cyrillic_a and have XEmacs
use the binding for C-x C-f, rather than give an error message that
C-Cyrillic_che C-Cyrillic_a is not bound.

Entries are either nil, which means the corresponding key code does not map
to a non-function key in the US layout, a single character, meaning it maps to
that character, or a vector of two characters, the first indicating the
unshifted mapping, the second the shifted mapping for the US layout.

`x-us-keymap-first-keycode' tells XEmacs the keycode of the first entry in
this vector. Sevent-Xt.c
Vx-us-keymap-first-keycode
The X11 keycode that the first entry in `x-us-keymap-description'
corresponds to.  See the documentation for that variable. 

The X11 documentation for XDisplayKeycodes says this can never be less than
8, but XEmacs doesn't enforce any limitation on what you set it to. Sframe-x.c
Fcde-start-drag-internal
Start a CDE drag from a buffer.
First argument is the event that started the drag (must be a
button-press-event),
second arg defines if the data should be treated as a buffer or
a filename transfer (set to nil for buffer transfer),
and the third argument is a list of data strings.
WARNING: can only handle plain/text and file: transfers!

arguments: (EVENT DRAGTYPE DRAGDATA)
Sframe-x.c
Fx-window-id
Get the ID of the X11 window.
This gives us a chance to manipulate the Emacs window from within a
different program.  Since the ID is an unsigned long, we return it as
a string.

arguments: (&optional FRAME)
Sframe-x.c
Vdefault-x-frame-plist
Plist of default frame-creation properties for X frames.
These override what is specified in the resource database and in
`default-frame-plist', but are overridden by the arguments to the
particular call to `make-frame'.

Note: In many cases, properties of a frame are available as specifiers
instead of through the frame-properties mechanism.

Here is a list of recognized frame properties, other than those
documented in `set-frame-properties' (they can be queried and
set at any time, except as otherwise noted):

  window-id			The X window ID corresponding to the
				frame.  May be set only at startup, and
				only if external widget support was
				compiled in; doing so causes the frame
				to be created as an "external widget"
				in another program that uses an existing
				window in the program rather than creating
				a new one.
  initially-unmapped		If non-nil, the frame will not be visible
				when it is created.  In this case, you
				need to call `make-frame-visible' to make
				the frame appear.
  popup				If non-nil, it should be a frame, and this
				frame will be created as a "popup" frame
				whose parent is the given frame.  This
				will make the window manager treat the
				frame as a dialog box, which may entail
				doing different things (e.g. not asking
				for positioning, and not iconifying
				separate from its parent).
  override-redirect		If non-nil, the frame will not be subject to
				window-manager control.  In particular, it
				will lack decorations, for more attractive
				appearance of balloon help, aka tooltips.
  inter-line-space		Not currently implemented.
  toolbar-shadow-thickness	Thickness of toolbar shadows.
  background-toolbar-color	Color of toolbar background.
  bottom-toolbar-shadow-color	Color of bottom shadows on toolbars.
				(*Not* specific to the bottom-toolbar.)
  top-toolbar-shadow-color	Color of top shadows on toolbars.
				(*Not* specific to the top-toolbar.)
  internal-border-width		Width of internal border around text area.
  border-width			Width of external border around text area.
  top				Y position (in pixels) of the upper-left
				outermost corner of the frame (i.e. the
				upper-left of the window-manager
				decorations).
  left				X position (in pixels) of the upper-left
				outermost corner of the frame (i.e. the
				upper-left of the window-manager
				decorations).
  border-color			Color of external border around text area.
  cursor-color			Color of text cursor.

See also `default-frame-plist', which specifies properties which apply
to all frames, not just X frames.Sglyphs-x.c
Fchange-subwindow-property
For the given SUBWINDOW, set PROPERTY to DATA, which is a string.
Subwindows are not currently implemented.

arguments: (SUBWINDOW PROPERTY DATA)
Sglyphs-x.c
Vx-bitmap-file-path
A list of the directories in which X bitmap files may be found.
If nil, this is initialized from the "*bitmapFilePath" resource.
This is used by the `make-image-instance' function (however, note that if
the environment variable XBMLANGPATH is set, it is consulted first).Sfontcolor-x.c
Vdebug-x-fonts
If non-zero, display debug information about X fontsSfontcolor-x.c
Vx-handle-non-fully-specified-fonts
If this is true then fonts which do not have all characters specified
will be considered to be proportional width even if they are actually
fixed-width.  If this is not done then characters which are supposed to
have 0 width may appear to actually have some width.

Note:  While setting this to t guarantees correct output in all
circumstances, it also causes a noticeable performance hit when using
fixed-width fonts.  Since most people don't use characters which could
cause problems this is set to nil by default.Sselect-x.c
Fx-selection-reply-timeout-internal



arguments: (ARG)
Sselect-x.c
Fx-get-cutbuffer-internal
Return the value of the named CUTBUFFER (typically CUT_BUFFER0).

arguments: (CUTBUFFER)
Sselect-x.c
Fx-store-cutbuffer-internal
Set the value of the named CUTBUFFER (typically CUT_BUFFER0) to STRING.

arguments: (CUTBUFFER STRING)
Sselect-x.c
Fx-rotate-cutbuffers-internal
Rotate the values of the cutbuffers by the given number of steps;
positive means move values forward, negative means backward.

arguments: (N)
Sselect-x.c
Vx-sent-selection-hooks
A function or functions to be called after we have responded to some
other client's request for the value of a selection that we own.  The
function(s) will be called with four arguments:
  - the name of the selection (typically PRIMARY, SECONDARY, or CLIPBOARD);
  - the name of the selection-type which we were requested to convert the
    selection into before sending (for example, STRING or LENGTH);
  - and whether we successfully transmitted the selection.
We might have failed (and declined the request) for any number of reasons,
including being asked for a selection that we no longer own, or being asked
to convert into a type that we don't know about or that is inappropriate.
This hook doesn't let you change the behavior of emacs's selection replies,
it merely informs you that they have happened.Sselect-x.c
Vx-selection-timeout
If the selection owner doesn't reply in this many seconds, we give up.
A value of 0 means wait as long as necessary.  This is initialized from the
"*selectionTimeout" resource (which is expressed in milliseconds).Sselect-x.c
Vx-selection-strict-motif-ownership
*If nil and XEmacs already owns the clipboard, don't own it again in the
Motif way. Owning the selection on the Motif way does a huge amount of
X protocol, and it makes killing text incredibly slow when using an
X terminal.  However, when enabled Motif text fields don't bother to look up
the new value, and you can't Copy from a buffer, Paste into a text
field, then Copy something else from the buffer and paste it into the
text field; it pastes the first thing again.Smenubar-x.c
Faccelerate-menu
Make the menubar active.  Menu items can be selected using menu accelerators
or by actions defined in menu-accelerator-map.

arguments: ()
Swidget.c
Fwidget-plist-member
Like `plist-get', but returns the tail of PLIST whose car is PROP.

arguments: (PLIST PROP)
Swidget.c
Fwidget-put
In WIDGET set PROPERTY to VALUE.
The value can later be retrieved with `widget-get'.

arguments: (WIDGET PROPERTY VALUE)
Swidget.c
Fwidget-get
In WIDGET, get the value of PROPERTY.
The value could either be specified when the widget was created, or
later with `widget-put'.

arguments: (WIDGET PROPERTY)
Swidget.c
Fwidget-apply
Apply the value of WIDGET's PROPERTY to the widget itself.
ARGS are passed as extra arguments to the function.

arguments: (WIDGET PROPERTY &rest ARGS)Swindow.c
Fwindow-truncated-p
Returns non-nil if text in the window is truncated.

arguments: (&optional WINDOW)
Swindow.c
Fwindowp
Return t if OBJECT is a window.

arguments: (OBJECT)
Swindow.c
Fwindow-live-p
Return t if OBJECT is a window which is currently visible.

arguments: (OBJECT)
Swindow.c
Fselected-window
Return the window that the cursor now appears in and commands apply to.
If the optional argument CON-DEV-OR-FRAME is specified and is a frame, return
the selected window used by that frame.  If CON-DEV-OR-FRAME is a device,
then the selected frame on that device will be used.  If CON-DEV-OR-FRAME
is a console, the selected frame on that console's selected device will
be used.  Otherwise, the selected frame is used.

arguments: (&optional CON-DEV-OR-FRAME)
Swindow.c
Flast-nonminibuf-window
Return the last selected window that is not a minibuffer window.
If the optional argument CON-DEV-OR-FRAME is specified and is a frame,
return the last non-minibuffer window used by that frame.  If
CON-DEV-OR-FRAME is a device, then the selected frame on that device
will be used.  If CON-DEV-OR-FRAME is a console, the selected frame on
that console's selected device will be used.  Otherwise, the selected
frame is used.

arguments: (&optional CON-DEV-OR-FRAME)
Swindow.c
Fminibuffer-window
Return the window used now for minibuffers.
If the optional argument CON-DEV-OR-FRAME is specified and is a frame, return
the minibuffer window used by that frame.  If CON-DEV-OR-FRAME is a device,
then the selected frame on that device will be used.  If CON-DEV-OR-FRAME
is a console, the selected frame on that console's selected device will
be used.  Otherwise, the selected frame is used.

arguments: (&optional CON-DEV-OR-FRAME)
Swindow.c
Fwindow-minibuffer-p
Return non-nil if WINDOW is a minibuffer window.

arguments: (&optional WINDOW)
Swindow.c
Fwindow-first-hchild
Return the first horizontal child of WINDOW, or nil.

arguments: (WINDOW)
Swindow.c
Fwindow-first-vchild
Return the first vertical child of WINDOW, or nil.

arguments: (WINDOW)
Swindow.c
Fwindow-next-child
Return the next window on the same level as WINDOW, or nil.

arguments: (WINDOW)
Swindow.c
Fwindow-previous-child
Return the previous window on the same level as WINDOW, or nil.

arguments: (WINDOW)
Swindow.c
Fwindow-parent
Return the parent of WINDOW, or nil.

arguments: (WINDOW)
Swindow.c
Fwindow-lowest-p
Return non-nil if WINDOW is along the bottom of its frame.

arguments: (WINDOW)
Swindow.c
Fwindow-highest-p
Return non-nil if WINDOW is along the top of its frame.

arguments: (WINDOW)
Swindow.c
Fwindow-leftmost-p
Return non-nil if WINDOW is along the left edge of its frame.

arguments: (WINDOW)
Swindow.c
Fwindow-rightmost-p
Return non-nil if WINDOW is along the right edge of its frame.

arguments: (WINDOW)
Swindow.c
Fpos-visible-in-window-p
Returns t if position POS is currently on the frame in WINDOW.
Returns nil if that position is scrolled vertically out of view.
If a character is only partially visible, nil is returned, unless the
optional argument PARTIALLY is non-nil.
POS defaults to point in WINDOW's buffer; WINDOW, to the selected window.

arguments: (&optional POS WINDOW PARTIALLY)
Swindow.c
Fwindow-buffer
Return the buffer that WINDOW is displaying.

arguments: (&optional WINDOW)
Swindow.c
Fwindow-frame
Return the frame that window WINDOW is on.

arguments: (&optional WINDOW)
Swindow.c
Fwindow-height
Return the number of default lines in WINDOW.
This actually works by dividing the window's pixel height (including
the modeline and horizontal scrollbar, if any) by the height of the
default font; therefore, the number of displayed lines will probably
be different.
Use `window-height' to get consistent results in geometry calculations.
Use `window-displayed-height' to get the actual number of lines
currently displayed in a window.

The names are somewhat confusing; here's a table to help out:

                    width                         height
-------------------------------------------------------------------------
w/o gutters
  (rows/columns)    window-width                  window-text-area-height
  (pixels)          window-text-area-pixel-width  window-text-area-pixel-height

with gutters
  (rows/columns)    window-full-width             window-height
  (pixels)          window-pixel-width            window-pixel-height

actually displayed
  (rows/columns)    ----                          window-displayed-height
  (pixels)          ----                     window-displayed-text-pixel-height

arguments: (&optional WINDOW)
Swindow.c
Fwindow-displayed-height
Return the number of lines currently displayed in WINDOW.
This counts the actual number of lines displayed in WINDOW
(as opposed to `window-height').  The modeline and horizontal
scrollbar do not count as lines.  If there is some blank space
between the end of the buffer and the end of the window, this
function pretends that there are lines of text in the default
font there.

arguments: (&optional WINDOW)
Swindow.c
Fwindow-pixel-height
Return the height of WINDOW in pixels.  Defaults to current window.
This includes the window's modeline and horizontal scrollbar (if any).

arguments: (&optional WINDOW)
Swindow.c
Fwindow-text-area-height
Return the number of default lines in the text area of WINDOW.
This actually works by dividing the window's text area pixel height (i.e.
excluding the modeline and horizontal scrollbar, if any) by the height of the
default font; therefore, the number of displayed lines will probably
be different.
See also `window-height' and `window-displayed-height'.

arguments: (&optional WINDOW)
Swindow.c
Fwindow-text-area-pixel-height
Return the height in pixels of the text-displaying portion of WINDOW.
Unlike `window-pixel-height', the space occupied by the modeline and
horizontal scrollbar, if any, is not counted.

arguments: (&optional WINDOW)
Swindow.c
Fwindow-displayed-text-pixel-height
Return the height in pixels of the text displayed in WINDOW.
Unlike `window-text-area-pixel-height', any blank space below the
end of the buffer is not included.  If optional argument NOCLIPPED
is non-nil, do not include space occupied by clipped lines.

arguments: (&optional WINDOW NOCLIPPED)
Swindow.c
Fwindow-width
Return the number of display columns in WINDOW.
This is the width that is usable columns available for text in WINDOW,
and does not include vertical scrollbars, dividers, or the like.  See also
`window-full-width' and `window-height'.

arguments: (&optional WINDOW)
Swindow.c
Fwindow-full-width
Return the total number of columns in WINDOW.
This is like `window-width' but includes vertical scrollbars, dividers,
etc.

arguments: (&optional WINDOW)
Swindow.c
Fwindow-pixel-width
Return the width of WINDOW in pixels.  Defaults to current window.

arguments: (&optional WINDOW)
Swindow.c
Fwindow-text-area-pixel-width
Return the width in pixels of the text-displaying portion of WINDOW.
Unlike `window-pixel-width', the space occupied by the vertical
scrollbar or divider, if any, is not counted.

arguments: (&optional WINDOW)
Swindow.c
Fwindow-hscroll
Return the number of columns by which WINDOW is scrolled from left margin.

arguments: (&optional WINDOW)
Swindow.c
Fmodeline-hscroll
Return the horizontal scrolling amount of WINDOW's modeline.
If the window has no modeline, return nil.

arguments: (&optional WINDOW)
Swindow.c
Fset-modeline-hscroll
Set the horizontal scrolling amount of WINDOW's modeline to NCOL.
If NCOL is negative, it will silently be forced to 0.
If the window has no modeline, return nil. Otherwise, return the actual
value that was set.

arguments: (WINDOW NCOL)
Swindow.c
Fset-window-hscroll
Set number of columns WINDOW is scrolled from left margin to NCOL.
NCOL should be zero or positive.

arguments: (WINDOW NCOL)
Swindow.c
Fwindow-pixel-edges
Return a list of the pixel edge coordinates of WINDOW.
The returned list is of the form (LEFT TOP RIGHT BOTTOM),
all relative to 0, 0 at the top left corner of WINDOW's frame.
The frame toolbars, menubars and gutters are considered to be outside
of this area, while the scrollbars are considered to be inside.

arguments: (&optional WINDOW)
Swindow.c
Fwindow-text-area-pixel-edges
Return a list of the pixel edge coordinates of the text area of WINDOW.
The returned list is of the form (LEFT TOP RIGHT BOTTOM),
all relative to 0, 0 at the top left corner of the total area allocated
to the window, which includes the scrollbars.

arguments: (&optional WINDOW)
Swindow.c
Fwindow-point
Return current value of point in WINDOW.
For a non-selected window, this is the value point would have
if that window were selected.

Note that, when WINDOW is the selected window and its buffer
is also currently selected, the value returned is the same as (point).
It would be more strictly correct to return the `top-level' value
of point, outside of any save-excursion forms.
But that value is hard to find.

arguments: (&optional WINDOW)
Swindow.c
Fwindow-start
Return position at which display currently starts in WINDOW.
This is updated by redisplay or by calling `set-window-start'.

arguments: (&optional WINDOW)
Swindow.c
Fwindow-end
Return position at which display currently ends in WINDOW.
This is updated by redisplay, when it runs to completion.
Simply changing the buffer text or setting `window-start' does not
update this value.  WINDOW defaults to the selected window.

If optional arg GUARANTEE is non-nil, the return value is guaranteed
to be the same value as this function would return at the end of the
next full redisplay assuming nothing else changes in the meantime.
This function is potentially much slower with this flag set.

arguments: (&optional WINDOW GUARANTEE)
Swindow.c
Fwindow-last-line-visible-height
Return pixel height of visible part of last window line if it is clipped.
If the last line is not clipped, return nil.

arguments: (&optional WINDOW)
Swindow.c
Fset-window-point
Make point value in WINDOW be at position POS in WINDOW's buffer.
If WINDOW is the selected window, and window's buffer is the current
buffer, this actually changes the buffer's point instead of the window's
point. (The equivalence of the selected window's point with its buffer's
point is maintained throughout XEmacs.  However, enforcing the additional
restriction on the current buffer is "bug compatible" with FSF and is
perhaps more logical.)

arguments: (WINDOW POS)
Swindow.c
Fset-window-start
Make display in WINDOW start at position POS in WINDOW's buffer.
Optional third arg NOFORCE non-nil inhibits next redisplay
from overriding motion of point in order to display at this exact start.

arguments: (WINDOW POS &optional NOFORCE)
Swindow.c
Fwindow-dedicated-p
Return WINDOW's dedicated object, usually t or nil.
See also `set-window-dedicated-p'.

arguments: (WINDOW)
Swindow.c
Fset-window-dedicated-p
Control whether WINDOW is dedicated to the buffer it displays.
If it is dedicated, Emacs will not automatically change
which buffer appears in it.
The second argument is the new value for the dedication flag;
non-nil means yes.

arguments: (WINDOW ARG)
Swindow.c
Fdelete-window
Remove WINDOW from the display.  Default is selected window.
If window is the only one on its frame, the frame is deleted as well.
Normally, you cannot delete the last non-minibuffer-only frame (you must
use `save-buffers-kill-emacs' or `kill-emacs').  However, if optional
second argument FORCE is non-nil, you can delete the last frame. (This
will automatically call `save-buffers-kill-emacs'.)

arguments: (&optional WINDOW FORCE)
Swindow.c
Fnext-window
Return the next window after WINDOW in the canonical ordering of windows.
If omitted, WINDOW defaults to the selected window.

Optional second arg MINIBUF t means count the minibuffer window even
if not active.  MINIBUF nil or omitted means count the minibuffer iff
it is active.  MINIBUF neither t nor nil means not to count the
minibuffer even if it is active.

Several frames may share a single minibuffer; if the minibuffer
counts, all windows on all frames that share that minibuffer count
too.  Therefore, `next-window' can be used to iterate through the
set of windows even when the minibuffer is on another frame.  If the
minibuffer does not count, only windows from WINDOW's frame count.

By default, only the windows in the selected frame are considered.
The optional argument WHICH-FRAMES changes this behavior:
WHICH-FRAMES = `visible' means search windows on all visible frames.
WHICH-FRAMES = 0 means search windows on all visible and iconified frames.
WHICH-FRAMES = t means search windows on all frames including invisible frames.
WHICH-FRAMES = a frame means search only windows on that frame.
Anything else means restrict to the selected frame.

The optional fourth argument WHICH-DEVICES further clarifies on which
devices to search for frames as specified by WHICH-FRAMES.  This value
is only meaningful if WHICH-FRAMES is non-nil.
If nil or omitted, search all devices on the selected console.
If a device, only search that device.
If a console, search all devices on that console.
If a device type, search all devices of that type.
If `window-system', search all window-system devices.
Any other non-nil value means search all devices.

If you use consistent values for MINIBUF, WHICH-FRAMES, and WHICH-DEVICES,
you can use `next-window' to iterate through the entire cycle of
acceptable windows, eventually ending up back at the window you started with.
`previous-window' traverses the same cycle, in the reverse order.

arguments: (&optional WINDOW MINIBUF WHICH-FRAMES WHICH-DEVICES)
Swindow.c
Fprevious-window
Return the window preceding WINDOW in the canonical ordering of windows.
If omitted, WINDOW defaults to the selected window.

Optional second arg MINIBUF t means count the minibuffer window even
if not active.  MINIBUF nil or omitted means count the minibuffer iff
it is active.  MINIBUF neither t nor nil means not to count the
minibuffer even if it is active.

Several frames may share a single minibuffer; if the minibuffer
counts, all windows on all frames that share that minibuffer count
too.  Therefore, `previous-window' can be used to iterate through
the set of windows even when the minibuffer is on another frame.  If
the minibuffer does not count, only windows from WINDOW's frame count.

By default, only the windows in the selected frame are considered.
The optional argument WHICH-FRAMES changes this behavior:
WHICH-FRAMES = `visible' means search windows on all visible frames.
WHICH-FRAMES = 0 means search windows on all visible and iconified frames.
WHICH-FRAMES = t means search windows on all frames including invisible frames.
WHICH-FRAMES = a frame means search only windows on that frame.
Anything else means restrict to the selected frame.

The optional fourth argument WHICH-DEVICES further clarifies on which
devices to search for frames as specified by WHICH-FRAMES.  This value
is only meaningful if WHICH-FRAMES is non-nil.
If nil or omitted, search all devices on the selected console.
If a device, only search that device.
If a console, search all devices on that console.
If a device type, search all devices of that type.
If `window-system', search all window-system devices.
Any other non-nil value means search all devices.

If you use consistent values for MINIBUF, WHICH-FRAMES, and WHICH-DEVICES,
you can use `previous-window' to iterate through the entire cycle of
acceptable windows, eventually ending up back at the window you started with.
`next-window' traverses the same cycle, in the reverse order.

arguments: (&optional WINDOW MINIBUF WHICH-FRAMES DEVICES)
Swindow.c
Fnext-vertical-window
Return the next window which is vertically after WINDOW.

arguments: (&optional WINDOW)
Swindow.c
Fother-window
Select the COUNT'th different window on this frame.
All windows on current frame are arranged in a cyclic order.
This command selects the window COUNT steps away in that order.
A negative COUNT moves in the opposite order.

By default, only the windows in the selected frame are considered.
The optional argument WHICH-FRAMES changes this behavior:
WHICH-FRAMES = `visible' means search windows on all visible frames.
WHICH-FRAMES = 0 means search windows on all visible and iconified frames.
WHICH-FRAMES = t means search windows on all frames including invisible frames.
WHICH-FRAMES = a frame means search only windows on that frame.
Anything else means restrict to the selected frame.

The optional argument WHICH-DEVICES further clarifies on which devices
to search for frames as specified by WHICH-FRAMES.  This value is only
meaningful if WHICH-FRAMES is non-nil.
If nil or omitted, search all devices on the selected console.
If a device, only search that device.
If a console, search all devices on that console.
If a device type, search all devices of that type.
If `window-system', search all window-system devices.
Any other non-nil value means search all devices.

arguments: (COUNT &optional WHICH-FRAMES WHICH-DEVICES)
Swindow.c
Fget-lru-window
Return the window least recently selected or used for display.

By default, only the windows in the selected frame are considered.
The optional argument WHICH-FRAMES changes this behavior:
If optional argument WHICH-FRAMES is `visible', search all visible frames.
If WHICH-FRAMES is 0, search all visible and iconified frames.
If WHICH-FRAMES is t, search all frames.
If WHICH-FRAMES is nil, search only the selected frame.
If WHICH-FRAMES is a frame, search only that frame.

The optional argument WHICH-DEVICES further clarifies on which devices
to search for frames as specified by WHICH-FRAMES.  This value is only
meaningful if WHICH-FRAMES is non-nil.
If nil or omitted, search all devices on the selected console.
If a device, only search that device.
If a console, search all devices on that console.
If a device type, search all devices of that type.
If `window-system', search all devices on window-system consoles.
Any other non-nil value means search all devices.

arguments: (&optional WHICH-FRAMES WHICH-DEVICES)
Swindow.c
Fget-largest-window
Return the window largest in area.

By default, only the windows in the selected frame are considered.
The optional argument WHICH-FRAMES changes this behavior:
If optional argument WHICH-FRAMES is `visible', search all visible frames.
If WHICH-FRAMES is 0, search all visible and iconified frames.
If WHICH-FRAMES is t, search all frames.
If WHICH-FRAMES is nil, search only the selected frame.
If WHICH-FRAMES is a frame, search only that frame.

The optional argument WHICH-DEVICES further clarifies on which devices
to search for frames as specified by WHICH-FRAMES.  This value is only
meaningful if WHICH-FRAMES is non-nil.
If nil or omitted, search all devices on the selected console.
If a device, only search that device.
If a console, search all devices on that console.
If a device type, search all devices of that type.
If `window-system', search all devices on window-system consoles.
Any other non-nil value means search all devices.

arguments: (&optional WHICH-FRAMES WHICH-DEVICES)
Swindow.c
Fget-buffer-window
Return a window currently displaying BUFFER, or nil if none.

By default, only the windows in the selected frame are considered.
The optional argument WHICH-FRAMES changes this behavior:
If optional argument WHICH-FRAMES is `visible', search all visible frames.
If WHICH-FRAMES is 0, search all visible and iconified frames.
If WHICH-FRAMES is t, search all frames.
If WHICH-FRAMES is nil, search only the selected frame.
If WHICH-FRAMES is a frame, search only that frame.

The optional argument WHICH-DEVICES further clarifies on which devices
to search for frames as specified by WHICH-FRAMES.  This value is only
meaningful if WHICH-FRAMES is non-nil.
If nil or omitted, search all devices on the selected console.
If a device, only search that device.
If a console, search all devices on that console.
If a device type, search all devices of that type.
If `window-system', search all devices on window-system consoles.
Any other non-nil value means search all devices.

arguments: (BUFFER &optional WHICH-FRAMES WHICH-DEVICES)
Swindow.c
Fwindow-left-margin-pixel-width
Return the width in pixels of the left outside margin of window WINDOW.
If WINDOW is nil, the selected window is assumed.

arguments: (&optional WINDOW)
Swindow.c
Fwindow-right-margin-pixel-width
Return the width in pixels of the right outside margin of window WINDOW.
If WINDOW is nil, the selected window is assumed.

arguments: (&optional WINDOW)
Swindow.c
Fdelete-other-windows
Make WINDOW (or the selected window) fill its frame.
Only the frame WINDOW is on is affected.
This function tries to reduce display jumps
by keeping the text previously visible in WINDOW
in the same place on the frame.  Doing this depends on
the value of (window-start WINDOW), so if calling this function
in a program gives strange scrolling, make sure the window-start
value is reasonable when this function is called.

arguments: (&optional WINDOW)
Swindow.c
Fdelete-windows-on
Delete all windows showing BUFFER.

Optional second argument WHICH-FRAMES controls which frames are affected.
If nil or omitted, delete all windows showing BUFFER in any frame.
If t, delete only windows showing BUFFER in the selected frame.
If `visible', delete all windows showing BUFFER in any visible frame.
If a frame, delete only windows showing BUFFER in that frame.
Warning: WHICH-FRAMES has the same meaning as with `next-window',
except that the meanings of nil and t are reversed.

The optional third argument WHICH-DEVICES further clarifies on which
devices to search for frames as specified by WHICH-FRAMES.  This value
is only meaningful if WHICH-FRAMES is not t.
If nil or omitted, search only the selected console.
If a device, only search that device.
If a console, search all devices on that console.
If a device type, search all devices of that type.
If `window-system', search all devices on a window system.
Any other non-nil value means search all devices.

arguments: (BUFFER &optional WHICH-FRAMES WHICH-DEVICES)
Swindow.c
Freplace-buffer-in-windows
Replace BUFFER with some other buffer in all windows showing it.

Optional second argument WHICH-FRAMES controls which frames are affected.
If nil or omitted, all frames are affected.
If t, only the selected frame is affected.
If `visible', all visible frames are affected.
If a frame, only that frame is affected.
Warning: WHICH-FRAMES has the same meaning as with `next-window',
except that the meanings of nil and t are reversed.

The optional third argument WHICH-DEVICES further clarifies on which
devices to search for frames as specified by WHICH-FRAMES.  This value
is only meaningful if WHICH-FRAMES is not t.
If nil or omitted, search only the selected console.
If a device, only search that device.
If a console, search all devices on that console.
If a device type, search all devices of that type.
If `window-system', search all devices on a window system.
Any other non-nil value means search all devices.

arguments: (BUFFER &optional WHICH-FRAMES WHICH-DEVICES)
Swindow.c
Fset-window-buffer
Make WINDOW display BUFFER as its contents.
BUFFER can be a buffer or buffer name.

With non-nil optional argument NORECORD, do not modify the
global or per-frame buffer ordering.

arguments: (WINDOW BUFFER &optional NORECORD)
Swindow.c
Fselect-window
Select WINDOW.  Most editing will apply to WINDOW's buffer.
The main editor command loop selects the buffer of the selected window
before each command.

With non-nil optional argument NORECORD, do not modify the
global or per-frame buffer ordering.

arguments: (WINDOW &optional NORECORD)
Swindow.c
Fsplit-window
Split WINDOW, putting SIZE lines in the first of the pair.
WINDOW defaults to the selected one and SIZE to half its size.
If optional third arg HORFLAG is non-nil, split side by side and put
SIZE columns in the first of the pair. The newly created window is
returned.

arguments: (&optional WINDOW SIZE HORFLAG)
Swindow.c
Fenlarge-window
Make the selected window COUNT lines taller.
From program, optional second arg HORIZONTALP non-nil means grow
sideways COUNT columns, and optional third arg WINDOW specifies the
window to change instead of the selected window.

arguments: (COUNT &optional HORIZONTALP WINDOW)
Swindow.c
Fenlarge-window-pixels
Make the selected window COUNT pixels taller.
From program, optional second arg HORIZONTALP non-nil means grow
sideways COUNT pixels, and optional third arg WINDOW specifies the
window to change instead of the selected window.

arguments: (COUNT &optional HORIZONTALP WINDOW)
Swindow.c
Fshrink-window
Make the selected window COUNT lines shorter.
From program, optional second arg HORIZONTALP non-nil means shrink
sideways COUNT columns, and optional third arg WINDOW specifies the
window to change instead of the selected window.

arguments: (COUNT &optional HORIZONTALP WINDOW)
Swindow.c
Fshrink-window-pixels
Make the selected window COUNT pixels smaller.
From program, optional second arg HORIZONTALP non-nil means shrink
sideways COUNT pixels, and optional third arg WINDOW specifies the
window to change instead of the selected window.

arguments: (COUNT &optional HORIZONTALP WINDOW)
Swindow.c
Fscroll-up
Scroll text of current window up COUNT lines; or near full screen if no arg.
A near full screen is `next-screen-context-lines' less than a full screen.
Negative COUNT means scroll downward.
When calling from a program, supply an integer as argument or nil.
On attempt to scroll past end of buffer, `end-of-buffer' is signaled.
On attempt to scroll past beginning of buffer, `beginning-of-buffer' is
signaled.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.

arguments: (&optional COUNT)
Swindow.c
Fscroll-down
Scroll text of current window down COUNT lines; or near full screen if no arg.
A near full screen is `next-screen-context-lines' less than a full screen.
Negative COUNT means scroll upward.
When calling from a program, supply a number as argument or nil.
On attempt to scroll past end of buffer, `end-of-buffer' is signaled.
On attempt to scroll past beginning of buffer, `beginning-of-buffer' is
signaled.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.

arguments: (&optional COUNT)
Swindow.c
Fother-window-for-scrolling
Return the other window for "other window scroll" commands.
If in the minibuffer, `minibuffer-scroll-window' if non-nil
specifies the window.
If `other-window-scroll-buffer' is non-nil, a window
showing that buffer is used.

arguments: ()
Swindow.c
Fscroll-other-window
Scroll next window upward COUNT lines; or near full frame if no arg.
The next window is the one below the current one; or the one at the top
if the current one is at the bottom.  Negative COUNT means scroll downward.
When calling from a program, supply a number as argument or nil.

If in the minibuffer, `minibuffer-scroll-window' if non-nil
specifies the window to scroll.
If `other-window-scroll-buffer' is non-nil, scroll the window
showing that buffer, popping the buffer up if necessary.

arguments: (&optional COUNT)
Swindow.c
Fscroll-left
Scroll selected window display COUNT columns left.
Default for COUNT is window width minus 2.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.

arguments: (&optional COUNT)
Swindow.c
Fscroll-right
Scroll selected window display COUNT columns right.
Default for COUNT is window width minus 2.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.

arguments: (&optional COUNT)
Swindow.c
Fcenter-to-window-line
Center point in WINDOW.  With N, put point on line N.
The desired position of point is always relative to the window.
If WINDOW is nil, the selected window is used.

arguments: (&optional N WINDOW)
Swindow.c
Fmove-to-window-line
Position point relative to WINDOW.
With no argument, position text at center of window.
An argument specifies window line; zero means top of window,
negative means relative to bottom of window.
If WINDOW is nil, the selected window is used.

arguments: (ARG &optional WINDOW)
Swindow.c
Fcurrent-pixel-column
Return the horizontal pixel position of point POS in window.
Beginning of line is column 0.  If WINDOW is nil, the current window
is assumed.  If POS is nil, point is assumed.  Note that POS must be
visible for a non-nil result to be returned.  This is calculated using
the redisplay display tables; because of this, the returned value will
only be correct if the redisplay tables are up-to-date.  Use
"(sit-for 0)" to insure that they are; however, if WINDOW is part of
a new frame, use the following instead:
    (while (not (frame-visible-p frame)) (sleep-for .5))

arguments: (&optional WINDOW POS)
Swindow.c
Fcurrent-pixel-row
Return the vertical pixel position of point POS in window.  Top of
window is row 0.  If WINDOW is nil, the current window is assumed.  If
POS is nil, point is assumed.  Note that POS must be visible for a
non-nil result to be returned.  This is calculated using the redisplay
display tables; because of this, the returned value will only be
correct if the redisplay tables are up-to-date.  Use "(sit-for 0)"
to insure that they are; however, if WINDOW is part of a new frame,
use the following instead:
    (while (not (frame-visible-p frame)) (sleep-for .5))

arguments: (&optional WINDOW POS)
Swindow.c
Vscroll-on-clipped-lines
*Non-nil means to scroll if point lands on a line which is clipped.Swindow.c
Vtemp-buffer-show-function
Non-nil means call as function to display a help buffer.
The function is called with one argument, the buffer to be displayed.
Used by `with-output-to-temp-buffer'.
If this function is used, then it must do the entire job of showing
the buffer; `temp-buffer-show-hook' is not run unless this function runs it.
(`temp-buffer-show-hook' is obsolete.  Do not use in new code.)Swindow.c
Vminibuffer-scroll-window
Non-nil means it is the window that \<minibuffer-local-map>\[scroll-other-window] in minibuffer should scroll.Swindow.c
Vother-window-scroll-buffer
If non-nil, this is a buffer and \[scroll-other-window] should scroll its window.Swindow.c
Vwindow-pixel-scroll-increment
*Number of pixels to scroll by per requested line.
If nil then normal line scrolling occurs regardless of line height.
If t then scrolling is done in increments equal to the height of the default face.Swindow.c
Vnext-screen-context-lines
*Number of lines of continuity when scrolling by screenfuls.Swindow.c
Vwindow-min-height
*Delete any window less than this tall (including its modeline).Swindow.c
Vwindow-min-width
*Delete any window less than this wide.Swindow.c
Vmodeline-shadow-thickness
*How thick to draw 3D shadows around modelines.
If this is set to 0, modelines will be the traditional 2D.  Sizes above
10 will be accepted but the maximum thickness that will be drawn is 10.
This is a specifier; use `set-specifier' to change it.Swindow.c
Vhas-modeline-p
*Whether the modeline should be displayed.
This is a specifier; use `set-specifier' to change it.Swindow.c
Vvertical-divider-always-visible-p
*Should XEmacs always display vertical dividers between windows.

When this is non-nil, vertical dividers are always shown, and are
draggable.  When it is nil, vertical dividers are shown only when
there are no scrollbars in between windows, and are not draggable.

This is a specifier; use `set-specifier' to change it.Swindow.c
Vvertical-divider-shadow-thickness
*How thick to draw 3D shadows around vertical dividers.
This is a specifier; use `set-specifier' to change it.Swindow.c
Vvertical-divider-line-width
*The width of the vertical dividers, not including shadows.

For TTY windows, divider line is always one character wide.  When
instance of this specifier is zero in a TTY window, no divider is
drawn at all between windows.  When non-zero, a one character wide
divider is displayed.

This is a specifier; use `set-specifier' to change it.Swindow.c
Vvertical-divider-spacing
*How much space to leave around the vertical dividers.

In TTY windows, spacing is always zero, and the value of this
specifier is ignored.

This is a specifier; use `set-specifier' to change it.Sloadup.el
Vrunning-xemacs
Non-nil when the current emacs is XEmacs.Sloadup.el
Vsource-lisp
Root of tree containing the Lisp source code for the current build. 
Differs from `lisp-directory' if this XEmacs has been installed. Sloadup.el
Vbuild-directory
Root of tree containing object files and executables produced by build. 
Differs from `source-directory' if configured with --srcdir option, a practice 
recommended for developers.Sloadup.el
Vsource-directory
Root of tree containing source code for the current build. 
Used during loadup and for documenting source of symbols defined in C.Sloadup.el
Vpreloaded-file-list
List of Lisp files preloaded into the XEmacs binary image,
with the exception of `loadup.el'.Sbackquote.elc
Fbackquote
Expand the internal representation of a backquoted TEMPLATE into a lisp form.

The backquote character is like the quote character in that it prevents the
template which follows it from being evaluated, except that backquote
permits you to evaluate portions of the quoted template.  A comma character
inside TEMPLATE indicates that the following item should be evaluated.  A
comma character may be followed by an at-sign, which indicates that the form
which follows should be evaluated and inserted and "spliced" into the
template.  Forms following ,@ must evaluate to lists.

Here is how to use backquotes:
  (setq p 'b
        q '(c d e))
  `(a ,p ,@q)   -> (a b c d e)
  `(a . b)      -> (a . b)
  `(a . ,p)     -> (a . b)

The XEmacs lisp reader expands lisp backquotes as it reads them.
Examples:
  `atom             is read as (backquote atom)
  `(a ,b ,@(c d e)) is read as (backquote (a (\, b) (\,\@ (c d e))))
  `(a . ,p)         is read as (backquote (a \, p))

(backquote TEMPLATE) is a macro that produces code to construct TEMPLATE.
Note that this is very slow in interpreted code, but fast if you compile.
TEMPLATE is one or more nested lists or vectors, which are `almost quoted'.
They are copied recursively, with elements preceded by comma evaluated.
 (backquote (a b))     == (list 'a 'b)
 (backquote (a [b c])) == (list 'a (vector 'b 'c))

However, certain special lists are not copied.  They specify substitution.
Lists that look like (\, EXP) are evaluated and the result is substituted.
 (backquote (a (\, (+ x 5)))) == (list 'a (+ x 5))

Elements of the form (\,\@ EXP) are evaluated and then all the elements
of the result are substituted.  This result must be a list; it may
be `nil'.

Elements of the form (\,\. EXP) are evaluated and then all the elements
of the result are concatenated to the list of preceding elements in the list.
They must occur as the last element of a list (not a vector).
EXP may evaluate to nil.

As an example, a simple macro `push' could be written:
   (defmacro push (v l)
     `(setq ,l (cons ,@(list v l))))
or as
   (defmacro push (v l)
     `(setq ,l (cons ,v ,l)))

For backwards compatibility, old-style emacs-lisp backquotes are still read.
     OLD STYLE                        NEW STYLE
     (` (foo (, bar) (,@ bing)))      `(foo ,bar ,@bing)

Because of the old-style backquote support, you cannot use a new-style
backquoted form as the first element of a list.  Perhaps some day this
restriction will go away, but for now you should be wary of it:
    (`(this ,will ,@fail))
    ((` (but (, this) will (,@ work))))
This is an extremely rare thing to need to do in lisp.Sbackquote.elc
Fbq-process
Sbackquote.elc
Fbq-process-2
Sbackquote.elc
Fbq-comma
Sbackquote.elc
Fbq-process-1
Sbytecomp-runtime.elc
Fmacro-declaration-function
Process a declaration found in a macro definition.
This is set as the value of the variable `macro-declaration-function'.
MACRO is the name of the macro being defined.
DECL is a list `(declare ...)' containing the declarations.
The return value of this function is not used.

XEmacs; any forms handed to the function described by the variable
`macro-declaration-function' will also (eventually) be handled by the
`declare' macro; see its documentation for further details of this.Sbytecomp-runtime.elc
Fproclaim-inline
Cause the named functions to be open-coded when called from compiled code.
They will only be compiled open-coded when `byte-optimize' is true.Sbytecomp-runtime.elc
Fproclaim-notinline
Cause the named functions to no longer be open-coded.Sbytecomp-runtime.elc
Fdefsubst
Define an inline function.  The syntax is just like that of `defun'.Sbytecomp-runtime.elc
Fmake-obsolete
Make the byte-compiler warn that function FN is obsolete.
The warning will say that NEW should be used instead.
If NEW is a string, that is the `use instead' message.
If provided, WHEN should be a string indicating when the function
was first made obsolete, for example a date or a release number.Sbytecomp-runtime.elc
Fmake-obsolete-variable
Make the byte-compiler warn that variable VAR is obsolete,
and NEW should be used instead.  If NEW is a string, then that is the
`use instead' message.
If provided, WHEN should be a string indicating when the variable
was first made obsolete, for example a date or a release number.Sbytecomp-runtime.elc
Fmake-compatible
Make the byte-compiler know that function FN is provided for compatibility.
The warning will say that NEW should be used instead.
If NEW is a string, that is the `use instead' message.Sbytecomp-runtime.elc
Fmake-compatible-variable
Make the byte-compiler know that variable VAR is provided for compatibility,
and NEW should be used instead.  If NEW is a string, then that is the
`use instead' message.Sbytecomp-runtime.elc
Fdont-compile
Like `progn', but the body always runs interpreted (not compiled).
If you think you need this, you're probably making a mistake somewhere.Sbytecomp-runtime.elc
Feval-when-compile
Like `progn', but evaluates BODY at compile time, and when interpeted.
The result of the body appears to the compiler as a quoted constant.Sbytecomp-runtime.elc
Feval-and-compile
Like `progn', but evaluates the body at compile time and at load time,
and when interpreted.Sbytecomp-runtime.elc
Feval-when-feature
Run the body forms when FEATURE is featurep, be it now or later.
Called (eval-when-feature (FEATURE [. FILENAME]) BODYFORMS...).
If (featurep 'FEATURE), evals now; otherwise adds an elt to
`after-load-alist' (which see), using FEATURE as filename if FILENAME is nil.Sbytecomp-runtime.elc
Fwith-boundp
Evaluate BODY, but do not issue bytecomp warnings about VARIABLES undefined.
VARIABLES can be a symbol or a list of symbols and must be quoted.  When
compiling this file, the warnings `reference to free variable VARIABLE' and
`assignment to free variable VARIABLE' will not occur anywhere in BODY, for
any of the listed variables.  This is a clean way to avoid such warnings.

See also `if-boundp', `when-boundp', and `and-boundp' (ways to
conditionalize on a variable being bound and avoid warnings),
`declare-boundp' (issue a variable call without warnings), and
`globally-declare-boundp' (avoid warnings throughout a file about a
variable).Sbytecomp-runtime.elc
Fif-boundp
Equivalent to (if (boundp VARIABLE) THEN ELSE) but handles bytecomp warnings.
VARIABLE should be a quoted symbol.  When compiling this file, the warnings
`reference to free variable VARIABLE' and `assignment to free variable
VARIABLE' will not occur anywhere in the if-statement.  This is a clean way
to avoid such warnings.  See also `with-boundp' and friends.Sbytecomp-runtime.elc
Fwhen-boundp
Equivalent to (when (boundp VARIABLE) BODY) but handles bytecomp warnings.
VARIABLE should be a quoted symbol.  When compiling this file, the warnings
`reference to free variable VARIABLE' and `assignment to free variable
VARIABLE' will not occur anywhere in the when-statement.  This is a clean
way to avoid such warnings.  See also `with-boundp' and friends.Sbytecomp-runtime.elc
Fand-boundp
Equivalent to (and (boundp VARIABLE) ARGS) but handles bytecomp warnings.
VARIABLE should be a quoted symbol.  When compiling this file, the warnings
`reference to free variable VARIABLE' and `assignment to free variable
VARIABLE' will not occur anywhere in the and-statement.  This is a clean
way to avoid such warnings.  See also `with-boundp' and friends.Sbytecomp-runtime.elc
Fdeclare-boundp
Evaluate VARIABLE without bytecomp warnings about the symbol.

Sample usage is

  (declare-boundp gpm-minor-mode)

which is equivalent to

  (with-boundp 'gpm-minor-mode
    gpm-minor-mode)

See also `with-boundp' and friends.Sbytecomp-runtime.elc
Fglobally-declare-boundp
Declare that all free uses of VARIABLES in this file are valid.
VARIABLES can be a symbol or a list of symbols and must be quoted.

When compiling this file, the warnings `reference to free variable
VARIABLE' and `assignment to free variable VARIABLE' will not occur
regardless of where references to VARIABLE occur in the file.

In general, you should *NOT* use this; use `with-boundp' or its friends to
wrap individual uses, as necessary.  That way, you're more likely to
remember to put in the explicit checks for the variable's existence that
are usually necessary.  However, `globally-declare-boundp' is better in
some circumstances, such as when writing an ELisp package that makes
integral use of optionally-compiled-in functionality (typically, an
interface onto a system library) and checks for the existence of the
functionality at some entry point to the package.  See
`globally-declare-fboundp' for more information.Sbytecomp-runtime.elc
Fbyte-compile-with-fboundp
Sbytecomp-runtime.elc
Fwith-fboundp
Evaluate BODY, but do not issue bytecomp warnings about FUNCTIONS undefined.
FUNCTIONS can be a symbol or a list of symbols and must be quoted.  When
compiling this file, the warning `the function FUNCTION is not known to be
defined' will not occur anywhere in BODY, for any of the listed functions.
This is a clean way to avoid such warnings.

See also `if-fboundp', `when-fboundp', and `and-fboundp' (ways to
conditionalize on a function being bound and avoid warnings),
`declare-fboundp' (issue a function call without warnings), and
`globally-declare-fboundp' (avoid warnings throughout a file about a
function).Sbytecomp-runtime.elc
Fif-fboundp
Equivalent to (if (fboundp FUNCTION) THEN ELSE) but handles bytecomp warnings.
FUNCTION should be a quoted symbol.  When compiling this file, the warning
`the function FUNCTION is not known to be defined' will not occur anywhere
in the if-statement.  This is a clean way to avoid such warnings.  See also
`with-fboundp' and friends.Sbytecomp-runtime.elc
Fwhen-fboundp
Equivalent to (when (fboundp FUNCTION) BODY) but handles bytecomp warnings.
FUNCTION should be a quoted symbol.  When compiling this file, the warning
`the function FUNCTION is not known to be defined' will not occur anywhere
in the when-statement.  This is a clean way to avoid such warnings.  See also
`with-fboundp' and friends.Sbytecomp-runtime.elc
Fand-fboundp
Equivalent to (and (fboundp FUNCTION) ARGS) but handles bytecomp warnings.
FUNCTION should be a quoted symbol.  When compiling this file, the warning
`the function FUNCTION is not known to be defined' will not occur anywhere
in the and-statement.  This is a clean way to avoid such warnings.  See also
`with-fboundp' and friends.Sbytecomp-runtime.elc
Fdeclare-fboundp
Execute FORM (a function call) without bytecomp warnings about the call.
Sample usage is

  (declare-fboundp (x-keysym-on-keyboard-sans-modifiers-p 'backspace))

which is equivalent to

  (with-fboundp 'x-keysym-on-keyboard-sans-modifiers-p
    (x-keysym-on-keyboard-sans-modifiers-p 'backspace))

See also `with-fboundp' and friends.Sbytecomp-runtime.elc
Fglobally-declare-fboundp
Declare that all calls to function FUNCTIONS in this file are valid.
FUNCTIONS can be a symbol or a list of symbols and must be quoted.

When compiling this file, the warning `the function FUNCTION is not known
to be defined' will not occur regardless of where calls to FUNCTION occur
in the file.

In general, you should *NOT* use this; use `with-fboundp' or its friends to
wrap individual uses, as necessary.  That way, you're more likely to
remember to put in the explicit checks for the function's existence that
are usually necessary.  However, `globally-declare-fboundp' is better in
some circumstances, such as when writing an ELisp package that makes
integral use of optionally-compiled-in functionality (typically, an
interface onto a system library) and checks for the existence of the
functionality at some entry point to the package.  The file `ldap.el' is a
good example: It provides a layer on top of the optional LDAP ELisp
primitives, makes calls to them throughout its code, and verifies the
presence of LDAP support at load time.  Putting calls to `declare-fboundp'
throughout the code would be a major annoyance.Sbytecomp-runtime.elc
Fbyte-compile-with-byte-compiler-warnings-suppressed
Sbytecomp-runtime.elc
Fwith-byte-compiler-warnings-suppressed
Evaluate BODY, but do not issue bytecomp warnings TYPE.
TYPE should be one of `redefine', `callargs', `subr-callargs',
`free-vars', `unresolved', `unused-vars', `obsolete', or `pedantic',
or a list of one or more of these symbols. (See `byte-compile-warnings'.)
TYPE must be quoted.

NOTE: You should *NOT* under normal circumstances be using this!
There are better ways of avoiding most of these warnings.  In particular:

-- use (declare (special ...)) if you are making use of
   dynamically-scoped variables.
-- use `with-fboundp' and friends to avoid warnings about undefined functions
   when you know the function actually exists.
-- use `with-boundp' and friends to avoid warnings about undefined variables
   when you know the variable actually exists.
-- use `with-obsolete-variable' or `with-obsolete-function' if you
   are purposely using such a variable or function.Sbytecomp-runtime.elc
Fwith-obsolete-variable
Evaluate BODY but do not warn about usage of obsolete variable SYMBOL.
SYMBOL must be quoted and can be a list of SYMBOLS.  See also
`with-obsolete-function'.Sbytecomp-runtime.elc
Fwith-obsolete-function
Evaluate BODY but do not warn about usage of obsolete function SYMBOL.
SYMBOL must be quoted and can be a list of SYMBOLS.  See also
`with-obsolete-variable'.Sbytecomp-runtime.elc
Ferror-unless-tests-match
Signal an error unless TEST matches when being compiled and loaded.
This is for use in a file that will be byte-compiled.  Unless TEST has the
same nilness or non-nilness when the file is compiled and loaded, an error
will be signalled.  SOURCE is the name of the source file.Sbytecomp-runtime.elc
Fbyte-compile-file-being-compiled
When byte-compiling a file, return the name of the file being compiled.
Return nil otherwise.Sbytecomp-runtime.elc
Fcompiled-if
Like a regular `if' statement but the TEST will be evalled at compile time.
If TEST doesn't match at compile time and load time, an error will be
signalled.Sbytecomp-runtime.elc
Fcompiled-when
Like a regular `when' statement but the TEST will be evalled at compile time.
See `compiled-if'.Sbytecomp-runtime.elc
Fbyte-compiler-options
Set some compilation-parameters for this file.  
This will affect only the file in which it appears; this does nothing when
evaluated, or when loaded from a .el file.

Each argument to this macro must be a list of a key and a value.

  Keys:		  Values:		Corresponding variable:

  verbose	  t, nil		byte-compile-verbose
  optimize	  t, nil, source, byte	byte-optimize
  warnings	  list of warnings	byte-compile-warnings
  file-format	  emacs19, emacs20	byte-compile-emacs19-compatibility

The value specified with the `warnings' option must be a list, containing
some subset of the following flags:

  free-vars	references to variables not in the current lexical scope.
  unused-vars	references to non-global variables bound but not referenced.
  unresolved	calls to unknown functions.
  callargs	lambda calls with args that don't match the definition.
  subr-callargs	calls to subrs with args that don't match the definition.
  redefine	function cell redefined from a macro to a lambda or vice
		versa, or redefined to take a different number of arguments.
  obsolete	use of an obsolete function or variable.
  pedantic	warn of use of compatible symbols.

If the first element if the list is `+' or `-' then the specified elements 
are added to or removed from the current set of warnings, instead of the
entire set of warnings being overwritten.

For example, something like this might appear at the top of a source file:

    (byte-compiler-options
      (optimize t)
      (warnings (- callargs))		; Don't warn about arglist mismatch
      (warnings (+ unused-vars))	; Do warn about unused bindings
      (file-format emacs19))Ssubr.elc
Flambda
Return a lambda expression.
A call of the form (lambda ARGS DOCSTRING INTERACTIVE BODY) is
self-quoting; the result of evaluating the lambda expression is the
expression itself.  The lambda expression may then be treated as a
function, i.e., stored as the function value of a symbol, passed to
funcall or mapcar, etc.

ARGS should take the same form as an argument list for a `defun'.
Optional DOCSTRING is a documentation string.
If present, it should describe how to call the function.  Docstrings are
rarely useful unless the lambda will be named, eg, using `fset'.
Optional INTERACTIVE should be a call to the function `interactive'.
BODY should be a list of lisp expressions.

The byte-compiler treats lambda expressions specially.  If the lambda
expression is syntactically a function to be called, it will be compiled
unless protected by `quote'.  Conversely, quoting a lambda expression with
`function' hints to the byte-compiler that it should compile the expression.
(The byte-compiler may or may not actually compile it; for example it will
never compile lambdas nested in a data structure: `'(#'(lambda (x) x))').

The byte-compiler will warn about common problems such as the form
`(fset 'f '(lambda (x) x))' (the lambda cannot be byte-compiled; probably
the programmer intended `#'', although leaving the lambda unquoted will
normally suffice), but in general is it the programmer's responsibility to
quote lambda expressions appropriately.Ssubr.elc
Fapply-partially
Return a function that is a partial application of FUNCTION to ARGS.
ARGS is a list of the first N arguments to pass to FUNCTION.
The result is a new function which does the same as FUNCTION, except that
the first N arguments are fixed at the values with which this function
was called.Ssubr.elc
Fdefun-when-void
Define a function, just like `defun', unless it's already defined.
Used for compatibility among different emacs variants.Ssubr.elc
Fdefine-function-when-void
Define a function, just like `define-function', unless it's already defined.
Used for compatibility among different emacs variants.Ssubr.elc
Fdelete
Delete by side effect any occurrences of ITEM as a member of SEQUENCE.

The modified SEQUENCE is returned.  Comparison is done with `equal'.

If the first member of a list SEQUENCE is ITEM, there is no way to remove it
by side effect; therefore, write `(setq foo (delete element foo))' to be
sure of changing the value of `foo'.  Also see: `remove'.Ssubr.elc
Fdelq
Delete by side effect any occurrences of ITEM as a member of SEQUENCE.

The modified SEQUENCE is returned.  Comparison is done with `eq'.  If
SEQUENCE is a list and its first member is ITEM, there is no way to remove
it by side effect; therefore, write `(setq foo (delq element foo))' to be
sure of changing the value of `foo'.Ssubr.elc
Fremove
Remove all occurrences of ITEM in SEQUENCE, testing with `equal'.

This is a non-destructive function; it makes a copy of SEQUENCE if necessary
to avoid corrupting the original SEQUENCE.
Also see: `remove*', `delete', `delete*'Ssubr.elc
Fremq
Remove all occurrences of ITEM in SEQUENCE, comparing with `eq'.

This is a non-destructive function; it makes a copy of SEQUENCE to avoid
corrupting the original SEQUENCE.  See also the more general `remove*'.Ssubr.elc
Fassoc-default
Find object KEY in a pseudo-alist ALIST.
ALIST is a list of conses or objects.  Each element (or the element's car,
if it is a cons) is compared with KEY by evaluating (TEST (car elt) KEY).
If that is non-nil, the element matches;
then `assoc-default' returns the element's cdr, if it is a cons,
or DEFAULT if the element is not a cons.

If no element matches, the value is nil.
If TEST is omitted or nil, `equal' is used.Ssubr.elc
Fassoc-ignore-case
Like `assoc', but ignores differences in case and text representation.
KEY must be a string.  Upper-case and lower-case letters are treated as equal.Ssubr.elc
Fassoc-ignore-representation
Like `assoc', but ignores differences in text representation.
KEY must be a string.Ssubr.elc
Fmember-ignore-case
Like `member', but ignores differences in case and text representation.
ELT must be a string.  Upper-case and lower-case letters are treated as equal.Ssubr.elc
Flocal-variable-if-set-p
Return t if SYM would be local to BUFFER after it is set.
A nil value for BUFFER is *not* the same as (current-buffer), but
can be used to determine whether `make-variable-buffer-local' has been
called on SYM.Ssubr.elc
Fmake-local-hook
Make the hook HOOK local to the current buffer.
The return value is HOOK.

You never need to call this function now that `add-hook' does it for you
if its LOCAL argument is non-nil.

When a hook is local, its local and global values
work in concert: running the hook actually runs all the hook
functions listed in *either* the local value *or* the global value
of the hook variable.

This function works by making `t' a member of the buffer-local value,
which acts as a flag to run the hook functions in the default value as
well.  This works for all normal hooks, but does not work for most
non-normal hooks yet.  We will be changing the callers of non-normal
hooks so that they can handle localness; this has to be done one by
one.

This function does nothing if HOOK is already local in the current
buffer.

Do not use `make-local-variable' to make a hook variable buffer-local.Ssubr.elc
Fadd-hook
Add to the value of HOOK the function FUNCTION.
FUNCTION is not added if already present.
FUNCTION is added (if necessary) at the beginning of the hook list
unless the optional argument APPEND is non-nil, in which case
FUNCTION is added at the end.

The optional fourth argument, LOCAL, if non-nil, says to modify
the hook's buffer-local value rather than its default value.
This makes the hook buffer-local if needed.
To make a hook variable buffer-local, always use
`make-local-hook', not `make-local-variable'.

HOOK should be a symbol, and FUNCTION may be any valid function.  If
HOOK is void, it is first set to nil.  If HOOK's value is a single
function, it is changed to a list of functions.

You can remove this hook yourself using `remove-hook'.

See also `add-one-shot-hook'.Ssubr.elc
Fremove-hook
Remove from the value of HOOK the function FUNCTION.
HOOK should be a symbol, and FUNCTION may be any valid function.  If
FUNCTION isn't the value of HOOK, or, if FUNCTION doesn't appear in the
list of hooks to run in HOOK, then nothing is done.  See `add-hook'.

The optional third argument, LOCAL, if non-nil, says to modify
the hook's buffer-local value rather than its default value.
This makes the hook buffer-local if needed.
To make a hook variable buffer-local, always use
`make-local-hook', not `make-local-variable'.Ssubr.elc
Fadd-local-hook
Add to the local value of HOOK the function FUNCTION.
You don't need this any more.  It's equivalent to specifying the LOCAL
argument to `add-hook'.Ssubr.elc
Fremove-local-hook
Remove from the local value of HOOK the function FUNCTION.
You don't need this any more.  It's equivalent to specifying the LOCAL
argument to `remove-hook'.Ssubr.elc
Fadd-one-shot-hook
Add to the value of HOOK the one-shot function FUNCTION.
FUNCTION will automatically be removed from the hook the first time
after it runs (whether to completion or to an error).
FUNCTION is not added if already present.
FUNCTION is added (if necessary) at the beginning of the hook list
unless the optional argument APPEND is non-nil, in which case
FUNCTION is added at the end.

HOOK should be a symbol, and FUNCTION may be any valid function.  If
HOOK is void, it is first set to nil.  If HOOK's value is a single
function, it is changed to a list of functions.

You can remove this hook yourself using `remove-hook'.

See also `add-hook'.Ssubr.elc
Fadd-local-one-shot-hook
Add to the local value of HOOK the one-shot function FUNCTION.
You don't need this any more.  It's equivalent to specifying the LOCAL
argument to `add-one-shot-hook'.Ssubr.elc
Fadd-to-list
Add to the value of LIST-VAR the element ELEMENT if it isn't there yet.
The test for presence of ELEMENT is done with COMPARE-FN; if
COMPARE-FN is nil, then it defaults to `equal'. If ELEMENT is added,
it is added at the beginning of the list, unless the optional argument
APPEND is non-nil, in which case ELEMENT is added at the end.

If you want to use `add-to-list' on a variable that is not defined
until a certain package is loaded, you should put the call to `add-to-list'
into a hook function that will be run only after loading the package.
`eval-after-load' provides one way to do this.  In some cases
other hooks, such as major mode hooks, can do the job.Ssubr.elc
Vkill-buffer-hook
Function or functions to be called when a buffer is killed.
The value of this variable may be buffer-local.
The buffer about to be killed is current when this hook is run.Ssubr.elc
Vkill-emacs-hook
Function or functions to be called when `kill-emacs' is called,
just before emacs is actually killed.Ssubr.elc
Fcopy-symbol
Return a new uninterned symbol with the same name as SYMBOL.
If COPY-PROPERTIES is non-nil, the new symbol will have a copy of
SYMBOL's value, function, and property lists.Ssubr.elc
Fset-symbol-value-in-buffer
Set the value of SYM to VAL in BUFFER.  Useful with buffer-local variables.
If SYM has a buffer-local value in BUFFER, or will have one if set, this
function allows you to set the local value.

NOTE: At some point, this will be moved into C and will be very fast.Ssubr.elc
Fsplit-path
Explode a search path into a list of strings.
The path components are separated with the characters specified
with `path-separator'.Ssubr.elc
Fwith-current-buffer
Temporarily make BUFFER the current buffer and execute the forms in BODY.
The value returned is the value of the last form in BODY.
See also `with-temp-buffer'.Ssubr.elc
Fwith-temp-file
Create a new buffer, evaluate FORMS there, and write the buffer to FILENAME.
The value of the last form in FORMS is returned, like `progn'.
See also `with-temp-buffer'.Ssubr.elc
Fwith-temp-message
Display MESSAGE temporarily while BODY is evaluated.
The original message is restored to the echo area after BODY has finished.
The value returned is the value of the last form in BODY.
If MESSAGE is nil, the echo area and message log buffer are unchanged.
Use a MESSAGE of "" to temporarily clear the echo area.

Note that this function exists for FSF compatibility purposes.  A better way
under XEmacs is to give the message a particular label (see `display-message');
then, the old message is automatically restored when you clear your message
with `clear-message'.Ssubr.elc
Fwith-temp-buffer
Create a temporary buffer, and evaluate FORMS there like `progn'.
See also `with-temp-file' and `with-output-to-string'.Ssubr.elc
Fwith-output-to-string
Execute BODY, return the text it sent to `standard-output', as a string.Ssubr.elc
Fwith-local-quit
Execute BODY with `inhibit-quit' temporarily bound to nil.Ssubr.elc
Fwith-case-table
Execute the forms in BODY with TABLE as the current case table.
The value returned is the value of the last form in BODY.Ssubr.elc
Vdelay-mode-hooks
If non-nil, `run-mode-hooks' should delay running the hooks.Ssubr.elc
Vdelayed-mode-hooks
List of delayed mode hooks waiting to be run.Ssubr.elc
Frun-mode-hooks
Run mode hooks `delayed-mode-hooks' and HOOKS, or delay HOOKS.
Execution is delayed if `delay-mode-hooks' is non-nil.
Major mode functions should use this.Ssubr.elc
Fdelay-mode-hooks
Execute BODY, but delay any `run-mode-hooks'.
Only affects hooks run in the current buffer.Ssubr.elc
Fwith-syntax-table
Evaluate BODY with syntax table of current buffer set to a copy of TABLE.
The syntax table of the current buffer is saved, BODY is evaluated, and the
saved table is restored, even in case of an abnormal exit.
Value is what BODY returns.Ssubr.elc
Fwith-string-as-buffer-contents
With the contents of the current buffer being STR, run BODY.
Point starts positioned to end of buffer.
Returns the new contents of the buffer, as modified by BODY.
The original current buffer is restored afterwards.Ssubr.elc
Fsave-match-data
Execute BODY forms, restoring the global value of the match data.Ssubr.elc
Fmatch-string
Return string of text matched by last search.
NUM specifies which parenthesized expression in the last regexp.
 Value is nil if NUMth pair didn't match, or there were less than NUM pairs.
Zero means the entire text matched by the whole regexp or whole string.
STRING should be given if the last search was by `string-match' on STRING.Ssubr.elc
Fmatch-string-no-properties
Return string of text matched by last search, without text properties.
NUM specifies which parenthesized expression in the last regexp.
 Value is nil if NUMth pair didn't match, or there were less than NUM pairs.
Zero means the entire text matched by the whole regexp or whole string.
STRING should be given if the last search was by `string-match' on STRING.Ssubr.elc
Flooking-back
Return non-nil if text before point matches regular expression REGEXP.
Like `looking-at' except matches before point, and is slower.
LIMIT if non-nil speeds up the search by specifying a minimum
starting position, to avoid checking matches that would start
before LIMIT.

If GREEDY is non-nil, extend the match backwards as far as
possible, stopping when a single additional previous character
cannot be part of a match for REGEXP.  When the match is
extended, its starting position is allowed to occur before
LIMIT.Ssubr.elc
Vsplit-string-default-separators
The default value of separators for `split-string'.

A regexp matching strings of whitespace.  May be locale-dependent
(as yet unimplemented).  Should not match non-breaking spaces.

Warning: binding this to a different value and using it as default is
likely to have undesired semantics.Ssubr.elc
Fsplit-string
Splits STRING into substrings bounded by matches for SEPARATORS.

The beginning and end of STRING, and each match for SEPARATORS, are
splitting points.  The substrings matching SEPARATORS are removed, and
the substrings between the splitting points are collected as a list,
which is returned.

If SEPARATORS is non-`nil', it should be a regular expression matching text
which separates, but is not part of, the substrings.  If `nil' it defaults to
`split-string-default-separators', normally "[ \f\t\n\r\v]+", and
OMIT-NULLS is forced to `t'.

If OMIT-NULLS is `t', zero-length substrings are omitted from the list (so
that for the default value of SEPARATORS leading and trailing whitespace
are effectively trimmed).  If `nil', all zero-length substrings are retained,
which correctly parses CSV format, for example.

Note that the effect of `(split-string STRING)' is the same as
`(split-string STRING split-string-default-separators t)').  In the rare
case that you wish to retain zero-length substrings when splitting on
whitespace, use `(split-string STRING split-string-default-separators nil)'.

Modifies the match data when successful; use `save-match-data' if necessary.Ssubr.elc
Fsubst-char-in-string
Replace FROMCHAR with TOCHAR in STRING each time it occurs.
Unless optional argument INPLACE is non-nil, return a new string.Ssubr.elc
Freplace-in-string
Replace all matches in STR for REGEXP with NEWTEXT string,
 and returns the new string.
Optional LITERAL non-nil means do a literal replacement.
Otherwise treat `\' in NEWTEXT as special:
  `\&' in NEWTEXT means substitute original matched text.
  `\N' means substitute what matched the Nth `\(...\)'.
       If Nth parens didn't match, substitute nothing.
  `\\' means insert one `\'.
  `\u' means upcase the next character.
  `\l' means downcase the next character.
  `\U' means begin upcasing all following characters.
  `\L' means begin downcasing all following characters.
  `\E' means terminate the effect of any `\U' or `\L'.Ssubr.elc
Freplace-regexp-in-string
Replace all matches for REGEXP with REP in STRING.

Return a new string containing the replacements.

Optional arguments FIXEDCASE and LITERAL are like the arguments with
the same names of function `replace-match'.  If START is non-nil,
start replacements at that index in STRING.

For compatibility with old XEmacs code and with recent GNU Emacs, the
interpretation of SUBEXP is somewhat complicated.  If SUBEXP is a
buffer, it is interpreted as the buffer which provides syntax tables
and case tables for the match and replacement.  If it is not a buffer,
the current buffer is used.  If SUBEXP is an integer, it is the index
of the subexpression of REGEXP which is to be replaced.

REP is either a string used as the NEWTEXT arg of `replace-match' or a
function.  If it is a function it is applied to each match to generate
the replacement passed to `replace-match'; the match-data at this
point are such that `(match-string SUBEXP STRING)' is the function's
argument if SUBEXP is an integer (otherwise the whole match is passed
and replaced).

To replace only the first match (if any), make REGEXP match up to \'
and replace a sub-expression, e.g.
  (replace-regexp-in-string "\(foo\).*\'" "bar" " foo foo" nil nil 1)
    => " bar foo"

Signals `invalid-argument' if SUBEXP is not an integer, buffer, or nil;
or is an integer, but the indicated subexpression was not matched.
Signals `invalid-argument' if STRING is nil but the last text matched was a string,
or if STRING is a string but the last text matched was a buffer.Ssubr.elc
Fadd-to-invisibility-spec
Add elements to `buffer-invisibility-spec'.
See documentation for `buffer-invisibility-spec' for the kind of elements
that can be added.Ssubr.elc
Fremove-from-invisibility-spec
Remove elements from `buffer-invisibility-spec'.Ssubr.elc
Fstring-equal-ignore-case
Return t if two strings have identical contents, ignoring case differences.
Case is not significant.  Text properties and extents are ignored.
Symbols are also allowed; their print names are used instead.

See also `equalp'.Ssubr.elc
Finsert-face
Insert STRING and highlight with FACE.  Return the extent created.Ssubr.elc
Finteger-to-bit-vector
Return INTEGER converted to a bit vector.
Optional argument MINLENGTH gives a minimum length for the returned vector.
If MINLENGTH is not given, zero high-order bits will be ignored.Ssubr.elc
Fbit-vector-to-integer
Return BIT-VECTOR converted to an integer.
If bignum support is available, BIT-VECTOR's length is unlimited.
Otherwise the limit is the number of value bits in an Lisp integer. Ssubr.elc
Fstring-width
Return number of columns STRING occupies when displayed.
With international (Mule) support, uses the charset-columns attribute of
the characters in STRING, which may not accurately represent the actual
display width when using a window system.  With no international support,
simply returns the length of the string.Ssubr.elc
Fchar-width
Return number of columns a CHARACTER occupies when displayed.Ssubr.elc
Fstring-to-sequence
Convert STRING to a sequence of TYPE which contains characters in STRING.
TYPE should be `list' or `vector'.Ssubr.elc
Fstring-to-list
Return a list of characters in STRING.Ssubr.elc
Fstring-to-vector
Return a vector of characters in STRING.Ssubr.elc
Fstore-substring
Embed OBJ (string or character) at index IDX of STRING.Ssubr.elc
Ftruncate-string-to-width
Truncate string STR to end at column END-COLUMN.
The optional 3rd arg START-COLUMN, if non-nil, specifies the starting
column; that means to return the characters occupying columns
START-COLUMN ... END-COLUMN of STR.  Both END-COLUMN and START-COLUMN
are specified in terms of character display width in the current
buffer; see also `char-width'.

The optional 4th arg PADDING, if non-nil, specifies a padding
character (which should have a display width of 1) to add at the end
of the result if STR doesn't reach column END-COLUMN, or if END-COLUMN
comes in the middle of a character in STR.  PADDING is also added at
the beginning of the result if column START-COLUMN appears in the
middle of a character in STR.

If PADDING is nil, no padding is added in these cases, so
the resulting string may be narrower than END-COLUMN.

If ELLIPSIS is non-nil, it should be a string which will replace the
end of STR (including any padding) if it extends beyond END-COLUMN,
unless the display width of STR is equal to or less than the display
width of ELLIPSIS.  If it is non-nil and not a string, then ELLIPSIS
defaults to "...".Ssubr.elc
Fplist-to-alist
Convert property list PLIST into the equivalent association-list form.
The alist is returned.  This converts from

(a 1 b 2 c 3)

into

((a . 1) (b . 2) (c . 3))

The original plist is not modified.  See also `destructive-plist-to-alist'.Ssubr.elc
Fmap-plist
Map FUNCTION (a function of two args) over each key/value pair in PLIST.
Return a list of the results.Ssubr.elc
Fdestructive-plist-to-alist
Convert property list PLIST into the equivalent association-list form.
The alist is returned.  This converts from

(a 1 b 2 c 3)

into

((a . 1) (b . 2) (c . 3))

The original plist is destroyed in the process of constructing the alist.
See also `plist-to-alist'.Ssubr.elc
Falist-to-plist
Convert association list ALIST into the equivalent property-list form.
The plist is returned.  This converts from

((a . 1) (b . 2) (c . 3))

into

(a 1 b 2 c 3)

The original alist is not modified.  See also `destructive-alist-to-plist'.Ssubr.elc
Fputf
Add property PROPERTY to plist PLIST with value VALUE.
Analogous to (setq PLIST (plist-put PLIST PROPERTY VALUE)).Ssubr.elc
Flaxputf
Add property PROPERTY to lax plist LAX-PLIST with value VALUE.
Analogous to (setq LAX-PLIST (lax-plist-put LAX-PLIST PROPERTY VALUE)).Ssubr.elc
Flaxremf
Remove property PROPERTY from lax plist LAX-PLIST.
Analogous to (setq LAX-PLIST (lax-plist-remprop LAX-PLIST PROPERTY)).Ssubr.elc
Ferror
Signal a non-continuable error.
DATUM should normally be an error symbol, i.e. a symbol defined using
`define-error'.  ARGS will be made into a list, and DATUM and ARGS passed
as the two arguments to `signal', the most basic error handling function.

This error is not continuable: you cannot continue execution after the
error using the debugger `r' command.  See also `cerror'.

The correct semantics of ARGS varies from error to error, but for most
errors that need to be generated in Lisp code, the first argument
should be a string describing the *context* of the error (i.e. the
exact operation being performed and what went wrong), and the remaining
arguments or "frobs" (most often, there is one) specify the
offending object(s) and/or provide additional details such as the exact
error when a file error occurred, e.g.:

-- the buffer in which an editing error occurred.
-- an invalid value that was encountered. (In such cases, the string
   should describe the purpose or "semantics" of the value [e.g. if the
   value is an argument to a function, the name of the argument; if the value
   is the value corresponding to a keyword, the name of the keyword; if the
   value is supposed to be a list length, say this and say what the purpose
   of the list is; etc.] as well as specifying why the value is invalid, if
   that's not self-evident.)
-- the file in which an error occurred. (In such cases, there should be a
   second frob, probably a string, specifying the exact error that occurred.
   This does not occur in the string that precedes the first frob, because
   that frob describes the exact operation that was happening.

For historical compatibility, DATUM can also be a string.  In this case,
DATUM and ARGS are passed together as the arguments to `format', and then
an error is signalled using the error symbol `error' and formatted string.
Although this usage of `error' is very common, it is deprecated because it
totally defeats the purpose of having structured errors.  There is now
a rich set of defined errors you can use:

quit

error
  invalid-argument
    syntax-error
      invalid-read-syntax
      invalid-regexp
      structure-formation-error
        list-formation-error
          malformed-list
            malformed-property-list
          circular-list
            circular-property-list
    invalid-function
    no-catch
    undefined-keystroke-sequence
    invalid-constant
    wrong-type-argument
    args-out-of-range
    wrong-number-of-arguments

  invalid-state
    void-function
    cyclic-function-indirection
    void-variable
    cyclic-variable-indirection
    invalid-byte-code
    stack-overflow
    out-of-memory
    invalid-key-binding
    internal-error

  invalid-operation
    invalid-change
      setting-constant
      protected-field
    editing-error
      beginning-of-buffer
      end-of-buffer
      buffer-read-only
    io-error
      file-error
        file-already-exists
        file-locked
        file-supersession
        end-of-file
      process-error
      network-error
      tooltalk-error
      gui-error
        dialog-box-error
      sound-error
      conversion-error
        text-conversion-error
        image-conversion-error
        base64-conversion-error
        selection-conversion-error
    arith-error
      range-error
      domain-error
      singularity-error
      overflow-error
      underflow-error
    search-failed
    printing-unreadable-object
    unimplemented

Note the semantic differences between some of the more common errors:

-- `invalid-argument' is for all cases where a bad value is encountered.
-- `invalid-constant' is for arguments where only a specific set of values
   is allowed.
-- `syntax-error' is when complex structures (parsed strings, lists,
   and the like) are badly formed.  If the problem is just a single bad
   value inside the structure, you should probably be using something else,
   e.g. `invalid-constant', `wrong-type-argument', or `invalid-argument'.
-- `invalid-state' means that some settings have been changed in such a way
   that their current state is unallowable.  More and more, code is being
   written more carefully, and catches the error when the settings are being
   changed, rather than afterwards.  This leads us to the next error:
-- `invalid-change' means that an attempt is being made to change some settings
   into an invalid state.  `invalid-change' is a type of `invalid-operation'.
-- `invalid-operation' refers to all cases where code is trying to do something
   that's disallowed, or when an error occurred during an operation. (These
   two concepts are merged because there's no clear distinction between them.)
-- `io-error' refers to errors involving interaction with any external
   components (files, other programs, the operating system, etc).

See also `cerror', `signal', and `signal-error'.Ssubr.elc
Fcerror
Like `error' but signals a continuable error.Ssubr.elc
Fcheck-argument-type
Check that ARGUMENT satisfies PREDICATE.
This is a macro, and ARGUMENT is not evaluated.  If ARGUMENT is an lvalue,
this function signals a continuable `wrong-type-argument' error until the
returned value satisfies PREDICATE, and assigns the returned value
to ARGUMENT.  Otherwise, this function signals a non-continuable
`wrong-type-argument' error if the returned value does not satisfy PREDICATE.Ssubr.elc
Fargs-out-of-range
Signal an error until the correct in-range value is given by the user.
This function loops, signalling a continuable `args-out-of-range' error
with VALUE, MIN and MAX as the data associated with the error and then
checking the returned value to make sure it's not outside the given
boundaries (nil for either means no boundary on that side).  At that
point, the gotten value is returned.Ssubr.elc
Fargument-in-range-p
Return true if ARGUMENT is within the range of [MIN, MAX].
This includes boundaries.  nil for either value means no limit on that side.Ssubr.elc
Fcheck-argument-range
Check that ARGUMENT is within the range [MIN, MAX].
This is a macro, and ARGUMENT is not evaluated.  If ARGUMENT is an lvalue,
this function signals a continuable `args-out-of-range' error until the
returned value is within range, and assigns the returned value
to ARGUMENT.  Otherwise, this function signals a non-continuable
`args-out-of-range' error if the returned value is out of range.Ssubr.elc
Fsignal-error
Signal a non-continuable error.  Args are ERROR-SYMBOL, and associated DATA.
An error symbol is a symbol defined using `define-error'.
DATA should be a list.  Its elements are printed as part of the error message.
If the signal is handled, DATA is made available to the handler.
See also `signal', and the functions to handle errors: `condition-case'
and `call-with-condition-handler'.Ssubr.elc
Fdefine-error
Define a new error, denoted by ERROR-SYM.
DOC-STRING is an informative message explaining the error, and will be
printed out when an unhandled error occurs.
ERROR-SYM is a sub-error of INHERITS-FROM (which defaults to `error').

[`define-error' internally works by putting on ERROR-SYM an `error-message'
property whose value is DOC-STRING, and an `error-conditions' property
that is a list of ERROR-SYM followed by each of its super-errors, up
to and including `error'.  You will sometimes see code that sets this up
directly rather than calling `define-error', but you should *not* do this
yourself.]Ssubr.elc
Fdefined-error-p
Returns non-nil if SYM names a currently-defined error.Ssubr.elc
Fbacktrace-in-condition-handler-eliminating-handler
Return a backtrace inside of a condition handler, eliminating the handler.
This is for use in the condition handler inside of call-with-condition-handler,
when written like this:

(call-with-condition-handler
    #'(lambda (__some_weird_arg__)
	do the handling ...)
    #'(lambda ()
	do the stuff that might cause an error))

Pass in the name (a symbol) of the argument used in the lambda function
that specifies the handler, and make sure the argument name is unique, and
this function generates a backtrace and strips off the part above where the
error occurred (i.e. the handler itself).Ssubr.elc
Fwith-trapping-errors
Trap errors in BODY, outputting a warning and a backtrace.
Usage looks like

(with-trapping-errors
    [:operation OPERATION]
    [:error-form ERROR-FORM]
    [:no-backtrace NO-BACKTRACE]
    [:class CLASS]
    [:level LEVEL]
    [:resignal RESIGNAL]
    BODY)

Return value without error is whatever BODY returns.  With error, return
result of ERROR-FORM (which will be evaluated only when the error actually
occurs), which defaults to nil.  OPERATION is given in the warning message.
CLASS and LEVEL are the warning class and level (default to class
`general', level `warning').  If NO-BACKTRACE is given, no backtrace is
displayed.  If RESIGNAL is given, the error is resignaled after the warning
is displayed and the ERROR-FORM is executed.Ssubr.elc
Fget-buffer-window-list
Return windows currently displaying BUFFER, or nil if none.
BUFFER defaults to the current buffer.
See `walk-windows' for the meaning of MINIBUF and FRAME.Ssubr.elc
Fignore
Do nothing and return nil.
This function accepts any number of arguments, but ignores them.Ssubr.elc
Fbound-and-true-p
Return the value of symbol VAR if it is bound, else nil.Ssubr.elc
Fpropertize
Return a copy of STRING with text properties added.
First argument is the string to copy.
Remaining arguments form a sequence of PROPERTY VALUE pairs for text
properties to add to the result.Ssubr.elc
Fdelete-and-extract-region
Delete the text between START and END and return it.Ssubr.elc
Ffunction-interactive
Return the interactive specification of FUNCTION.
FUNCTION can be any funcallable object.
The specification will be returned as the list of the symbol `interactive'
 and the specs.
If FUNCTION is not interactive, nil will be returned.Ssubr.elc
Ffunction-allows-args
Return whether FUNCTION can be called with N arguments.Ssubr.elc
Fbuffer-string
Return the contents of the current buffer as a string.
If narrowing is in effect, this function returns only the visible part
of the buffer.

If BUFFER is specified, the contents of that buffer are returned.

The arguments OLD-END and OLD-BUFFER are supported for backward
compatibility with pre-21.2 XEmacsen times when arguments to this
function were (buffer-string &optional START END BUFFER).Ssubr.elc
Feval-after-load
Arrange that, if FILE is ever loaded, FORM will be run at that time.
This makes or adds to an entry on `after-load-alist'.
If FILE is already loaded, evaluate FORM right now.
It does nothing if FORM is already on the list for FILE.
FILE must match exactly.  Normally FILE is the name of a library,
with no directory or extension specified, since that is how `load'
is normally called.Ssubr.elc
Feval-next-after-load
Read the following input sexp, and run it whenever FILE is loaded.
This makes or adds to an entry on `after-load-alist'.
FILE should be the name of a library, with no directory name.Ssubr.elc
Fdelete-dups
Destructively remove `equal' duplicates from LIST.
Store the result in LIST and return it.  LIST must be a proper list.
Of several `equal' occurrences of an element in LIST, the first
one is kept.Ssubr.elc
Fskip-chars-quote
Return a string that means all characters in STRING will be skipped,
if passed to `skip-chars-forward' or `skip-chars-backward'.

Ranges and carets are not treated specially.  This implementation is
in Lisp; do not use it in performance-critical code.Ssubr.elc
Fsubr-arity
Return minimum and maximum number of args allowed for SUBR.
SUBR must be a built-in function (not just a symbol that refers to one).
The returned value is a pair (MIN . MAX).  MIN is the minimum number
of args.  MAX is the maximum number or the symbol `many', for a
function with `&rest' args, or `unevalled' for a special operator.

See also `special-operator-p', `subr-min-args', `subr-max-args',
`function-allows-args'. Ssubr.elc
Fcar-less-than-car
Return t if the car of A is numerically less than the car of B.Ssubr.elc
Fcdr-less-than-cdr
Return t if (cdr A) is numerically less than (cdr B).Ssubr.elc
Ffloat-time
Convert time value SPECIFIED-TIME to a floating point number.

See `current-time'.  Since the result is a floating-point number, this may
not have the same accuracy as does the result of `current-time'.

If not supplied, SPECIFIED-TIME defaults to the result of `current-time'.Scl.elc
Vcustom-print-functions
This is a list of functions that format user objects for printing.
Each function is called in turn with three arguments: the object, the
stream, and the print level (currently ignored).  If it is able to
print the object it returns true; otherwise it returns nil and the
printer proceeds to the next function on the list.

This variable is not used at present, but it is defined in hopes that
a future Emacs interpreter will be able to use it.Scl.elc
Feql
Return t if the arguments are the same Lisp object, or numerically equal.

They must be of the same type; the difference between `eq' and `eql' is most
relevant when it comes to the non-fixnum number types.  In this
implementation, fixnums of the same numeric value are always `eq', but this
is not true for other numeric types, among them floats, bignums and ratios,
if available.

See also `=' (which doesn't require that its arguments be of the same type,
but only accepts numeric arguments, characters and markers) and `equal'.Scl.elc
Fincf
Increment PLACE by X (1 by default).
PLACE may be a symbol, or any generalized variable allowed by `setf'.
The return value is the incremented value of PLACE.Scl.elc
Fdecf
Decrement PLACE by X (1 by default).
PLACE may be a symbol, or any generalized variable allowed by `setf'.
The return value is the decremented value of PLACE.Scl.elc
Fpop
Remove and return the head of the list stored in PLACE.
Analogous to (prog1 (car PLACE) (setf PLACE (cdr PLACE))), though more
careful about evaluating each argument only once and in the right order.
PLACE may be a symbol, or any generalized variable allowed by `setf'.Scl.elc
Fpush
Add NEWELT at the beginning of the list stored in LISTNAME.
Analogous to (setf LISTNAME (cons NEWELT LISTNAME)), though more careful
about evaluating each argument only once and in the right order.  LISTNAME
may be a symbol, or any generalized variable allowed by `setf'; that is, it
does not necessarily have to be a list, though `push' is most often used on
lists.  Scl.elc
Fpushnew
Add NEWELT at the beginning of LISTNAME, unless it's already in LISTNAME.
Like (push NEWELT LISTNAME), except that the list is unmodified if NEWELT is
`eql' to an element already on the list.
Keywords supported:  :test :test-not :key
See `member*' for the meaning of :test, :test-not and :key.Scl.elc
Fcl-set-elt
Scl.elc
Fcl-set-nthcdr
Scl.elc
Fcl-set-buffer-substring
Scl.elc
Fcl-set-substring
Scl.elc
Fcl-compiling-file
Scl.elc
Fproclaim
Scl.elc
Fdeclaim
Scl.elc
Fcl-random-time
Scl.elc
Fgensym
Generate a new uninterned symbol.
The name is made by appending a number to a prefix.  If ARG is a string, it
is the prefix, otherwise the prefix defaults to "G".  If ARG is an integer,
the internal counter is reset to that number before creating the name.
There is no way to specify both using this function.Scl.elc
Fgentemp
Generate a new interned symbol with a unique name.
The name is made by appending a number to ARG, default "G".
If ARG is not a string, it is ignored.Scl.elc
Fplusp
Return t if NUMBER is positive.Scl.elc
Fminusp
Return t if NUMBER is negative.Scl.elc
Foddp
Return t if INTEGER is odd.Scl.elc
Fevenp
Return t if INTEGER is even.Scl.elc
Vmost-positive-float
The float closest in value to positive infinity.Scl.elc
Vmost-negative-float
The float closest in value to negative infinity.Scl.elc
Vleast-positive-float
The positive float closest in value to zero.Scl.elc
Vleast-negative-float
The negative float closest in value to zero.Scl.elc
Vleast-positive-normalized-float
The normalized positive float closest in value to zero.

A float is normalized if the most significant bit of its mantissa is 1.
Use of denormalized (equivalently, subnormal) floats in calculations will
lead to gradual underflow, though they can be more accurate in representing
individual small values.  Normal and subnormal floats are as described in
IEEE 754.Scl.elc
Vleast-negative-normalized-float
The normalized negative float closest in value to zero.

See `least-positive-normalized-float' for details of normal and denormalized
numbers.Scl.elc
Vfloat-epsilon
The smallest float guaranteed not `eql' to 1.0 when added to 1.0.

That is, (eql 1.0 (+ 1.0 X)) will always give nil if (<= float-epsilon X) ,
but it may give t for smaller values.Scl.elc
Vfloat-negative-epsilon
The smallest float guaranteed not `eql' to 1.0 when subtracted from 1.0.

That is, (eql 1.0 (- 1.0 X)) will always give nil if (<=
float-negative-epsilon X) , but it may give t for smaller values.Scl.elc
Fendp
Return t if LIST is nil, or nil if LIST is a cons. Error otherwise.Scl.elc
Fsecond
Return the second element of the list LIST.Scl.elc
Fthird
Return the third element of the list X.Scl.elc
Ffourth
Return the fourth element of the list X.Scl.elc
Ffifth
Return the fifth element of the list X.Scl.elc
Fsixth
Return the sixth element of the list X.Scl.elc
Fseventh
Return the seventh element of the list X.Scl.elc
Feighth
Return the eighth element of the list X.Scl.elc
Fninth
Return the ninth element of the list X.Scl.elc
Ftenth
Return the tenth element of the list X.Scl.elc
Fcaar
Return the `car' of the `car' of X.Scl.elc
Fcadr
Return the `car' of the `cdr' of X. Equivalent to `(second X)'.Scl.elc
Fcdar
Return the `cdr' of the `car' of X.Scl.elc
Fcddr
Return the `cdr' of the `cdr' of X.Scl.elc
Fcaaar
Return the `car' of the `car' of the `car' of X.Scl.elc
Fcaadr
Return the `car' of the `car' of the `cdr' of X.Scl.elc
Fcadar
Return the `car' of the `cdr' of the `car' of X.Scl.elc
Fcaddr
Return the `car' of the `cdr' of the `cdr' of X.
Equivalent to `(third X)'.Scl.elc
Fcdaar
Return the `cdr' of the `car' of the `car' of X.Scl.elc
Fcdadr
Return the `cdr' of the `car' of the `cdr' of X.Scl.elc
Fcddar
Return the `cdr' of the `cdr' of the `car' of X.Scl.elc
Fcdddr
Return the `cdr' of the `cdr' of the `cdr' of X.Scl.elc
Fcaaaar
Return the `car' of the `car' of the `car' of the `car' of X.Scl.elc
Fcaaadr
Return the `car' of the `car' of the `car' of the `cdr' of X.Scl.elc
Fcaadar
Return the `car' of the `car' of the `cdr' of the `car' of X.Scl.elc
Fcaaddr
Return the `car' of the `car' of the `cdr' of the `cdr' of X.Scl.elc
Fcadaar
Return the `car' of the `cdr' of the `car' of the `car' of X.Scl.elc
Fcadadr
Return the `car' of the `cdr' of the `car' of the `cdr' of X.Scl.elc
Fcaddar
Return the `car' of the `cdr' of the `cdr' of the `car' of X.Scl.elc
Fcadddr
Return the `car' of the `cdr' of the `cdr' of the `cdr' of X.
Equivalent to `(fourth X)'.Scl.elc
Fcdaaar
Return the `cdr' of the `car' of the `car' of the `car' of X.Scl.elc
Fcdaadr
Return the `cdr' of the `car' of the `car' of the `cdr' of X.Scl.elc
Fcdadar
Return the `cdr' of the `car' of the `cdr' of the `car' of X.Scl.elc
Fcdaddr
Return the `cdr' of the `car' of the `cdr' of the `cdr' of X.Scl.elc
Fcddaar
Return the `cdr' of the `cdr' of the `car' of the `car' of X.Scl.elc
Fcddadr
Return the `cdr' of the `cdr' of the `car' of the `cdr' of X.Scl.elc
Fcdddar
Return the `cdr' of the `cdr' of the `cdr' of the `car' of X.Scl.elc
Fcddddr
Return the `cdr' of the `cdr' of the `cdr' of the `cdr' of X.Scl.elc
Flist*
Return a new list with specified args as elements, cons'd to last arg.
Thus, `(list* A B C D)' is equivalent to `(nconc (list A B C) D)', or to
`(cons A (cons B (cons C D)))'.Scl.elc
Fldiff
Return a copy of LIST with the tail SUBLIST removed.

If SUBLIST is the same Lisp object as LIST, return nil.  If SUBLIST is
not present in the list structure of LIST (that is, it is not the cdr
of some cons making up LIST), this function is equivalent to
`copy-list'.  LIST may be dotted.Scl.elc
Fpairlis
Make an alist from KEYS and VALUES.
Return a new alist composed by associating KEYS to corresponding VALUES;
the process stops as soon as KEYS or VALUES run out.
If ALIST is non-nil, the new pairs are prepended to it.Scl-extra.elc
Fcoerce
Coerce OBJECT to type TYPE.
TYPE is a Common Lisp type specifier.Scl-extra.elc
Fcomplement
Return a function which gives the logical inverse of what FUNCTION would.Scl-extra.elc
Fnotany
Return true if PREDICATE is false of every element of SEQUENCE.

With optional SEQUENCES, call PREDICATE each time with as many arguments as
there are SEQUENCES (plus one for the element from SEQUENCE).

arguments: (PREDICATE SEQUENCES &rest SEQUENCES)Scl-extra.elc
Fnotevery
Return true if PREDICATE is false of some element of SEQUENCE.

With optional SEQUENCES, call PREDICATE each time with as many arguments as
there are SEQUENCES (plus one for the element from SEQUENCE).

arguments: (PREDICATE SEQUENCES &rest SEQUENCES)Scl-extra.elc
Fcl-map-keymap
Scl-extra.elc
Fcl-map-keymap-recursively
Scl-extra.elc
Fcl-map-intervals
Scl-extra.elc
Fcl-map-overlays
Scl-extra.elc
Fcl-set-frame-visible-p
Scl-extra.elc
Fcl-progv-before
Scl-extra.elc
Fcl-progv-after
Scl-extra.elc
Fgcd
Return the greatest common divisor of the arguments.Scl-extra.elc
Flcm
Return the least common multiple of the arguments.Scl-extra.elc
Fisqrt
Return the integer square root of the argument.Scl-extra.elc
Ftruncate*
See `truncate'. This returns a list, not multiple values.Scl-extra.elc
Fround*
See `round'. This returns a list, not multiple values.Scl-extra.elc
Ffloor*
See `floor'. This returns a list, not multiple values.Scl-extra.elc
Fceiling*
See `ceiling'. This returns a list, not multiple values.Scl-extra.elc
Fmod*
The remainder of X divided by Y, with the same sign as Y.Scl-extra.elc
Frem*
The remainder of X divided by Y, with the same sign as X.Scl-extra.elc
Fsignum
Return 1 if A is positive, -1 if negative, 0 if zero.Scl-extra.elc
Frandom*
Return a random nonnegative number less than LIM, an integer or float.
Optional second arg STATE is a random-state object.Scl-extra.elc
Fmake-random-state
Return a copy of random-state STATE, or of `*random-state*' if omitted.
If STATE is t, return a new state object seeded from the time of day.Scl-extra.elc
Frandom-state-p
Return t if OBJECT is a random-state object.Scl-extra.elc
Fconcatenate
Concatenate, into a sequence of type TYPE, the argument SEQUENCES.Scl-extra.elc
Frevappend
Equivalent to (append (reverse X) Y).Scl-extra.elc
Fnreconc
Equivalent to (nconc (nreverse X) Y).Scl-extra.elc
Ftailp
Return true if SUBLIST is a tail of LIST.Scl-extra.elc
Fget-properties
Find a property from INDICATOR-LIST in PLIST.
Return 3 values:
- the first property found,
- its value,
- the tail of PLIST beginning with the found entry.Scl-extra.elc
Fconstantly
Construct a function always returning VALUE, and possibly MORE-VALUES.

The constructed function accepts any number of arguments, and ignores them.

Members of MORE-VALUES, if provided, will be passed as multiple values; see
`multiple-value-bind' and `multiple-value-setq'.Scl-extra.elc
Fcl-prettyprint
Insert a pretty-printed rendition of a Lisp FORM in current buffer.Scl-extra.elc
Fcl-do-prettyprint
Scl-extra.elc
Fcl-macroexpand-all
Expand all macro calls through a Lisp FORM.
This also does some trivial optimizations to make the form prettier.Scl-extra.elc
Fcl-macroexpand-body
Scl-extra.elc
Fcl-prettyexpand
Scl-extra.elc
Fchar=
Return t if all character arguments are the same object.Scl-extra.elc
Fchar/=
Return t if no two character arguments are the same object.Scl-extra.elc
Fchar<
Return t if the character arguments monotonically increase.Scl-extra.elc
Fchar>
Return t if the character arguments monotonically decrease.Scl-extra.elc
Fchar<=
Return t if the character arguments are monotonically nondecreasing.Scl-extra.elc
Fchar>=
Return t if the character arguments are monotonically nonincreasing.Scl-extra.elc
Fdigit-char-p
Return non-nil if CHARACTER represents a digit in base RADIX.

RADIX defaults to ten.  The actual non-nil value returned is the integer
value of the character in base RADIX.

arguments: (CHARACTER &optional (RADIX 10))
Scl-extra.elc
Fdigit-char
Return a character representing the integer WEIGHT in base RADIX.

RADIX defaults to ten.  If no such character exists, return nil.

arguments: (WEIGHT &optional (RADIX 10))
Scl-extra.elc
Falpha-char-p
Return t if CHARACTER is alphabetic, in some alphabet.

Han characters are regarded as alphabetic.Scl-extra.elc
Fgraphic-char-p
Return t if CHARACTER is not a control character.

Control characters are those in the range ?\x00 to ?\x15 and ?\x7f to
?\x9f, inclusive.Scl-extra.elc
Fstandard-char-p
Return t if CHARACTER is one of Common Lisp's standard characters.

These are the non-control ASCII characters, plus the newline character.Scl-extra.elc
Fchar-name
Return a string naming CHARACTER.

For the limited number of characters where the character name has been
specified by Common Lisp, this always returns the appropriate string
name.  Otherwise, `char-name' requires that the Unicode database be
available; see `describe-char-unicode-data'.Scl-extra.elc
Fname-char
Return a character with name NAME, a string.Scl-extra.elc
Fupper-case-p
Return t if CHARACTER is majuscule in the standard case table.Scl-extra.elc
Flower-case-p
Return t if CHARACTER is minuscule in the standard case table.Scl-extra.elc
Fboth-case-p
Return t if CHARACTER has case information in the standard case table.Scl-extra.elc
Fchar-upcase
If CHARACTER is lowercase, return its corresponding uppercase character.
Otherwise, return CHARACTER.Scl-extra.elc
Fchar-downcase
If CHARACTER is uppercase, return its corresponding lowercase character.
Otherwise, return CHARACTER.Scl-extra.elc
Finteger-length
Return the number of bits need to represent INTEGER in two's complement.Scl-seq.elc
Fremove-if
Remove all items satisfying PREDICATE in SEQUENCE.

This is a non-destructive function; it makes a copy of SEQUENCE if necessary
to avoid corrupting the original SEQUENCE.  If SEQUENCE is a list, the copy
may share list structure with SEQUENCE.  If no item satisfies PREDICATE,
SEQUENCE itself is returned, unmodified.

See `remove*' for the meaning of the keywords.

arguments: (PREDICATE SEQUENCE &key (KEY #'IDENTITY) (START 0) END FROM-END COUNT)Scl-seq.elc
Fremove-if-not
Remove all items not satisfying PREDICATE in SEQUENCE.

This is a non-destructive function; it makes a copy of SEQUENCE if necessary
to avoid corrupting the original SEQUENCE.  If SEQUENCE is a list, the copy
may share list structure with SEQUENCE.

See `remove*' for the meaning of the keywords.

arguments: (PREDICATE SEQUENCE &key (KEY #'IDENTITY) (START 0) END FROM-END COUNT)Scl-seq.elc
Fdelete-if
Remove all items satisfying PREDICATE in SEQUENCE.

This is a destructive function; if SEQUENCE is a list, it reuses its
storage.  If SEQUENCE is an array and some element satisfies SEQUENCE, a
copy is always returned.

See `remove*' for the meaning of the keywords.

arguments: (PREDICATE SEQUENCE &key (KEY #'IDENTITY) (START 0) END FROM-END COUNT)Scl-seq.elc
Fdelete-if-not
Remove all items not satisfying PREDICATE in SEQUENCE.

This is a destructive function; it reuses the storage of SEQUENCE whenever
possible.

See `remove*' for the meaning of the keywords.

arguments: (PREDICATE SEQUENCE &key (KEY #'IDENTITY) (START 0) END FROM-END COUNT)Scl-seq.elc
Fsubstitute-if
Substitute NEW for all items satisfying PREDICATE in SEQUENCE.

This is a non-destructive function; it makes a copy of SEQUENCE if necessary
to avoid corrupting the original SEQUENCE.

See `remove*' for the meaning of the keywords.

arguments: (NEW PREDICATE SEQUENCE &key (KEY #'identity) (START 0) END COUNT FROM-END)Scl-seq.elc
Fsubstitute-if-not
Substitute NEW for all items not satisfying PREDICATE in SEQUENCE.

This is a non-destructive function; it makes a copy of SEQUENCE if necessary
to avoid corrupting the original SEQUENCE.

See `remove*' for the meaning of the keywords.

arguments: (NEW PREDICATE SEQUENCE &key (KEY #'identity) (START 0) END COUNT FROM-END)Scl-seq.elc
Fnsubstitute-if
Substitute NEW for all items satisfying PREDICATE in SEQUENCE.

This is destructive function; it modifies SEQUENCE directly, never returning
a copy.  See `substitute-if' for a non-destructive version.

See `remove*' for the meaning of the keywords.

arguments: (NEW PREDICATE SEQUENCE &key (KEY #'identity) (START 0) END COUNT FROM-END)Scl-seq.elc
Fnsubstitute-if-not
Substitute NEW for all items not satisfying PREDICATE in SEQUENCE.

This is destructive function; it modifies SEQUENCE directly, never returning
a copy.  See `substitute-if-not' for a non-destructive version.

See `remove*' for the meaning of the keywords.

arguments: (NEW PREDICATE SEQUENCE &key (KEY #'identity) (START 0) END COUNT FROM-END)Scl-seq.elc
Ffind-if
Find the first item satisfying PREDICATE in SEQUENCE.

Return the matching item, or DEFAULT (not a keyword specified for this
function by Common Lisp) if not found.

See `remove*' for the meaning of the other keywords.

arguments: (PREDICATE SEQUENCE &key (KEY #'identity) (START 0) END FROM-END DEFAULT)Scl-seq.elc
Ffind-if-not
Find the first item not satisfying PREDICATE in SEQUENCE.

Return the matching ITEM, or DEFAULT (not a keyword specified for this
function by Common Lisp) if not found.

See `remove*' for the meaning of the keywords.

arguments: (PREDICATE SEQUENCE &key (KEY #'identity) (START 0) END FROM-END DEFAULT)Scl-seq.elc
Fposition-if
Find the first item satisfying PREDICATE in SEQUENCE.

Return the index of the matching item, or nil if not found.

See `remove*' for the meaning of the keywords.

arguments: (PREDICATE SEQUENCE &key (KEY #'identity) (START 0) END FROM-END)Scl-seq.elc
Fposition-if-not
Find the first item not satisfying PREDICATE in SEQUENCE.

Return the index of the matching item, or nil if not found.

See `remove*' for the meaning of the keywords.

arguments: (PREDICATE SEQUENCE &key (KEY #'identity) (START 0) END FROM-END)Scl-seq.elc
Fcount-if
Count the number of items satisfying PREDICATE in SEQUENCE.

See `remove*' for the meaning of the keywords.

arguments: (PREDICATE SEQUENCE &key (KEY #'identity) (START 0) END FROM-END)Scl-seq.elc
Fcount-if-not
Count the number of items not satisfying PREDICATE in SEQUENCE.

See `remove*' for the meaning of the keywords.

arguments: (PREDICATE SEQUENCE &key (KEY #'identity) (START 0) END FROM-END)Scl-seq.elc
Fstable-sort
Sort the argument SEQUENCE stably according to PREDICATE.
This is a destructive function; it reuses the storage of SEQUENCE if possible.
Keywords supported:  :key
:key specifies a one-argument function that transforms elements of SEQUENCE
into "comparison keys" before the test predicate is applied.  See
`member*' for more information.

arguments: (SEQUENCE PREDICATE &key (KEY #'identity))Scl-seq.elc
Fmember-if
Find the first item satisfying PREDICATE in LIST.
Return the sublist of LIST whose car matches.
See `member*' for the meaning of :key.

arguments: (PREDICATE LIST &key (KEY #'identity))Scl-seq.elc
Fmember-if-not
Find the first item not satisfying PREDICATE in LIST.
Return the sublist of LIST whose car matches.
See `member*' for the meaning of :key.

arguments: (PREDICATE LIST &key (KEY #'identity))Scl-seq.elc
Fassoc-if
Return the first item whose car satisfies PREDICATE in ALIST.
See `member*' for the meaning of :key.

arguments: (PREDICATE ALIST &key (KEY #'identity))Scl-seq.elc
Fassoc-if-not
Return the first item whose car does not satisfy PREDICATE in ALIST.
See `member*' for the meaning of :key.

arguments: (PREDICATE ALIST &key (KEY #'identity))Scl-seq.elc
Frassoc-if
Return the first item whose cdr satisfies PREDICATE in ALIST.
See `member*' for the meaning of :key.

arguments: (PREDICATE ALIST &key (KEY #'identity))Scl-seq.elc
Frassoc-if-not
Return the first item whose cdr does not satisfy PREDICATE in ALIST.
See `member*' for the meaning of :key.

arguments: (PREDICATE ALIST &key (KEY #'identity))Scl-seq.elc
Fstable-union
Stably combine LIST1 and LIST2 using a set-union operation.
The result list contains all items that appear in either LIST1 or LIST2.
The result is "stable" in that it preserves the ordering of elements in
LIST1 and LIST2.  The result specifically consists of the elements in LIST1
in order, followed by any elements in LIST2 that are not also in LIST1, in
the order given in LIST2.

This is a non-destructive function; it makes a copy of the data if necessary
to avoid corrupting the original LIST1 and LIST2.

See `union' for the meaning of :test, :test-not and :key.

NOTE: This is *NOT* a function defined by Common Lisp, but an XEmacs
extension.

arguments: (LIST1 LIST2 &key (TEST #'eql) (KEY #'identity) TEST-NOT)Scl-seq.elc
Fstable-intersection
Stably combine LIST1 and LIST2 using a set-intersection operation.

The result list contains all items that appear in both LIST1 and LIST2.
The result is "stable" in that it preserves the ordering of elements in
LIST1 that are also in LIST2.

This is a non-destructive function; it makes a copy of the data if necessary
to avoid corrupting the original LIST1 and LIST2.

See `union' for the meaning of :test, :test-not and :key.

NOTE: This is *NOT* a function defined by Common Lisp, but an XEmacs
extension.

arguments: (LIST1 LIST2 &key (TEST #'eql) (KEY #'identity) TEST-NOT)Scl-seq.elc
Fsubst-if
Substitute NEW for elements matching PREDICATE in TREE (non-destructively).

Return a copy of TREE with all matching elements replaced by NEW.  If no
element matches PREDICATE, return tree.

See `member*' for the meaning of :key.

arguments: (NEW PREDICATE TREE &key (KEY #'identity))Scl-seq.elc
Fsubst-if-not
Substitute NEW for elements not matching PREDICATE in TREE.

Return a copy of TREE with all matching elements replaced by NEW.  If every
element matches PREDICATE, return tree.

See `member*' for the meaning of :key.

arguments: (NEW PREDICATE TREE &key (KEY #'identity))Scl-seq.elc
Fnsubst-if
Substitute NEW for elements matching PREDICATE in TREE (destructively).

Any element of TREE which matches is changed to NEW (via a call to `setcar').

See `member*' for the meaning of :key.

arguments: (NEW PREDICATE TREE &key (KEY #'identity))Scl-seq.elc
Fnsubst-if-not
Substitute NEW for elements not matching PREDICATE in TREE (destructively).

Any element of TREE which matches is changed to NEW (via a call to `setcar').

See `member*' for the meaning of :key.

arguments: (NEW PREDICATE TREE &key (KEY #'identity))Spost-gc.elc
Frun-finalizers
Run the finalizers for all objects that have just become unreachable.Spost-gc.elc
Vsimple-finalizer-ephemerons
List of ephemerons for objects that have a finalizer attached..Spost-gc.elc
Fadd-finalizer
Add FUNC as a finalizer for object OBJECT.Spost-gc.elc
Fcleanup-simple-finalizers
Clean up `simple-finalizer-ephemerons'.Sversion.elc
Vxemacs-betaname
Non-nil when this is a test (beta) version of XEmacs.
Warning, this variable did not exist in XEmacs versions prior to 20.3.
Its value is derived from `emacs-beta-version'.  It is mutually exclusive
with `emacs-patch-level'.Sversion.elc
Vemacs-version
Version numbers of this version of XEmacs.Sversion.elc
Vemacs-build-time
Time at which Emacs was dumped out.Sversion.elc
Femacs-version
Return string describing the version of Emacs that is running.
When called interactively with a prefix argument, insert string at point.
Don't use this function in programs to choose actions according
to the system configuration; look at `system-configuration' instead.Sversion.elc
Femacs-version>=
Return true if the Emacs version is >= to the given MAJOR, MINOR,
   and PATCH numbers.
The MAJOR version number argument is required, but the other arguments
argument are optional. Only the Non-nil arguments are used in the test.Sversion.elc
VInstallation-file-coding-system
The coding system used to create the `Installation' file.

The `Installation' file is created by configure, and the
`Installation-string' variable reflects its contents.

This is initialized to reflect the native coding system at the time
version.el was byte-compiled; ideally it would reflect the native coding
system of the environment when XEmacs was dumped, but the locale
initialization code isn't called at dump time, and the appropriate value
at byte-compile time should be close enough.  Note that this means that the
value of `Installation-string' during dump time thus reflects loading the
file using the `binary' coding system.  Sversion.elc
VInstallation-string
Description of XEmacs installation.

This reflects the values that the configure script worked out at build time,
including things like the C code features included at compile time and the
installation prefix.  Normally used when submitting a bug report;
occasionally used, in a way the XEmacs developers don't endorse, to work out
version information.  Scustom.elc
Vcustom-define-hook
Hook called after defining each customize option.Scustom.elc
Vcustom-dont-initialize
Non-nil means `defcustom' should not initialize the variable.
That is used for the sake of `custom-make-dependencies'.
Users should not set it.Scustom.elc
Vcustom-current-group-alist
Alist of (FILE . GROUP) indicating the current group to use for FILE.Scustom.elc
Fcustom-initialize-default
Initialize SYMBOL with VALUE.
This will do nothing if symbol already has a default binding.
Otherwise, if symbol has a `saved-value' property, it will evaluate
the car of that and used as the default binding for symbol.
Otherwise, VALUE will be evaluated and used as the default binding for
symbol.Scustom.elc
Fcustom-initialize-set
Initialize SYMBOL with VALUE.
If the symbol doesn't have a default binding already,
then set it using its `:set' function (or `set-default' if it has none).
The value is either the value in the symbol's `saved-value' property,
if any, or VALUE.

This is like `custom-initialize-default', but uses the function specified by
`:set' to initialize SYMBOL.Scustom.elc
Fcustom-initialize-reset
Initialize SYMBOL with VALUE.
Set the symbol, using its `:set' function (or `set-default' if it has none).
The value is either the symbol's current value
 (as obtained using the `:get' function), if any,
or the value in the symbol's `saved-value' property if any,
or (last of all) VALUE.

Like `custom-initialize-set', but use the function specified by
`:get' to reinitialize SYMBOL if it is already bound.Scustom.elc
Fcustom-initialize-changed
Initialize SYMBOL with VALUE.
Like `custom-initialize-reset', but only use the `:set' function if
not using the standard setting.
For the standard setting, use `set-default'.Scustom.elc
Fcustom-declare-variable
Like `defcustom', but SYMBOL and DEFAULT are evaluated as normal arguments.
DEFAULT should be an expression to evaluate to compute the default value,
not the default value itself.

DEFAULT is stored as SYMBOL's value in the standard theme.  See
`custom-known-themes' for a list of known themes.  For backwards
compatibility, DEFAULT is also stored in SYMBOL's property
`standard-value'.  At the same time, SYMBOL's property `force-value' is
set to nil, as the value is no longer rogue.

The byte compiler adds an XEmacs-specific :default keyword and value to
`custom-declare-variable' calls when it byte-compiles the DEFAULT argument.
These describe what the custom UI shows when editing a customizable
variable's associated Lisp expression.  We don't encourage use of this
keyword in your own programs.  Scustom.elc
Fdefcustom
Declare SYMBOL as a customizable variable that defaults to VALUE.
DOC is the variable documentation.

Neither SYMBOL nor VALUE needs to be quoted.
If SYMBOL is not already bound, initialize it to VALUE.
The remaining arguments should have the form

   [KEYWORD VALUE]...

The following keywords are meaningful:

:type	VALUE should be a widget type for editing the symbol's value.
        The default is `sexp'.
:options VALUE should be a list of valid members of the widget type.
:group  VALUE should be a customization group.
        Add SYMBOL to that group.
:link LINK-DATA
        Include an external link after the documentation string for this
        item.  This is a sentence containing an active field which
        references some other documentation.

        There are three alternatives you can use for LINK-DATA:

        (custom-manual INFO-NODE)
             Link to an Info node; INFO-NODE is a string which specifies
             the node name, as in "(emacs)Top".  The link appears as
             `[manual]' in the customization buffer.

        (info-link INFO-NODE)
             Like `custom-manual' except that the link appears in the
             customization buffer with the Info node name.

        (url-link URL)
             Link to a web page; URL is a string which specifies the URL.
             The link appears in the customization buffer as URL.

        You can specify the text to use in the customization buffer by
        adding `:tag NAME' after the first element of the LINK-DATA; for
        example, (info-link :tag "foo" "(emacs)Top") makes a link to the
        Emacs manual which appears in the buffer as `foo'.

        An item can have more than one external link; however, most items
        have none at all.
:initialize
	VALUE should be a function used to initialize the
	variable.  It takes two arguments, the symbol and value
	given in the `defcustom' call.  The default is
	`custom-initialize-reset'.
:set	VALUE should be a function to set the value of the symbol.
	It takes two arguments, the symbol to set and the value to
	give it.  The default choice of function is `custom-set-default'.
:get    VALUE should be a function to extract the value of symbol.
	The function takes one argument, a symbol, and should return
	the current value for that symbol.  The default choice of function
	is `custom-default-value'. #### XEmacs used to say `default-value';
        is that right?
:require
	VALUE should be a feature symbol.  If you save a value
	for this option, then when your custom init file loads the value,
	it does (require VALUE) first.
:version
        VALUE should be a string specifying that the variable was
        first introduced, or its default value was changed, in Emacs
        version VERSION.
:tag LABEL
        Use LABEL, a string, instead of the item's name, to label the item
        in customization menus and buffers.
:load FILE
        Load file FILE (a string) before displaying this customization
        item.  Loading is done with `load', and only if the file is
        not already loaded.
:set-after VARIABLES
	Specifies that SYMBOL should be set after the list of variables
        VARIABLES when both have been customized.

Read the section about customization in the Emacs Lisp manual for more
information.Scustom.elc
Fdefface
Declare FACE as a customizable face that defaults to SPEC.
FACE does not need to be quoted.

Third argument DOC is the face documentation.

If FACE has been set with `custom-set-face', set the face attributes
as specified by that function, otherwise set the face attributes
according to SPEC.

The remaining arguments should have the form

   [KEYWORD VALUE]...

The following KEYWORDs are defined:

:group  VALUE should be a customization group.
        Add FACE to that group.

SPEC should be an alist of the form ((DISPLAY ATTS)...).

ATTS is a list of face attributes and their values.  The possible
attributes are defined in the variable `custom-face-attributes'.

The ATTS of the first entry in SPEC where the DISPLAY matches the
frame should take effect in that frame.  DISPLAY can either be the
symbol t, which will match all frames, or an alist of the form
((REQ ITEM...)...)

For the DISPLAY to match a FRAME, the REQ property of the frame must
match one of the ITEM.  The following REQ are defined:

`type' (the value of `window-system')
  Should be one of `x', `mswindows', or `tty'.

`class' (the frame's color support)
  Should be one of `color', `grayscale', or `mono'.

`min-colors' (the minimum number of colors the frame supports)
  Should be in integer which is compared to `display-color-cells'

`background' (what color is used for the background text)
  Should be one of `light' or `dark'.

Read the section about customization in the Emacs Lisp manual for more
information.Scustom.elc
Fcustom-current-group
Scustom.elc
Fcustom-declare-group
Like `defgroup', but SYMBOL is evaluated as a normal argument.Scustom.elc
Fdefgroup
Declare SYMBOL as a customization group containing MEMBERS.
SYMBOL does not need to be quoted.

Third arg DOC is the group documentation.

MEMBERS should be an alist of the form ((NAME WIDGET)...) where NAME
is a symbol and WIDGET is a widget for editing that symbol.  Useful
widgets are `custom-variable' for editing variables, `custom-face' for
edit faces, and `custom-group' for editing groups.

The remaining arguments should have the form

   [KEYWORD VALUE]...

The following KEYWORDs are defined:

:group  VALUE should be a customization group.
        Add SYMBOL to that group.

Read the section about customization in the Emacs Lisp manual for more
information.Scustom.elc
Vcustom-group-hash-table
Hash-table of non-empty groups.Scustom.elc
Fcustom-add-to-group
To existing GROUP add a new OPTION of type WIDGET.
If there already is an entry for OPTION and WIDGET, nothing is done.Scustom.elc
Fcustom-group-of-mode
Return the custom group corresponding to the major or minor MODE.
If no such group is found, return nil.Scustom.elc
Fcustom-handle-all-keywords
For customization option SYMBOL, handle keyword arguments ARGS.
Third argument TYPE is the custom option type.Scustom.elc
Fcustom-handle-keyword
For customization option SYMBOL, handle KEYWORD with VALUE.
Fourth argument TYPE is the custom option type.Scustom.elc
Fcustom-add-dependencies
To the custom option SYMBOL, add dependencies specified by VALUE.
VALUE should be a list of symbols.  For each symbol in that list,
this specifies that SYMBOL should be set after the specified symbol, if
both appear in constructs like `custom-set-variables'.Scustom.elc
Fcustom-add-option
To the variable SYMBOL add OPTION.

If SYMBOL is a hook variable, OPTION should be a hook member.
For other types variables, the effect is undefined.Scustom.elc
Fcustom-add-link
To the custom option SYMBOL add the link WIDGET.Scustom.elc
Fcustom-add-version
To the custom option SYMBOL add the version VERSION.Scustom.elc
Fcustom-add-load
To the custom option SYMBOL add the dependency LOAD.
LOAD should be either a library file name, or a feature name.Scustom.elc
Fcustom-autoload
Mark SYMBOL as autoloaded custom variable and add dependency LOAD.Scustom.elc
Vcustom-load-recursion
Hack to avoid recursive dependencies.Scustom.elc
Fcustom-load-symbol
Load all dependencies for SYMBOL.Scustom.elc
Vcustom-known-themes
Themes that have been define with `deftheme'.
The default value is the list (user standard).  The theme `standard'
contains the Emacs standard settings from the original Lisp files.  The
theme `user' contains all the the settings the user customized and saved.
Additional themes declared with the `deftheme' macro will be added to
the front of this list.Scustom.elc
Fcustom-declare-theme
Like `deftheme', but THEME is evaluated as a normal argument.
FEATURE is the feature this theme provides.  This symbol is created
from THEME by `custom-make-theme-feature'.Scustom.elc
Fdeftheme
Declare custom theme THEME.
The optional argument DOC is a doc string describing the theme.
The remaining arguments should have the form

   [KEYWORD VALUE]...

The following KEYWORD's are defined:

:short-description
	VALUE is a short (one line) description of the theme.  If not
	given, DOC is used.
:immediate
	If VALUE is non-nil, variables specified in this theme are set
	immediately when loading the theme.
:variable-set-string
	VALUE is a string used to indicate that a variable takes its
	setting from this theme.  It is passed to FORMAT with the name
	of the theme as an additional argument.  If not given, a
	generic description is used.
:variable-reset-string
	VALUE is a string used in the case a variable has been forced
	to its value in this theme.  It is passed to FORMAT with the
	name of the theme as an additional argument.  If not given, a
	generic description is used.
:face-set-string
	VALUE is a string used to indicate that a face takes its
	setting from this theme.  It is passed to FORMAT with the name
	of the theme as an additional argument.  If not given, a
	generic description is used.
:face-reset-string
	VALUE is a string used in the case a face has been forced to
	its value in this theme.  It is passed to FORMAT with the name
	of the theme as an additional argument.  If not given, a
	generic description is used.

Any theme `foo' should be defined in a file called `foo-theme.el';
see `custom-make-theme-feature' for more information.Scustom.elc
Fcustom-make-theme-feature
Given a symbol THEME, create a new symbol by appending "-theme".
Store this symbol in the `theme-feature' property of THEME.
Calling `provide-theme' to provide THEME actually puts `THEME-theme'
into `features'.

This allows for a file-name convention for autoloading themes:
Every theme X has a property `provide-theme' whose value is "X-theme".
(require-theme X) then attempts to load the file `X-theme.el'.Scustom.elc
Fcustom-theme-p
Non-nil when THEME has been defined.Scustom.elc
Fcustom-check-theme
Check whether THEME is valid, and signal an error if it is not.Scustom.elc
Fcustom-push-theme
Add (THEME MODE VALUE) to the list in property PROP of SYMBOL.
If the first element in that list is already (THEME ...),
discard it first.

MODE can be either the symbol `set' or the symbol `reset'.  If it is the
symbol `set', then VALUE is the value to use.  If it is the symbol
`reset', then VALUE is the mode to query instead.

In the following example for the variable `goto-address-url-face', the
theme `subtle-hacker' uses the same value for the variable as the theme
`gnome2':

  ((standard set bold)
   (gnome2 set info-xref)
   (jonadab set underline)
   (subtle-hacker reset gnome2))


If a value has been stored for themes A B and C, and a new value
is to be stored for theme C, then the old value of C is discarded.
If a new value is to be stored for theme B, however, the old value
of B is not discarded because B is not the car of the list.

For variables, list property PROP is `theme-value'.
For faces, list property PROP is `theme-face'.
This is used in `custom-do-theme-reset', for example.

The list looks the same in any case; the examples shows a possible
value of the `theme-face' property for the face `region':

  ((gnome2 set ((t (:foreground "cyan" :background "dark cyan"))))
   (standard set ((((class color) (background dark))
		   (:background "blue"))
		  (t (:background "gray")))))

This records values for the `standard' and the `gnome2' themes.
The user has not customized the face; had he done that,
the list would contain an entry for the `user' theme, too.
See `custom-known-themes' for a list of known themes.Scustom.elc
Vcustom-local-buffer
Non-nil, in a Customization buffer, means customize a specific buffer.
If this variable is non-nil, it should be a buffer,
and it means customize the local bindings of that buffer.
This variable is a permanent local, and it normally has a local binding
in every Customization buffer.Scustom.elc
Fcustom-set-variables
Initialize variables according to user preferences.
The settings are registered as theme `user'.
The arguments should each be a list of the form:

  (SYMBOL VALUE [NOW [REQUEST [COMMENT]]])

The unevaluated VALUE is stored as the saved value for SYMBOL.
If NOW is present and non-nil, VALUE is also evaluated and bound as
the default value for the SYMBOL.

REQUEST is a list of features we must 'require for SYMBOL.
COMMENT is a comment string about SYMBOL.Scustom.elc
Fcustom-theme-set-variables
Initialize variables according to settings specified by args.
Records the settings as belonging to THEME.

The arguments should be a list where each entry has the form:

  (SYMBOL VALUE [NOW [REQUEST [COMMENT]]])

The unevaluated VALUE is stored as the saved value for SYMBOL.
If NOW is present and non-nil, VALUE is also evaluated and bound as
the default value for the SYMBOL.
REQUEST is a list of features we must 'require for SYMBOL.
COMMENT is a comment string about SYMBOL.

Several properties of THEME and SYMBOL are used in the process:

If THEME property `theme-immediate' is non-nil, this is equivalent of
providing the NOW argument to all symbols in the argument list: SYMBOL
is bound to the evaluated VALUE.  The only difference is SYMBOL property
`force-value': if NOW is non-nil, SYMBOL's property `force-value' is set to
the symbol `rogue', else if THEME's property `theme-immediate' is non-nil,
FACE's property `force-face' is set to the symbol `immediate'.

VALUE itself is saved unevaluated as SYMBOL property `saved-value' and
in SYMBOL's list property `theme-value' (using `custom-push-theme').Scustom.elc
Fcustom-set-default
Default :set function for a customizable variable.
Normally, this sets the default value of VARIABLE to VALUE,
but if `custom-local-buffer' is non-nil,
this sets the local binding in that buffer instead.Scustom.elc
Fcustom-quote
Scustom.elc
Fcustomize-mark-to-save
Mark SYMBOL for later saving.

If the default value of SYMBOL is different from the standard value,
set the `saved-value' property to a list whose car evaluates to the
default value.  Otherwise, set it to nil.

To actually save the value, call `custom-save-all'.

Return non-nil iff the `saved-value' property actually changed.Scustom.elc
Fcustomize-mark-as-set
Mark current value of SYMBOL as being set from customize.

If the default value of SYMBOL is different from the saved value if any,
or else if it is different from the standard value, set the
`customized-value' property to a list whose car evaluates to the
default value.  Otherwise, set it to nil.

Return non-nil iff the `customized-value' property actually changed.Scustom.elc
Vcustom-loaded-themes
Themes in the order they are loaded.Scustom.elc
Fcustom-theme-loaded-p
Return non-nil when THEME has been loaded.Scustom.elc
Fprovide-theme
Indicate that this file provides THEME.
Add THEME to `custom-loaded-themes' and `provide' whatever
is stored in THEME's property `theme-feature'.

Usually the theme-feature property contains a symbol created
by `custom-make-theme-feature'.Scustom.elc
Frequire-theme
Try to load a theme by requiring its feature.
THEME's feature is stored in THEME's `theme-feature' property.

Usually the `theme-feature' property contains a symbol created
by `custom-make-theme-feature'.Scustom.elc
Fcustom-remove-theme
Delete all elements from SPEC-ALIST whose car is THEME.Scustom.elc
Fcustom-do-theme-reset
Undo all settings defined by THEME.

A variable remains unchanged if its property `theme-value' does not
contain a value for THEME.  A face remains unchanged if its property
`theme-face' does not contain a value for THEME.  In either case, all
settings for THEME are removed from the property and the variable or
face is set to the `user' theme.

See `custom-known-themes' for a list of known themes.Scustom.elc
Fcustom-theme-load-themes
Load the themes specified by BODY.
Record them as required by theme BY-THEME.  BODY is a sequence of either

THEME
	BY-THEME requires THEME
(reset THEME)
	Undo all the settings made by THEME
(hidden THEME)
	Require THEME but hide it from the user

All the themes loaded for BY-THEME are recorded in BY-THEME's property
`theme-loads-themes'.  Any theme loaded with the hidden predicate will
be given the property `theme-hidden' unless it has been loaded before.
Whether a theme has been loaded before is determined by the function
`custom-theme-loaded-p'.Scustom.elc
Fcustom-load-themes
Load themes for the USER theme as specified by BODY.

See `custom-theme-load-themes' for more information on BODY.Scustom.elc
Fcustom-theme-value
Determine the value for THEME defined by THEME-SPEC-LIST.
Returns a list with the original value if found; nil otherwise.

THEME-SPEC-LIST is an alist with themes as its key.  As new themes are
installed, these are added to the front of THEME-SPEC-LIST.
Each element has the form

  (THEME MODE VALUE)

MODE is either the symbol `set' or the symbol `reset'.  See
`custom-push-theme' for more information on the format of
THEME-SPEC-LIST.Scustom.elc
Fcustom-theme-variable-value
Return (list value) indicating value of VARIABLE in THEME.
If THEME does not define a value for VARIABLE, return nil.  The value
definitions per theme are stored in VARIABLE's property `theme-value'.
The actual work is done by function `custom-theme-value', which see.
See `custom-push-theme' for more information on how these definitions
are stored.Scustom.elc
Fcustom-theme-reset-internal
Reset SYMBOL to the value defined by TO-THEME.
If SYMBOL is not defined in TO-THEME, reset SYMBOL to the standard
value.  See `custom-theme-variable-value'.  The standard value is
stored in SYMBOL's property `standard-value'.Scustom.elc
Fcustom-theme-reset-variables
Reset the value of the variables to values previously defined.
Associate this setting with THEME.

ARGS is a list of lists of the form

    (VARIABLE TO-THEME)

This means reset VARIABLE to its value in TO-THEME.Scustom.elc
Fcustom-reset-variables
Reset the value of the variables to values previously saved.
This is the setting associated the `user' theme.

ARGS is a list of lists of the form

    (VARIABLE TO-THEME)

This means reset VARIABLE to its value in TO-THEME.Sfind-paths.elc
Vpaths-version-control-filename-regexp
File bases associated with version control.Sfind-paths.elc
Vpaths-lisp-filename-regexp
File bases that name Emacs Lisp files.Sfind-paths.elc
Vpaths-no-lisp-directory-regexp
File bases that may not be directories containing Lisp code.Sfind-paths.elc
Fpaths-find-recursive-path
Return a list of the directory hierarchy underneath DIRECTORIES.
The returned list is sorted by pre-order and lexicographically.
MAX-DEPTH limits the depth of the search to MAX-DEPTH level,
if it is a number.  If MAX-DEPTH is NIL, the search depth is unlimited.
EXCLUDE-REGEXP is a regexp that matches directory names to exclude
from the search.Sfind-paths.elc
Fpaths-file-readable-directory-p
Check if filename is a readable directory.Sfind-paths.elc
Fpaths-find-recursive-load-path
Construct a recursive load path underneath DIRECTORIES.Sfind-paths.elc
Fpaths-chase-symlink
Chase a symlink until the bitter end.Sfind-paths.elc
Fpaths-construct-path
Convert list of path components COMPONENTS into a path.
If EXPAND-DIRECTORY is non-NIL, use it as a directory to feed
to EXPAND-FILE-NAME.Sfind-paths.elc
Fpaths-construct-emacs-directory
Construct a directory name within the XEmacs hierarchy.
ROOT must be an installation root.
SUFFIX is the subdirectory from there.
BASE is the base to look for.Sfind-paths.elc
Fpaths-for-each-emacs-directory
Iterate over directories in the XEmacs hierarchy.
FUNC is a function that called for each directory, with the directory
as the only argument.
ROOTS must be a list of installation roots.
SUFFIX is the subdirectory from there.
BASEA is a list of possible bases to look for.
ENVVAR is the name of the environment variable that might also
specify the directory.
DEFAULT is the preferred value.
If KEEP-SUFFIX is non-nil, the suffix must be respected in searching
the directory.Sfind-paths.elc
Fpaths-find-emacs-directories
Find a list of directories in the XEmacs hierarchy.
ROOTS must be a list of installation roots.
SUFFIX is the subdirectory from there.
BASES is a list of bases to look for.
ENVVAR is the name of the environment variable that might also
specify the directory.
DEFAULT is the preferred value.
If KEEP-SUFFIX is non-nil, the suffix must be respected in searching
the directory.Sfind-paths.elc
Fpaths-find-emacs-directory
Find a directory in the XEmacs hierarchy.
ROOTS must be a list of installation roots.
SUFFIX is the subdirectory from there.
BASES is a list of possible bases to look for.
ENVVAR is the name of the environment variable that might also
specify the directory.
DEFAULT is the preferred value.
If KEEP-SUFFIX is non-nil, the suffix must be respected in searching
the directory.Sfind-paths.elc
Fpaths-for-each-site-directory
Iterate over the site-specific directories in the XEmacs hierarchy.
FUNC is a function that called for each directory, with the directory
as the only argument.
ROOTS must be a list of installation roots.
BASES is a list of possible bases to look for.
ARCH-DEPENDENT-P says whether the file is architecture-specific.
ENVVAR is the name of the environment variable that might also
specify the directory.
DEFAULT is the preferred value.Sfind-paths.elc
Fpaths-find-site-directory
Find a site-specific directory in the XEmacs hierarchy.
ROOTS must be a list of installation roots.
BASES is a list of possible bases to look for.
ARCH-DEPENDENT-P says whether the file is architecture-specific.
ENVVAR is the name of the environment variable that might also
specify the directory.
DEFAULT is the preferred value.Sfind-paths.elc
Fpaths-find-site-directories
Find a list of site-specific directories in the XEmacs hierarchy.
ROOTS must be a list of installation roots.
BASES is a list of bases to look for.
ARCH-DEPENDENT-P says whether the file is architecture-specific.
ENVVAR is the name of the environment variable that might also
specify the directory.
DEFAULT is the preferred value.Sfind-paths.elc
Fpaths-for-each-version-directory
Iterate over version-specific directories in the XEmacs hierarchy.
FUNC is a function that called for each directory, with the directory
as the only argument.
ROOTS must be a list of installation roots.
BASES is a list of possible bases to look for.
ARCH-DEPENDENT-P says whether the file is architecture-specific.
ENVVAR is the name of the environment variable that might also
specify the directory.
DEFAULT is the preferred value.
If ENFORCE-VERSION is non-nil, the directory must contain the XEmacs version.Sfind-paths.elc
Fpaths-find-version-directory
Find a version-specific directory in the XEmacs hierarchy.
ROOTS must be a list of installation roots.
BASES is a list of possible bases to look for.
ARCH-DEPENDENT-P says whether the file is architecture-specific.
ENVVAR is the name of the environment variable that might also
specify the directory.
DEFAULT is the preferred value.
If ENFORCE-VERSION is non-nil, the directory must contain the XEmacs version.Sfind-paths.elc
Fpaths-find-version-directories
Find a list of version-specific directories in the XEmacs hierarchy.
ROOTS must be a list of installation roots.
BASES is a list of possible bases to look for.
ARCH-DEPENDENT-P says whether the file is architecture-specific.
ENVVAR is the name of the environment variable that might also
specify the directory.
DEFAULT is the preferred value.
If ENFORCE-VERSION is non-nil, the directory must contain the XEmacs version.Sfind-paths.elc
Fpaths-find-architecture-directory
Find an architecture-specific directory in the XEmacs hierarchy.
ROOTS must be a list of installation roots.
BASES is a list of possible bases to look for.
ENVVAR is the name of the environment variable that might also
specify the directory.
DEFAULT is the preferred value.Sfind-paths.elc
Fconstruct-emacs-version-name
Construct a string from the raw XEmacs version number.Sfind-paths.elc
Fpaths-directories-which-exist
Return the directories among DIRECTORIES.
DIRECTORIES is a list of strings.Sfind-paths.elc
Fpaths-decode-directory-path
Split STRING at path separators into a directory list.
Non-"" components are converted into directory form.
If DROP-EMPTIES is non-NIL, "" components are dropped from the output.
Otherwise, they are left alone.Spackages.elc
Vpackages-package-list
Database of installed packages and version numbersSpackages.elc
Vpackages-load-path-depth
Depth of load-path search in package hierarchies.Spackages.elc
Vpackages-data-path-depth
Depth of data-path search in package hierarchies.Spackages.elc
Vearly-package-hierarchies
Package hierarchies early in the load path.Spackages.elc
Vearly-package-load-path
Load path for packages early in the load path.Spackages.elc
Vlate-package-hierarchies
Package hierarchies late in the load path.Spackages.elc
Vlate-package-load-path
Load path for packages late in the load path.Spackages.elc
Vlast-package-hierarchies
Package hierarchies last in the load path.Spackages.elc
Vlast-package-load-path
Load path for packages last in the load path.Spackages.elc
Fpackages-package-hierarchy-directory-names
Returns a list of package hierarchy directory names.
These are the valid immediate directory names of package
directories, directories with higher priority firstSpackages.elc
Fpackage-get-key
Get info `key' from package `name'.Spackages.elc
Fpackage-provide
Spackages.elc
Fpackage-suppress
Set up a package-suppress condition FORM for FILE in PACKAGE.
When XEmacs searches for a file in the load path, it will ignore FILE
if FORM evaluates to non-nil.Spackages.elc
Fpackage-require
Spackages.elc
Fpackage-delete-name
Spackages.elc
Vautoload-file-name
Filename that autoloads are expected to be found in.Spackages.elc
Flocate-library
Show the precise file name of Emacs library LIBRARY.
This command searches the directories in `load-path' like `M-x load-library'
to find the file that `M-x load-library RET LIBRARY RET' would load.
Optional second arg NOSUFFIX non-nil means don't add suffixes `.elc' or `.el'
to the specified name LIBRARY.

If the optional third arg PATH is specified, that list of directories
is used instead of `load-path'.Spackages.elc
Fpackages-add-suffix
Spackages.elc
Fpackages-list-autoloads-path
List autoloads from precomputed load-path.Spackages.elc
Fpackages-list-autoloads
List autoload files in (what will be) the normal lisp search path.
This function is used during build to find where the global symbol files so
they can be perused for their useful information.Spackages.elc
Fpackages-new-autoloads
Return autoloads files that have been added or modified since XEmacs dump.Spackages.elc
Fpackages-reload-autoloads
Reload new or updated auto-autoloads files.
This is an extremely dangerous function to call after the user-init-files
is run.  Don't call it or you'll be sorry.Spackages.elc
Flocate-data-directory-list
Locate the matching list of directories in a search path DIR-LIST.
If no DIR-LIST is supplied, it defaults to `data-directory-list'.Spackages.elc
Flocate-data-directory
Locate a directory in a search path DIR-LIST (a list of directories).
If no DIR-LIST is supplied, it defaults to `data-directory-list'.Spackages.elc
Flocate-data-file
Locate a file in a search path DIR-LIST (a list of directories).
If no DIR-LIST is supplied, it defaults to `data-directory-list'.
This function is basically a wrapper over `locate-file'.Spackages.elc
Fpackages-find-package-hierarchies-named
Find a set of package hierarchies within an XEmacs installation.
PACKAGE-DIRECTORIES is a list of package directories.
BASE is a subdirectory name for the hierarchy.
Returns list of hierarchies.Spackages.elc
Fpackages-split-path
Split PATH at "", return pair with two components.
The second component is shared with PATH.Spackages.elc
Fpackages-split-package-path
Split up PACKAGE-PATH into early, late and last components.
The separation is by "" components.
This returns
(LIST EARLY-PACKAGE-HIERARCHIES LATE-PACKAGE-HIERARCHIES LAST-PACKAGE-HIERARCHIES).Spackages.elc
Fpackages-deconstruct
Deconstruct LIST and feed it to CONSUMER.
CONSUMER is a function that accepts the elements of LISTS as separate arguments.Spackages.elc
Fpackages-find-installation-package-directories
Find the package directories in the XEmacs installation.
ROOTS is a list of installation roots.Spackages.elc
Fpackages-find-package-hierarchies
Find package hierarchies in a list of package directories.
PACKAGE-DIRECTORIES is a list of package directories.
DEFAULT is a default list of package hierarchies.
ENVVAR is the name of an environment variable that may override
the default.Spackages.elc
Fpackages-find-all-package-hierarchies
Find the package hierarchies.
ROOTS is a list of installation roots.
Returns a list of three directory lists, the first being the list of early
hierarchies, the second that of the late hierarchies, and the third the
list of the last hierarchies.Spackages.elc
Fpackages-find-package-library-path
Construct a path into a component of the packages hierarchy.
PACKAGE-HIERARCHIES is a list of package hierarchies.
SUFFIXES is a list of names of hierarchy subdirectories to look for.Spackages.elc
Fpackages-find-package-load-path
Construct the load-path component for packages.
PACKAGE-HIERARCHIES is a list of package hierarchies.Spackages.elc
Fpackages-find-package-exec-path
Construct the exec-path component for packages.
PACKAGE-HIERARCHIES is a list of package hierarchies.Spackages.elc
Fpackages-find-package-info-path
Construct the info-path component for packages.
PACKAGE-HIERARCHIES is a list of package directories.Spackages.elc
Fpackages-find-package-data-path
Construct the data-path component for packages.
PACKAGE-HIERARCHIES is a list of package hierarchies.Spackages.elc
Fpackages-load-package-lisps
Load all Lisp files of a certain name along a load path.
BASE is the base name of the files.Spackages.elc
Fpackages-load-package-auto-autoloads
Load auto-autoload files along a load path.Spackages.elc
Fpackages-handle-package-dumped-lisps
Load dumped-lisp.el files along a load path.
Call HANDLE on each file off definitions of PACKAGE-LISP there.Spackages.elc
Fpackages-load-package-dumped-lisps
Load dumped-lisp.el files along a load path.
Also load files off PACKAGE-LISP definitions there.Spackages.elc
Fpackages-collect-package-dumped-lisps
Load dumped-lisp.el files along a load path.
Return list of files off PACKAGE-LISP definitions there.Ssetup-paths.elc
Vpaths-core-load-path-depth
Depth of load-path searches in core Lisp paths.Ssetup-paths.elc
Vpaths-site-load-path-depth
Depth of load-path searches in site Lisp paths.Ssetup-paths.elc
Vpaths-mule-load-path-depth
Depth of load-path searches in Mule Lisp paths.Ssetup-paths.elc
Vpaths-module-load-path-depth
Depth of load-path searches in module paths.Ssetup-paths.elc
Vpaths-default-info-directories
Directories appended to the end of the info path by default.Ssetup-paths.elc
Fpaths-emacs-root-p
Check if DIRECTORY is a plausible installation root.Ssetup-paths.elc
Fpaths-emacs-data-root-p
Check if DIRECTORY is a plausible data installation root.
A data installation root is one containing data files that may be shared
among multiple different versions of XEmacs, the packages in particular.
This serves as an additional filter to narrow down the list of plausible
installation roots.Ssetup-paths.elc
Fpaths-find-invocation-roots
Find the list of run-time roots of XEmacs.
INVOCATION-DIRECTORY is a directory containing the XEmacs executable.
INVOCATION-NAME is the name of the executable itself
ROOT-P is a function that tests whether a root is plausible.Ssetup-paths.elc
Fpaths-find-emacs-roots
Find all plausible installation roots for XEmacs.
This is a list of plausible directories in which to search for the important
directories used by XEmacs at run-time, for example `exec-directory',
`data-directory' and `lisp-directory'.
ROOT-P is a function that tests whether a root is plausible.Ssetup-paths.elc
Fpaths-find-site-lisp-directory
Find the site Lisp directory of the XEmacs hierarchy.
ROOTS is a list of installation roots.Ssetup-paths.elc
Fpaths-find-site-module-directory
Find the site modules directory of the XEmacs hierarchy.
ROOTS is a list of installation roots.Ssetup-paths.elc
Fpaths-find-lisp-directory
Find the main Lisp directory of the XEmacs hierarchy.
ROOTS is a list of installation roots.Ssetup-paths.elc
Fpaths-find-mule-lisp-directory
Find the Mule Lisp directory of the XEmacs hierarchy.
ROOTS is a list of installation roots.Ssetup-paths.elc
Fpaths-find-module-directory
Find the main modules directory of the XEmacs hierarchy.
ROOTS is a list of installation roots.Ssetup-paths.elc
Fpaths-construct-load-path
Construct the complete load path.
ROOTS is the list of installation roots.
EARLY-PACKAGE-LOAD-PATH, LATE-PACKAGE-LOAD-PATH, and LAST-PACKAGE-LOAD-PATH
are the load paths for the package hierarchies.
SITE-LISP-DIRECTORY and MULE-LISP-DIRECTORY are optional directories to be
included in the load path---SITE-LISP-DIRECTORY for the obsolete site-specific
Lisp files, and MULE-LISP-DIRECTORY for the Mule Lisp files, which exist
only in Mule installations.Ssetup-paths.elc
Fpaths-construct-module-load-path
Construct the modules load path.Ssetup-paths.elc
Fpaths-construct-info-path
Construct the info path.
ROOTS is the list of installation roots.
EARLY-PACKAGE-HIERARCHIES, LATE-PACKAGE-HIERARCHIES, and
LAST-PACKAGE-HIERARCHIES are lists of package hierarchy roots,
respectively.Ssetup-paths.elc
Fpaths-find-doc-directory
Find the documentation directory.
ROOTS is the list of installation roots.Ssetup-paths.elc
Fpaths-find-exec-directory
Find the binary directory.
ROOTS is the list of installation roots.Ssetup-paths.elc
Fpaths-construct-exec-path
Find the binary path.
ROOTS is the list of installation roots.
EARLY-PACKAGE-HIERARCHIES, LATE-PACKAGE-HIERARCHIES, and
LAST-PACKAGE-HIERARCHIES are lists of package hierarchy roots,
respectively.
EXEC-DIRECTORY is the directory of architecture-dependent files that
come with XEmacs.
EARLY-PACKAGES, LATE-PACKAGES, and LAST-PACKAGES are lists of
package hierarchy roots, respectively.Ssetup-paths.elc
Fpaths-find-data-directory
Find the data directory.
ROOTS is the list of installation roots.Ssetup-paths.elc
Fpaths-construct-data-directory-list
Construct the data path.
DATA-DIRECTORY is the data directory of the XEmacs installation.
EARLY-PACKAGE-HIERARCHIES, LATE-PACKAGE-HIERARCHIES, and
LAST-PACKAGE-HIERARCHIES are lists of package hierarchy roots,
respectively.Sreplace.elc
Vcase-replace
*Non-nil means `query-replace' should preserve case in replacements.
What this means is that `query-replace' will change the case of the
replacement text so that it matches the text that was replaced.
If this variable is nil, the replacement text will be inserted
exactly as it was specified by the user, irrespective of the case
of the text that was replaced.

Note that this flag has no effect if `case-fold-search' is nil,
or if the replacement text has any uppercase letters in it.Sreplace.elc
Vquery-replace-interactive
Non-nil means `query-replace' uses the last search string.
That becomes the "string to replace".Sreplace.elc
Vreplace-search-function
Function used by perform-replace to search forward for a string. It will be
called with two arguments: the string to search for and a limit bounding the
search.Sreplace.elc
Vreplace-re-search-function
Function used by perform-replace to search forward for a regular
expression. It will be called with two arguments: the regexp to search for and
a limit bounding the search.Sreplace.elc
Fquery-replace-read-args
Sreplace.elc
Fquery-replace
Replace some occurrences of FROM-STRING with TO-STRING.
As each match is found, the user must type a character saying
what to do with it.  For directions, type \[help-command] at that time.

If `query-replace-interactive' is non-nil, the last incremental search
string is used as FROM-STRING--you don't have to specify it with the
minibuffer.

Preserves case in each replacement if `case-replace' and `case-fold-search'
are non-nil and FROM-STRING has no uppercase letters.
(Preserving case means that if the string matched is all caps, or capitalized,
then its replacement is upcased or capitalized.)

Third arg DELIMITED (prefix arg if interactive), if non-nil, means replace
only matches surrounded by word boundaries.

To customize possible responses, change the "bindings" in `query-replace-map'.Sreplace.elc
Fquery-replace-regexp
Replace some things after point matching REGEXP with TO-STRING.
As each match is found, the user must type a character saying
what to do with it.  For directions, type \[help-command] at that time.

If `query-replace-interactive' is non-nil, the last incremental search
regexp is used as REGEXP--you don't have to specify it with the
minibuffer.

Preserves case in each replacement if `case-replace' and `case-fold-search'
are non-nil and REGEXP has no uppercase letters.
Third arg DELIMITED (prefix arg if interactive), if non-nil, means replace
only matches surrounded by word boundaries.
In TO-STRING, `\&' stands for whatever matched the whole of REGEXP,
and `\=\N' (where N is a digit) stands for
 whatever what matched the Nth `\(...\)' in REGEXP.Sreplace.elc
Fmap-query-replace-regexp
Replace some matches for REGEXP with various strings, in rotation.
The second argument TO-STRINGS contains the replacement strings, separated
by spaces.  This command works like `query-replace-regexp' except
that each successive replacement uses the next successive replacement string,
wrapping around from the last such string to the first.

Non-interactively, TO-STRINGS may be a list of replacement strings.

If `query-replace-interactive' is non-nil, the last incremental search
regexp is used as REGEXP--you don't have to specify it with the minibuffer.

A prefix argument N says to use each replacement string N times
before rotating to the next.Sreplace.elc
Freplace-string
Replace occurrences of FROM-STRING with TO-STRING.
Preserve case in each match if `case-replace' and `case-fold-search'
are non-nil and FROM-STRING has no uppercase letters.
(Preserving case means that if the string matched is all caps, or capitalized,
then its replacement is upcased or capitalized.)

Third arg DELIMITED (prefix arg if interactive), if non-nil, means replace
only matches surrounded by word boundaries.

If `query-replace-interactive' is non-nil, the last incremental search
string is used as FROM-STRING--you don't have to specify it with the
minibuffer.

This function is usually the wrong thing to use in a Lisp program.
What you probably want is a loop like this:
  (while (search-forward FROM-STRING nil t)
    (replace-match TO-STRING nil t))
which will run faster and will not set the mark or print anything.Sreplace.elc
Freplace-regexp
Replace things after point matching REGEXP with TO-STRING.
Preserve case in each match if `case-replace' and `case-fold-search'
are non-nil and REGEXP has no uppercase letters.
(Preserving case means that if the string matched is all caps, or capitalized,
then its replacement is upcased or capitalized.)

Third arg DELIMITED (prefix arg if interactive), if non-nil, means replace
only matches surrounded by word boundaries.
In TO-STRING, `\&' stands for whatever matched the whole of REGEXP,
and `\=\N' (where N is a digit) stands for
 whatever what matched the Nth `\(...\)' in REGEXP.

If `query-replace-interactive' is non-nil, the last incremental search
regexp is used as REGEXP--you don't have to specify it with the minibuffer.

This function is usually the wrong thing to use in a Lisp program.
What you probably want is a loop like this:
  (while (re-search-forward REGEXP nil t)
    (replace-match TO-STRING nil nil))
which will run faster and will not set the mark or print anything.Sreplace.elc
Vregexp-history
History list for some commands that read regular expressions.Sreplace.elc
Foperate-on-non-matching-lines
Internal function used by delete-non-matching-lines,
kill-non-matching-lines, and copy-matching-lines.

REGEXP is a regular expression to *not* match when performing
operations.

If DELETE is non-nil, the lines of text are deleted.  It doesn't make
sense to set this to nil if KILL is nil -- nothing will happen.

If KILL is non-nil, the lines of text are stored in the kill ring (as
one block of text).

BEG and END, if non-nil, specify the start and end locations to work
within.  If these are nil, point and point-max are used.

A match split across lines preserves all the lines it lies in.
Applies to all lines after point.

Returns the number of lines matched.Sreplace.elc
Fdelete-non-matching-lines
Delete lines that do not match REGEXP, from point to the end of the
buffer (or within the region, if it is active).Sreplace.elc
Fkill-non-matching-lines
Delete the lines that do not match REGEXP, from point to the end of
the buffer (or within the region, if it is active).  The deleted lines
are placed in the kill ring as one block of text.Sreplace.elc
Fcopy-non-matching-lines
Find all lines that do not match REGEXP from point to the end of the
buffer (or within the region, if it is active), and place them in the
kill ring as one block of text.Sreplace.elc
Foperate-on-matching-lines
Internal function used by delete-matching-lines, kill-matching-lines,
and copy-matching-lines.

If DELETE is non-nil, the lines of text are deleted.  It doesn't make
sense to set this to nil if KILL is nil -- nothing will happen.

If KILL is non-nil, the lines of text are stored in the kill ring (as
one block of text).

BEG and END, if non-nil, specify the start and end locations to work
within.  If these are nil, point and point-max are used.

If a match is split across lines, all the lines it lies in are deleted.
Applies to lines after point.
Returns the number of lines matched.Sreplace.elc
Fdelete-matching-lines
Delete the lines that match REGEXP, from point to the end of the
buffer (or within the region, if it is active).Sreplace.elc
Fkill-matching-lines
Delete the lines that match REGEXP, from point to the end of the
buffer (or within the region, if it is active).  The deleted lines are
placed in the kill ring as one block of text.Sreplace.elc
Fcopy-matching-lines
Find all lines that match REGEXP from point to the end of the
buffer (or within the region, if it is active), and place them in the
kill ring as one block of text.Sreplace.elc
Fcount-matches
Print number of matches for REGEXP following point.Sreplace.elc
Vquery-replace-help
Help message while in query-replaceSreplace.elc
Vquery-replace-map
Keymap that defines the responses to questions in `query-replace'.
The "bindings" in this map are not commands; they are answers.
The valid answers include `act', `skip', `act-and-show',
`exit', `act-and-exit', `edit', `delete-and-edit', `recenter',
`automatic', `backup', `exit-prefix', and `help'.Sreplace.elc
Fperform-replace-next-event
Sreplace.elc
Fperform-replace
Subroutine of `query-replace'.  Its complexity handles interactive queries.
Don't use this in your own program unless you want to query and set the mark
just as `query-replace' does.  Instead, write a simple loop like this:
  (while (re-search-forward "foo[ 	]+bar" nil t)
    (replace-match "foobar" nil nil))
which will run faster and probably do exactly what you want.
When searching for a match, this function uses
`replace-search-function' and `replace-re-search-function'.Swidget.elc
Fdefine-widget
Define a new widget type named NAME from CLASS.

NAME and CLASS should both be symbols, CLASS should be one of the
existing widget types, or nil to create the widget from scratch.

After the new widget has been defined, the following two calls will
create identical widgets:

* (widget-create NAME)

* (apply 'widget-create CLASS ARGS)

The third argument DOC is a documentation string for the widget.Scmdloop.elc
Frecursion-depth
Return the current depth in recursive edits.Scmdloop.elc
Ftop-level
Exit all recursive editing levels.Scmdloop.elc
Fexit-recursive-edit
Exit from the innermost recursive edit or minibuffer.Scmdloop.elc
Fabort-recursive-edit
Abort the command that requested this recursive edit or minibuffer input.Scmdloop.elc
Fkeyboard-quit
Signal a `quit' condition.
If this character is typed while lisp code is executing, it will be treated
 as an interrupt.
If this character is typed at top-level, this simply beeps.
If `zmacs-regions' is true, and the zmacs region is active in this buffer,
then this key deactivates the region without beeping or signalling.Scmdloop.elc
Vbuffer-quit-function
Function to call to "quit" the current buffer, or nil if none.
\[keyboard-escape-quit] calls this function when its more local actions
(such as cancelling a prefix argument, minibuffer or region) do not apply.Scmdloop.elc
Fkeyboard-escape-quit
Exit the current "mode" (in a generalized sense of the word).
This command can exit an interactive command such as `query-replace',
can clear out a prefix argument or a region,
can get out of the minibuffer or other recursive edit,
cancel the use of the current buffer (for special-purpose buffers),
or go back to just one window (by deleting all but the selected window).Scmdloop.elc
Fcancel-mode-internal
Scmdloop.elc
Vlast-error
Object describing the last signaled error.Scmdloop.elc
Verrors-deactivate-region
*Non-nil means that errors will cause the region to be deactivated.Scmdloop.elc
Fcommand-error
Scmdloop.elc
Fdescribe-last-error
Redisplay the last error-message.  See the variable `last-error'.Scmdloop.elc
Ftruncate-command-history-for-gc
Scmdloop.elc
Vteach-extended-commands-p
*If true, then `\[execute-extended-command]' will teach you keybindings.
Any time you execute a command with \[execute-extended-command] which has a
shorter keybinding, you will be shown the alternate binding before the
command executes.  There is a short pause after displaying the binding,
before executing it; the length can be controlled by
`teach-extended-commands-timeout'.Scmdloop.elc
Vteach-extended-commands-timeout
*How long to pause after displaying a keybinding before executing.
The value is measured in seconds.  This only applies if
`teach-extended-commands-p' is true.Scmdloop.elc
Vsuggest-key-bindings
*FSFmacs equivalent of `teach-extended-commands-p'.
Provided for compatibility only.
Non-nil means show the equivalent key-binding when M-x command has one.
The value can be a length of time to show the message for, in seconds.

If the value is non-nil and not a number, we wait the number of seconds
specified by `teach-extended-commands-timeout'.Scmdloop.elc
Fexecute-extended-command
Read a command name from the minibuffer using 'completing-read'.
Then call the specified command using 'command-execute' and return its
return value.  If the command asks for a prefix argument, supply the
value of the current raw prefix argument, or the value of PREFIX-ARG
when called from Lisp.Scmdloop.elc
Fy-or-n-p-minibuf
Ask user a "y or n" question.  Return t if answer is "y".
Takes one argument, which is the string to display to ask the question.
It should end in a space; `y-or-n-p' adds `(y or n) ' to it.
No confirmation of the answer is requested; a single character is enough.
Also accepts Space to mean yes, or Delete to mean no.Scmdloop.elc
Fyes-or-no-p-minibuf
Ask user a yes-or-no question.  Return t if answer is yes.
Takes one argument, which is the string to display to ask the question.
It should end in a space; `yes-or-no-p' adds `(yes or no) ' to it.
The user must confirm the answer with RET,
and can edit it until it has been confirmed.Scmdloop.elc
Fyes-or-no-p
Ask user a yes-or-no question.  Return t if answer is yes.
The question is asked with a dialog box or the minibuffer, as appropriate.
Takes one argument, which is the string to display to ask the question.
It should end in a space; `yes-or-no-p' adds `(yes or no) ' to it.
The user must confirm the answer with RET,
and can edit it until it as been confirmed.Scmdloop.elc
Fy-or-n-p
Ask user a "y or n" question.  Return t if answer is "y".
Takes one argument, which is the string to display to ask the question.
The question is asked with a dialog box or the minibuffer, as appropriate.
It should end in a space; `y-or-n-p' adds `(y or n) ' to it.
No confirmation of the answer is requested; a single character is enough.
Also accepts Space to mean yes, or Delete to mean no.Scmdloop.elc
Fread-char
Read a character from the command input (keyboard or macro).
If a mouse click or non-ASCII character is detected, an error is
signalled.  The character typed is returned as an ASCII value.  This
is most likely the wrong thing for you to be using: consider using
the `next-command-event' function instead.Scmdloop.elc
Fread-char-exclusive
Read a character from the command input (keyboard or macro).
If a mouse click or non-ASCII character is detected, it is discarded.
The character typed is returned as an ASCII value.  This is most likely
the wrong thing for you to be using: consider using the
`next-command-event' function instead.Scmdloop.elc
Vread-quoted-char-radix
*Radix for \[quoted-insert] and other uses of `read-quoted-char'.
Legitimate radix values are 8, 10 and 16.Scmdloop.elc
Fread-quoted-char
Like `read-char', but do not allow quitting.

Also, if the first character read is a digit of base (the value of)
`read-quoted-char-radix', we read as many of such digits as are
typed and return a character with the corresponding Unicode code
point.  Any input that is not a digit (in the base used) terminates
the sequence.  If the terminator is RET, it is discarded; any other
terminator is used itself as input.

The optional argument PROMPT specifies a string to use to prompt the user.
The variable `read-quoted-char-radix' controls which radix to use
for numeric input.Scmdloop.elc
Fmomentary-string-display
Momentarily display STRING in the buffer at POS.
Display remains until next character is typed.
If the char is EXIT-CHAR (optional third arg, default is SPC) it is swallowed;
otherwise it is then available as input (as a command if nothing else).
Display MESSAGE (optional fourth arg) in the echo area.
If MESSAGE is nil, instructions to type EXIT-CHAR are displayed there.Skeymap.elc
Fundefined
Skeymap.elc
Fsuppress-keymap
Make MAP override all normally self-inserting keys to be undefined.
Normally, as an exception, digits and minus-sign are set to make prefix args,
but optional second arg NODIGITS non-nil treats them like other chars.Skeymap.elc
Fsubstitute-key-definition
Replace OLDDEF with NEWDEF for any keys in KEYMAP now defined as OLDDEF.
In other words, OLDDEF is replaced with NEWDEF wherever it appears.
Prefix keymaps are checked recursively.  If optional fourth argument OLDMAP
is specified, we redefine in KEYMAP as NEWDEF those chars which are defined
as OLDDEF in OLDMAP, unless that keybinding is already present in KEYMAP.
If optional fifth argument PREFIX is non-nil, then only those occurrences of
OLDDEF found in keymaps accessible through the keymap bound to PREFIX in
KEYMAP are redefined.  See also `accessible-keymaps'.Skeymap.elc
Fkbd
Convert KEYS to the internal Emacs key representation.
KEYS should be a string constant in the format used for
saving keyboard macros (see `insert-kbd-macro').Skeymap.elc
Finsert-key-binding
Insert the command bound to KEY.Skeymap.elc
Fread-command-or-command-sexp
Read a command symbol or command sexp.
A command sexp is wrapped in an interactive lambda if needed.
Prompts with PROMPT.Skeymap.elc
Flocal-key-binding
Return the binding for command KEYS in current local keymap only.
KEYS is a string, a vector of events, or a vector of key-description lists
as described in the documentation for the `define-key' function.
The binding is probably a symbol with a function definition; see
the documentation for `lookup-key' for more information.Skeymap.elc
Fglobal-key-binding
Return the binding for command KEYS in current global keymap only.
KEYS is a string or vector of events, a sequence of keystrokes.
The binding is probably a symbol with a function definition; see
the documentation for `lookup-key' for more information.Skeymap.elc
Fglobal-set-key
Give KEY a global binding as COMMAND.
COMMAND is a symbol naming an interactively-callable function.
KEY is a string, a vector of events, or a vector of key-description lists
as described in the documentation for the `define-key' function.
Note that if KEY has a local binding in the current buffer
that local binding will continue to shadow any global binding.Skeymap.elc
Flocal-set-key
Give KEY a local binding as COMMAND.
COMMAND is a symbol naming an interactively-callable function.
KEY is a string, a vector of events, or a vector of key-description lists
as described in the documentation for the `define-key' function.
The binding goes in the current buffer's local map,
which is shared with other buffers in the same major mode.Skeymap.elc
Fglobal-unset-key
Remove global binding of KEY.
KEY is a string, a vector of events, or a vector of key-description lists
as described in the documentation for the `define-key' function.Skeymap.elc
Flocal-unset-key
Remove local binding of KEY.
KEY is a string, a vector of events, or a vector of key-description lists
as described in the documentation for the `define-key' function.Skeymap.elc
Fminor-mode-key-binding
Find the visible minor mode bindings of KEY.
Return an alist of pairs (MODENAME . BINDING), where MODENAME is
the symbol which names the minor mode binding KEY, and BINDING is
KEY's definition in that mode.  In particular, if KEY has no
minor-mode bindings, return nil.  If the first binding is a
non-prefix, all subsequent bindings will be omitted, since they would
be ignored.  Similarly, the list doesn't include non-prefix bindings
that come after prefix bindings.

If optional argument ACCEPT-DEFAULT is non-nil, recognize default
bindings; see the description of `lookup-key' for more details about this.Skeymap.elc
Fcurrent-minor-mode-maps
Return a list of keymaps for the minor modes of the current buffer.Skeymap.elc
Fdefine-prefix-command
Define COMMAND as a prefix command.
A new sparse keymap is stored as COMMAND's function definition.
If second optional argument MAPVAR is not specified,
 COMMAND's value (as well as its function definition) is set to the keymap.
If a second optional argument MAPVAR is given and is not `t',
  the map is stored as its value.
Regardless of MAPVAR, COMMAND's function-value is always set to the keymap.Skeymap.elc
Fevents-to-keys
Given a vector of event objects, returns a vector of key descriptors,
or a string (if they all fit in the ASCII range).
Optional arg NO-MICE means that button events are not allowed.Skeymap.elc
Fnext-key-event
Return the next available keyboard event.Skeymap.elc
Fkey-sequence-list-description
Convert a key sequence KEYS to the full [(modifiers... key)...] form.
Argument KEYS can be in any form accepted by `define-key' function.
The output is always in a canonical form, meaning you can use this
function to determine if two key sequence specifications are equivalent
by comparing the respective outputs of this function using `equal'.Skeymap.elc
Fevent-apply-alt-modifier
Skeymap.elc
Fevent-apply-super-modifier
Skeymap.elc
Fevent-apply-hyper-modifier
Skeymap.elc
Fevent-apply-shift-modifier
Skeymap.elc
Fevent-apply-control-modifier
Skeymap.elc
Fevent-apply-meta-modifier
Skeymap.elc
Fevent-apply-modifiers
Return the next key event, with a list of modifiers applied.
LIST describes the names of these modifier, a list of symbols.
`function-key-map' is scanned for prefix bindings.Skeymap.elc
Fevent-apply-modifier
Return the next key event, with a single modifier applied.
See `event-apply-modifiers'.Skeymap.elc
Fsynthesize-keysym
Read a sequence of keys, and returned the corresponding key symbol.
The characters must be from the [-_a-zA-Z0-9].  Reading is terminated
 by RET (which is discarded).Ssyntax.elc
Fmake-syntax-table
Return a new syntax table.

It inherits all characters from the standard syntax table.

A syntax table is a char table of type `syntax' (see `make-char-table').
The valid values are integers (intended to be syntax codes as generated by
`syntax-string-to-code'), and the default result given by `get-char-table'
is the syntax code for `word'. (Note: In 21.4 and prior, it was the code
for `inherit'.)

To modify a syntax table, you should normally use `modify-syntax-entry'
rather than directly modify the table with `put-char-table'.

See `modify-syntax-entry' for a description of the character codes used
to indicate the various syntax classes.Ssyntax.elc
Fsyntax-after
Return the raw syntax of the char after POS.
If POS is outside the buffer's accessible portion, return nil.Ssyntax.elc
Fsimple-set-syntax-entry
Ssyntax.elc
Fchar-syntax-from-code
Extract the syntax designator from the internal syntax code CODE.
CODE is the value actually contained in the syntax table.Ssyntax.elc
Fset-char-syntax-in-code
Return a new internal syntax code whose syntax designator is DESIG.
Other characteristics are the same as in CODE.Ssyntax.elc
Fsyntax-code-to-string
Return a string equivalent to internal syntax code CODE.
The string can be passed to `modify-syntax-entry'.
If CODE is invalid, return nil.Ssyntax.elc
Fsyntax-string-to-code
Return the internal syntax code equivalent to STRING.
STRING should be something acceptable as the second argument to
`modify-syntax-entry'.
If STRING is invalid, signal an error.Ssyntax.elc
Fmodify-syntax-entry
Set syntax for the characters CHAR-RANGE according to string SPEC.
CHAR-RANGE is a single character or a range of characters,
 as per `put-char-table'.
The syntax is changed only for SYNTAX-TABLE, which defaults to
 the current buffer's syntax table.
The first character of SPEC should be one of the following:
  Space    whitespace syntax.    w   word constituent.
  _        symbol constituent.   .   punctuation.
  (        open-parenthesis.     )   close-parenthesis.
  "        string quote.         \   character-quote.
  $        paired delimiter.     '   expression quote or prefix operator.
  <	   comment starter.	 >   comment ender.
  /        character-quote.      @   inherit from `standard-syntax-table'.

Only single-character comment start and end sequences are represented thus.
Two-character sequences are represented as described below.
The second character of SPEC is the matching parenthesis,
 used only if the first character is `(' or `)'.
Any additional characters are flags.
Defined flags are the characters 1, 2, 3, 4, 5, 6, 7, 8, p, a, and b.
 1 means C is the first of a two-char comment start sequence of style a.
 2 means C is the second character of such a sequence.
 3 means C is the first of a two-char comment end sequence of style a.
 4 means C is the second character of such a sequence.
 5 means C is the first of a two-char comment start sequence of style b.
 6 means C is the second character of such a sequence.
 7 means C is the first of a two-char comment end sequence of style b.
 8 means C is the second character of such a sequence.
 p means C is a prefix character for `backward-prefix-chars';
   such characters are treated as whitespace when they occur
   between expressions.
 a means C is comment starter or comment ender for comment style a (default)
 b means C is comment starter or comment ender for comment style b.Ssyntax.elc
Fmap-syntax-table
Map FUNCTION over entries in SYNTAX-TABLE, collapsing inheritance.
This is similar to `map-char-table', but works only on syntax tables, and
 collapses any entries that call for inheritance by invisibly substituting
 the inherited values from the standard syntax table.Ssyntax.elc
Fdescribe-char-table
Describe char-table TABLE, outputting to STREAM.
MAPPER maps over the table and should be `map-char-table' or
`map-syntax-table'.  DESCRIBE-VALUE is a function of two arguments,
VALUE and STREAM, and should output a description of VALUE.Ssyntax.elc
Fdescribe-syntax-table
Output a description of TABLE (a syntax table) to STREAM.Ssyntax.elc
Fdescribe-syntax-code
Ssyntax.elc
Fsymbol-near-point
Return the first textual item to the nearest point.Ssyntax-ppss.elc
Fsyntax-ppss-depth
Ssyntax-ppss.elc
Fsyntax-ppss-toplevel-pos
Get the latest syntactically outermost position found in a syntactic scan.
PPSS is a scan state, as returned by `parse-partial-sexp' or `syntax-ppss'.
An "outermost position" means one that it is outside of any syntactic entity:
outside of any parentheses, comments, or strings encountered in the scan.
If no such position is recorded in PPSS (because the end of the scan was
itself at the outermost level), return nil.Ssyntax-ppss.elc
Fsyntax-ppss-context
Ssyntax-ppss.elc
Vsyntax-ppss-max-span
Threshold below which cache info is deemed unnecessary.
We try to make sure that cache entries are at least this far apart
from each other, to avoid keeping too much useless info.Ssyntax-ppss.elc
Vsyntax-begin-function
Function to move back outside of any comment/string/paren.
This function should move the cursor back to some syntactically safe
point (where the PPSS is equivalent to nil).Ssyntax-ppss.elc
Vsyntax-ppss-cache
List of (POS . PPSS) pairs, in decreasing POS order.Ssyntax-ppss.elc
Vsyntax-ppss-last
Cache of (LAST-POS . LAST-PPSS).Ssyntax-ppss.elc
Fsyntax-ppss-flush-cache
Flush the cache of `syntax-ppss' starting at position BEG.Ssyntax-ppss.elc
Fsyntax-ppss-stats
Ssyntax-ppss.elc
Fsyntax-ppss
Parse-Partial-Sexp State at POS, defaulting to point.
The returned value is the same as `parse-partial-sexp' except that
the 2nd and 6th values of the returned state cannot be relied upon.
Point is at POS when this function returns.Ssyntax-ppss.elc
Fsyntax-ppss-debug
Sdevice.elc
Fdevice-list
Return a list of all devices.Sdevice.elc
Fdevice-type
Return the type of the specified device (e.g. `x' or `tty').
This is equivalent to the type of the device's console.
Value is `tty' for a tty device (a character-only terminal),
`x' for a device that is a screen on an X display,
`gtk' for a device that is a GTK connection.
`mswindows' for a device that is a MS Windows workstation,
`msprinter' for a device that is a MS Windows printer connection,
`stream' for a stream device (which acts like a stdio stream), and
`dead' for a deleted device.Sdevice.elc
Fmake-tty-device
Create a new device on TTY.
  TTY should be the name of a tty device file (e.g. "/dev/ttyp3" under
SunOS et al.), as returned by the `tty' command.  A value of nil means
use the stdin and stdout as passed to XEmacs from the shell.
  If TERMINAL-TYPE is non-nil, it should be a string specifying the
type of the terminal attached to the specified tty.  If it is nil,
the terminal type will be inferred from the TERM environment variable.
  If CONTROLLING-PROCESS is non-nil, it should be an integer
specifying the process id of the process in control of the specified tty.  If
it is nil, it is assumes to be the value returned by emacs-pid.Sdevice.elc
Fdevice-pixel-width
Return the width in pixels of DEVICE, or nil if unknown.Sdevice.elc
Fdevice-pixel-height
Return the height in pixels of DEVICE, or nil if unknown.Sdevice.elc
Fdevice-mm-width
Return the width in millimeters of DEVICE, or nil if unknown.Sdevice.elc
Fdevice-mm-height
Return the height in millimeters of DEVICE, or nil if unknown.Sdevice.elc
Fdevice-bitplanes
Return the number of bitplanes of DEVICE, or nil if unknown.Sdevice.elc
Fdevice-color-cells
Return the number of color cells of DEVICE, or nil if unknown.Sdevice.elc
Fdevice-num-screens
Return the number of display screens available on DEVICE, or 1 if unknown.Sdevice.elc
Fdevice-backing-store
Return the backing store capability of DEVICE.
The value may be `always', `when-mapped', `not-useful', or nil if
the question is inapplicable to a certain kind of display.Sdevice.elc
Fdevice-save-under
Return non-nil if DEVICE supports the SaveUnder feature.Sdevice.elc
Fmake-gtk-device
Create a new GTK device.Sdevice.elc
Fmake-x-device
Create a new device connected to DISPLAY.Sdevice.elc
Fmake-mswindows-device
Create a new mswindows device.Sdevice.elc
Fdevice-on-window-system-p
Return non-nil if DEVICE is on a window system.
This generally means that there is support for the mouse, the menubar,
the toolbar, glyphs, etc.Sdevice.elc
Fcall-device-method
Call a DEVICE-specific function with the generic name NAME.
If DEVICE is not provided then the selected device is used.Sdevice.elc
Fdefine-device-method
Define NAME to be a device method.Sdevice.elc
Fdefine-device-method*
Define NAME to be a device method.Sconsole.elc
Fquit-char
Return the character that causes a QUIT to happen.
This is normally C-g.  Optional arg CONSOLE specifies the console
that the information is returned for; nil means the current console.Sconsole.elc
Fresume-pid-console
Resume the consoles with a controlling process of PID.Sobsolete.elc
Fdefine-obsolete-function-alias
Define OLDFUN as an obsolete alias for function NEWFUN.
This makes calling OLDFUN equivalent to calling NEWFUN and marks OLDFUN
as obsolete.
Optional WHEN is for GNU compatibility.  XEmacs ignores it.  (In Emacs, WHEN
is a string indicating the version where OLDFUN was first marked obsolete.)
Optional DOCSTRING describes any changes in semantics users should be aware of.Sobsolete.elc
Fdefine-compatible-function-alias
Define OLDFUN as a compatible alias for function NEWFUN.
This makes calling OLDFUN equivalent to calling NEWFUN and marks OLDFUN
as provided for compatibility only.
Optional WHEN is for consistency with `define-obsolete-function-alias'.  XEmacs
ignores it.  (If present, it is a string indicating the version where OLDFUN
was first marked as a compatibility API.)
Optional DOCSTRING describes any changes in semantics users should be aware of.Sobsolete.elc
Fdefine-obsolete-variable-alias
Define OLDVAR as an obsolete alias for variable NEWVAR.
This makes referencing or setting OLDVAR equivalent to referencing or
setting NEWVAR and marks OLDVAR as obsolete.
If OLDVAR was bound and NEWVAR was not, set NEWVAR to OLDVAR.
Note: Use this before any other references (defvar/defcustom) to NEWVAR.

Optional WHEN is for GNU compatibility.  XEmacs ignores it.  (In Emacs, WHEN
is a string indicating the version where OLDVAR was first marked obsolete.)
Optional DOCSTRING describes any changes in semantics users should be aware of.Sobsolete.elc
Fdefine-compatible-variable-alias
Define OLDVAR as a compatible alias for variable NEWVAR.
This makes referencing or setting OLDVAR equivalent to referencing or
setting NEWVAR and marks OLDVAR as provided for compatibility only.
Optional WHEN is for consistency with `define-obsolete-variable-alias'.  XEmacs
ignores it.  (If present, it is a string indicating the version where OLDFUN
was first marked as a compatibility API.)
Optional DOCSTRING describes any changes in semantics users should be aware of.Sobsolete.elc
Fbuffer-local-value
Return the value of VARIABLE in BUFFER.
If VARIABLE does not have a buffer-local binding in BUFFER, the value
is the default binding of variable.Sobsolete.elc
Fx-display-color-p
Return t if DEVICE is a color device.Sobsolete.elc
Fx-display-grayscale-p
Return t if DEVICE is a grayscale device.Sobsolete.elc
Fframe-first-window
Return the topmost, leftmost window of FRAME.
If omitted, FRAME defaults to the currently selected frame.Sobsolete.elc
Fframe-parameters
Return the parameters-alist of frame FRAME.
It is a list of elements of the form (PARM . VALUE), where PARM is a symbol.
The meaningful PARMs depend on the kind of frame.
If FRAME is omitted, return information on the currently selected frame.

See the variables `default-frame-plist', `default-x-frame-plist', and
`default-tty-frame-plist' for a description of the parameters meaningful
for particular types of frames.Sobsolete.elc
Fframe-parameter
Return FRAME's value for parameter PARAMETER.
If FRAME is nil, describe the currently selected frame.Sobsolete.elc
Fmodify-frame-parameters
Modify the properties of frame FRAME according to ALIST.
ALIST is an alist of properties to change and their new values.
Each element of ALIST has the form (PARM . VALUE), where PARM is a symbol.
The meaningful PARMs depend on the kind of frame.

See `set-frame-properties' for built-in property names.Sobsolete.elc
Fx-color-values
Return a description of the color named COLOR on frame FRAME.
The value is a list of integer RGB values--(RED GREEN BLUE).
These values appear to range from 0 to 65280 or 65535, depending
on the system; white is (65280 65280 65280) or (65535 65535 65535).
If FRAME is omitted or nil, use the selected frame.Sobsolete.elc
Fobsolete-throw
Ugly compatibility hack.

See the implementation of #'funcall in eval.c.  This should be removed once
we no longer encounter bytecode from 21.4.Sobsolete.elc
Fcl-delete-duplicates
Sobsolete.elc
Fmakehash
Create a new hash table.
Optional first argument TEST specifies how to compare keys in the table.  
Predefined tests are `eq', `eql', and `equal'.  Default is `eql'.Sobsolete.elc
Fkeymap-parent
Return the first parent of the given keymap.Sobsolete.elc
Fset-keymap-parent
Make the given keymap have (only) the given parent.Sobsolete.elc
Fadd-menu-item
Obsolete.  See the function `add-menu-button'.Sobsolete.elc
Fadd-menu
See the function `add-submenu'.Sobsolete.elc
Fread-mouse-position
Sobsolete.elc
VInfo-default-directory-list
This used to be the initial value of Info-directory-list.
If you want to change the locations where XEmacs looks for info files,
set Info-directory-list.Sobsolete.elc
Vinit-file-user
This used to be the name of the user whose init file was read at startup.Sobsolete.elc
Fredraw-display
Sobsolete.elc
Fchar-bytes
Return number of bytes a CHARACTER occupies in a string or buffer.
It always returns 1 in XEmacs, and in recent FSF Emacs versions.Sobsolete.elc
Ffind-non-ascii-charset-string
Return a list of charsets in the STRING except ascii.
It might be available for compatibility with Mule 2.3,
because its `find-charset-string' ignores ASCII charset.Sobsolete.elc
Ffind-non-ascii-charset-region
Return a list of charsets except ascii in the region between START and END.
It might be available for compatibility with Mule 2.3,
because its `find-charset-string' ignores ASCII charset.Sspecifier.elc
Fmake-specifier-and-init
Create and initialize a specifier of type TYPE with spec(s) SPEC-LIST.

A convenience API combining `make-specifier' and `set-specifier', allowing you
to create a specifier and add specs to it at the same time.
TYPE specifies the specifier type.  See `make-specifier' for known types.
SPEC-LIST supplies the specification(s) to be added to the specifier, in any
  form acceptable to `canonicalize-spec-list'.
Optional DONT-CANONICALIZE, if non-nil, inhibits the conversion, and the
  SPEC-LIST must already be in full form.Sspecifier.elc
Fmap-specifier
Apply MS-FUNC to the specification(s) for MS-LOCALE in MS-SPECIFIER.

If optional MS-LOCALE is a locale, MS-FUNC will be called for that locale.
If MS-LOCALE is a locale type, MS-FUNC will be mapped over all locales of that
type.  If MS-LOCALE is `all' or nil, MS-FUNC will be mapped over all locales in
MS-SPECIFIER.

Optional MS-TAG-SET and MS-EXACT-P are as in `specifier-spec-list'.
Optional MS-MAPARG will be passed to MS-FUNC.

MS-FUNC is called with four arguments: the MS-SPECIFIER, the locale
being mapped over, the inst-list for that locale, and the
optional MS-MAPARG.  If any invocation of MS-FUNC returns non-nil,
the mapping will stop and the returned value becomes the
value returned from `map-specifier'.  Otherwise, `map-specifier'
returns nil.Sspecifier.elc
Fcanonicalize-inst-pair
Canonicalize the given INST-PAIR.

SPECIFIER-TYPE specifies the type of specifier that this SPEC-LIST
will be used for.

Canonicalizing means converting to the full form for an inst-pair, i.e.
`(TAG-SET . INSTANTIATOR)'.  A single, untagged instantiator is given
a tag set of nil (the empty set), and a single tag is converted into
a tag set consisting only of that tag.

If NOERROR is non-nil, signal an error if the inst-pair is invalid;
otherwise return t.Sspecifier.elc
Fcanonicalize-inst-list
Canonicalize the given INST-LIST (a list of inst-pairs).

SPECIFIER-TYPE specifies the type of specifier that this INST-LIST
will be used for.

Canonicalizing means converting to the full form for an inst-list, i.e.
`((TAG-SET . INSTANTIATOR) ...)'.  This function accepts a single
inst-pair or any abbreviation thereof or a list of (possibly
abbreviated) inst-pairs. (See `canonicalize-inst-pair'.)

If NOERROR is non-nil, signal an error if the inst-list is invalid;
otherwise return t.Sspecifier.elc
Fcanonicalize-spec
Canonicalize the given SPEC (a specification).

SPECIFIER-TYPE is the type of specifier that this SPEC will be used for.

Canonicalizing means converting to the full form for a spec, i.e.
`(LOCALE (TAG-SET . INSTANTIATOR) ...)'.  This function accepts a
possibly abbreviated inst-list or a cons of a locale and a possibly
abbreviated inst-list. (See `canonicalize-inst-list'.)

If NOERROR is nil, signal an error if the specification is invalid;
otherwise return t.Sspecifier.elc
Fcanonicalize-spec-list
Canonicalize the given SPEC-LIST (a list of specifications).

SPECIFIER-TYPE specifies the type of specifier that this SPEC-LIST
will be used for.

Canonicalizing means converting to the full form for a spec-list, i.e.
`((LOCALE (TAG-SET . INSTANTIATOR) ...) ...)'.  This function accepts
a possibly abbreviated specification or a list of such things. (See
`canonicalize-spec'.) This is the function used to convert spec-lists
accepted by `set-specifier' and such into a form suitable for
`add-spec-list-to-specifier'.

The canonicalization algorithm is as follows:

1. Attempt to parse SPEC-LIST as a single, possibly abbreviated, specification.
2. If (1) fails, attempt to parse SPEC-LIST as a list of (abbreviated)
   specifications.
3. If (2) fails, SPEC-LIST is invalid.

A possibly abbreviated specification SPEC is parsed by

1. Attempt to parse SPEC as a possibly abbreviated inst-list.
2. If (1) fails, attempt to parse SPEC as a cons of a locale and an
   (abbreviated) inst-list.
3. If (2) fails, SPEC is invalid.

A possibly abbreviated inst-list INST-LIST is parsed by

1. Attempt to parse INST-LIST as a possibly abbreviated inst-pair.
2. If (1) fails, attempt to parse INST-LIST as a list of (abbreviated)
   inst-pairs.
3. If (2) fails, INST-LIST is invalid.

A possibly abbreviated inst-pair INST-PAIR is parsed by

1. Check if INST-PAIR is `valid-instantiator-p'.
2. If not, check if INST-PAIR is a cons of something that is a tag, ie,
   `valid-specifier-tag-p', and something that is `valid-instantiator-p'.
3. If not, check if INST-PAIR is a cons of a list of tags and something that
   is `valid-instantiator-p'.

In summary, this function generally prefers more abbreviated forms.

This function tries extremely hard to resolve any ambiguities, and the
built-in specifier types (font, image, toolbar, etc.) are designed so that
there won't be any ambiguities.  (#### Unfortunately there are bugs in the
treatment of toolbar spec-lists and generic spec-lists; avoid depending on
canonicalization for these types.)

If NOERROR is nil, signal an error if the spec-list is invalid;
otherwise return t.Sspecifier.elc
Fset-specifier
Add the specification(s) given by VALUE to SPECIFIER in LOCALE.

VALUE may be any of the values accepted by `canonicalize-spec-list', including

-- an instantiator (either a Lisp object which will be returned when the
   specifier is instantiated, or a Lisp object that can be instantiated to
   produce an opaque value: eg, a font name (string) can be used for a font
   specifier, but an instance will be a font object)
-- a list of instantiators
-- a cons of a locale and an instantiator, or of a locale and a list of
   instantiators
-- a cons of a tag or tag-set and an instantiator (or list of instantiators)
-- a cons of a locale and the previous type of item
-- a list of one or more of any of the previous types of items
-- a canonical spec-list.

See `canonicalize-spec-list' for details.  If you need to know the details,
though, strongly consider using the unambiguous APIs `add-spec-to-specifier'
and `add-spec-list-to-specifier' instead.

Finally, VALUE can itself be a specifier (of the same type as
SPECIFIER), if you want to copy specifications from one specifier
to another; this is equivalent to calling `copy-specifier', and
LOCALE, TAG-SET, and HOW-TO-ADD have the same semantics as with
that function.

Note that a VALUE of `nil' is either illegal or will be treated as a value of
`nil'; it does not remove existing specifications.  Use `remove-specifier' for
that.  N.B. `remove-specifier' defaults to removing all specifications, not
just the `global' one!

Warning: this function is inherently heuristic, and should not be relied on to
properly resolve ambiguities, when specifier instantiators can be lists
(currently, for toolbar specifiers and generic specifiers).  In those cases
use either `add-spec-to-specifier' or `add-spec-list-to-specifier'.

LOCALE indicates where this specification is active, and should be
a buffer, a window, a frame, a device, or the symbol `global' to
indicate that it applies everywhere.  LOCALE defaults to
`global' if omitted, and is overridden by locales provided by VALUE (in the
cases where value is a full specification or a spec-list).

Optional argument TAG-SET is a tag or a list of tags, to be associated
with the VALUE.  Tags are symbols (usually naming device types, such
as `x' and `tty', or device classes, such as `color', `mono', and
`grayscale'); specifying a TAG-SET restricts the scope of VALUE to
devices that match all specified tags.  (You can also create your
own tags using `define-specifier-tag', and use them to identify
specifications added by you, so you can remove them later.)

Optional argument HOW-TO-ADD should be either nil or one of the
symbols `prepend', `append', `remove-tag-set-prepend',
`remove-tag-set-append', `remove-locale', `remove-locale-type',
or `remove-all'.  This specifies what to do with existing
specifications in LOCALE (and possibly elsewhere in the specifier).
Most of the time, you do not need to worry about this argument;
the default behavior of `remove-tag-set-prepend' is usually fine.
See `copy-specifier' and `add-spec-to-specifier' for a full
description of what each of these means.

Note that `set-specifier' is exactly complementary to `specifier-specs'
except in the case where SPECIFIER has no specs at all in it but nil
is a valid instantiator (in that case, `specifier-specs' will return
nil (meaning no specs) and `set-specifier' will interpret the `nil'
as meaning "I'm adding a global instantiator and its value is `nil'"),
or in strange cases where there is an ambiguity between a spec-list
and an inst-list, etc.  (The built-in specifier types are designed
in such a way as to avoid any such ambiguities.)Sspecifier.elc
Fmodify-specifier-instances
Modify all specifications that match LOCALE and TAG-SET by FUNC.

For each specification that exists for SPECIFIER, in locale LOCALE
that matches TAG-SET, call the function FUNC with the instance as its
first argument and with optional arguments ARGS.  The result is then
used as the new value of the instantiator.

If there is no specification in the domain LOCALE matching TAG-SET and
FORCE is non-nil, an explicit one is created from the matching
specifier instance if that exists or DEFAULT otherwise. If LOCALE is
not a domain (i.e. a buffer), DEFAULT is always used. FUNC is then
applied like above and the resulting specification is added.Sspecifier.elc
Flet-specifier
Add specifier specs, evaluate forms in BODY and restore the specifiers.
(let-specifier SPECIFIER-LIST BODY...)

Each element of SPECIFIER-LIST should look like this:
(SPECIFIER VALUE &optional LOCALE TAG-SET HOW-TO-ADD).

SPECIFIER is the specifier to be temporarily modified.  VALUE is the
instantiator to be temporarily added to SPECIFIER in LOCALE.  LOCALE,
TAG-SET and HOW-TO-ADD have the same meaning as in
`add-spec-to-specifier'.

The code resulting from macro expansion will add specifications to
specifiers using `add-spec-to-specifier'.  After BODY is finished, the
temporary specifications are removed and old spec-lists are restored.

LOCALE, TAG-SET and HOW-TO-ADD may be omitted, and default to nil.
The value of the last form in BODY is returned.

NOTE: If you want the specifier's instance to change in all
circumstances, use (selected-window) as the LOCALE.  If LOCALE is nil
or omitted, it defaults to `global'.

Example:
    (let-specifier ((modeline-shadow-thickness 0 (selected-window)))
      (sit-for 1))Sspecifier.elc
Fmake-integer-specifier
Return a new `integer' specifier object with the given specification list.
SPEC-LIST can be a list of specifications (each of which is a cons of a
locale and a list of instantiators), a single instantiator, or a list
of instantiators.  See `make-specifier' for more information about
specifiers.

Valid instantiators for integer specifiers are integers.Sspecifier.elc
Fmake-boolean-specifier
Return a new `boolean' specifier object with the given specification list.
SPEC-LIST can be a list of specifications (each of which is a cons of a
locale and a list of instantiators), a single instantiator, or a list
of instantiators.  See `make-specifier' for more information about
specifiers.

Valid instantiators for boolean specifiers are t and nil.Sspecifier.elc
Fmake-natnum-specifier
Return a new `natnum' specifier object with the given specification list.
SPEC-LIST can be a list of specifications (each of which is a cons of a
locale and a list of instantiators), a single instantiator, or a list
of instantiators.  See `make-specifier' for more information about
specifiers.

Valid instantiators for natnum specifiers are non-negative integers.Sspecifier.elc
Fmake-generic-specifier
Return a new `generic' specifier object with the given specification list.
SPEC-LIST can be a list of specifications (each of which is a cons of a
locale and a list of instantiators), a single instantiator, or a list
of instantiators.  See `make-specifier' for more information about
specifiers.

Valid instantiators for generic specifiers are all Lisp values.
They are returned back unchanged when a specifier is instantiated.Sspecifier.elc
Fmake-display-table-specifier
Return a new `display-table' specifier object with the given spec list.
SPEC-LIST can be a list of specifications (each of which is a cons of a
locale and a list of instantiators), a single instantiator, or a list
of instantiators.  See `make-specifier' for more information about
specifiers.

Valid instantiators for display-table specifiers are described in
detail in the doc string for `current-display-table'.Sspecifier.elc
Finstance-to-instantiator
Convert an instance to an instantiator.
If we have an instance object, we fetch the instantiator that generated the object.  Otherwise, we just return the instance.Sspecifier.elc
Fdevice-type-matches-spec
Sspecifier.elc
Fadd-tag-to-inst-list
Add TAG-SET (tag or tag-set) to all tags in INST-LIST.Sspecifier.elc
Fderive-domain-from-locale
Given a locale, try to derive the "most reasonable" domain.

This is a heuristic ("works most of the time") algorithm.

[Remember that, in specifiers, locales are what you attach specifications or
"instantiators" to, and domains are the contexts in which you can
retrieve the value or "instance" of the specifier.  Not all locales are
domains.  In particular, buffers are locales but not domains because
buffers may be displayed in different windows on different frames, and thus
end up with different values if the frames each have a frame-local
instantiator and the instantiators are different.  However, we may well
find ourselves in a situation where we want to figure out the most likely
value of a specifier in a buffer -- for example we might conceptually want
to make a buffer's modeline face be bold, so we need to figure out what the
current face is.  If the buffer already has an instantiator, it's easy; but
if it doesn't, we want to do something reasonable rather than just issue an
error, even though technically the value is not well-defined.  We want
something that gives the right answer most of the time.]

LOCALE is a specifier locale -- i.e. a buffer, window, frame, device, the
symbol `global', or nil, meaning the same as `global'.

DEVTYPE-SPEC, if given, can restrict the possible return values to domains
on devices of that device type; or if it's `window-system', to domains on
window-system devices.

CURRENT-DEVICE is what should be considered as the "selected device" when
this value is needed.  It defaults to the currently selected device.

-- If LOCALE is a domain, it's simply returned.
-- If LOCALE is `all', `global', or nil, we return CURRENT-DEVICE.
-- If LOCALE is a buffer, we use `get-buffer-window' to find a window viewing
   the buffer, and return it if there is one; otherwise we return the selected
   window on CURRENT-DEVICE.

The return value may be nil if the only possible values don't agree with
DEVTYPE-SPEC.Sspecifier.elc
Fderive-device-type-from-tag-set
Given a tag set, try (heuristically) to get a device type from it.

If CURRENT-DEVICE is supplied, then this function either returns its type,
in the event that it matches TAG-SET, or nil.

Otherwise, there are three stages that it proceeds through, each one trying
harder than the previous to get a value.  TRY-STAGES controls how many
stages to try.  If nil or 1, only stage 1 is done; if 2; stages 1 and 2 are
done; if 3, stages 1-3 are done; if t, all stages are done (currently 1-3).

Stage 1 looks at the tags themselves to see if any of them are device-type
tags.  If so, it returns the device type.  If there is more than one device
type, this tag can never match anything, but we go ahead and return one of
them.  If no device types in the tags, we fail.

Stage 2 runs all devices through the tag set to see if any match, and
accumulate a list of device types of all matching devices.  If there is
exactly one device type in the list, we return it, else fail.

Stage 3 picks up from where stage 2 left off, and tries hard to return
*SOME* device type in all possible situations, modulo the DEVTYPE-SPEC
flag. (DEVTYPE-SPEC and CURRENT-DEVICE are the same as in
`derive-domain-from-locale'.)

Specifically:

(a) if no matching devices, return the selected device's type.
(b) if more than device type and the selected device's type is
     listed, use it.
(c) else, pick one of the device types (currently the first).

This will never return a device type that's incompatible with the
DEVTYPE-SPEC flag; thus, it may return nil.Sspecifier.elc
Fderive-device-type-from-locale-and-tag-set
Try to derive a device type from a locale and tag set.

If the locale is a domain, use the domain's device type.  Else, if the tag
set uniquely specifies a device type, use it.  Else, if a buffer is given,
find a window visiting the buffer, and if any, use its device type.
Finally, go back to the tag set and "try harder" -- if the selected
device matches the tag set, use its device type, else use some valid device
type from the tag set.

DEVTYPE-SPEC and CURRENT-DEVICE as in `derive-domain-from-locale'.Sspecifier.elc
Fderive-specifier-specs-from-locale
Heuristically find the specs of a specifier in a locale.

This tries to find some reasonable instantiators that are most likely to
correspond to the specifier's "value" (i.e. instance) in a particular
locale, even when the user has not specifically set any such instantiators.
This is useful for functions that want to modify the instance of a
specifier in a particular locale, and only in that locale.

Keep in mind that this is a heuristic (i.e. kludge) function, and that it
may not always give the right results, since the operation is not
technically well-defined in many cases! (See `derive-domain-from-locale'.)

DEVTYPE-SPEC and CURRENT-DEVICE are as in `derive-domain-from-locale'.

The return value is an inst-list, i.e.

   ((TAG-SET . INSTANTIATOR) ...)

More specifically, if there is already a spec in the locale, it's just
returned.  Otherwise, if LOCALE is `global', `all', or nil: If
GLOBAL-USE-FALLBACK is non-nil, the fallback is fetched, and returned, with
`default' added to the tag set; else, we use CURRENT-DEVICE (defaulting to
the selected device) as a domain and proceed as in the following.  If
LOCALE is a domain (window, frame, device), the specifier's instance in
that domain is computed, and converted back to an instantiator
(`instance-to-instantiator').  Else, if LOCALE is a buffer, we use
`derive-domain-from-locale' to heuristically get a likely domain, and
proceed as if LOCALE were a domain.Sframe.elc
Vinitial-frame-plist
Plist of frame properties for creating the initial X window frame.
You can set this in your `.emacs' file; for example,
  (setq initial-frame-plist '(top 1 left 1 width 80 height 55))
Properties specified here supersede the values given in `default-frame-plist'.
The format of this can also be an alist for backward compatibility.

If the value calls for a frame without a minibuffer, and you have not created
a minibuffer frame on your own, one is created according to
`minibuffer-frame-plist'.

You can specify geometry-related options for just the initial frame
by setting this variable in your `.emacs' file; however, they won't
take effect until Emacs reads `.emacs', which happens after first creating
the frame.  If you want the frame to have the proper geometry as soon
as it appears, you need to use this three-step process:
* Specify X resources to give the geometry you want.
* Set `default-frame-plist' to override these options so that they
  don't affect subsequent frames.
* Set `initial-frame-plist' in a way that matches the X resources,
  to override what you put in `default-frame-plist'.Sframe.elc
Vminibuffer-frame-plist
Plist of frame properties for initially creating a minibuffer frame.
You can set this in your `.emacs' file; for example,
  (setq minibuffer-frame-plist '(top 1 left 1 width 80 height 2))
Properties specified here supersede the values given in
`default-frame-plist'.
The format of this can also be an alist for backward compatibility.Sframe.elc
Vpop-up-frame-plist
Plist of frame properties used when creating pop-up frames.
Pop-up frames are used for completions, help, and the like.
This variable can be set in your init file, like this:
  (setq pop-up-frame-plist '(width 80 height 20))
These supersede the values given in `default-frame-plist', for pop-up frames.
The format of this can also be an alist for backward compatibility.Sframe.elc
Vspecial-display-frame-plist
*Plist of frame properties used when creating special frames.
Special frames are used for buffers whose names are in
`special-display-buffer-names' and for buffers whose names match
one of the regular expressions in `special-display-regexps'.
This variable can be set in your init file, like this:
  (setq special-display-frame-plist '(width 80 height 20))
These supersede the values given in `default-frame-plist'.
The format of this can also be an alist for backward compatibility.Sframe.elc
Fsafe-alist-to-plist
Sframe.elc
Fspecial-display-popup-frame
Display BUFFER in its own frame, reusing an existing window if any.
Return the window chosen.
Currently we do not insist on selecting the window within its frame.
If ARGS is a plist, use it as a list of frame property specs.
If ARGS is a list whose car is t,
use (cadr ARGS) as a function to do the work.
Pass it BUFFER as first arg, and (cddr ARGS) gives the rest of the args.Sframe.elc
Fcanonicalize-frame-plists
Sframe.elc
Fframe-initialize
Create an initial frame if necessary.Sframe.elc
Vframe-notice-user-settings
Non-nil means function `frame-notice-user-settings' wasn't run yet.Sframe.elc
Fframe-notice-user-settings
Act on user's init file settings of frame parameters.
React to settings of `default-frame-plist', `initial-frame-plist' there.Sframe.elc
Fmake-initial-minibuffer-frame
Sframe.elc
Fmodify-all-frames-properties
Modify all current and future frames' parameters according to PLIST.
This changes `default-frame-plist' and possibly `initial-frame-plist'.
See `set-frame-properties' for more information.Sframe.elc
Fget-other-frame
Return some frame other than the current frame.
Create one if necessary.  Note that the minibuffer frame, if separate,
is not considered (see `next-frame').Sframe.elc
Fnext-multiframe-window
Select the next window, regardless of which frame it is on.Sframe.elc
Fprevious-multiframe-window
Select the previous window, regardless of which frame it is on.Sframe.elc
Fmake-frame-on-device
Create a frame of type TYPE on CONNECTION.
TYPE should be a symbol naming the device type, i.e. one of

x	    An X display.  CONNECTION should be a standard display string
	    such as "unix:0", or nil for the display specified on the
	    command line or in the DISPLAY environment variable.  Only if
	    support for X was compiled into XEmacs.
tty	    A standard TTY connection or terminal.  CONNECTION should be
	    a TTY device name such as "/dev/ttyp2" (as determined by
	    the Unix command `tty') or nil for XEmacs' standard input
	    and output (usually the TTY in which XEmacs started).  Only
	    if support for TTY's was compiled into XEmacs.
gtk	    A GTK device.
mswindows   A connection to a machine running Microsoft Windows NT or
	    Windows 95/97.
pc	    A direct-write MS-DOS frame.  Not currently implemented.

PROPS should be a plist of properties, as in the call to `make-frame'.

If a connection to CONNECTION already exists, it is reused; otherwise,
a new connection is opened.Sframe.elc
Vafter-setting-font-hook
Functions to run after a frame's font has been changed.Sframe.elc
Ffiltered-frame-list
Return a list of all live frames which satisfy PREDICATE.
If optional second arg DEVICE is non-nil, restrict the frames
 returned to that device.Sframe.elc
Fminibuffer-frame-list
Return a list of all frames with their own minibuffers.
If optional second arg DEVICE is non-nil, restrict the frames
 returned to that device.Sframe.elc
Fdisplay-frame
Return the active frame for DISPLAY.
DISPLAY may be a frame, a device, or a console.  If it is omitted or nil,
it defaults to the selected frame.Sframe.elc
Fdisplay-device
Return the device for DISPLAY.
DISPLAY may be a frame, a device, or a console.  If it is omitted or nil,
it defaults to the selected frame.Sframe.elc
Fframep-on-display
Return the type of frames on DISPLAY.
DISPLAY may be a frame, a device, or a console.  If it is a frame, its type
is returned.  If DISPLAY is omitted or nil, it defaults to the selected
frame.  All frames on a given device or console are of the same type.Sframe.elc
Fframe-minibuffer-only-p
Return non-nil if FRAME is a minibuffer-only frame.Sframe.elc
Fframe-remove-geometry-props
Return the property list PLIST, but with geometry specs removed.
This deletes all bindings in PLIST for `top', `left', `width',
`height', `user-size' and `user-position' properties.
Emacs uses this to avoid overriding explicit moves and resizings from
the user during startup.Sframe.elc
Fselect-frame-set-input-focus
Select FRAME, raise it, and set input focus, if possible.Sframe.elc
Fother-frame
Select the ARG'th different visible frame, and raise it.
All frames are arranged in a cyclic order.
This command selects the frame ARG steps away in that order.
A negative ARG moves in the opposite order.

To make this command work properly, you must tell Emacs
how the system (or the window manager) generally handles
focus-switching between windows.  If moving the mouse onto a window
selects it (gives it focus), set `focus-follows-mouse' to t.
Otherwise, that variable should be nil.Sframe.elc
Ficonify-or-deiconify-frame
Iconify the selected frame, or deiconify if it's currently an icon.Sframe.elc
Fmake-frame-names-alist
Sframe.elc
Fselect-frame-by-name
Select the frame on the current terminal whose name is NAME and raise it.
If there is no frame by that name, signal an error.Sframe.elc
Fsave-selected-frame
Execute forms in BODY, then restore the selected frame.
The value returned is the value of the last form in BODY.Sframe.elc
Fwith-selected-frame
Execute forms in BODY with FRAME as the selected frame.
The value returned is the value of the last form in BODY.Sframe.elc
Fframe-list
Return a list of all frames on all devices/consoles.Sframe.elc
Fframe-type
Return the type of the specified frame (e.g. `x' or `tty').
This is equivalent to the type of the frame's device.
Value is `tty' for a tty frame (a character-only terminal),
`x' for a frame that is an X window,
`mswindows' for a frame that is a MS Windows desktop window,
`msprinter' for a frame that is a MS Windows print job,
`stream' for a stream frame (which acts like a stdio stream), and
`dead' for a deleted frame.Sframe.elc
Fdevice-or-frame-p
Return non-nil if OBJECT is a device or frame.Sframe.elc
Fdevice-or-frame-type
Return the type (e.g. `x' or `tty') of DEVICE-OR-FRAME.
DEVICE-OR-FRAME should be a device or a frame object.  See `device-type'
for a description of the possible types.Sframe.elc
Ffw-frame
Given a frame or window, return the associated frame.
Return nil otherwise.Sframe.elc
Fcurrent-frame-configuration
Return a list describing the positions and states of all frames.
Its car is `frame-configuration'.
Each element of the cdr is a list of the form (FRAME PLIST WINDOW-CONFIG),
where
  FRAME is a frame object,
  PLIST is a property list specifying some of FRAME's properties, and
  WINDOW-CONFIG is a window configuration object for FRAME.Sframe.elc
Fset-frame-configuration
Restore the frames to the state described by CONFIGURATION.
Each frame listed in CONFIGURATION has its position, size, window
configuration, and other properties set as specified in CONFIGURATION.
Ordinarily, this function deletes all existing frames not
listed in CONFIGURATION.  But if optional second argument NODELETE
is given and non-nil, the unwanted frames are iconified instead.Sframe.elc
Fframe-configuration-p
Return non-nil if OBJECT seems to be a frame configuration.
Any list whose car is `frame-configuration' is assumed to be a frame
configuration.Sframe.elc
Fframe-height
Return number of lines available for display on FRAME.
If FRAME is omitted, describe the currently selected frame.Sframe.elc
Fframe-width
Return number of columns available for display on FRAME.
If FRAME is omitted, describe the currently selected frame.Sframe.elc
Fset-default-font
Sframe.elc
Fset-frame-font
Set the font of the selected frame to FONT-NAME.
When called interactively, prompt for the name of the font to use.
To get the frame's current default font, use `(face-font-name 'default)'.

The default behavior is to keep the numbers of lines and columns in
the frame, thus may change its pixel size. If optional KEEP-SIZE is
non-nil (interactively, prefix argument) the current frame size (in
pixels) is kept by adjusting the numbers of the lines and columns.Sframe.elc
Fset-frame-property
Set property PROP of FRAME to VAL.  See `set-frame-properties'.Sframe.elc
Fset-frame-background-placement
Set the background placement of the selected frame to PLACEMENT.
When called interactively, prompt for the placement to use.Sframe.elc
Fframe-background-placement
Retrieve the selected frame's background placement.Sframe.elc
Fframe-background-placement-instance
Retrieve the selected frame's background placement instance.Sframe.elc
Fset-background-color
Set the background color of the selected frame to COLOR-NAME.
When called interactively, prompt for the name of the color to use.
To get the frame's current background color, use
`(face-background-name 'default)'.Sframe.elc
Fset-foreground-color
Set the foreground color of the selected frame to COLOR-NAME.
When called interactively, prompt for the name of the color to use.
To get the frame's current foreground color, use
`(face-foreground-name 'default)'.Sframe.elc
Fset-cursor-color
Set the text cursor color of the selected frame to COLOR-NAME.
When called interactively, prompt for the name of the color to use.
To get the frame's current cursor color, use
'(face-background-name 'text-cursor)'.Sframe.elc
Fset-mouse-color
Set the color of the mouse pointer of the selected frame to COLOR-NAME.
When called interactively, prompt for the name of the color to use.
To get the frame's current mouse color, use
`(face-foreground-name 'pointer)'.Sframe.elc
Fset-border-color
Set the color of the border of the selected frame to COLOR-NAME.
When called interactively, prompt for the name of the color to use.
To get the frame's current border color, use
`(face-foreground-name 'border-glyph)'.Sframe.elc
Vauto-raise-frame
*If true, frames will be raised to the top when selected.
Under X, most ICCCM-compliant window managers will have an option to do this
for you, but this variable is provided in case you're using a broken WM.Sframe.elc
Vauto-lower-frame
*If true, frames will be lowered to the bottom when no longer selected.
Under X, most ICCCM-compliant window managers will have an option to do this
for you, but this variable is provided in case you're using a broken WM.Sframe.elc
Fdefault-select-frame-hook
Implement the `auto-raise-frame' variable.
For use as the value of `select-frame-hook'.Sframe.elc
Fdefault-deselect-frame-hook
Implement the `auto-lower-frame' variable.
For use as the value of `deselect-frame-hook'.Sframe.elc
Vauto-raise-specifier
Specifier that determines which frames should auto-raise.
A value of `t' means that a frame auto-raises; `nil' means it does not.Sframe.elc
Vauto-lower-specifier
Specifier that determines which frames should auto-lower.
A value of `t' means that a frame auto-lowers; `nil' means it does not.Sframe.elc
Fauto-raise-mode
Toggle whether or not the selected frame should auto-raise.
With arg, turn auto-raise mode on if and only if arg is positive.
Note that this controls Emacs's own auto-raise feature.
Some window managers allow you to enable auto-raise for certain windows.
You can use that for Emacs windows if you wish, but if you do,
that is beyond the control of Emacs and this command has no effect on it.Sframe.elc
Fauto-lower-mode
Toggle whether or not the selected frame should auto-lower.
With arg, turn auto-lower mode on if and only if arg is positive.
Note that this controls Emacs's own auto-lower feature.
Some window managers allow you to enable auto-lower for certain windows.
You can use that for Emacs windows if you wish, but if you do,
that is beyond the control of Emacs and this command has no effect on it.Sframe.elc
Fdisplay-mouse-p
Return non-nil if DISPLAY has a mouse available.
DISPLAY can be a frame, a device, a console, or nil (meaning the
selected frame).Sframe.elc
Fdisplay-popup-menus-p
Return non-nil if popup menus are supported on DISPLAY.
DISPLAY can be a frame, a device, a console, or nil (meaning the selected
frame).  Support for popup menus requires that the mouse be available.Sframe.elc
Fdisplay-graphic-p
Return non-nil if DISPLAY is a graphic display.
Graphical displays are those which are capable of displaying several
frames and several different fonts at once.  This is true for displays
that use a window system such as X, and false for text-only terminals.
DISPLAY can be a frame, a device, a console, or nil (meaning the selected
frame).Sframe.elc
Fdisplay-images-p
Return non-nil if DISPLAY can display images.
DISPLAY can be a frame, a device, a console, or nil (meaning the selected
frame).Sframe.elc
Fdisplay-selections-p
Return non-nil if DISPLAY supports selections.
A selection is a way to transfer text or other data between programs
via special system buffers called `selection' or `cut buffer' or
`clipboard'.
DISPLAY can be a frame, a device, a console, or nil (meaning the selected
frame).Sframe.elc
Fdisplay-screens
Return the number of screens associated with DISPLAY.Sframe.elc
Fdisplay-pixel-height
Return the height of DISPLAY's screen in pixels.
For character terminals, each character counts as a single pixel.Sframe.elc
Fdisplay-pixel-width
Return the width of DISPLAY's screen in pixels.
For character terminals, each character counts as a single pixel.Sframe.elc
Fdisplay-mm-height
Return the height of DISPLAY's screen in millimeters.
If the information is unavailable, value is nil.Sframe.elc
Fdisplay-mm-width
Return the width of DISPLAY's screen in millimeters.
If the information is unavailable, value is nil.Sframe.elc
Fdisplay-backing-store
Return the backing store capability of DISPLAY's screen.
The value may be `always', `when-mapped', `not-useful', or nil if
the question is inapplicable to a certain kind of display.Sframe.elc
Fdisplay-save-under
Return non-nil if DISPLAY's screen supports the SaveUnder feature.Sframe.elc
Fdisplay-planes
Return the number of planes supported by DISPLAY.Sframe.elc
Fdisplay-color-cells
Return the number of color cells supported by DISPLAY.Sframe.elc
Fdisplay-visual-class
Returns the visual class of DISPLAY.
The value is one of the symbols `static-gray', `gray-scale',
`static-color', `pseudo-color', `true-color', or `direct-color'.Sframe.elc
Fdelete-other-frames
Delete all frames except FRAME.
If FRAME uses another frame's minibuffer, the minibuffer frame is
left untouched.  FRAME nil or omitted means use the selected frame.Sframe.elc
Ficonify-emacs
Replace every non-iconified FRAME with a *single* icon.
Iconified frames are left alone.  When XEmacs is in this
globally-iconified state, de-iconifying any emacs icon will uniconify
all frames that were visible, and iconify all frames that were not.Sframe.elc
Fdeiconify-emacs
Sframe.elc
Fsuspend-or-iconify-emacs
Call iconify-emacs if using a window system, otherwise suspend.

`suspend' here can mean different things; if the current TTY console was
created by gnuclient, that console is suspended, and the related devices and
frames are removed from the display.  Otherwise the Emacs process as a whole
is suspended--that is, the traditional Unix suspend takes place.  Sframe.elc
Fsuspend-emacs-or-iconify-frame
Iconify the selected frame if using a window system, otherwise suspend.

`suspend' here can mean different things; if the current TTY console was
created by gnuclient, the console is suspended, and the related devices and
frames are removed from the display.  Otherwise the Emacs process as a whole
is suspended--that is, the traditional Unix suspend takes place.  Sframe.elc
Vget-frame-for-buffer-default-frame-name
*The default frame to select; see doc of `get-frame-for-buffer'.Sframe.elc
Vget-frame-for-buffer-default-instance-limit
*The default instance limit for creating new frames; 
see doc of `get-frame-for-buffer'.Sframe.elc
Fget-frame-name-for-buffer
Sframe.elc
Fget-frame-for-buffer-make-new-frame
Sframe.elc
Vget-frame-for-buffer-default-to-current
*When non-nil, `get-frame-for-buffer' will default to the selected frame.Sframe.elc
Fget-frame-for-buffer-noselect
Return a frame in which to display BUFFER.
This is a subroutine of `get-frame-for-buffer' (which see).Sframe.elc
Fget-frame-for-buffer
Select and return a frame in which to display BUFFER.
Normally, the buffer will simply be displayed in the selected frame.
But if the symbol naming the major-mode of the buffer has a `frame-name'
property (which should be a symbol), then the buffer will be displayed in
a frame of that name.  If there is no frame of that name, then one is
created.

If the major-mode doesn't have a `frame-name' property, then the frame
named by `get-frame-for-buffer-default-frame-name' will be used.  If
that is nil (the default) then the currently selected frame will used.

If the frame-name symbol has an `instance-limit' property (an integer)
then each time a buffer of the mode in question is displayed, a new frame
with that name will be created, until there are `instance-limit' of them.
If instance-limit is 0, then a new frame will be created each time.

If a buffer is already displayed in a frame, then `instance-limit' is
ignored, and that frame is used.

If the frame-name symbol has a `frame-defaults' property, then that is
prepended to the `default-frame-plist' when creating a frame for the
first time.

This function may be used as the value of `pre-display-buffer-function',
to cause the `display-buffer' function and its callers to exhibit the
above behavior.Sframe.elc
Fframes-of-buffer
Return list of frames that BUFFER is currently being displayed on.
If the buffer is being displayed on the currently selected frame, that frame
is first in the list.  VISIBLE-ONLY will only list non-iconified frames.Sframe.elc
Vtemp-buffer-shrink-to-fit
*When non-nil resize temporary output buffers to minimize blank lines.Sframe.elc
Vtemp-buffer-max-height
*Proportion of frame to use for temp windows.Sframe.elc
Fshow-temp-buffer-in-current-frame
For use as the value of `temp-buffer-show-function':
always displays the buffer in the selected frame, regardless of the behavior
that would otherwise be introduced by the `pre-display-buffer-function', which
is normally set to `get-frame-for-buffer' (which see).Sframe.elc
Fframe-utmost-window-2
Sframe.elc
Fframe-utmost-window-1
Sframe.elc
Fframe-highest-window
Return the highest window on FRAME which is at POSITION.
If omitted, FRAME defaults to the currently selected frame.
POSITION is used to distinguish between multiple windows that abut
 the top of the frame: 0 means the leftmost window abutting the
 top of the frame, 1 the next-leftmost, etc.  POSITION can also
 be less than zero: -1 means the rightmost window abutting the
 top of the frame, -2 the next-rightmost, etc.
If omitted, POSITION defaults to 0, i.e. the leftmost highest window.
If there is no window at the given POSITION, return nil.Sframe.elc
Fframe-lowest-window
Return the lowest window on FRAME which is at POSITION.
If omitted, FRAME defaults to the currently selected frame.
POSITION is used to distinguish between multiple windows that abut
 the bottom of the frame: 0 means the leftmost window abutting the
 bottom of the frame, 1 the next-leftmost, etc.  POSITION can also
 be less than zero: -1 means the rightmost window abutting the
 bottom of the frame, -2 the next-rightmost, etc.
If omitted, POSITION defaults to 0, i.e. the leftmost lowest window.
If there is no window at the given POSITION, return nil.Sframe.elc
Fframe-leftmost-window
Return the leftmost window on FRAME which is at POSITION.
If omitted, FRAME defaults to the currently selected frame.
POSITION is used to distinguish between multiple windows that abut
 the left edge of the frame: 0 means the highest window abutting the
 left edge of the frame, 1 the next-highest, etc.  POSITION can also
 be less than zero: -1 means the lowest window abutting the
 left edge of the frame, -2 the next-lowest, etc.
If omitted, POSITION defaults to 0, i.e. the highest leftmost window.
If there is no window at the given POSITION, return nil.Sframe.elc
Fframe-rightmost-window
Return the rightmost window on FRAME which is at POSITION.
If omitted, FRAME defaults to the currently selected frame.
POSITION is used to distinguish between multiple windows that abut
 the right edge of the frame: 0 means the highest window abutting the
 right edge of the frame, 1 the next-highest, etc.  POSITION can also
 be less than zero: -1 means the lowest window abutting the
 right edge of the frame, -2 the next-lowest, etc.
If omitted, POSITION defaults to 0, i.e. the highest rightmost window.
If there is no window at the given POSITION, return nil.Sx-faces.elc
Fx-font-xlfd-font-name-p
Check if FONT is an XLFD font nameSx-faces.elc
Fx-frob-font-weight
Sx-faces.elc
Fx-frob-font-slant
Sx-faces.elc
Fx-make-font-bold
Given an X font specification, this attempts to make a `bold' font.
If it fails, it returns nil.Sx-faces.elc
Fx-make-font-bold-xft
Sx-faces.elc
Fx-make-font-bold-core
Sx-faces.elc
Fx-make-font-unbold
Given an X font specification, this attempts to make a non-bold font.
If it fails, it returns nil.Sx-faces.elc
Fx-make-font-unbold-xft
Sx-faces.elc
Fx-make-font-unbold-core
Sx-faces.elc
Vtry-oblique-before-italic-fonts
*If nil, italic fonts are searched before oblique fonts.
If non-nil, oblique fonts are tried before italic fonts.  This is mostly
applicable to adobe-courier fontsSx-faces.elc
Fx-make-font-italic
Given an X font specification, this attempts to make an `italic' font.
If it fails, it returns nil.Sx-faces.elc
Fx-make-font-italic-xft
Sx-faces.elc
Fx-make-font-italic-core
Sx-faces.elc
Fx-make-font-unitalic
Given an X font specification, this attempts to make a non-italic font.
If it fails, it returns nil.Sx-faces.elc
Fx-make-font-unitalic-xft
Sx-faces.elc
Fx-make-font-unitalic-core
Sx-faces.elc
Fx-make-font-bold-italic
Given an X font specification, this attempts to make a `bold-italic' font.
If it fails, it returns nil.Sx-faces.elc
Fx-make-font-bold-italic-xft
Sx-faces.elc
Fx-make-font-bold-italic-core
Sx-faces.elc
Fx-font-size
Return the nominal size of the given font.
This is done by parsing its name, so it's likely to lose.
X fonts can be specified (by the user) in either pixels or 10ths of points,
 and this returns the first one it finds, so you have to decide which units
 the returned value is measured in yourself...Sx-faces.elc
Fx-font-size-xft
Sx-faces.elc
Fx-font-size-core
Sx-faces.elc
Fx-available-font-sizes
Sx-faces.elc
Fx-frob-font-size
Sx-faces.elc
Fx-find-smaller-font
Load a new, slightly smaller version of the given font (or font name).
Returns the font if it succeeds, nil otherwise.
If scalable fonts are available, this returns a font which is 1 point smaller.
Otherwise, it returns the next smaller version of this font that is defined.Sx-faces.elc
Fx-find-xft-font-of-size
Sx-faces.elc
Fx-find-smaller-font-xft
Sx-faces.elc
Fx-find-smaller-font-core
Sx-faces.elc
Fx-find-larger-font
Load a new, slightly larger version of the given font (or font name).
Returns the font if it succeeds, nil otherwise.
If scalable fonts are available, this returns a font which is 1 point larger.
Otherwise, it returns the next larger version of this font that is defined.Sx-faces.elc
Fx-find-larger-font-xft
Sx-faces.elc
Fx-find-larger-font-core
Sx-faces.elc
Vx-library-search-path
Search path used by `x-color-list-internal' to find rgb.txt.Sx-faces.elc
Fx-color-list-internal
Sx-faces.elc
Fx-init-face-from-resources
Sx-faces.elc
Fmake-face-x-resource-internal
Sx-faces.elc
Fremove-specifier-specs-matching-tag-set-cdrs
Sx-faces.elc
Fx-init-global-faces
Sx-faces.elc
Fx-init-device-faces
Sx-faces.elc
Fx-init-frame-faces
Sfaces.elc
Fread-face-name
Sfaces.elc
Fface-interactive
Sfaces.elc
Vbuilt-in-face-specifiers
A list of the built-in face properties that are specifiers.Sfaces.elc
Fface-property
Return FACE's value of the given PROPERTY.

NOTE: If you are looking for the "value" of a built-in face property
  (`foreground', `background', `font', `background-pixmap', etc.), you
  are probably better off calling `face-property-instance'.  The return
  value of `face-property' for built-in properties describes the original
  specification used to determine the face property, which may be nil,
  a list of instantiators, or something else that is unexpected.  For
  example, if you ask for a face property in a particular buffer (by
  specifying a buffer for LOCALE), you will get a non-nil return value
  only if a buffer-local specification for that particular buffer had
  previously been given.

For a full list of built-in property names and their semantics, see
  `set-face-property'.

If LOCALE is omitted, the FACE's actual value for PROPERTY will be
  returned.  In this case, this function appears to behave rather
  differently depending on whether PROPERTY is a built-in face property of
  a user-defined face property.  This is because the most basic value of a
  user-defined property is simply whatever was set using
  `set-face-property', but for a built-in property it's always a specifier,
  which is an abstract object encapsulating all the specifications for that
  particular property.

LOCALE, if supplied, will generally be a buffer, frame or
  `global' (for the global value), but there are other possibilities -- see
  the following paragraph.  This mostly applies to built-in properties.  In
  this case, the return value will not be a specifier object but the
  specification(s) for the given locale or locale type will be returned
  (equivalent to calling `specifier-specs' on the specifier).
  (Technically, the same thing happens if the basic value of a user-
  defined property is a specifier, although this usage is rare.)

The return value will be a list of instantiators (e.g. strings
  specifying a font or color name), or a list of specifications, each
  of which is a cons of a locale and a list of instantiators.
  Specifically, if LOCALE is a particular locale (a buffer, window,
  frame, device, or `global'), a list of instantiators for that locale
  will be returned.  Otherwise, if LOCALE is a locale type (one of
  the symbols `buffer', `window', `frame', or `device'), the specifications
  for all locales of that type will be returned.  Finally, if LOCALE is
  `all', the specifications for all locales of all types will be returned.

The specifications in a specifier determine what the value of
  PROPERTY will be in a particular "domain" or set of circumstances,
  which is typically a particular Emacs window -- which in turn defines
  a buffer (the buffer in the window), a frame (the frame that the window
  is in), and a device (the device that the frame is in).  The value is
  derived from the instantiator associated with the most specific
  locale (in the order buffer, window, frame, device, and `global')
  that matches the domain in question.  In other words, given a domain
  (i.e. an Emacs window, usually), the specifier for PROPERTY will
  first be searched for a specification whose locale is the buffer
  contained within that window; then for a specification whose locale
  is the window itself; then for a specification whose locale is the
  frame that the window is contained within; etc.  The first
  instantiator that is valid for the domain (usually this means that
  the instantiator is recognized by the device [i.e. MS Windows, the X
  server or TTY device]) will be "instantiated", which generates
  a Lisp object encapsulating the original instantiator and the underlying
  window-system object describing the property.  The function
  `face-property-instance' actually does all this.Sfaces.elc
Fconvert-face-property-into-specifier
Convert PROPERTY on FACE into a specifier, if it's not already.Sfaces.elc
Fface-property-instance
Return the instance of FACE's PROPERTY in the specified DOMAIN.

Under most circumstances, DOMAIN will be a particular window,
  and the returned instance describes how the specified property
  actually is displayed for that window and the particular buffer
  in it.  Note that this may not be the same as how the property
  appears when the buffer is displayed in a different window or
  frame, or how the property appears in the same window if you
  switch to another buffer in that window; and in those cases,
  the returned instance would be different.

The returned instance will typically be a color-instance,
  font-instance, or image-instance object, and you can query
  it using the appropriate object-specific functions.  For example,
  you could use `color-instance-rgb-components' to find out the
  RGB (red, green, and blue) components of how the `background'
  property of the `highlight' face is displayed in a particular
  window.  The results might be different from the results
  you would get for another window (perhaps the user
  specified a different color for the frame that window is on;
  or perhaps the same color was specified but the window is
  on a different X server, and that X server has different RGB
  values for the color from this one).

DOMAIN defaults to the selected window if omitted.

DOMAIN can be a frame or device, instead of a window.  The value
  returned for a such a domain is used in special circumstances
  when a more specific domain does not apply; for example, a frame
  value might be used for coloring a toolbar, which is conceptually
  attached to a frame rather than a particular window.  The value
  is also useful in determining what the value would be for a
  particular window within the frame or device, if it is not
  overridden by a more specific specification.

If PROPERTY does not name a built-in property, its value will
  simply be returned unless it is a specifier object, in which case
  it will be instanced using `specifier-instance'.

Optional arguments DEFAULT and NO-FALLBACK are the same as in
  `specifier-instance'.Sfaces.elc
Fface-property-matching-instance
Return the instance of FACE's PROPERTY matching MATCHSPEC in DOMAIN.
Currently MATCHSPEC is used only for the 'font property, when its value
should be a cons (CHARSET . STAGE) (see `specifier-matching-instance'
for a full description of the matching process).  This allows you to
retrieve a font that can be used to display a particular charset, rather
than just any font.  For backward compatibility, MATCHSPEC may be a
charset, which is interpreted as (CHARSET . final).

See `face-property-instance' for usage of the other arguments.Sfaces.elc
Fset-face-property
Change a property of FACE.

NOTE: If you want to remove a property from a face, use `remove-face-property'
  rather than attempting to set a value of nil for the property.

For built-in properties, the actual value of the property is a
  specifier and you cannot change this; but you can change the
  specifications within the specifier, and that is what this function
  will do.  For user-defined properties, you can use this function
  to either change the actual value of the property or, if this value
  is a specifier, change the specifications within it.

If PROPERTY is a built-in property, the specifications to be added to
  this property can be supplied in many different ways:

  -- If VALUE is a simple instantiator (e.g. a string naming a font or
     color) or a list of instantiators, then the instantiator(s) will
     be added as a specification of the property for the given LOCALE
     (which defaults to `global' if omitted).
  -- If VALUE is a list of specifications (each of which is a cons of
     a locale and a list of instantiators), then LOCALE must be nil
     (it does not make sense to explicitly specify a locale in this
     case), and specifications will be added as given.
  -- If VALUE is a specifier (as would be returned by `face-property'
     if no LOCALE argument is given), then some or all of the
     specifications in the specifier will be added to the property.
     In this case, the function is really equivalent to
     `copy-specifier' and LOCALE has the same semantics (if it is
     a particular locale, the specification for the locale will be
     copied; if a locale type, specifications for all locales of
     that type will be copied; if nil or `all', then all
     specifications will be copied).

HOW-TO-ADD should be either nil or one of the symbols `prepend',
  `append', `remove-tag-set-prepend', `remove-tag-set-append', `remove-locale',
  `remove-locale-type', or `remove-all'.  See `copy-specifier' and
  `add-spec-to-specifier' for a description of what each of
  these means.  Most of the time, you do not need to worry about
  this argument; the default behavior usually is fine.

In general, it is OK to pass an instance object (e.g. as returned
  by `face-property-instance') as an instantiator in place of
  an actual instantiator.  In such a case, the instantiator used
  to create that instance object will be used (for example, if
  you set a font-instance object as the value of the `font'
  property, then the font name used to create that object will
  be used instead).  If some cases, however, doing this
  conversion does not make sense, and this will be noted in
  the documentation for particular types of instance objects.

If PROPERTY is not a built-in property, then this function will
  simply set its value if LOCALE is nil.  However, if LOCALE is
  given, then this function will attempt to add VALUE as the
  instantiator for the given LOCALE, using `add-spec-to-specifier'.
  If the value of the property is not a specifier, it will
  automatically be converted into a `generic' specifier.


The following symbols have predefined meanings:

 foreground         The foreground color of the face.
                    For valid instantiators, see `make-color-specifier'.

 foreback           The foreground color of the face's background pixmap,
                    when the pixmap is a bitmap.
                    Only used by faces on X and MS Windows devices.
                    For valid instantiators, see `make-color-specifier'.

 background         The background color of the face.
                    For valid instantiators, see `make-color-specifier'.

 font               The font used to display text covered by this face.
                    For valid instantiators, see `make-font-specifier'.

 display-table      The display table of the face.
                    This should be a vector of 256 elements.

 background-pixmap  The pixmap displayed in the background of the face.
                    Only used by faces on X and MS Windows devices.
                    For valid instantiators, see `make-image-specifier'.

 background-placement  The placement of the face's background pixmap.
                    Only used by faces on X devices.
                    For valid instantiators,
                    see `make-face-background-placement-specifier'.

 underline          Underline all text covered by this face.
                    For valid instantiators, see `make-face-boolean-specifier'.

 strikethru         Draw a line through all text covered by this face.
                    For valid instantiators, see `make-face-boolean-specifier'.

 highlight          Highlight all text covered by this face.
                    Only used by faces on TTY devices.
                    For valid instantiators, see `make-face-boolean-specifier'.

 dim                Dim all text covered by this face.
                    For valid instantiators, see `make-face-boolean-specifier'.

 blinking           Blink all text covered by this face.
                    Only used by faces on TTY devices.
                    For valid instantiators, see `make-face-boolean-specifier'.

 reverse            Reverse the foreground and background colors.
                    Only used by faces on TTY devices.
                    For valid instantiators, see `make-face-boolean-specifier'.

 shrink             Shrink the face to the actual text on the line instead of
                    covering the whole line until the right border of the
                    window.  The effect will only be visible if the face has
                    a non default background.
                    For valid instantiators, see `make-face-boolean-specifier'.

 inherit	    Face name or face object from which to inherit attributes,
                    or a list of such elements.  Attributes from inherited
                    faces are merged into the face like an underlying face
                    would be, with higher priority than underlying faces.

 doc-string         Description of what the face's normal use is.
                    NOTE: This is not a specifier, unlike all
                    the other built-in properties, and cannot
                    contain locale-specific values.Sfaces.elc
Fremove-face-property
Remove a property from FACE.
For built-in properties, this is analogous to `remove-specifier'.
See `remove-specifier' for the meaning of the LOCALE, TAG-SET, and EXACT-P
arguments.Sfaces.elc
Freset-face
Clear all existing built-in specifications from FACE.
This makes FACE inherit all its display properties from `default'.
WARNING: Be absolutely sure you want to do this!!!  It is a dangerous
operation and is not undoable.

The arguments LOCALE, TAG-SET and EXACT-P are the same as for
`remove-specifier'.Sfaces.elc
Fset-face-parent
Set the parent of FACE to PARENT, for all properties.
This makes all properties of FACE inherit from PARENT.Sfaces.elc
Fface-doc-string
Return the documentation string for FACE.Sfaces.elc
Fset-face-doc-string
Change the documentation string of FACE to DOC-STRING.Sfaces.elc
Fface-font-name
Return the font name of FACE in DOMAIN, or nil if it is unspecified.
DOMAIN is as in `face-font-instance'.

Font names are strings, as described in `make-font-specifier'.Sfaces.elc
Fface-font
Return the font spec of FACE in LOCALE, or nil if it is unspecified.

NOTE: This returns a locale-specific specification, not any sort of value
corresponding to the actual font being used.  If you want to know the
actual font used in a particular domain, use `face-font-instance', or
`face-font-name' for its name (i.e. the instantiator used to create it).

FACE may be either a face object or a symbol representing a face.

LOCALE may be a locale (the instantiators for that particular locale
  will be returned), a locale type (the specifications for all locales
  of that type will be returned), `all' (all specifications will be
  returned), or nil (the actual specifier object will be returned).

See `face-property' for more information.Sfaces.elc
Fface-font-instance
Return the instance of FACE's font in DOMAIN.

Return value will be a font instance object; query its properties using
`font-instance-name', `font-instance-height', `font-instance-width', etc.

FACE may be either a face object or a symbol representing a face.

Normally DOMAIN will be a window or nil (meaning the selected window),
  and an instance object describing how the font appears in that
  particular window and buffer will be returned.

CHARSET is a Mule charset (meaning return the font used for that charset) or
nil (meaning return the font used for ASCII.)

See `face-property-instance' for more information.Sfaces.elc
Fset-face-font
Change the font of FACE to FONT in LOCALE.

FACE may be either a face object or a symbol representing a face.

FONT should be an instantiator (see `make-font-specifier'; a common
  instantiator is a platform-dependent string naming the font), a list
  of instantiators, an alist of specifications (each mapping a locale
  to an instantiator list), or a font specifier object.

If FONT is an alist, LOCALE must be omitted.  If FONT is a specifier
  object, LOCALE can be a locale, a locale type, `all', or nil; see
  `copy-specifier' for its semantics.  Common LOCALEs are buffer
  objects, window objects, device objects and `global'.  Otherwise
  LOCALE specifies the locale under which the specified
  instantiator(s) will be added, and defaults to `global'.

See `set-face-property' for more information.Sfaces.elc
Fface-foreground
Return the foreground spec of FACE in LOCALE, or nil if it is unspecified.

NOTE: This returns a locale-specific specification, not any sort of value
corresponding to the actual foreground being used.  If you want to know the
actual foreground color used in a particular domain, use
`face-foreground-instance', or `face-foreground-name' for its name
(i.e. the instantiator used to create it).

FACE may be either a face object or a symbol representing a face.

LOCALE may be a locale (the instantiators for that particular locale
  will be returned), a locale type (the specifications for all locales
  of that type will be returned), `all' (all specifications will be
  returned), or nil (the actual specifier object will be returned).

See `face-property' for more information.Sfaces.elc
Fface-foreground-instance
Return the instance of FACE's foreground in DOMAIN.

Return value will be a color instance object; query its properties using
`color-instance-name' or `color-instance-rgb-properties'.

FACE may be either a face object or a symbol representing a face.

Normally DOMAIN will be a window or nil (meaning the selected window),
  and an instance object describing how the foreground appears in that
  particular window and buffer will be returned.

See `face-property-instance' for more information.Sfaces.elc
Fface-foreground-name
Return the name of FACE's foreground color in DOMAIN.

FACE may be either a face object or a symbol representing a face.

Normally DOMAIN will be a window or nil (meaning the selected window),
  and an instance object describing how the foreground appears in that
  particular window and buffer will be returned.

See `face-property-instance' for more information.Sfaces.elc
Fset-face-foreground
Change the foreground color of FACE to COLOR in LOCALE.

FACE may be either a face object or a symbol representing a face.

COLOR should be an instantiator (see `make-color-specifier'), a list of
  instantiators, an alist of specifications (each mapping a locale to
  an instantiator list), or a color specifier object.

If COLOR is an alist, LOCALE must be omitted.  If COLOR is a
  specifier object, LOCALE can be a locale, a locale type, `all',
  or nil; see `copy-specifier' for its semantics.  Otherwise LOCALE
  specifies the locale under which the specified instantiator(s)
  will be added, and defaults to `global'.

See `set-face-property' for more information.Sfaces.elc
Fface-foreback
Return the foreback spec of FACE in LOCALE, or nil if it is unspecified.

NOTE: This returns a locale-specific specification, not any sort of value
corresponding to the actual foreback being used.  If you want to know the
actual foreback color used in a particular domain, use
`face-foreback-instance', or `face-foreback-name' for its name
(i.e. the instantiator used to create it).

FACE may be either a face object or a symbol representing a face.

LOCALE may be a locale (the instantiators for that particular locale
  will be returned), a locale type (the specifications for all locales
  of that type will be returned), `all' (all specifications will be
  returned), or nil (the actual specifier object will be returned).

See `face-property' for more information.Sfaces.elc
Fface-foreback-instance
Return the instance of FACE's foreback in DOMAIN.

Return value will be a color instance object; query its properties using
`color-instance-name' or `color-instance-rgb-properties'.

FACE may be either a face object or a symbol representing a face.

Normally DOMAIN will be a window or nil (meaning the selected window),
  and an instance object describing how the foreback appears in that
  particular window and buffer will be returned.

See `face-property-instance' for more information.Sfaces.elc
Fface-foreback-name
Return the name of FACE's foreback color in DOMAIN.

FACE may be either a face object or a symbol representing a face.

Normally DOMAIN will be a window or nil (meaning the selected window),
  and an instance object describing how the foreback appears in that
  particular window and buffer will be returned.

See `face-property-instance' for more information.Sfaces.elc
Fset-face-foreback
Change the foreback color of FACE to COLOR in LOCALE.

FACE may be either a face object or a symbol representing a face.

COLOR should be an instantiator (see `make-color-specifier'), a list of
  instantiators, an alist of specifications (each mapping a locale to
  an instantiator list), or a color specifier object.

If COLOR is an alist, LOCALE must be omitted.  If COLOR is a
  specifier object, LOCALE can be a locale, a locale type, `all',
  or nil; see `copy-specifier' for its semantics.  Otherwise LOCALE
  specifies the locale under which the specified instantiator(s)
  will be added, and defaults to `global'.

See `set-face-property' for more information.Sfaces.elc
Fface-background
Return the background color of FACE in LOCALE, or nil if it is unspecified.

NOTE: This returns a locale-specific specification, not any sort of value
corresponding to the actual background being used.  If you want to know the
actual background color used in a particular domain, use
`face-background-instance', or `face-background-name' for its name
(i.e. the instantiator used to create it).

FACE may be either a face object or a symbol representing a face.

LOCALE may be a locale (the instantiators for that particular locale
  will be returned), a locale type (the specifications for all locales
  of that type will be returned), `all' (all specifications will be
  returned), or nil (the actual specifier object will be returned).

See `face-property' for more information.Sfaces.elc
Fface-background-instance
Return the instance of FACE's background in DOMAIN.

Return value will be a color instance object; query its properties using
`color-instance-name' or `color-instance-rgb-properties'.

FACE may be either a face object or a symbol representing a face.

Normally DOMAIN will be a window or nil (meaning the selected window),
  and an instance object describing how the background appears in that
  particular window and buffer will be returned.

See `face-property-instance' for more information.Sfaces.elc
Fface-background-name
Return the name of FACE's background color in DOMAIN.

FACE may be either a face object or a symbol representing a face.

Normally DOMAIN will be a window or nil (meaning the selected window),
  and an instance object describing how the background appears in that
  particular window and buffer will be returned.

See `face-property-instance' for more information.Sfaces.elc
Fset-face-background
Change the background color of FACE to COLOR in LOCALE.

FACE may be either a face object or a symbol representing a face.

COLOR should be an instantiator (see `make-color-specifier'), a list of
  instantiators, an alist of specifications (each mapping a locale to
  an instantiator list), or a color specifier object.

If COLOR is an alist, LOCALE must be omitted.  If COLOR is a
  specifier object, LOCALE can be a locale, a locale type, `all',
  or nil; see `copy-specifier' for its semantics.  Otherwise LOCALE
  specifies the locale under which the specified instantiator(s)
  will be added, and defaults to `global'.

See `set-face-property' for more information.Sfaces.elc
Fface-background-pixmap
Return the background pixmap spec of FACE in LOCALE, or nil if unspecified.
This property is only used on window system devices.

NOTE: This returns a locale-specific specification, not any sort of value
corresponding to the actual background pixmap being used.  If you want to
know the actual background pixmap used in a particular domain, use
`face-background-pixmap-instance'.

FACE may be either a face object or a symbol representing a face.

LOCALE may be a locale (the instantiators for that particular locale
  will be returned), a locale type (the specifications for all locales
  of that type will be returned), `all' (all specifications will be
  returned), or nil (the actual specifier object will be returned).

See `face-property' for more information.Sfaces.elc
Fface-background-pixmap-instance
Return the instance of FACE's background pixmap in DOMAIN.

Return value will be an image instance object; query its properties using
`image-instance-instantiator' (the original instantiator used to create
the image, which may be a complex beast -- see `make-image-specifier'),
`image-instance-file-name' (the file, if any, from which the image was
created), `image-instance-height', etc.

FACE may be either a face object or a symbol representing a face.

Normally DOMAIN will be a window or nil (meaning the selected window),
  and an instance object describing how the background appears in that
  particular window and buffer will be returned.

See `face-property-instance' for more information.Sfaces.elc
Fset-face-background-pixmap
Change the background pixmap of FACE to PIXMAP in LOCALE.
This property is only used on window system devices.

FACE may be either a face object or a symbol representing a face.

PIXMAP should be an instantiator (see `make-image-specifier'), a list
  of instantiators, an alist of specifications (each mapping a locale
  to an instantiator list), or an image specifier object.

If PIXMAP is an alist, LOCALE must be omitted.  If PIXMAP is a
  specifier object, LOCALE can be a locale, a locale type, `all',
  or nil; see `copy-specifier' for its semantics.  Otherwise LOCALE
  specifies the locale under which the specified instantiator(s)
  will be added, and defaults to `global'.

See `set-face-property' for more information.Sfaces.elc
Fset-face-background-pixmap-file
Read (and set) the background pixmap of FACE from FILE.
This function is a simplified version of `set-face-background-pixmap',
designed for interactive use.Sfaces.elc
Fface-background-placement
Return FACE's background placement in DOMAIN.
See `face-property-instance' for the semantics of the DOMAIN argument.Sfaces.elc
Fset-face-background-placement
Change the background-placement property of FACE to PLACEMENT.
PLACEMENT is normally a background-placement instantiator; see
`make-face-background-placement-specifier'.
See `set-face-property' for the semantics of the LOCALE, TAG-SET, and
HOW-TO-ADD arguments.Sfaces.elc
Fface-background-placement-instance
Return FACE's background-placement instance in DOMAIN.
Return value will be a background-placement instance object.

FACE may be either a face object or a symbol representing a face.

Normally DOMAIN will be a window or nil (meaning the selected window),
and an instance object describing the background placement in that particular
window and buffer will be returned.

See `face-property-instance' for more information.Sfaces.elc
Fface-background-placement-instance-p
Return t if OBJECT is a face-background-placement instance.Sfaces.elc
Fface-display-table
Return the display table spec of FACE in LOCALE, or nil if unspecified..

NOTE: This returns a locale-specific specification, not any sort of value
corresponding to the actual display table being used.  If you want to
know the actual display table used in a particular domain, use
`face-display-table-instance'.

FACE may be either a face object or a symbol representing a face.

LOCALE may be a locale (the instantiators for that particular locale
  will be returned), a locale type (the specifications for all locales
  of that type will be returned), `all' (all specifications will be
  returned), or nil (the actual specifier object will be returned).

See `face-property' for more information.Sfaces.elc
Fface-display-table-instance
Return the instance of FACE's display table in DOMAIN.

Return value will be a vector, char table or range table; see
`current-display-table'.

FACE may be either a face object or a symbol representing a face.

Normally DOMAIN will be a window or nil (meaning the selected window),
  and the actual display table used in that particular window and buffer
  will be returned.

See `face-property-instance' for more information.Sfaces.elc
Fset-face-display-table
Change the display table of FACE to DISPLAY-TABLE in LOCALE.
DISPLAY-TABLE should be a vector as returned by `make-display-table'.

See `set-face-property' for the semantics of the LOCALE, TAG-SET, and
  HOW-TO-ADD arguments.Sfaces.elc
Fface-underline-p
Return t if FACE is underlined in DOMAIN.
See `face-property-instance' for the semantics of the DOMAIN argument.Sfaces.elc
Fset-face-underline-p
Change the underline property of FACE to UNDERLINE-P.
UNDERLINE-P is normally a face-boolean instantiator; see
 `make-face-boolean-specifier'.
See `set-face-property' for the semantics of the LOCALE, TAG-SET, and
 HOW-TO-ADD arguments.Sfaces.elc
Fface-strikethru-p
Return t if FACE is strikethru-d (i.e. struck through) in DOMAIN.
See `face-property-instance' for the semantics of the DOMAIN argument.Sfaces.elc
Fset-face-strikethru-p
Change whether FACE is strikethru-d (i.e. struck through) in LOCALE.
STRIKETHRU-P is normally a face-boolean instantiator; see
 `make-face-boolean-specifier'.
See `set-face-property' for the semantics of the LOCALE, TAG-SET, and
 HOW-TO-ADD arguments.Sfaces.elc
Fface-highlight-p
Return t if FACE is highlighted in DOMAIN (TTY domains only).
See `face-property-instance' for the semantics of the DOMAIN argument.Sfaces.elc
Fset-face-highlight-p
Change whether FACE is highlighted in LOCALE (TTY locales only).
HIGHLIGHT-P is normally a face-boolean instantiator; see
 `make-face-boolean-specifier'.
See `set-face-property' for the semantics of the LOCALE, TAG-SET, and
 HOW-TO-ADD arguments.Sfaces.elc
Fface-dim-p
Return t if FACE is dimmed in DOMAIN.
See `face-property-instance' for the semantics of the DOMAIN argument.Sfaces.elc
Fset-face-dim-p
Change whether FACE is dimmed in LOCALE.
DIM-P is normally a face-boolean instantiator; see
 `make-face-boolean-specifier'.
See `set-face-property' for the semantics of the LOCALE, TAG-SET, and
 HOW-TO-ADD arguments.Sfaces.elc
Fface-blinking-p
Return t if FACE is blinking in DOMAIN (TTY domains only).
See `face-property-instance' for the semantics of the DOMAIN argument.Sfaces.elc
Fset-face-blinking-p
Change whether FACE is blinking in LOCALE (TTY locales only).
BLINKING-P is normally a face-boolean instantiator; see
 `make-face-boolean-specifier'.
See `set-face-property' for the semantics of the LOCALE, TAG-SET, and
 HOW-TO-ADD arguments.Sfaces.elc
Fface-reverse-p
Return t if FACE is reversed in DOMAIN (TTY domains only).
See `face-property-instance' for the semantics of the DOMAIN argument.Sfaces.elc
Fset-face-reverse-p
Change whether FACE is reversed in LOCALE (TTY locales only).
REVERSE-P is normally a face-boolean instantiator; see
 `make-face-boolean-specifier'.
See `set-face-property' for the semantics of the LOCALE, TAG-SET, and
 HOW-TO-ADD arguments.Sfaces.elc
Fface-shrink-p
Return t if FACE is shrinked in DOMAIN.
See `face-property-instance' for the semantics of the DOMAIN argument.Sfaces.elc
Fset-face-shrink-p
Change whether FACE is shrinked in LOCALE.
SHRINK-P is normally a face-boolean instantiator; see
 `make-face-boolean-specifier'.
See `set-face-property' for the semantics of the LOCALE, TAG-SET, and
 HOW-TO-ADD arguments.Sfaces.elc
Fface-property-equal
Sfaces.elc
Fface-equal-loop
Sfaces.elc
Fface-equal
Return t if FACE1 and FACE2 will display in the same way in DOMAIN.
See `face-property-instance' for the semantics of the DOMAIN argument.Sfaces.elc
Fface-differs-from-default-p
Return t if FACE will display differently from the default face in DOMAIN.
See `face-property-instance' for the semantics of the DOMAIN argument.Sfaces.elc
Ftry-font-name
Return NAME if it's a valid font name on DEVICE, else nil.Sfaces.elc
Vface-frob-from-locale-first
*If non nil, use kludgy way of frobbing fonts suitable for non-mule
multi-charset environments.Sfaces.elc
FFace-frob-property
Sfaces.elc
Fmake-face-family
Set FACE's family to FAMILY in LOCALE, if possible.Sfaces.elc
Fmake-face-bold
Make FACE bold in LOCALE, if possible.
This will attempt to make the font bold for window-system locales and will
set the highlight flag for TTY locales.

The actual behavior of this function is somewhat messy, in an attempt to
get more intuitive behavior in quite a lot of different circumstances. (You
might view this as indicative of design failures with specifiers, but in
fact almost all code that attempts to interface to humans and produce
"intuitive" results gets messy, particularly with a system as complicated
as specifiers, whose complexity results from an attempt to work well in
many different circumstances.)

The meaning of LOCALE is the same as for `specifier-spec-list', i.e.:

-- If LOCALE is nil, omitted, or `all', this will attempt to "frob" all
   font specifications for FACE to make them appear bold (i.e. the
   specifications are replaced with equivalent specifications, where the
   font names have been changed to the closest bold font).

-- If LOCALE is a locale type (`buffer', `window', etc.), this frobs all
   font specifications for locales of that type.

-- If LOCALE is a particular locale, this frobs all font specifications for
   that locale.

If TAGS is given, this only processes instantiators whose tag set includes
all tags mentioned in TAGS.  In addition, if EXACT-P is non-nil, only
instantiators whose tag set exactly matches TAGS are processed; otherwise,
additional tags may be present in the instantiator's tag set.

This function proceeeds in three stages.

STAGE 1: Frob the settings that are already present.
STAGE 2: (if called for) Ensure that *some* setting exists in the locale
         that was given, finding it in various ways and frobbing it as in
         stage 1.  This ensures that there is an actual setting for
         the locale, so you will get the expected buffer-local/frame-local
         behavior -- changes to the global value, to other locales, won't
         affect this locale, (b) the face will actually look bold in
         the locale.
STAGE 3: (if called for)

The way the frobbing works depends on the device type -- first on whether
or not it's TTY, and second, if it's a window-system device type, on which
particular window-system device type.  For locales with a specific device
type, we do the frobbing in the context of that device type -- this means
that for TTY device types we set the highlight flag, and for window-system
device types we modify the font spec according to the rules for font specs
of that device type.  For global locales, we may process both the highlight
flag and the font specs (depending on the device types compiled into this
XEmacs).  When processing font specs, we check the tag set associated with
each font spec to see if it's specific to a particular device type; if so,
we frob it in the context of that type, else we use the type of the current
device. (A hack, but works well in practice -- and if a new device is
created, we will automatically frob all the standard fonts to make sure
they display OK on that device.)

If LOCALE is not a locale type, and both TAGS and EXACT-P are omitted, we
do further frobbing in an attempt to give more intuitive behavior.

First, if there are no specifications in LOCALE (if LOCALE is `all', we act
as if it were `global' for this step), we do our utmost to put a
specification there; otherwise, this function will have no effect.  For
device, frame, or window locales, the face's font is instantiated using the
locale as a domain, and the resulting font is frobbed and added back as a
specification for this locale.  If LOCALE is `global', we retrieve the
fallback specs and frob them.  If LOCALE is a buffer, things get tricky
since you can't instantiate a specifier in a buffer domain (the buffer can
appear in multiple places, or in different places over time, so this
operation is not well-defined).  We used to signal an error in this case,
but now we instead try to do something logical so that we work somewhat
similarly to buffer-local variables.  Specifically, we use
`get-buffer-window' to find a window viewing the buffer, and if there is
one, use this as a domain to instantiate the font, and frob the resulting
value.  Otherwise, we use the selected window for the same purpose.

Finally, if the frobbing didn't actually make the font look any different
in whatever domain we instantiated the font in (this happens, for example,
if your font specification is already bold or has no bold equivalent; note
that in this step, we use the selected device in place of `global' or `all'
-- another hack, but works well in practice since there's usually only one
device), and the font currently looks like the font of the `default' face,
it is set to inherit from the `bold' face.

NOTE: For the other functions defined below, the identity of these two
standard faces mentioned in the previous paragraph, and the TTY properties
that are modified, may be different, and whether the TTY property or
properties are set or unset may be different.  For example, for
`make-face-unitalic', the last sentence in the previous paragraph would
read "... and the font currently looks like the font of the `italic' face,
it is set to inherit from the `default' face.", and the second sentence in
the first paragraph would read "This will attempt to make the font
non-italic for window-system locales and will unset the underline flag for
TTY locales."

Here's a table indicating the behavior differences with the different
functions:

function                face1     face2         tty-props            tty-val
----------------------------------------------------------------------------
make-face-bold          default   bold          highlight            t
make-face-italic        default   italic        underline            t
make-face-bold-italic   default   bold-italic   highlight,underline  t
make-face-unbold        bold      default       highlight            nil
make-face-unitalic      italic    default       underline            nil
Sfaces.elc
Fmake-face-italic
Make FACE italic in LOCALE, if possible.
This will attempt to make the font italic for X/MS Windows locales and
will set the underline flag for TTY locales.  See `make-face-bold' for
the semantics of the LOCALE argument and for more specifics on exactly
how this function works.Sfaces.elc
Fmake-face-bold-italic
Make FACE bold and italic in LOCALE, if possible.
This will attempt to make the font bold-italic for X/MS Windows
locales and will set the highlight and underline flags for TTY
locales.  See `make-face-bold' for the semantics of the LOCALE
argument and for more specifics on exactly how this function works.Sfaces.elc
Fmake-face-unbold
Make FACE non-bold in LOCALE, if possible.
This will attempt to make the font non-bold for X/MS Windows locales
and will unset the highlight flag for TTY locales.  See
`make-face-bold' for the semantics of the LOCALE argument and for more
specifics on exactly how this function works.Sfaces.elc
Fmake-face-unitalic
Make FACE non-italic in LOCALE, if possible.
This will attempt to make the font non-italic for X/MS Windows locales
and will unset the underline flag for TTY locales.  See
`make-face-bold' for the semantics of the LOCALE argument and for more
specifics on exactly how this function works.Sfaces.elc
Fmake-face-size
Adjust FACE to SIZE in LOCALE, if possible.Sfaces.elc
Fmake-face-smaller
Make the font of FACE be smaller, if possible.
LOCALE works as in `make-face-bold' et al., but the ``inheriting-
from-the-bold-face'' operations described there are not done
because they don't make sense in this context.Sfaces.elc
Fmake-face-larger
Make the font of FACE be larger, if possible.
See `make-face-smaller' for the semantics of the LOCALE argument.Sfaces.elc
Finvert-face
Swap the foreground and background colors of the face.Sfaces.elc
Fface-ascent
Return the ascent of FACE in DOMAIN.
See `face-property-instance' for the semantics of the DOMAIN argument.Sfaces.elc
Fface-descent
Return the descent of FACE in DOMAIN.
See `face-property-instance' for the semantics of the DOMAIN argument.Sfaces.elc
Fface-width
Return the width of FACE in DOMAIN.
See `face-property-instance' for the semantics of the DOMAIN argument.Sfaces.elc
Fface-height
Return the height of FACE in DOMAIN.
See `face-property-instance' for the semantics of the DOMAIN argument.Sfaces.elc
Fface-proportional-p
Return t if FACE is proportional in DOMAIN.
See `face-property-instance' for the semantics of the DOMAIN argument.Sfaces.elc
Vframe-background-mode
*The brightness of the background.
Set this to the symbol dark if your background color is dark, light if
your background is light, or nil (default) if you want Emacs to
examine the brightness for you.Sfaces.elc
Fget-frame-background-mode
Detect background mode for FRAME.Sfaces.elc
Fextract-custom-frame-properties
Return a plist with the frame properties of FRAME used by custom.Sfaces.elc
Vinit-face-from-resources
If non nil, attempt to initialize faces from the resource database.Sfaces.elc
Fface-spec-set
Set FACE's face attributes according to the first matching entry in SPEC.
If optional FRAME is non-nil, set it for that frame only.
If it is nil, then apply SPEC to each frame individually.
See `defface' for information about SPEC.Sfaces.elc
Fface-display-set
Set FACE to the attributes to the first matching entry in SPEC.
Iff optional FRAME is non-nil, set it for that frame only.
See `defface' for information about SPEC.Sfaces.elc
Vdefault-custom-frame-properties
The frame properties used for the global faces.
Frames not matching these properties should have frame local faces.
The value should be nil, if uninitialized, or a plist otherwise.
See `defface' for a list of valid keys and values for the plist.Sfaces.elc
Fget-custom-frame-properties
Return a plist with the frame properties of FRAME used by custom.
If FRAME is nil, return the default frame properties.Sfaces.elc
Fface-spec-update-all-matching
Update all entries in the face spec that could match display to
have the entries from the new plist and return the new spec.Sfaces.elc
Fface-spec-set-match-display
Return non-nil if DISPLAY matches FRAME.
DISPLAY is part of a spec such as can be used in `defface'.
If FRAME is nil or omitted, the selected frame is used.Sfaces.elc
Frelevant-custom-frames
List of frames whose custom properties differ from the default.Sfaces.elc
Finitialize-custom-faces
Initialize all custom faces for FRAME.
If FRAME is nil or omitted, initialize them for all frames.Sfaces.elc
Fcustom-initialize-frame
Initialize frame-local custom faces for FRAME if necessary.Sfaces.elc
Fstartup-initialize-custom-faces
Reset faces created by defface.  Only called at startup.
Don't use this function in your program.Sfaces.elc
Fmake-empty-face
Like `make-face', but doesn't query the resource database.Sfaces.elc
Finit-face-from-resources
Initialize FACE from the resource database.
If LOCALE is specified, it should be a frame, device, or `global', and
the face will be resourced over that locale.  Otherwise, the face will
be resourced over all possible locales (i.e. all frames, all devices,
and `global').Sfaces.elc
Finit-device-faces
Sfaces.elc
Finit-frame-faces
Sfaces.elc
Finit-global-faces
Sfaces.elc
Fface-complain-about-font
Sfaces.elc
Finit-other-random-faces
Initialize the colors and fonts of the bold, italic, bold-italic,
zmacs-region, list-mode-item-selected, highlight, primary-selection,
secondary-selection, and isearch faces when each device is created.  If
you want to add code to do stuff like this, use the create-device-hook.Sfaces.elc
Fset-face-stipple
Change the stipple pixmap of FACE to PIXMAP.
This is an Emacs compatibility function; consider using
set-face-background-pixmap instead.

PIXMAP should be a string, the name of a file of pixmap data.
The directories listed in the variables `x-bitmap-file-path' and
`mswindows-bitmap-file-path' under X and MS Windows respectively
are searched.

Alternatively, PIXMAP may be a list of the form (WIDTH HEIGHT
DATA) where WIDTH and HEIGHT are the size in pixels, and DATA is
a string, containing the raw bits of the bitmap.  XBM data is
expected in this case, other types of image data will not work.

If the optional FRAME argument is provided, change only
in that frame; otherwise change each frame.Sglyphs.elc
Fmake-image-specifier
Return a new `image' specifier object with the specification list SPEC-LIST.
SPEC-LIST can be a list of specifications (each of which is a cons of a
locale and a list of instantiators), a single instantiator, or a list
of instantiators.  See `make-specifier' for more information about
specifiers.

The main purpose of this doc string is to describe the possible formats for
image instantiators, as given as an argument to `make-glyph' or
`set-glyph-image'.

An image instantiator should be a string or a vector of the form

 [FORMAT :KEYWORD VALUE ...]

i.e. a format symbol followed by zero or more alternating keyword-value
pairs.  The vector form of an image instantiator explicitly specifies the
format of the image and other relevant properties.  The string form
specifies only a filename or gives inline data of an unspecified format,
and XEmacs must guess the actual format.  Once it has done this, it
internally converts the instantiator into the vector format.  This is
described in more detail below.

Following is a list of the possible values for FORMAT.  After each
description, the allowable keywords for the format are listed in brackets,
followed by the possible image instance types that can be generated from
this format. (Image instance types will be discussed below.)

`nothing'
   Don't display anything; no keywords are valid for this.
   [] (nothing)
`string'
   Display this image as a text string.  Support for instantiating as
   `mono-pixmap' and `color-pixmap' should probably be added.
   [:data] (text)
`formatted-string'
   Display this image as a text string, with replaceable fields.
   Not currently implemented -- it's treated like `string'.
   [:data] (text)
`gif'
   A GIF87 or GIF89 image; only if GIF support was compiled into this XEmacs.
   [:data, :file] (color-pixmap, pointer)
`jpeg'
   A JPEG image; only if JPEG support was compiled into this XEmacs.
   [:data, :file] (color-pixmap, pointer)
`png'
   A PNG image; only if PNG support was compiled into this XEmacs.
   [:data, :file] (color-pixmap, pointer)
`tiff'
   A TIFF image; only if TIFF support was compiled into this XEmacs.
   [:data, :file] (color-pixmap, pointer)
`bmp'
   A MS Windows BMP image; only if MS Windows support was compiled into
   this XEmacs.
   [:data, :file] (color-pixmap, pointer)
`xbm'
   An X bitmap; exists if any window-system support was compiled into this
   XEmacs.
   [:data, :file, :foreground, :background, :mask-data, :mask-file,
   :hotspot-x, :hotspot-y] (mono-pixmap, color-pixmap, pointer)
`xpm'
   An XPM pixmap; only if XPM support was compiled into this XEmacs.
   [:data, :file, :color-symbols] (mono-pixmap, color-pixmap, pointer)
`xface'
   An X-Face bitmap, used to encode people's faces in e-mail messages;
   only if X-Face support was compiled into this XEmacs.
   [:data, :file, :foreground, :background, :mask-data, :mask-file,
   :hotspot-x, :hotspot-y] (mono-pixmap, color-pixmap, pointer)
`cursor-font'
   X and GTK only.  One of the standard cursor-font names, such as "watch"
   or "right_ptr" under X.  Under X, this is, more specifically, any
   of the standard cursor names from appendix B of the Xlib manual
   [also known as the file <X11/cursorfont.h>] minus the XC_ prefix.
   On other window systems, the valid names will be specific to the
   type of window system.
   [:data, :foreground, :background] (pointer)
`mswindows-resource'
   An MS Windows pointer resource.  Specifies a resource to retrieve
   directly from the system (an OEM resource) or from a file, particularly
   an executable file.  If the resource is to be retrieved from a file, use
   :file and optionally :resource-id.  Otherwise use :resource-id.  Always
   specify :resource-type to specify the type (cursor, bitmap or icon) of
   the resource.  Possible values for :resource-id are listed below.
   [:file, :resource-type, :resource-id] (pointer, color-pixmap)
`font'
   A glyph from a font; i.e. the name of a font, and glyph index into it
   of the form "FONT fontname index [[mask-font] mask-index]".
   Currently can only be instantiated as `pointer', although this should
   probably be fixed.
   [:data, :foreground, :background] (pointer)
`subwindow'
   An embedded windowing system window.
   [:pixel-width, :pixel-height] (subwindow)
`button'
   A button widget; either a push button, radio button or toggle button.
   [WIDGET-KEYWORDS, GUI-KEYWORDS, :image] (widget)
`combo-box'
   A drop list of selectable items in a widget, for editing text.
   [GUI-KEYWORDS, :width, :height, :pixel-width, :face, :items] (widget)
`edit-field'
   A text editing widget.
   [WIDGET-KEYWORDS, GUI-KEYWORDS] (widget)
`label'
   A static, text-only, widget; for displaying text.
   [WIDGET-KEYWORDS, :descriptor] (widget)
`layout'
   A widget for controlling the positioning of children underneath it.
   Through the use of nested layouts, a widget hierarchy can be created
   which can have the appearance of any standard dialog box or similar
   arrangement; all of this is counted as one "glyph" and could appear
   in many of the places that expect a single glyph.
   [WIDGET-KEYWORDS, GUI-KEYWORDS, :orientation, :justify, :vertically-justify,
   :horizontally-justify, :border, :margin-width, :items] (widget)
`native-layout'
   The native version of a layout widget.  #### Document me better!
   [WIDGET-KEYWORDS, GUI-KEYWORDS] (widget)
`progress-gauge'
   A sliding widget, for showing progress.
   [WIDGET-KEYWORDS, GUI-KEYWORDS, :value] (widget)
`tab-control'
   A tab widget; a series of user selectable tabs.
   [WIDGET-KEYWORDS, GUI-KEYWORDS, :orientation, :items] (widget)
`tree-view'
   A folding widget.
   [WIDGET-KEYWORDS, GUI-KEYWORDS, :items] (widget)
`scrollbar'
   A scrollbar widget.
   [GUI-KEYWORDS, :pixel-width, :face, :items] (widget)
`autodetect'
   XEmacs tries to guess what format the data is in.  If X support
   exists, the data string will be checked to see if it names a filename.
   If so, and this filename contains XBM or XPM data, the appropriate
   sort of pixmap or pointer will be created. [This includes picking up
   any specified hotspot or associated mask file.] Otherwise, if `pointer'
   is one of the allowable image-instance types and the string names a
   valid cursor-font name, the image will be created as a pointer.
   Otherwise, the image will be displayed as text.  If no X support
   exists, the image will always be displayed as text.
   [:data] (mono-pixmap, color-pixmap, pointer, text)
`inherit'
   Inherit from the background-pixmap property of a face.
   [:face] (mono-pixmap)

The valid keywords are:

:data
   Inline data.  For most formats above, this should be a string.  For
   XBM images, this should be a list of three elements: width, height, and
   a string of bit data.  This keyword is valid for all of the bitmap/pixmap
   formats, as well as `string', `formatted-string', `font', `cursor-font',
   and `autodetect'.
:file
   Data is contained in a file.  The value is the name of this file.
   If both :data and :file are specified, the image is created from
   what is specified in :data and the string in :file becomes the
   value of the `image-instance-file-name' function when applied to
   the resulting image-instance.  This keyword is valid for all of the
   bitmap/pixmap formats as well as `mswindows-resource'.
:foreground
:background
   For `xbm', `xface', `cursor-font', `widget' and `font'.  These keywords
   allow you to explicitly specify foreground and background colors.
   The argument should be anything acceptable to `make-color-instance'.
   This will cause what would be a `mono-pixmap' to instead be colorized
   as a two-color color-pixmap, and specifies the foreground and/or
   background colors for a pointer instead of black and white.
:mask-data
   For `xbm' and `xface'.  This specifies a mask to be used with the
   bitmap.  The format is a list of width, height, and bits, like for
   :data.
:mask-file
   For `xbm' and `xface'.  This specifies a file containing the mask data.
   If neither a mask file nor inline mask data is given for an XBM image,
   and the XBM image comes from a file, XEmacs will look for a mask file
   with the same name as the image file but with "Mask" or "msk"
   appended.  For example, if you specify the XBM file "left_ptr"
   [usually located in "/usr/include/X11/bitmaps"], the associated
   mask file "left_ptrmsk" will automatically be picked up.
:hotspot-x
:hotspot-y
   For `xbm' and `xface'.  These keywords specify a hotspot if the image
   is instantiated as a `pointer'.  Note that if the XBM image file
   specifies a hotspot, it will automatically be picked up if no
   explicit hotspot is given.
:color-symbols
   Only for `xpm'.  This specifies an alist that maps strings
   that specify symbolic color names to the actual color to be used
   for that symbolic color (in the form of a string or a color-specifier
   object).  If this is not specified, the contents of `xpm-color-symbols'
   are used to generate the alist.
:resource-id
   Only for `mswindows-resource'.  This must be either an integer (which
   directly specifies a resource number) or a string.  Valid strings are

   -- For bitmaps:

   "close", "uparrow", "dnarrow", "rgarrow", "lfarrow",
   "reduce", "zoom", "restore", "reduced", "zoomd",
   "restored", "uparrowd", "dnarrowd", "rgarrowd", "lfarrowd",
   "mnarrow", "combo", "uparrowi", "dnarrowi", "rgarrowi",
   "lfarrowi", "size", "btsize", "check", "checkboxes", and
   "btncorners".

   -- For pointers:

   "normal", "ibeam", "wait", "cross", "up", "sizenwse",
   "sizenesw", "sizewe", "sizens", "sizeall", and "no".

   -- For icons:

   "sample", "hand", "ques", "bang", "note", and "winlogo".
:resource-type
   Only for `mswindows-resource'.  This must be a symbol, either `cursor'
   (i.e. pointer), `icon', or `bitmap', specifying the type of resource to
   be retrieved.
:face
   Only for `inherit'.  This specifies the face to inherit from.
   For widgets this also specifies the face to use for display. It defaults
   to gui-element-face.
:pixel-width, :pixel-height
   Width and height of element, in pixels.  For `subwindow', the values
   must be integers.  For widgets, the values can be integers or
   expressions that evaluate to integers.

[WIDGET-KEYWORDS] stands for the standard keywords accepted by widgets:
These are `:selected', `:active', `:suffix', `:keys', `:style',
`:filter', `:config', `:included', `:key-sequence', `:accelerator',
`:label', `:callback', `:initial-focus', `:descriptor', and `:visible'.
#### Document me.

[GUI-KEYWORDS] stands for keywords accepted by many widgets.
These are `:width', `:height', `:pixel-width', `:pixel-height', and `:face'.
#### Document me.

If instead of a vector, the instantiator is a string, it will be
converted into a vector by looking it up according to the specs in the
`console-type-image-conversion-list' (q.v.) for the console type of
the domain (usually a window; sometimes a frame or device) over which
the image is being instantiated.

If the instantiator specifies data from a file, the data will be read
in at the time that the instantiator is added to the image (which may
be well before when the image is actually displayed), and the
instantiator will be converted into one of the inline-data forms, with
the filename retained using a :file keyword.  This implies that the
file must exist when the instantiator is added to the image, but does
not need to exist at any other time (e.g. it may safely be a temporary
file).

NOTE: In practice, you rarely, if ever, need to actually
create an image specifier! (The function `make-image-specifier' exists
mainly for completeness.) Pretty much the only use for image specifiers is
to control how glyphs are displayed, and the image specifier associated
with a glyph (the `image' property of a glyph) is created automatically
when a glyph is created (see `make-glyph') and need not (and cannot, for
that matter) ever be changed.  In fact, the design decision to create a
separate image specifier type, rather than make glyphs themselves be
specifiers, is debatable -- the other properties of glyphs are rarely used
and could conceivably have been incorporated into the glyph's instantiator.
The rarely used glyph types (buffer, pointer, icon) could also have been
incorporated into the instantiator.

An image specifier is used for images (pixmaps, widgets and the like).  It
is used to describe the actual image in a glyph.  It is instantiated (see
`specifier-instance') as an image-instance.  Note that "image" as used in
XEmacs does not actually refer to what the term "image" normally means (a
picture, e.g. in .GIF or .JPG format, and called a "pixmap" in XEmacs),
but includes all types of graphical elements, including pixmaps, widgets
(buttons, sliders, text fields, etc.) and even strings of text.

There is an important distinction to be made between image instantiators
and image instances, and "image instantiator formats" and "image
instance types", analogous to the distinction between source and
destination.  An image instantiator describes the source data for an image.
An image instance encapsulates the resulting window-system object used to
display the image.  Image instantiator formats are the formats of the
source: This includes familiar and less-familiar graphics formats such as
`gif', `jpeg', `png' and `xpm'; widget types such as `button', `edit-field'
and `combo-box'; and other beasts such as `string' (plain text, which could
potentially behave like text when placed in a buffer, such as wrapping),
`font' (a single character from a particular font, specified by the index
into the font), etc.  Image instance types are the (destination) types of
the resulting image instance.  Different image instance types correspond to
fundamentally different appearance and behaviors for the resulting image,
specifically:

-- `color-pixmap' (a color image);
-- `mono-pixmap' (a "monochrome" image, technically a two-color image
   that comes in two unspecified shades "foreground" and "background",
   determined from the face [see `make-face'] of the glyph or surrounding
   text);
-- `text' (a string of text appearing somewhere in a buffer's text or
   margins, which has an unspecified foreground, background, and font
   derived from the surrounding text or other external property and which
   behaves in many respects like an image but can wrap across the end of a
   line to the beginning of the next);
-- `pointer' (the mouse pointer for a window; this is a combination of a
   rectangular pixmap image, a monochrome mask that specifies the
   transparency of the image [i.e. in which places the underlying screen
   image can show through, and how much of it], and a "hotspot" that
   indicates which pixel in the pointer's image is considered the actual
   pointer location -- for example, this will be located near the tip of
   an arrow, in the middle of a crosshairs, somewhere along an i-beam, etc.);
-- `widget' (a window-system object or "widget" that interacts with the
   user, such as a button, edit-field or combo-box);
-- `subwindow' (a rectangular area that another program can draw into);
-- `nothing' (no display).

There is not a one-to-one mapping between source (image instantiator)
formats and destination (image instance) types.  For example, the source
format `xpm' can generate the image instance types `color-pixmap',
`mono-pixmap', or `pointer', and the image instance type `color-pixmap' can
be generated by any of `gif', `jpeg', `png', `tiff', `xpm', `xbm' and
`xface'.

In general, the user or programmer specifies the image instantiator format,
while the appropriate image instance type is determined automatically by
XEmacs from the image instantiator format, from the data in the
instantiator and from the particular situation the image (and the glyph
that holds it) is being used in. (However, it's possible to explicitly
create image instances and control their types; see `make-image-instance'.)
For example, a glyph used to specify the shape of a mouse pointer can only
result in `pointer'-type image instances, and a glyph used for an icon can
only result in `color-pixmap' image instances.  A glyph used in a buffer
can potentially result in any image instance type except for `pointer', but
particular instantiator formats have only a limited set of image instance
types they will support.  Here is an example of how the image instance type
for an `xpm' instantiator (which can potentially support `color-pixmap',
`mono-pixmap', or `pointer') is determined:

1. If the glyph is being used for a mouse pointer (hence its `glyph-type'
   is `pointer'), it can be instantiated only a `pointer'-type image instance.
2. If the glyph is being used for an icon (hence its `glyph-type' is `icon'),
   it can be instantiated only a `color-pixmap'-type image instance.
3. Otherwise, the glyph is being used somewhere inside a frame (`glyph-type'
   of `buffer') and any image instance type except `pointer' can be
   supported.  In this case, this means `color-pixmap' or `mono-pixmap'.
   Which one will result depends on the particular data being processed,
   since XPM images can specify whether they are color or mono.

Note again that "mono" does *NOT* simply mean "an image with two
colors".  The latter image has two prespecified colors, e.g. red and blue
or black and white, and will always appear with those colors, no matter
what the context.  A mono image has two *unspecified* colors, symbolically
named "foreground" and "background", and the actual values for those
colors depends on context.  A mono pixmap displayed among text will take
its foreground and background from that of the text and hence blend in
nicely; a two-color color pixmap won't do that.

Note also that `color-pixmap' image instances can be generated from the
supported pixmap formats that are inherently mono (i.e. `xbm' and `xface')
by specifying :foreground and :background values.

A table of the various image instantiator formats and the possible
destination (image instance) types that can be generated from them is as
follows:


                   color-pixmap mono-pixmap text pointer widget subwindow noth.
-------------------------------------------------------------------------------
nothing                                                                     +
string                                        +
formatted-string                              +
xbm                     +            +              +
xpm                     +            +              +
xface                   +            +              +
gif                     +                           +
jpeg                    +                           +
png                     +                           +
tiff                    +                           +
bmp                     +                           +
cursor-font                                         +
mswindows-resource      +                           +
font                                                +
subwindow                                                           +
button                                                     +
combo-box                                                  +
edit-field                                                 +
label                                                      +
layout                                                     +
native-layout                                              +
progress-gauge                                             +
tab-control                                                +
tree-view                                                  +
scrollbar                                                  +
autodetect              +            +        +     +
inherit                              +

See `make-image-instance' for a more detailed discussion of image
instance types.Sglyphs.elc
Vbuilt-in-glyph-specifiers
A list of the built-in glyph properties that are specifiers.Sglyphs.elc
Fglyph-property
Return GLYPH's value of PROPERTY in LOCALE.

If LOCALE is omitted, the GLYPH's actual value for PROPERTY will be
  returned.  For built-in properties, this will be a specifier object
  of a type appropriate to the property (e.g. a font or color
  specifier).  For other properties, this could be anything.

If LOCALE is supplied, then instead of returning the actual value,
  the specification(s) for the given locale or locale type will
  be returned.  This will only work if the actual value of
  PROPERTY is a specifier (this will always be the case for built-in
  properties, but not or not may apply to user-defined properties).
  If the actual value of PROPERTY is not a specifier, this value
  will simply be returned regardless of LOCALE.

The return value will be a list of instantiators (e.g. strings
  specifying a font or color name), or a list of specifications, each
  of which is a cons of a locale and a list of instantiators.
  Specifically, if LOCALE is a particular locale (a buffer, window,
  frame, device, or `global'), a list of instantiators for that locale
  will be returned.  Otherwise, if LOCALE is a locale type (one of
  the symbols `buffer', `window', `frame', `device', `device-class', or
  `device-type'), the specifications for all locales of that type will
  be returned.  Finally, if LOCALE is `all', the specifications for all
  locales of all types will be returned.

The specifications in a specifier determine what the value of
  PROPERTY will be in a particular "domain" or set of circumstances,
  which is typically a particular Emacs window along with the buffer
  it contains and the frame and device it lies within.  The value
  is derived from the instantiator associated with the most specific
  locale (in the order buffer, window, frame, device, and `global')
  that matches the domain in question.  In other words, given a domain
  (i.e. an Emacs window, usually), the specifier for PROPERTY will first
  be searched for a specification whose locale is the buffer contained
  within that window; then for a specification whose locale is the window
  itself; then for a specification whose locale is the frame that the
  window is contained within; etc.  The first instantiator that is
  valid for the domain (usually this means that the instantiator is
  recognized by the device [i.e. the X server or TTY device] that the
  domain is on.  The function `glyph-property-instance' actually does
  all this, and is used to determine how to display the glyph.

See `set-glyph-property' for the built-in property-names.Sglyphs.elc
Fconvert-glyph-property-into-specifier
Convert PROPERTY on GLYPH into a specifier, if it's not already.Sglyphs.elc
Fglyph-property-instance
Return the instance of GLYPH's PROPERTY in the specified DOMAIN.

Under most circumstances, DOMAIN will be a particular window,
  and the returned instance describes how the specified property
  actually is displayed for that window and the particular buffer
  in it.  Note that this may not be the same as how the property
  appears when the buffer is displayed in a different window or
  frame, or how the property appears in the same window if you
  switch to another buffer in that window; and in those cases,
  the returned instance would be different.

DOMAIN defaults to the selected window if omitted.

DOMAIN can be a frame or device, instead of a window.  The value
  returned for a such a domain is used in special circumstances
  when a more specific domain does not apply; for example, a frame
  value might be used for coloring a toolbar, which is conceptually
  attached to a frame rather than a particular window.  The value
  is also useful in determining what the value would be for a
  particular window within the frame or device, if it is not
  overridden by a more specific specification.

If PROPERTY does not name a built-in property, its value will
  simply be returned unless it is a specifier object, in which case
  it will be instanced using `specifier-instance'.

Optional arguments DEFAULT and NO-FALLBACK are the same as in
  `specifier-instance'.Sglyphs.elc
Fset-glyph-property
Change a property of a GLYPH.

NOTE: If you want to remove a property from a glyph, use
  `remove-glyph-property' rather than attempting to set a value of nil
   for the property.

For built-in properties, the actual value of the property is a
  specifier and you cannot change this; but you can change the
  specifications within the specifier, and that is what this function
  will do.  For user-defined properties, you can use this function
  to either change the actual value of the property or, if this value
  is a specifier, change the specifications within it.

If PROPERTY is a built-in property, the specifications to be added to
  this property can be supplied in many different ways:

  -- If VALUE is a simple instantiator (e.g. a string naming a font or
     color) or a list of instantiators, then the instantiator(s) will
     be added as a specification of the property for the given LOCALE
     (which defaults to `global' if omitted).
  -- If VALUE is a list of specifications (each of which is a cons of
     a locale and a list of instantiators), then LOCALE must be nil
     (it does not make sense to explicitly specify a locale in this
     case), and specifications will be added as given.
  -- If VALUE is a specifier (as would be returned by `glyph-property'
     if no LOCALE argument is given), then some or all of the
     specifications in the specifier will be added to the property.
     In this case, the function is really equivalent to
     `copy-specifier' and LOCALE has the same semantics (if it is
     a particular locale, the specification for the locale will be
     copied; if a locale type, specifications for all locales of
     that type will be copied; if nil or `all', then all
     specifications will be copied).

HOW-TO-ADD should be either nil or one of the symbols `prepend',
  `append', `remove-tag-set-prepend', `remove-tag-set-append', `remove-locale',
  `remove-locale-type', or `remove-all'.  See `copy-specifier' and
  `add-spec-to-specifier' for a description of what each of
  these means.  Most of the time, you do not need to worry about
  this argument; the default behavior usually is fine.

In general, it is OK to pass an instance object (e.g. as returned
  by `glyph-property-instance') as an instantiator in place of
  an actual instantiator.  In such a case, the instantiator used
  to create that instance object will be used (for example, if
  you set a font-instance object as the value of the `font'
  property, then the font name used to create that object will
  be used instead).  If some cases, however, doing this
  conversion does not make sense, and this will be noted in
  the documentation for particular types of instance objects.

If PROPERTY is not a built-in property, then this function will
  simply set its value if LOCALE is nil.  However, if LOCALE is
  given, then this function will attempt to add VALUE as the
  instantiator for the given LOCALE, using `add-spec-to-specifier'.
  If the value of the property is not a specifier, it will
  automatically be converted into a `generic' specifier.


The following symbols have predefined meanings:

 image		The image used to display the glyph.

 baseline	Percent above baseline that glyph is to be
		displayed.

 contrib-p	Whether the glyph contributes to the
		height of the line it's on.

 face		Face of this glyph (*not* a specifier).Sglyphs.elc
Fremove-glyph-property
Remove a property from a glyph.
For built-in properties, this is analogous to `remove-specifier'.
See `remove-specifier' for the meaning of the LOCALE, TAG-SET, and EXACT-P
  arguments.Sglyphs.elc
Fglyph-face
Return the face of GLYPH.Sglyphs.elc
Fset-glyph-face
Change the face of GLYPH to FACE.Sglyphs.elc
Fglyph-image
Return the image of GLYPH in LOCALE, or nil if it is unspecified.

LOCALE may be a locale (the instantiators for that particular locale
  will be returned), a locale type (the specifications for all locales
  of that type will be returned), `all' (all specifications will be
  returned), or nil (the actual specifier object will be returned).

See `glyph-property' for more information.Sglyphs.elc
Fglyph-image-instance
Return the instance of GLYPH's image in DOMAIN.

Normally DOMAIN will be a window or nil (meaning the selected window),
  and an instance object describing how the image appears in that
  particular window and buffer will be returned.

See `glyph-property-instance' for more information.Sglyphs.elc
Fglyph-image-property
Return property PROP of the instance of GLYPH's image in DOMAIN.

Normally DOMAIN will be a window or nil (meaning the selected window).
The value returned is dependent on the image instance type.Sglyphs.elc
Fset-glyph-image
Change the image of GLYPH in LOCALE.

SPEC should be an instantiator (a string or vector; see
  `make-image-specifier' for a description of possible values here),
  a list of (possibly tagged) instantiators, an alist of specifications
  (each mapping a locale to an instantiator list), or an image specifier
  object.

If SPEC is an alist, LOCALE must be omitted.  If SPEC is a
  specifier object, LOCALE can be a locale, a locale type, `all',
  or nil; see `copy-specifier' for its semantics.  Otherwise LOCALE
  specifies the locale under which the specified instantiator(s)
  will be added, and defaults to `global'.

See `set-glyph-property' for more information.Sglyphs.elc
Fglyph-contrib-p
Return whether GLYPH contributes to its line height.

LOCALE may be a locale (the instantiators for that particular locale
  will be returned), a locale type (the specifications for all locales
  of that type will be returned), `all' (all specifications will be
  returned), or nil (the actual specifier object will be returned).

See `glyph-property' for more information.Sglyphs.elc
Fglyph-contrib-p-instance
Return the instance of GLYPH's `contrib-p' property in DOMAIN.

Normally DOMAIN will be a window or nil (meaning the selected window),
  and an instance object describing what the `contrib-p' property is in
  that particular window and buffer will be returned.

See `glyph-property-instance' for more information.Sglyphs.elc
Fset-glyph-contrib-p
Change the contrib-p property of GLYPH in LOCALE.

SPEC should be an instantiator (t or nil), a list of (possibly
  tagged) instantiators, an alist of specifications (each mapping a
  locale to an instantiator list), or a boolean specifier object.

If SPEC is an alist, LOCALE must be omitted.  If SPEC is a
  specifier object, LOCALE can be a locale, a locale type, `all',
  or nil; see `copy-specifier' for its semantics.  Otherwise LOCALE
  specifies the locale under which the specified instantiator(s)
  will be added, and defaults to `global'.

See `set-glyph-property' for more information.Sglyphs.elc
Fglyph-baseline
Return the baseline of GLYPH in LOCALE, or nil if it is unspecified.

LOCALE may be a locale (the instantiators for that particular locale
  will be returned), a locale type (the specifications for all locales
  of that type will be returned), `all' (all specifications will be
  returned), or nil (the actual specifier object will be returned).

See `glyph-property' for more information.Sglyphs.elc
Fglyph-baseline-instance
Return the instance of GLYPH's baseline in DOMAIN.

Normally DOMAIN will be a window or nil (meaning the selected window),
  and an integer or nil (specifying the baseline in that particular
  window and buffer) will be returned.

See `glyph-property-instance' for more information.Sglyphs.elc
Fset-glyph-baseline
Change the baseline of GLYPH to SPEC in LOCALE.

SPEC should be an instantiator (an integer [a percentage above the
  baseline of the line the glyph is on] or nil), a list of (possibly
  tagged) instantiators, an alist of specifications (each mapping a
  locale to an instantiator list), or a generic specifier object.

If SPEC is an alist, LOCALE must be omitted.  If SPEC is a
  specifier object, LOCALE can be a locale, a locale type, `all',
  or nil; see `copy-specifier' for its semantics.  Otherwise LOCALE
  specifies the locale under which the specified instantiator(s)
  will be added, and defaults to `global'.

See `set-glyph-property' for more information.Sglyphs.elc
Fmake-glyph
Create a new glyph of type TYPE.

A glyph in XEmacs does NOT refer to a single unit of textual display (the
XEmacs term for this is "rune"), but rather is an object encapsulating
a graphical element, such as an image or widget (an element such as a
button or text field; "widget" is the term for this under X Windows,
and it's called a "control" under MS Windows).  This graphical element
could appear in a buffer, a margin, a gutter, or a toolbar, or as a mouse
pointer or an icon, for example.

Creating a glyph using `make-glyph' does not specify *where* the glyph
will be used, but it does specify *what* the glyph will look like.  In
particular, SPEC-LIST is used to specify this, and it's used to
initialize the glyph's `image' property, which is an image
specifier. (Note that "image" as used in the context of a glyph's
`image' property or in the terms "image specifier", "image
instantiator", or "image instance" does not refer to what people
normally think of as an image (which in XEmacs is called a
"pixmap"), but to any graphical element -- a pixmap, a widget, or
even a block of text, when used in the places that call for a glyph.)

SPEC-LIST is typically an image instantiator, describing the source for the
image data.  This is either a vector of the form [FORMAT :KEYWORD DATA ...],
for example

  [jpeg :file "/user/john/images/myimage.jpg"]

or

  [xbm :data "/* XPM */
static char * copy[] = {
..."]

or it is a string, either giving a file name or directly specifying inline
data.  See `make-image-specifier' for a detailed description of valid image
instantiators.  If the instantiator is a string, XEmacs will convert it
into vector form by trying to guess whether a file name or inline data is
intended, and what kind of data is inline or in the file.  Usually it does
a pretty good job.  See `console-type-image-conversion-list' for details of
how this works.

If the instantiator specifies data from a file, the data will be read in
when `make-glyph' is called and substituted inline into the instantiator,
using the :data keyword.  This means that the file must exist when the
glyph is created, but does not need to exist afterwards (e.g. it may safely
be a temporary file).

When errors occur in the process of reading image data from a file
(e.g. the file does not exist or the data is of the wrong format or
corrupted), no Lisp error will currently be signalled.  Instead, the
instantiator is skipped and warnings will be issued at level `debug'. (A
glyph with no instantiators in it cannot be displayed.) Normally, such
warnings are ignored entirely, but you can change this by setting
`log-warning-minimum-level'.  This is useful if you're trying to debug why
particular instantiators are not being processed. (#### We should probably
provide a way of getting errors in such circumstances, or even make this
the default behavior.)

Technically, SPEC-LIST can also be a list of image instantiators (each one
in turn is tried until an image is successfully produced), a cons of a
locale (frame, buffer, etc.) and an instantiator, a list of such conses,
or any other form accepted by `canonicalize-spec-list'.

If you're not familiar with specifiers, you should be in order to
understand how glyphs work.  The clearest introduction to specifiers
is in the Lispref manual, available under Info. (Choose
Help->Info->Info Contents on the menubar or type \[info].) You can
also see `make-specifier' for a capsule summary.  What's important to
keep in mind is that a specifier lets you set a different value for
any particular buffer, window, frame, device, or console.  This allows
for a great deal of flexibility; in particular, only one global glyph
needs to exist for a particular purpose (e.g. the icon used to represent
an iconified frame, the mouse pointer used over particular areas of a
frame, etc.), and in these cases you do not create your own glyph, but
rather modify the existing one.

As well as using SPEC-LIST to initialize the glyph, you can set
specifications using `set-glyph-image'.  Note that, due to a possibly
questionable historical design decision, a glyph itself is not
actually a specifier, but rather is an object containing an image
specifier (as well as other, seldom-used properties).  Therefore, you
cannot set or access specifications for the glyph's image by directly
using `set-specifier', `specifier-instance' or the like on the glyph;
instead use them on `(glyph-image GLYPH)' or use the convenience
functions `set-glyph-image', `glyph-image-instance', and
`glyph-image'.

Once you have created a glyph, you specify where it will be used as follows:

-- To insert a glyph into a buffer, create an extent in the buffer and then
   use `set-extent-begin-glyph' or `set-extent-end-glyph' to set a glyph
   to be displayed at the corresponding edge of the extent. (It is common
   to create zero-width extents for this purpose.)

-- To insert a glyph into the left or right margin of a buffer, first
   make sure the margin is visible by setting a value for the specifiers
   `left-margin-width' or `right-margin-width'. (Not strictly necessary
   when using margin glyphs with layout policy `whitespace'.) Then follow
   the same procedure above for inserting a glyph in a buffer, and then
   set a non-default layout policy for the glyph using
   `set-extent-begin-glyph-layout' or `set-extent-end-glyph-layout'.
   Alternatively, use the high-level annotations API (see
   `make-annotation'). (In point of fact, you can also use the annotations
   API for glyphs in a buffer, by setting a layout policy of `text'.)

-- To insert a glyph into the modeline, just put the glyph directly as
   one of the modeline elements. (Unfortunately you can't currently
   put a begin glyph or end glyph on one of the modeline extents --
   they're ignored.)

-- To insert a glyph into a toolbar, specify it as part of a toolbar
   instantiator (typically set on the specifier `default-toolbar').
   See `default-toolbar' for more information. (Note that it is standard
   practice to use a symbol in place of the glyph list in the toolbar
   instantiator; the symbol is evalled to get the glyph list.  This
   facilitates both creating the toolbar instantiator and modifying
   individual glyphs in a toolbar later on.  For example, you can
   change the way that the Mail toolbar button looks by modifying the
   value of the variable `toolbar-mail-icon' (in general, `toolbar-*-icon')
   and then calling `(set-specifier-dirty-flag default-toolbar)'.
   (#### Unfortunately this doesn't quite work the way it should; the
   change will appear in new frames, but not existing ones.)

-- To insert a glyph into a gutter, create or modify a gutter instantiator
   (typically set on the specifier `default-gutter').  Gutter instantiators
   consist of strings or lists of strings, so to insert a glyph, create an
   extent over the string, and use `set-extent-begin-glyph' or
   `set-extent-end-glyph' to set a glyph to be displayed at the corresponding
   edge of the extent, just like for glyphs in a buffer.

-- To use a glyph as the icon for a frame, you do not actually create a new
   glyph; rather, you change the specifications for the existing glyph
   `frame-icon-glyph'. (Remember that, because of the specifier nature of
   glyphs, you can set different values for any particular buffer or frame.)

-- To use a glyph as the mouse pointer, in general you do not create a
   new glyph, but rather you change the specifications of various existing
   glyphs, such as `text-pointer-glyph' for the pointer used over text,
   `modeline-pointer-glyph' for the pointer used over the modeline, etc.
   Do an apropos over `*-pointer-glyph' to find all of them. (Note also
   that you can temporarily set the mouse pointer to some specific shape
   by using `set-frame-pointer', which takes an image instance, as obtained
   from calling `glyph-image-instance' on a glyph of type `pointer' --
   either one of the above-mentioned variables or one you created yourself.
   (See below for what it means to create a glyph of type `pointer'.)
   This pointer will last only until the next mouse motion event is
   processed or certain other things happen, such as creating or deleting
   a window. (In fact, the above-mentioned pointer glyph variables are
   implemented as part of the default handler for mouse motion events.
   If you want to customize this behavior, take a look at `mode-motion-hook',
   or `mouse-motion-handler' if you really want to get low-level.)

-- To use a glyph to control the shape of miscellaneous redisplay effects
   such as the truncation and continuation markers, set the appropriate
   existing glyph variables, as for icons and pointers above.  See
   `continuation-glyph', `control-arrow-glyph', `hscroll-glyph',
   `invisible-text-glyph', `octal-escape-glyph', and `truncation-glyph'.
   See also `overlay-arrow-string', an odd redisplay leftover which can
   be set to a glyph you created, and will cause the glyph to be displayed
   on top of the text position specified in the marker stored in
   `overlay-arrow-position'.

-- To use a glyph in a display table (i.e. to control the appearance of
   any individual character), create the appropriate character glyphs
   and then set a specification for the specifier `current-display-table',
   which controls the appearance of characters.  You can also set an
   overriding display table for use with text displayed in a particular
   face; see `set-face-display-table' and `make-display-table'.

-- To use a glyph as the background pixmap of a face: Note that the
   background pixmap of a face is actually an image specifier -- probably
   the only place in XEmacs where an image specifier occurs outside of
   a glyph.  Similarly to how the glyph's image specifier works, you
   don't create your own image specifier, but rather add specifications
   to the existing one (using `set-face-background-pixmap').  Note that
   the image instance that is generated in order to actually display the
   background pixmap is of type `mono-pixmap', meaning that it's a two-color
   image and the foreground and background of the image get filled in with
   the corresponding colors from the face.

It is extremely rare that you will ever have to specify a value for TYPE,
which should be one of `buffer' (used for glyphs in an extent, the modeline,
the toolbar, or elsewhere in a buffer), `pointer' (used for the mouse-pointer),
or `icon' (used for a frame's icon), and defaults to `buffer'.  The only cases
where it needs to be specified is when creating icon or pointer glyphs, and
in both cases the necessary glyphs have already been created at startup and
are accessed through the appropriate variables, e.g. `text-pointer-glyph'
(or in general, `*-pointer-glyph') and `frame-icon-glyph'.Sglyphs.elc
Fbuffer-glyph-p
Return t if OBJECT is a glyph of type `buffer'.Sglyphs.elc
Fpointer-glyph-p
Return t if OBJECT is a glyph of type `pointer'.Sglyphs.elc
Ficon-glyph-p
Return t if OBJECT is a glyph of type `icon'.Sglyphs.elc
Fmake-pointer-glyph
Return a new `pointer-glyph' object with the specification list SPEC-LIST.
This is equivalent to calling `make-glyph', specifying a type of `pointer'.
See `make-glyph' for more information.

It is extremely unlikely that you will ever need to create a pointer glyph.
Instead, you probably want to be calling `set-glyph-image' on an existing
glyph, e.g. `text-pointer-glyph'.Sglyphs.elc
Fmake-icon-glyph
Return a new `icon-glyph' object with the specification list SPEC-LIST.
This is equivalent to calling `make-glyph', specifying a type of `icon'.
See `make-glyph' for more information.

It is extremely unlikely that you will ever need to create a icon glyph.
Instead, you probably want to be calling `set-glyph-image' on
`frame-icon-glyph'.Sglyphs.elc
Fnothing-image-instance-p
Return t if OBJECT is an image instance of type `nothing'.Sglyphs.elc
Ftext-image-instance-p
Return t if OBJECT is an image instance of type `text'.Sglyphs.elc
Fmono-pixmap-image-instance-p
Return t if OBJECT is an image instance of type `mono-pixmap'.Sglyphs.elc
Fcolor-pixmap-image-instance-p
Return t if OBJECT is an image instance of type `color-pixmap'.Sglyphs.elc
Fpointer-image-instance-p
Return t if OBJECT is an image instance of type `pointer'.Sglyphs.elc
Fwidget-image-instance-p
Return t if OBJECT is an image instance of type `widget'.Sglyphs.elc
Fsubwindow-image-instance-p
Return t if OBJECT is an image instance of type `subwindow'.Sglyphs.elc
Vtext-pointer-glyph
*The shape of the mouse-pointer when over text.
This is a glyph; use `set-glyph-image' to change it.Sglyphs.elc
Vnontext-pointer-glyph
*The shape of the mouse-pointer when over a buffer, but not over text.
This is a glyph; use `set-glyph-image' to change it.
If unspecified in a particular domain, `text-pointer-glyph' is used.Sglyphs.elc
Vmodeline-pointer-glyph
*The shape of the mouse-pointer when over the modeline.
This is a glyph; use `set-glyph-image' to change it.
If unspecified in a particular domain, `nontext-pointer-glyph' is used.Sglyphs.elc
Vselection-pointer-glyph
*The shape of the mouse-pointer when over a selectable text region.
This is a glyph; use `set-glyph-image' to change it.
If unspecified in a particular domain, `text-pointer-glyph' is used.Sglyphs.elc
Vbusy-pointer-glyph
*The shape of the mouse-pointer when XEmacs is busy.
This is a glyph; use `set-glyph-image' to change it.
If unspecified in a particular domain, the pointer is not changed
when XEmacs is busy.Sglyphs.elc
Vtoolbar-pointer-glyph
*The shape of the mouse-pointer when over a toolbar.
This is a glyph; use `set-glyph-image' to change it.
If unspecified in a particular domain, `nontext-pointer-glyph' is used.Sglyphs.elc
Vdivider-pointer-glyph
*The shape of the mouse-pointer when over a window divider.
This is a glyph; use `set-glyph-image' to change it.
If unspecified in a particular domain, `nontext-pointer-glyph' is used.Sfontcolor.elc
Ffontcolor-property-1
Sfontcolor.elc
Fmake-font-specifier
Return a new `font' specifier object with the given specification list.
SPEC-LIST can be a list of specifications (each of which is a cons of a
locale and a list of instantiators), a single instantiator, or a list
of instantiators.  See `make-specifier' for more information about
specifiers.

Valid instantiators for font specifiers are:

-- a string naming a font; syntax is platform dependent.  Some examples for
   a 14-point upright medium-weight Courier font:
   X11 (and GTK1): "-*-courier-medium-r-*-*-*-140-*-*-*-*-iso8859-*"
   Xft (and GTK2): "Courier-14"
   MS-Windows:     "Courier:14:Western"
-- a font instance (use that instance directly if the device matches,
   or use the string that generated it)
-- a vector of no elements (only on TTY's; this means to set no font
   at all, thus using the "natural" font of the terminal's text)
-- a vector of one element (a face to inherit from)
Sfontcolor.elc
Ffont-name
Return the name of the FONT in the specified DOMAIN, if any.
FONT should be a font specifier object and DOMAIN is normally a window
and defaults to the selected window if omitted.  This is equivalent
to using `specifier-instance' and applying `font-instance-name' to
the result.  See `make-specifier' for more information about specifiers.Sfontcolor.elc
Ffont-ascent
Return the ascent of the FONT in the specified DOMAIN, if any.
FONT should be a font specifier object and DOMAIN is normally a window
and defaults to the selected window if omitted.  This is equivalent
to using `specifier-instance' and applying `font-instance-ascent' to
the result.  See `make-specifier' for more information about specifiers.Sfontcolor.elc
Ffont-descent
Return the descent of the FONT in the specified DOMAIN, if any.
FONT should be a font specifier object and DOMAIN is normally a window
and defaults to the selected window if omitted.  This is equivalent
to using `specifier-instance' and applying `font-instance-descent' to
the result.  See `make-specifier' for more information about specifiers.Sfontcolor.elc
Ffont-width
Return the width of the FONT in the specified DOMAIN, if any.
FONT should be a font specifier object and DOMAIN is normally a window
and defaults to the selected window if omitted.  This is equivalent
to using `specifier-instance' and applying `font-instance-width' to
the result.  See `make-specifier' for more information about specifiers.Sfontcolor.elc
Ffont-height
Return the height of the FONT in the specified DOMAIN, if any.
FONT should be a font specifier object and DOMAIN is normally a window
and defaults to the selected window if omitted.  This is equivalent
to using `specifier-instance' and applying `font-instance-height' to
the result.  See `make-specifier' for more information about specifiers.Sfontcolor.elc
Ffont-proportional-p
Return whether FONT is proportional in the specified DOMAIN, if known.
FONT should be a font specifier object and DOMAIN is normally a window
and defaults to the selected window if omitted.  This is equivalent
to using `specifier-instance' and applying `font-instance-proportional-p' to
the result.  See `make-specifier' for more information about specifiers.Sfontcolor.elc
Ffont-properties
Return the properties of the FONT in the specified DOMAIN, if any.
FONT should be a font specifier object and DOMAIN is normally a window
and defaults to the selected window if omitted.  This is equivalent
to using `specifier-instance' and applying `font-instance-properties'
to the result.  See `make-specifier' for more information about specifiers.Sfontcolor.elc
Ffont-truename
Return the truename of the FONT in the specified DOMAIN, if any.
FONT should be a font specifier object and DOMAIN is normally a window
and defaults to the selected window if omitted.  This is equivalent
to using `specifier-instance' and applying `font-instance-truename'
to the result.  See `make-specifier' for more information about specifiers.Sfontcolor.elc
Ffont-instance-height
Return the height in pixels of FONT-INSTANCE.
The returned value is the maximum height for all characters in the font,
and is equivalent to the sum of the font instance's ascent and descent.Sfontcolor.elc
Fmake-color-specifier
Return a new `color' specifier object with the given specification list.
SPEC-LIST can be a list of specifications (each of which is a cons of a
locale and a list of instantiators), a single instantiator, or a list
of instantiators.  See `make-specifier' for a detailed description of
how specifiers work.

Valid instantiators for color specifiers are:

-- a string naming a color (e.g. under X this might be "lightseagreen2"
   or "#F534B2")
-- a color instance (use that instance directly if the device matches,
   or use the string that generated it)
-- a vector of no elements (only on TTY's; this means to set no color
   at all, thus using the "natural" color of the terminal's text)
-- a vector of one or two elements: a face to inherit from, and
   optionally a symbol naming which property of that face to inherit,
   either `foreground' or `background' (if omitted, defaults to the same
   property that this color specifier is used for; if this specifier is
   not part of a face, the instantiator would not be valid).Sfontcolor.elc
Fcolor-name
Return the name of the COLOR in the specified DOMAIN, if any.
COLOR should be a color specifier object and DOMAIN is normally a window
and defaults to the selected window if omitted.  This is equivalent
to using `specifier-instance' and applying `color-instance-name' to
the result.  See `make-specifier' for more information about specifiers.Sfontcolor.elc
Fcolor-rgb-components
Return the RGB components of the COLOR in the specified DOMAIN, if any.
COLOR should be a color specifier object and DOMAIN is normally a window
and defaults to the selected window if omitted.  This is equivalent
to using `specifier-instance' and applying `color-instance-rgb-components'
to the result.  See `make-specifier' for more information about specifiers.Sfontcolor.elc
Fmake-face-boolean-specifier
Return a new `face-boolean' specifier object with the given spec list.
SPEC-LIST can be a list of specifications (each of which is a cons of a
locale and a list of instantiators), a single instantiator, or a list
of instantiators.  See `make-specifier' for a detailed description of
how specifiers work.

Valid instantiators for face-boolean specifiers are

-- t or nil
-- a vector of one, two or three elements: a face to inherit from,
   optionally a symbol naming the property of that face to inherit from
   (if omitted, defaults to the same property that this face-boolean
   specifier is used for; if this specifier is not part of a face,
   the instantiator would not be valid), and optionally a value which,
   if non-nil, means to invert the sense of the inherited property.Sfontcolor.elc
Fmake-face-background-placement-specifier
Return a new `face-background-placement' specifier object.
SPEC-LIST can be a list of specifications (each of which is a cons of a
locale and a list of instantiators), a single instantiator, or a list
of instantiators.  See `make-specifier' for a detailed description of
how specifiers work.

Valid instantiators for face-background-placement specifiers are:
-- absolute or relative (symbols),
-- a vector of one element: a face to inherit from.Sextents.elc
Fmapcar-extents
Apply FUNCTION to all extents which overlap a region in BUFFER-OR-STRING.
The region is delimited by FROM and TO.  FUNCTION is called with
one argument, the extent.  A list of the values returned by FUNCTION
is returned.  An optional PREDICATE may be used to further limit the
extents over which FUNCTION is mapped.  The optional arguments FLAGS,
PROPERTY, and VALUE may also be used to control the extents passed to
PREDICATE or FUNCTION.  See also `map-extents'.Sextents.elc
Fextent-list
Return a list of the extents in BUFFER-OR-STRING.
BUFFER-OR-STRING defaults to the current buffer if omitted.
FROM and TO can be used to limit the range over which extents are
returned; if omitted, all extents in the buffer or string are returned.

More specifically, if a range is specified using FROM and TO, only
extents that overlap the range (i.e. begin or end inside of the range)
are included in the list.  FROM and TO default to the beginning and
end of BUFFER-OR-STRING, respectively.

FLAGS controls how end cases are treated.  For a discussion of this,
and exactly what ``overlap'' means, see `map-extents'.  PROPERTY and VALUE
are also as in `map-extents'.

If you want to map a function over the extents in a buffer or string,
consider using `map-extents' or `mapcar-extents' instead.

See also `extents-at'.Sextents.elc
Fextent-at-event
Return the smallest extent under EVENT, if any.
PROPERTY, BEFORE, and AT-FLAG are as in `extent-at'.Sextents.elc
Fextents-at-event
Return a list of all extents under EVENT.
PROPERTY, BEFORE, and AT-FLAG are as in `extent-at'.Sextents.elc
Fextent-string
Return the string delimited by the bounds of EXTENT.Sextents.elc
Fextent-descendants
Return a list of all descendants of EXTENT, including EXTENT.
This recursively applies `extent-children' to any children of
EXTENT, until no more children can be found.Sextents.elc
Fset-extent-keymap
Set EXTENT's `keymap' property to KEYMAP.Sextents.elc
Fextent-keymap
Return EXTENT's `keymap' property.Sevents.elc
Fevent-console
Return the console that EVENT occurred on.
This will be nil for some types of events (e.g. eval events).Sevents.elc
Fevent-device
Return the device that EVENT occurred on.
This will be nil for some types of events (e.g. keyboard and eval events).Sevents.elc
Fevent-frame
Return the frame that EVENT occurred on.
This will be nil for some types of events (e.g. keyboard and eval events).Sevents.elc
Fevent-buffer
Return the buffer of the window over which mouse event EVENT occurred.
Return nil unless both (mouse-event-p EVENT) and
(event-over-text-area-p EVENT) are non-nil.Sevents.elc
Fallocate-event
Sevents.elc
Fkey-press-event-p
Return t if OBJECT is a key-press event.Sevents.elc
Fbutton-press-event-p
Return t if OBJECT is a mouse button-press event.Sevents.elc
Fbutton-release-event-p
Return t if OBJECT is a mouse button-release event.Sevents.elc
Fbutton-event-p
Return t if OBJECT is a mouse button-press or button-release event.Sevents.elc
Fmotion-event-p
Return t if OBJECT is a mouse motion event.Sevents.elc
Fmouse-event-p
Return t if OBJECT is a mouse button-press, button-release or motion event.Sevents.elc
Fprocess-event-p
Return t if OBJECT is a process-output event.Sevents.elc
Ftimeout-event-p
Return t if OBJECT is a timeout event.Sevents.elc
Feval-event-p
Return t if OBJECT is an eval event.Sevents.elc
Fmisc-user-event-p
Return t if OBJECT is a misc-user event.
A misc-user event is a user event that is not a keypress or mouse click;
normally this means a menu selection or scrollbar action.Sevents.elc
Fevent-over-glyph-p
Return t if OBJECT is a mouse event occurring over a glyph.
Mouse events are events of type button-press, button-release or motion.Sevents.elc
Fkeyboard-translate
Translate character or keysym FROM to TO at a low level.
Multiple FROM-TO pairs may be specified.

See `keyboard-translate-table' for more information.Sevents.elc
Fset-character-of-keysym
Make CHARACTER be inserted when KEYSYM is pressed, 
and the key has been bound to `self-insert-command'.  Sevents.elc
Fget-character-of-keysym
Return the character inserted when KEYSYM is pressed, 
and the key is bound to `self-insert-command'.  Shash-table.elc
Fhash-table-key-list
Return a list of all keys in HASH-TABLE.Shash-table.elc
Fhash-table-value-list
Return a list of all values in HASH-TABLE.Shash-table.elc
Fhash-table-key-value-alist
Return an alist of (KEY . VALUE) for all keys and values in HASH-TABLE.Shash-table.elc
Fhash-table-key-value-plist
Return a plist for all keys and values in HASH-TABLE.
A plist is a simple list containing alternating keys and values.Stext-props.elc
Fset-text-properties
You should NEVER use this function.  It is ideologically blasphemous.
It is provided only to ease porting of broken FSF Emacs programs.
Instead, use `remove-text-properties' to remove the specific properties
you do not want.

Completely replace properties of text from START to END.
The third argument PROPS is the new property list.
The optional fourth argument, BUFFER-OR-STRING,
is the string or buffer containing the text.Stext-props.elc
Fextent-properties-at-1
Stext-props.elc
Fextent-properties-at
Return the properties of the character at the given position in OBJECT.
OBJECT is either a string or a buffer. The properties of overlapping
extents are merged.  The returned value is a property list, some of
which may be shared with other structures.  You must not modify it.

If POSITION is at the end of OBJECT, the value is nil.

This returns all properties on all extents.
See also `text-properties-at'.Stext-props.elc
Ftext-properties-at
Return the properties of the character at the given position in OBJECT.
OBJECT is either a string or a buffer. The properties of overlapping
extents are merged.  The returned value is a property list, some of
which may be shared with other structures.  You must not modify it.

If POSITION is at the end of OBJECT, the value is nil.

This returns only those properties added with `put-text-property'.
See also `extent-properties-at'.Stext-props.elc
Ftext-property-any
Check text from START to END to see if PROP is ever `eq' to VALUE.
If so, return the position of the first character whose PROP is `eq'
to VALUE.  Otherwise return nil.
The optional fifth argument, BUFFER-OR-STRING, is the buffer or string
containing the text and defaults to the current buffer.Stext-props.elc
Ftext-property-not-all
Check text from START to END to see if PROP is ever not `eq' to VALUE.
If so, return the position of the first character whose PROP is not
`eq' to VALUE.  Otherwise, return nil.
The optional fifth argument, BUFFER-OR-STRING, is the buffer or string
containing the text and defaults to the current buffer.Stext-props.elc
Fnext-property-change
Return the position of next property change.
Scans forward from POS in BUFFER-OR-STRING (defaults to the current buffer)
 until it finds a change in some text property, then returns the position of
 the change.
Returns nil if the properties remain unchanged all the way to the end.
If the value is non-nil, it is a position greater than POS, never equal.
If the optional third argument LIMIT is non-nil, don't search
 past position LIMIT; return LIMIT if nothing is found before LIMIT.
If two or more extents with conflicting non-nil values for a property overlap
 a particular character, it is undefined which value is considered to be
 the value of the property. (Note that this situation will not happen if
 you always use the text-property primitives.)Stext-props.elc
Fprevious-property-change
Return the position of previous property change.
Scans backward from POS in BUFFER-OR-STRING (defaults to the current buffer)
 until it finds a change in some text property, then returns the position of
 the change.
Returns nil if the properties remain unchanged all the way to the beginning.
If the value is non-nil, it is a position less than POS, never equal.
If the optional third argument LIMIT is non-nil, don't search back
 past position LIMIT; return LIMIT if nothing is found until LIMIT.
If two or more extents with conflicting non-nil values for a property overlap
 a particular character, it is undefined which value is considered to be
 the value of the property. (Note that this situation will not happen if
 you always use the text-property primitives.)Stext-props.elc
Ftext-property-bounds
Return the bounds of property PROP at POS.
This returns a cons (START . END) of the largest region of text containing
POS which has a non-nil value for PROP.  The return value is nil if POS
does not have a non-nil value for PROP.  OBJECT specifies the buffer
or string to search in.  Optional arg AT-FLAG controls what "at POS"
means, and has the same meaning as for `extent-at'.Stext-props.elc
Fnext-text-property-bounds
Return the COUNTth bounded property region of property PROP after POS.
If COUNT is less than zero, search backwards.  This returns a cons
(START . END) of the COUNTth maximal region of text that begins after POS
(starts before POS) and has a non-nil value for PROP.  If there aren't
that many regions, nil is returned.  OBJECT specifies the buffer or
string to search in.Sprocess.elc
Vshell-command-switch
Switch used to have the shell execute its command line argument.Sprocess.elc
Vshell-command-default-error-buffer
*Buffer name for `shell-command' and `shell-command-on-region' error output.
This buffer is used when `shell-command' or `shell-command-on-region'
is run interactively.  A value of nil means that output to stderr and
stdout will be intermixed in the output stream.Sprocess.elc
Fstart-process-shell-command
Start a program in a subprocess.  Return the process object for it.
NAME is name for process.  It is modified if necessary to make it unique.
BUFFER is the buffer or (buffer-name) to associate with the process.
 Process output goes at end of that buffer, unless you specify
 an output stream or filter function to handle the output.
 BUFFER may be also nil, meaning that this process is not associated
 with any buffer.
Variables `shell-file-name' and `shell-command-switch' are used to
start the process.
Remaining arguments are the arguments for the command.
Wildcards and redirection are handled as usual in the shell.Sprocess.elc
Fcall-process-shell-command
Execute the shell command COMMAND synchronously in separate process.
The remaining arguments are optional.
The program's input comes from file INFILE (nil means `/dev/null').
Insert output in BUFFER before point; t means current buffer;
 nil for BUFFER means discard it; 0 means discard and don't wait.
BUFFER can also have the form (REAL-BUFFER STDERR-FILE); in that case,
REAL-BUFFER says what to do with standard output, as above,
while STDERR-FILE says what to do with standard error in the child.
STDERR-FILE may be nil (discard standard error output),
t (mix it with ordinary output), or a file name string.

Fourth arg DISPLAY non-nil means redisplay buffer as output is inserted.
Remaining arguments are strings passed as additional arguments for COMMAND.
Wildcards and redirection are handled as usual in the shell.

If BUFFER is 0, `call-process-shell-command' returns immediately with value nil.
Otherwise it waits for COMMAND to terminate and returns a numeric exit
status or a signal description string.
If you quit, the process is killed with SIGINT, or SIGKILL if you quit again.Sprocess.elc
Fcall-process-internal
Internal function to call PROGRAM synchronously in separate process.
Lisp callers should use `call-process' or `call-process-region'.

The program's input comes from file INFILE (nil means `/dev/null').
XEmacs feature: INFILE can also be a list of (BUFFER [START [END]]), i.e.
a list of one to three elements, consisting of a buffer and optionally
a start position or start and end position.  In this case, input comes
from the buffer, starting from START (defaults to the beginning of the
buffer) and ending at END (defaults to the end of the buffer).

Insert output in BUFFER before point; t means current buffer;
 nil for BUFFER means discard it; 0 means discard and don't wait.
If BUFFER is a string, then find or create a buffer with that name,
then insert the output in that buffer, before point.
BUFFER can also have the form (REAL-BUFFER STDERR-FILE); in that case,
REAL-BUFFER says what to do with standard output, as above,
while STDERR-FILE says what to do with standard error in the child.
STDERR-FILE may be nil (discard standard error output),
t (mix it with ordinary output), a file name string, or (XEmacs feature)
a buffer object.  If STDERR-FILE is a buffer object (but not the name of
a buffer, since that would be interpreted as a file), the standard error
output will be inserted into the buffer before point.

Fourth arg DISPLAY non-nil means redisplay buffer as output is inserted.
Remaining arguments are strings passed as command arguments to PROGRAM.

If BUFFER is 0, returns immediately with value nil.
Otherwise waits for PROGRAM to terminate and returns a numeric exit status
or a signal description string.  If you quit, the process is first killed
with SIGINT, then with SIGKILL if you quit again before the process exits.

Coding systems for the process are the same as for `start-process-internal'.Sprocess.elc
Fshell-command
Execute string COMMAND in inferior shell; display output, if any.

If COMMAND ends in ampersand, execute it asynchronously.  The command
is executed using the background package. See `background' for
details.

Otherwise, COMMAND is executed synchronously.  The output appears in the
buffer `*Shell Command Output*'.
If the output is one line, it is displayed in the echo area *as well*,
but it is nonetheless available in buffer `*Shell Command Output*',
even though that buffer is not automatically displayed.
If there is no output, or if output is inserted in the current buffer,
then `*Shell Command Output*' is deleted.

The optional second argument OUTPUT-BUFFER, if non-nil,
says to put the output in some other buffer.
If OUTPUT-BUFFER is a buffer or buffer name, put the output there.
If OUTPUT-BUFFER is not a buffer and not nil,
insert output in current buffer.  (This cannot be done asynchronously.)
In either case, the output is inserted after point (leaving mark after it).

If the optional third argument ERROR-BUFFER is non-nil, it is a buffer
or buffer name to which to direct the command's standard error output.
If it is nil, error output is mingled with regular output.  In an
interactive call, the variable `shell-command-default-error-buffer'
specifies the value of ERROR-BUFFER.Sprocess.elc
Fshell-command-sentinel
Sprocess.elc
Fshell-command-on-region
Execute string COMMAND in inferior shell with region as input.
Normally display output (if any) in temp buffer `*Shell Command Output*';
Prefix arg means replace the region with it.

The noninteractive arguments are START, END, COMMAND, OUTPUT-BUFFER, REPLACE.
If REPLACE is non-nil, that means insert the output
in place of text from START to END, putting point and mark around it.

If the output is one line, it is displayed in the echo area,
but it is nonetheless available in buffer `*Shell Command Output*'
even though that buffer is not automatically displayed.
If there is no output, or if output is inserted in the current buffer,
then `*Shell Command Output*' is deleted.

If the optional fourth argument OUTPUT-BUFFER is non-nil,
that says to put the output in some other buffer.
If OUTPUT-BUFFER is a buffer or buffer name, put the output there.
If OUTPUT-BUFFER is not a buffer and not nil,
insert output in the current buffer.
In either case, the output is inserted after point (leaving mark after it).

If optional sixth argument ERROR-BUFFER is non-nil, it is a buffer
or buffer name to which to direct the command's standard error output.
If it is nil, error output is mingled with regular output.
If DISPLAY-ERROR-BUFFER is non-nil, display the error buffer if there
were any errors.  (This is always t, interactively.)
In an interactive call, the variable `shell-command-default-error-buffer'
specifies the value of ERROR-BUFFER.Sprocess.elc
Fshell-quote-argument
Quote an argument for passing as argument to an inferior shell.Sprocess.elc
Fshell-command-to-string
Execute shell command COMMAND and return its output as a string.Sprocess.elc
Fread-envvar-name
Read environment variable name, prompting with PROMPT.
Optional second arg MUSTMATCH, if non-nil, means require existing envvar name.
If it is also not t, RET does not exit if it does non-null completion.Sprocess.elc
Fsubstitute-env-vars
Substitute environment variables referred to in STRING.
`$FOO' where FOO is an environment variable name means to substitute
the value of that variable.  The variable name should be terminated
with a character not a letter, digit or underscore; otherwise, enclose
the entire variable name in braces.  For instance, in `ab$cd-x',
`$cd' is treated as an environment variable.

Use `$$' to insert a single dollar sign.Sprocess.elc
Fsetenv
Set the value of the environment variable named VARIABLE to VALUE.
VARIABLE should be a string.  VALUE is optional; if not provided or is
`nil', the environment variable VARIABLE will be removed.  

UNSET, if non-nil, means to remove VARIABLE from the environment.
SUBSTITUTE-ENV-VARS, if non-nil, means to substitute environment
variables in VALUE using `substitute-env-vars'.

Interactively, a prefix argument means to unset the variable.
Interactively, the current value (if any) of the variable
appears at the front of the history list when you type in the new value.

This function works by modifying `process-environment'.

As a special case, setting variable `TZ' calls `set-time-zone-rule' as
a side-effect.Smulticast.elc
Fopen-multicast-group
Open a multicast connection on the specified address.
Returns a process object to represent the connection.
Input and output work as for subprocesses; `delete-process' closes it.
NAME is a name for the process. It is modified if necessary to make it unique.
BUFFER is the buffer (or buffer-name) to associate with the process.
 Process output goes at the end of that buffer, unless you specify an output
 stream or filter function to handle the output.
 BUFFER may be also nil, meaning that this process is not associated with any
 buffer.
ADDRESS specifies a standard multicast address "dest/port/ttl":
 dest is an internet address between 224.0.0.0 and 239.255.255.255
 port is a communication port like in traditional unicast
 ttl is the time-to-live (15 for site, 63 for region and 127 for world).

WARNING: it is *strongly* recommended to avoid using groups beginning with
         224 or 239. Such groups are considered 'admin' groups, and may
         behave in a surprising way ...

The read/write coding systems used for process I/O on the process are
determined as follows:

1. `coding-system-for-read', `coding-system-for-write', if non-nil.
      (Intended as a temporary overriding mechanism for use by Lisp
      code.)
2. The matching value for the port from `network-coding-system-alist',
      if any, and if non-nil.  The value may be either a single coding
      system, used for both read and write; or a cons of read/write; or a
      function, called to get one of the other two values.
3. The value of `default-network-coding-system', which should be a cons
      of read/write coding systems, if the values are non-nil.
4. The coding system `undecided' for read, and `raw-text' for write.

Note that the processes of determining the read and write coding systems
proceed essentially independently one from the other, as in `start-process'.

You can change the coding systems later on using
`set-process-coding-system', `set-process-input-coding-system', or
`set-process-output-coding-system'.Smap-ynp.elc
Fmap-y-or-n-p
Ask a series of boolean questions.
Takes args PROMPTER ACTOR LIST, and optional args HELP and ACTION-ALIST.

LIST is a list of objects, or a function of no arguments to return the next
object or nil.

If PROMPTER is a string, the prompt is (format PROMPTER OBJECT).  If not
a string, PROMPTER is a function of one arg (an object from LIST), which
returns a string to be used as the prompt for that object.  If the return
value is not a string, it may be nil to ignore the object or non-nil to act
on the object without asking the user.

ACTOR is a function of one arg (an object from LIST),
which gets called with each object that the user answers `yes' for.

If HELP is given, it is a list (OBJECT OBJECTS ACTION),
where OBJECT is a string giving the singular noun for an elt of LIST;
OBJECTS is the plural noun for elts of LIST, and ACTION is a transitive
verb describing ACTOR.  The default is ("object" "objects" "act on").

At the prompts, the user may enter y, Y, or SPC to act on that object;
n, N, or DEL to skip that object; ! to act on all following objects;
ESC or q to exit (skip all following objects); . (period) to act on the
current object and then exit; or \[help-command] to get help.

If ACTION-ALIST is given, it is an alist (KEY FUNCTION HELP) of extra keys
that will be accepted.  KEY is a character; FUNCTION is a function of one
arg (an object from LIST); HELP is a string.  When the user hits KEY,
FUNCTION is called.  If it returns non-nil, the object is considered
"acted upon", and the next object from LIST is processed.  If it returns
nil, the prompt is repeated for the same object.

Final optional argument NO-CURSOR-IN-ECHO-AREA non-nil says not to set
`cursor-in-echo-area' while prompting.

This function uses `query-replace-map' to define the standard responses,
but not all of the responses which `query-replace' understands
are meaningful here.

Returns the number of actions taken.Sundo-stack.elc
Ftrunc-stack-stack
Sundo-stack.elc
Ftrunc-stack-length
Sundo-stack.elc
Fset-trunc-stack-stack
Sundo-stack.elc
Fset-trunc-stack-length
Sundo-stack.elc
Fmake-trunc-stack
Sundo-stack.elc
Ftrunc-stack-push
Sundo-stack.elc
Ftrunc-stack-top
Sundo-stack.elc
Ftrunc-stack-pop
Sundo-stack.elc
Ftrunc-stack-truncate
Sundo-stack.elc
Fundoable-stack-max
Sundo-stack.elc
Fundoable-stack-a
Sundo-stack.elc
Fundoable-stack-b
Sundo-stack.elc
Fmake-undoable-stack
Sundo-stack.elc
Fset-undoable-stack-max
Sundo-stack.elc
Fundoable-stack-a-top
Sundo-stack.elc
Fundoable-stack-a-length
Sundo-stack.elc
Fundoable-stack-b-top
Sundo-stack.elc
Fundoable-stack-b-length
Sundo-stack.elc
Fundoable-stack-push
Sundo-stack.elc
Fundoable-stack-pop
Sundo-stack.elc
Fundoable-stack-undo
Sundo-stack.elc
Fundoable-stack-redo
Swindow.elc
Fonly-window-p
Return non-nil if WINDOW is the only window in some context, 
normally its frame.  Optional arg NOMINI non-nil means don't count the
minibuffer even if it is active.

The optional argument WHICH-FRAMES changes the frames that are considered:

WHICH-FRAMES nil or omitted means count only WINDOW's frame,
plus the minibuffer it uses (which may be on another frame).
(But, for all values of WHICH-FRAMES, see the documentation for the
WHICH-DEVICES argument.)
WHICH-FRAMES = `visible' means include windows on all visible frames
WHICH-FRAMES = 0 means include windows on all visible and iconified frames.
WHICH-FRAMES = t means include windows on all frames including invisible frames.
If WHICH-FRAMES is any other value, count only the selected frame.

The optional third argument WHICH-DEVICES further clarifies on which
devices to search for frames as specified by WHICH-FRAMES.  This value
is only meaningful if WHICH-FRAMES is non-nil.
If nil or omitted, search all devices on the selected console.
If a device, only search that device.
If a console, search all devices on that console.
If a device type, search all devices of that type.
If `window-system', search all devices on window-system consoles.
Any other non-nil value means search all devices.Swindow.elc
Fone-window-p
Return the result of calling `only-window-p' on the selected window. 

See that function's documentation for the meaning of the NOMINI,
WHICH-FRAMES and WHICH-DEVICES arguments.Swindow.elc
Fwalk-windows
Cycle through all visible windows, calling FUNCTION for each one.
FUNCTION is called with a window as argument.

Optional second arg MINIBUF t means count the minibuffer window even
if not active.  MINIBUF nil or omitted means count the minibuffer iff
it is active.  MINIBUF neither t nor nil means not to count the
minibuffer even if it is active.

Several frames may share a single minibuffer; if the minibuffer
counts, all windows on all frames that share that minibuffer count
too.  Therefore, when a separate minibuffer frame is active,
`walk-windows' includes the windows in the frame from which you
entered the minibuffer, as well as the minibuffer window.  But if the
minibuffer does not count, only the selected window counts.

By default, only the windows in the selected frame are included.
The optional argument WHICH-FRAMES changes this behavior:
WHICH-FRAMES nil or omitted means cycle within the frames as specified above.
WHICH-FRAMES = `visible' means include windows on all visible frames.
WHICH-FRAMES = 0 means include windows on all visible and iconified frames.
WHICH-FRAMES = t means include windows on all frames including invisible frames.
Anything else means restrict to WINDOW's frame.

The optional fourth argument WHICH-DEVICES further clarifies on which
devices to search for frames as specified by WHICH-FRAMES.  This value
is only meaningful if WHICH-FRAMES is non-nil.
If nil or omitted, search all devices on the selected console.
If a device, only search that device.
If a console, search all devices on that console.
If a device type, search all devices of that type.
If `window-system', search all devices on window-system consoles.
Any other non-nil value means search all devices.Swindow.elc
Fget-window-with-predicate
Return a window satisfying PREDICATE.

This function cycles through all visible windows using `walk-windows',
calling PREDICATE on each one.  PREDICATE is called with a window as
argument.  The first window for which PREDICATE returns a non-nil
value is returned.  If no window satisfies PREDICATE, DEFAULT is
returned.

Optional second arg MINIBUF t means count the minibuffer window even
if not active.  MINIBUF nil or omitted means count the minibuffer iff
it is active.  MINIBUF neither t nor nil means not to count the
minibuffer even if it is active.

Several frames may share a single minibuffer; if the minibuffer
counts, all windows on all frames that share that minibuffer count
too.  Therefore, if you are using a separate minibuffer frame
and the minibuffer is active and MINIBUF says it counts,
`walk-windows' includes the windows in the frame from which you
entered the minibuffer, as well as the minibuffer window.

ALL-FRAMES is the optional third argument.
ALL-FRAMES nil or omitted means cycle within the frames as specified above.
ALL-FRAMES = `visible' means include windows on all visible frames.
ALL-FRAMES = 0 means include windows on all visible and iconified frames.
ALL-FRAMES = t means include windows on all frames including invisible frames.
If ALL-FRAMES is a frame, it means include windows on that frame.
Anything else means restrict to the selected frame.Swindow.elc
Fsome-window
Swindow.elc
Fminibuffer-window-active-p
Return t if WINDOW (a minibuffer window) is now active.Swindow.elc
Fsave-selected-window
Execute BODY, then select the window that was selected before BODY.
The value returned is the value of the last form in BODY.Swindow.elc
Fwith-selected-window
Execute forms in BODY with WINDOW as the selected window.
The value returned is the value of the last form in BODY.Swindow.elc
Fsave-window-excursion
Execute body, preserving window sizes and contents.
Restores which buffer appears in which window, where display starts,
as well as the current buffer.
Does not restore the value of point in current buffer.Swindow.elc
Fcount-windows
Return the number of visible windows.
This counts the windows in the selected frame and (if the minibuffer is
to be counted) its minibuffer frame (if that's not the same frame).
The optional arg MINIBUF non-nil means count the minibuffer
even if it is inactive.Swindow.elc
Fwindow-safely-shrinkable-p
Non-nil if the WINDOW can be shrunk without shrinking other windows.
If WINDOW is nil or omitted, it defaults to the currently selected window.Swindow.elc
Fbalance-windows
Make all visible windows the same height (approximately).Swindow.elc
Vsplit-window-keep-point
*If non-nil, split windows keeps the original point in both children.
This is often more convenient for editing.
If nil, adjust point in each of the two windows to minimize redisplay.
This is convenient on slow terminals, but point can move strangely.Swindow.elc
Fsplit-window-vertically
Split current window into two windows, one above the other.
The uppermost window gets ARG lines and the other gets the rest.
Negative arg means select the size of the lowermost window instead.
With no argument, split equally or close to it.
Both windows display the same buffer now current.

If the variable `split-window-keep-point' is non-nil, both new windows
will get the same value of point as the current window.  This is often
more convenient for editing.

Otherwise, we choose window starts so as to minimize the amount of
redisplay; this is convenient on slow terminals.  The new selected
window is the one that the current value of point appears in.  The
value of point can change if the text around point is hidden by the
new mode line.

Programs should probably use split-window instead of this.Swindow.elc
Fsplit-window-horizontally
Split current window into two windows side by side.
This window becomes the leftmost of the two, and gets ARG columns.
Negative arg means select the size of the rightmost window instead.
No arg means split equally.Swindow.elc
Fenlarge-window-horizontally
Make current window ARG columns wider.Swindow.elc
Fshrink-window-horizontally
Make current window ARG columns narrower.Swindow.elc
Fwindow-buffer-height
Return the height (in screen lines) of the buffer that WINDOW is displaying.Swindow.elc
Fcount-screen-lines
Return the number of screen lines in the region.
The number of screen lines may be different from the number of actual lines,
due to line breaking, display table, etc.

Optional arguments BEG and END default to `point-min' and `point-max'
respectively.

If region ends with a newline, ignore it unless optional third argument
COUNT-FINAL-NEWLINE is non-nil.

The optional fourth argument WINDOW specifies the window used for obtaining
parameters such as width, horizontal scrolling, and so on.  The default is
to use the selected window's parameters.

Optional argument BUFFER is the buffer to check, and defaults to the current
buffer.  See `vertical-motion' for some caveats on the differences between
this behaviour and that of GNU Emacs.Swindow.elc
Ffit-window-to-buffer
Make WINDOW the right height to display its contents exactly.
If WINDOW is omitted or nil, it defaults to the selected window.
If the optional argument MAX-HEIGHT is supplied, it is the maximum height
  the window is allowed to be, defaulting to the frame height.
If the optional argument MIN-HEIGHT is supplied, it is the minimum
  height the window is allowed to be, defaulting to `window-min-height'.

The heights in MAX-HEIGHT and MIN-HEIGHT include the mode-line and/or
header-line.Swindow.elc
Fshrink-window-if-larger-than-buffer
Shrink the WINDOW to be as small as possible to display its contents.
Do not shrink to less than `window-min-height' lines.
Do nothing if the buffer contains more lines than the present window height,
or if some of the window's contents are scrolled out of view,
or if the window is not the full width of the frame,
or if the window is the only window of its frame.Swindow.elc
Fkill-buffer-and-window
Kill the current buffer and delete the selected window.Swindow.elc
Fquit-window
Quit the current buffer.  Bury it, and maybe delete the selected frame.
(The frame is deleted if it is contains a dedicated window for the buffer.)
With a prefix argument, kill the buffer instead.

Noninteractively, if KILL is non-nil, then kill the current buffer,
otherwise bury it.

If WINDOW is non-nil, it specifies a window; we delete that window,
and the buffer that is killed or buried is the one in that window.Swindow-xemacs.elc
Frecenter
Center point in WINDOW and redisplay frame.  With N, put point on line N.
The desired position of point is always relative to the window.
Just C-u as prefix means put point in the center of the window.
No N (i.e., it is nil) erases the entire frame and then
redraws with point in the center of the window.
If WINDOW is nil, the selected window is used.Swindow-xemacs.elc
Vrecenter-last-op
Indicates the last recenter operation performed.
Possible values: `top', `middle', `bottom', integer or float numbers.Swindow-xemacs.elc
Vrecenter-positions
Cycling order for `recenter-top-bottom'.
A list of elements with possible values `top', `middle', `bottom',
integer or float numbers that define the cycling order for
the command `recenter-top-bottom'.

Top and bottom destinations are the window top and bottom.  Middle
redraws the frame and centers point vertically within the window.
Integer number moves current line to the specified absolute
window-line.  Float number between 0.0 and 1.0 means the percentage of
the screen space from the top.  The default cycling order is middle ->
top -> bottom.Swindow-xemacs.elc
Frecenter-top-bottom
Move current buffer line to the specified window line.
With no prefix argument, successive calls place point according
to the cycling order defined by `recenter-positions'.

A prefix argument is handled like `recenter':
 With numeric prefix ARG, move current line to window-line ARG.
 With plain `C-u', move current line to window center.Swindow-xemacs.elc
Fbackward-other-window
Select the COUNT'th different window on this frame, going backwards.
This is just like calling `other-window' with COUNT negated.Swindow-xemacs.elc
Fwindows-of-buffer
Swindow-xemacs.elc
Fbuffer-in-multiple-windows-p
Return t if BUFFER is in multiple windows.
If BUFFER is not specified, the current buffer will be used.Swindow-xemacs.elc
Fwindow-list
Return a list of windows on FRAME, beginning with WINDOW.
FRAME and WINDOW default to the selected ones.
Optional second arg MINIBUF t means count the minibuffer window
even if not active.  If MINIBUF is neither t nor nil it means
not to count the minibuffer even if it is active.Swindow-xemacs.elc
Fset-window-buffer-dedicated
Make WINDOW display BUFFER and be dedicated to that buffer.
Then Emacs will not automatically change which buffer appears in WINDOW.
If BUFFER is nil, make WINDOW not be dedicated (but don't change which
buffer appears in it currently).Swindow-xemacs.elc
Vwindow-configuration-includes-position
*Whether restoring window configurations will restore positions too.
If nil, only the size of windows will be restored.

Note that setting this value to t may have counterintuitive consequences,
if a window manager employing virtual desktops is in use.Swindow-xemacs.elc
Fsaved-window-currentp
Swindow-xemacs.elc
Fsaved-window-minibufferp
Swindow-xemacs.elc
Fsaved-window-minibuffer-scrollp
Swindow-xemacs.elc
Fsaved-window-buffer
Swindow-xemacs.elc
Fsaved-window-mark-marker
Swindow-xemacs.elc
Fsaved-window-start-marker
Swindow-xemacs.elc
Fsaved-window-point-marker
Swindow-xemacs.elc
Fsaved-window-pixel-left
Swindow-xemacs.elc
Fsaved-window-pixel-top
Swindow-xemacs.elc
Fsaved-window-pixel-right
Swindow-xemacs.elc
Fsaved-window-pixel-bottom
Swindow-xemacs.elc
Fsaved-window-hscroll
Swindow-xemacs.elc
Fsaved-window-modeline-hscroll
Swindow-xemacs.elc
Fsaved-window-dedicatedp
Swindow-xemacs.elc
Fsaved-window-first-hchild
Swindow-xemacs.elc
Fsaved-window-first-vchild
Swindow-xemacs.elc
Fsaved-window-next-child
Swindow-xemacs.elc
Fsaved-window-window
Swindow-xemacs.elc
Fsaved-window-p
Swindow-xemacs.elc
Fcopy-saved-window
Swindow-xemacs.elc
Fmake-saved-window


arguments: (&key CURRENTP MINIBUFFERP MINIBUFFER-SCROLLP BUFFER MARK-MARKER START-MARKER POINT-MARKER PIXEL-LEFT PIXEL-TOP PIXEL-RIGHT PIXEL-BOTTOM HSCROLL MODELINE-HSCROLL DEDICATEDP FIRST-HCHILD FIRST-VCHILD NEXT-CHILD WINDOW)
Swindow-xemacs.elc
Fwindow-configuration-frame
Swindow-xemacs.elc
Fwindow-configuration-frame-top
Swindow-xemacs.elc
Fwindow-configuration-frame-left
Swindow-xemacs.elc
Fwindow-configuration-frame-pixel-width
Swindow-xemacs.elc
Fwindow-configuration-frame-pixel-height
Swindow-xemacs.elc
Fwindow-configuration-current-buffer
Swindow-xemacs.elc
Fwindow-configuration-minibuffer-pixel-height
Swindow-xemacs.elc
Fwindow-configuration-min-width
Swindow-xemacs.elc
Fwindow-configuration-min-height
Swindow-xemacs.elc
Fwindow-configuration-saved-root-window
Swindow-xemacs.elc
Fwindow-configuration-p
Swindow-xemacs.elc
Fcopy-window-configuration
Swindow-xemacs.elc
Fmake-window-configuration


arguments: (&key FRAME FRAME-TOP FRAME-LEFT FRAME-PIXEL-WIDTH FRAME-PIXEL-HEIGHT CURRENT-BUFFER MINIBUFFER-PIXEL-HEIGHT MIN-WIDTH MIN-HEIGHT SAVED-ROOT-WINDOW)
Swindow-xemacs.elc
Fwindow-configuration-equal
Returns a boolean indicating whether the two given configurations
are identical.

Window configurations containing windows with different window
positions are not identical iff `window-configuration-includes-position'
is t.Swindow-xemacs.elc
Fsaved-window-equal
Returns a boolean indicating whether the two given saved windows
are identical.Swindow-xemacs.elc
Fmaybe-saved-window-equal
Returns a boolean indicating whether the two given saved windows
or NILs are identical.Swindow-xemacs.elc
Fcurrent-window-configuration
Return an object representing the current window configuration of FRAME.
If FRAME is nil or omitted, use the selected frame.
This describes the number of windows, their sizes and current buffers,
and for each window on FRAME the displayed buffer, where display
starts, and the positions of point and mark.
An exception is made for point in the current buffer:
its value is -not- saved.Swindow-xemacs.elc
Froot-window->saved-window
Converts a root window into a tree of saved-window structures.Swindow-xemacs.elc
Fsave-window-excursion/mapping
Execute body, preserving window sizes and contents.
Restores which buffer appears in which window, where display starts,
as well as the current buffer.
Return alist mapping old windows to new windows.
This alist maps the originally captured windows to the windows that correspond
to them in the restored configuration.  It does not include entries for
windows that have not changed identity.
Does not restore the value of point in current buffer.Swindow-xemacs.elc
Fset-window-configuration
Set the configuration of windows and buffers as specified by CONFIGURATION.
CONFIGURATION must be a value previously returned
by `current-window-configuration'.
If SET-FRAME-SIZE-P is true, the frame size is also restored.
Swindow-xemacs.elc
Fset-window-configuration/mapping
Set the configuration of windows and buffers as specified by CONFIGURATION.
CONFIGURATION must be a value previously returned
by `current-window-configuration'.
If SET-FRAME-SIZE-P is true, the frame size is also restored.
Return alist mapping old windows to new windows.
This alist maps the originally captured windows to the windows that correspond
to them in the restored configuration.  It does not include entries for
windows that have not changed identity.Swindow-xemacs.elc
Freally-set-window-configuration
Set the window configuration CONFIGURATION on live frame FRAME.
If SET-FRAME-SIZE-P is true, the frame size is also restored.
Return alist mapping old windows to new windows.Swindow-xemacs.elc
Fset-window-configuration-frame-size
Restore the frame size of a window configuration.Swindow-xemacs.elc
Fframe-reduce-to-one-window
Delete all windows except the minibuffer and one other in FRAME.Swindow-xemacs.elc
Fwindow-reduce-to-one
Make sure only one subwindow of WINDOW is left.Swindow-xemacs.elc
Frestore-saved-window
Within CONFIGURATION, restore WINDOW to the state of SAVED-WINDOW.
MAPPING is a one-element list whose element is an old-window-to-new-window
mapping, which this function will extend.Swindow-xemacs.elc
Frestore-saved-window-parameters
Restore the window parameters stored in SAVED-WINDOW on WINDOW.Swindow-xemacs.elc
Fsaved-window-pixel-width
Compute the pixel width of SAVED-WINDOW.Swindow-xemacs.elc
Fsaved-window-pixel-height
Compute the pixel height of SAVED-WINDOW.Swindow-xemacs.elc
Fset-window-pixel-width
Set the pixel width of WINDOW.Swindow-xemacs.elc
Fset-window-pixel-height
Set the pixel height of WINDOW.Swindow-xemacs.elc
Vwindow-config-stack-max
*Maximum size of window configuration stack.
Start discarding off end if it gets this big.Swindow-xemacs.elc
Fwindow-config-stack
Swindow-xemacs.elc
Fpush-window-configuration
Push the current window configuration onto the window-config stack.
If CONFIG is specified, push it instead of the current window configuration.
Each frame has its own window-config stack.Swindow-xemacs.elc
Fpop-window-configuration
Pop the top window configuration off the window-config stack and set it.
Before setting the new window configuration, the current window configuration
 is pushed onto the "unpop" stack.
`unpop-window-configuration' undoes what this function does.
Each frame has its own window-config and "unpop" stack.Swindow-xemacs.elc
Funpop-window-configuration
Undo the effect of the most recent `pop-window-configuration'.
This does exactly the inverse of what `pop-window-configuration' does:
 i.e. it pops a window configuration off of the "unpop" stack and
 pushes the current window configuration onto the window-config stack.
Each frame has its own window-config and "unpop" stack.Swindow-xemacs.elc
Fbuffer-dedicated-frame
Return the frame dedicated to this BUFFER, or nil if there is none.
No argument or nil as argument means use current buffer as BUFFER.Swindow-xemacs.elc
Fset-buffer-dedicated-frame
For this BUFFER, set the FRAME dedicated to it.
FRAME must be a frame or nil.Swindow-xemacs.elc
Vdisplay-buffer-function
If non-nil, function to call to handle `display-buffer'.
It will receive four args: the same as those to `display-buffer'.Swindow-xemacs.elc
Vpre-display-buffer-function
If non-nil, function that will be called from `display-buffer'
as the first action.  It will receive four args: the same as those
to `display-buffer'.
This function may be used to select an appropriate frame for the buffer,
for example.  See also the variable `display-buffer-function', which may
be used to completely replace the `display-buffer' function.
If the return value of this function is non-nil, it should be a frame,
and that frame will be used to display the buffer.Swindow-xemacs.elc
Vpop-up-frames
*Non-nil means `display-buffer' should make a separate frame.Swindow-xemacs.elc
Vpop-up-frame-function
Function to call to handle automatic new frame creation.
It is called with no arguments and should return a newly created frame.

A typical value might be `(lambda () (new-frame pop-up-frame-alist))'
where `pop-up-frame-alist' would hold the default frame parameters.Swindow-xemacs.elc
Vspecial-display-buffer-names
*List of buffer names that should have their own special frames.
Displaying a buffer whose name is in this list makes a special frame for it
using `special-display-function'.

An element of the list can be a cons cell instead of just a string.
Then the car should be a buffer name, and the cdr specifies frame
parameters for creating the frame for that buffer.
More precisely, the cdr is passed as the second argument to
the function found in `special-display-function', when making that frame.
See also `special-display-regexps'.Swindow-xemacs.elc
Vspecial-display-regexps
*List of regexps saying which buffers should have their own special frames.
If a buffer name matches one of these regexps, it gets its own frame.
Displaying a buffer whose name is in this list makes a special frame for it
using `special-display-function'.

An element of the list can be a cons cell instead of just a string.
Then the car should be the regexp, and the cdr specifies frame
parameters for creating the frame for buffers that match.
More precisely, the cdr is passed as the second argument to
the function found in `special-display-function', when making that frame.
See also `special-display-buffer-names'.Swindow-xemacs.elc
Vspecial-display-function
Function to call to make a new frame for a special buffer.
It is called with two arguments, the buffer and optional buffer specific
data, and should return a window displaying that buffer.
The default value makes a separate frame for the buffer,
using `special-display-frame-alist' to specify the frame parameters.

A buffer is special if its is listed in `special-display-buffer-names'
or matches a regexp in `special-display-regexps'.Swindow-xemacs.elc
Vsame-window-buffer-names
*List of buffer names that should appear in the selected window.
Displaying one of these buffers using `display-buffer' or `pop-to-buffer'
switches to it in the selected window, rather than making it appear
in some other window.

An element of the list can be a cons cell instead of just a string.
Then the car must be a string, which specifies the buffer name.
This is for compatibility with `special-display-buffer-names';
the cdr of the cons cell is ignored.

See also `same-window-regexps'.Swindow-xemacs.elc
Vsame-window-regexps
*List of regexps saying which buffers should appear in the selected window.
If a buffer name matches one of these regexps, then displaying it
using `display-buffer' or `pop-to-buffer' switches to it
in the selected window, rather than making it appear in some other window.

An element of the list can be a cons cell instead of just a string.
Then the car must be a string, which specifies the buffer name.
This is for compatibility with `special-display-buffer-names';
the cdr of the cons cell is ignored.

See also `same-window-buffer-names'.Swindow-xemacs.elc
Vpop-up-windows
*Non-nil means display-buffer should make new windows.Swindow-xemacs.elc
Vsplit-height-threshold
*display-buffer would prefer to split the largest window if this large.
If there is only one window, it is split regardless of this value.Swindow-xemacs.elc
Vsplit-width-threshold
*display-buffer would prefer to split the largest window if this large.
If there is only one window, it is split regardless of this value.Swindow-xemacs.elc
Fdisplay-buffer
Make BUFFER appear in some window on the current frame, but don't select it.
BUFFER can be a buffer or a buffer name.
If BUFFER is shown already in some window in the current frame,
just uses that one, unless the window is the selected window and
NOT-THIS-WINDOW-P is non-nil (interactively, with prefix arg).

If BUFFER has a dedicated frame, display on that frame instead of
the current frame, unless OVERRIDE-FRAME is non-nil.

If OVERRIDE-FRAME is non-nil, display on that frame instead of
the current frame (or the dedicated frame).

If SHRINK-TO-FIT is non-nil and splitting the window is appropriate, give
the new buffer less than half the space if it is small enough to fit.

If `pop-up-windows' is non-nil, always use the
current frame and create a new window regardless of whether the
buffer has a dedicated frame, and regardless of whether
OVERRIDE-FRAME was specified.

If `pop-up-frames' is non-nil, make a new frame if no window shows BUFFER.

If the buffer name is a member of the `same-window-buffer-names' list,
or matches one of the `same-window-regexps' expressions, display the
buffer in the currently selected window.

Returns the window displaying BUFFER.Sresize-minibuffer.elc
Vresize-minibuffer-mode
*If non-`nil', resize the minibuffer so its entire contents are visible.Sresize-minibuffer.elc
Vresize-minibuffer-window-max-height
*Maximum size the minibuffer window is allowed to become.
If less than 1 or not a number, the limit is the height of the frame in
which the active minibuffer window resides.Sresize-minibuffer.elc
Vresize-minibuffer-idle-height
When minibuffer is idle, crop its window to this height.
Must be a positive integer or nil.  nil indicates no limit.
Effective only when `undisplay-echo-area-function' respects it.  One such
function is `undisplay-echo-area-resize-window'.Sresize-minibuffer.elc
Vresize-minibuffer-window-exactly
*If non-`nil', make minibuffer exactly the size needed to display all its contents.
Otherwise, the minibuffer window can temporarily increase in size but
never get smaller while it is active.Sresize-minibuffer.elc
Vresize-minibuffer-frame
*If non-`nil' and the active minibuffer is the sole window in its frame, allow changing the frame height.Sresize-minibuffer.elc
Vresize-minibuffer-frame-max-height
*Maximum size the minibuffer frame is allowed to become.
If less than 1 or not a number, there is no limit.Sresize-minibuffer.elc
Vresize-minibuffer-frame-exactly
*If non-`nil', make minibuffer frame exactly the size needed to display all its contents.
Otherwise, the minibuffer frame can temporarily increase in size but
never get smaller while it is active.Sresize-minibuffer.elc
Fresize-minibuffer-mode
Enable or disable resize-minibuffer mode.
A negative prefix argument disables this mode.  A positive argument or
argument of 0 enables it.

When this minor mode is enabled, the minibuffer is dynamically resized to
contain the entire region of text put in it as you type.

The variable `resize-minibuffer-mode' is set to t or nil depending on
whether this mode is active or not.

The maximum height to which the minibuffer can grow is controlled by the
variable `resize-minibuffer-window-max-height'.

The variable `resize-minibuffer-window-exactly' determines whether the
minibuffer window should ever be shrunk to make it no larger than needed to
display its contents.

When using a window system, it is possible for a minibuffer to be the sole
window in a frame.  Since that window is already its maximum size, the only
way to make more text visible at once is to increase the size of the frame.
The variable `resize-minibuffer-frame' controls whether this should be
done.  The variables `resize-minibuffer-frame-max-height' and
`resize-minibuffer-frame-exactly' are analogous to their window
counterparts.Sresize-minibuffer.elc
Fresize-minibuffer-setup
Sresize-minibuffer.elc
Fresize-minibuffer-count-window-lines
Return number of window lines occupied by text in region.
The number of window lines may be greater than the number of actual lines
in the buffer if any wrap on the display due to their length.

Optional arguments START and END default to point-min and point-max,
respectively.Sresize-minibuffer.elc
Fresize-minibuffer-window
Sresize-minibuffer.elc
Fresize-minibuffer-frame
Sresize-minibuffer.elc
Fresize-minibuffer-frame-restore
Ssimple.elc
Vsearch-caps-disable-folding
*If non-nil, upper case chars disable case fold searching.
This does not apply to "yanked" strings.Ssimple.elc
Fno-upper-case-p
Return t if there are no upper case chars in STRING.
If REGEXP-FLAG is non-nil, disregard letters preceded by `\' (but not `\\')
since they have special meaning in a regexp.Ssimple.elc
Fwith-search-caps-disable-folding
Eval BODY with `case-fold-search' let to nil if `search-caps-disable-folding'
is non-nil, and if STRING (either a string or a regular expression according
to REGEXP-FLAG) contains uppercase letters.Ssimple.elc
Fwith-interactive-search-caps-disable-folding
Same as `with-search-caps-disable-folding', but only in the case of a
function called interactively.Ssimple.elc
Fnewline
Insert a newline, and move to left margin of the new line if it's blank.
The newline is marked with the text-property `hard'.
With optional arg N, insert that many newlines.
In Auto Fill mode, if no numeric arg, break the preceding line if it's long.Ssimple.elc
Fset-hard-newline-properties
Ssimple.elc
Fopen-line
Insert a newline and leave point before it.
If there is a fill prefix and/or a left-margin, insert them on the new line
if the line would have been blank.
With arg N, insert N newlines.Ssimple.elc
Fsplit-line
Split current line, moving portion beyond point vertically down.Ssimple.elc
Fquoted-insert
Read next input character and insert it.
This is useful for inserting control characters.
You may also type up to 3 octal digits, to insert a character with that code.

In overwrite mode, this function inserts the character anyway, and
does not handle octal digits specially.  This means that if you use
overwrite as your normal editing mode, you can use this function to
insert characters when necessary.

In binary overwrite mode, this function does overwrite, and octal
digits are interpreted as a character code.  This is supposed to make
this function useful in editing binary files.Ssimple.elc
Fdelete-indentation
Join this line to previous and fix up whitespace at join.
If there is a fill prefix, delete it from the beginning of this line.
With argument, join this line to following line.Ssimple.elc
Fjoin-line
Ssimple.elc
Ffixup-whitespace
Fixup white space between objects around point.
Leave one space or none, according to the context.Ssimple.elc
Fdelete-horizontal-space
Delete all spaces and tabs around point.Ssimple.elc
Fjust-one-space
Delete all spaces and tabs around point, leaving one space.Ssimple.elc
Fdelete-blank-lines
On blank line, delete all surrounding blank lines, leaving just one.
On isolated blank line, delete that one.
On nonblank line, delete any immediately following blank lines.Ssimple.elc
Vdelete-trailing-lines
If non-nil, \[delete-trailing-whitespace] deletes trailing lines.
Trailing lines are deleted only if `delete-trailing-whitespace'
is called on the entire buffer (rather than an active region).Ssimple.elc
Fdelete-trailing-whitespace
Delete trailing whitespace between START and END.
If called interactively, START and END are the start/end of the
region if the mark is active, or of the buffer's accessible
portion if the mark is inactive.

This command deletes whitespace characters after the last
non-whitespace character in each line between START and END.  It
does not consider formfeed characters to be whitespace.

If this command acts on the entire buffer (i.e. if called
interactively with the mark inactive, or called from Lisp with
END nil), it also deletes all trailing lines at the end of the
buffer if the variable `delete-trailing-lines' is non-nil.Ssimple.elc
Fback-to-indentation
Move point to the first non-whitespace character on this line.Ssimple.elc
Fnewline-and-indent
Insert a newline, then indent according to major mode.
Indentation is done using the value of `indent-line-function'.
In programming language modes, this is the same as TAB.
In some text modes, where TAB inserts a tab, this command indents to the
column specified by the function `current-left-margin'.Ssimple.elc
Freindent-then-newline-and-indent
Reindent current line, insert newline, then indent the new line.
Indentation of both lines is done according to the current major mode,
which means calling the current value of `indent-line-function'.
In programming language modes, this is the same as TAB.
In some text modes, where TAB inserts a tab, this indents to the
column specified by the function `current-left-margin'.Ssimple.elc
Fkill-forward-chars
Ssimple.elc
Fbackward-delete-char-untabify
Delete characters backward, changing tabs into spaces.
Delete ARG chars, and kill (save in kill ring) if KILLP is non-nil.
Interactively, ARG is the prefix arg (default 1)
and KILLP is t if a prefix arg was specified.Ssimple.elc
Vdelete-key-deletes-forward
*If non-nil, the DEL key will erase one character forwards.
If nil, the DEL key will erase one character backwards.Ssimple.elc
Vbackward-delete-function
*Function called to delete backwards on a delete keypress.
If `delete-key-deletes-forward' is nil, `backward-or-forward-delete-char'
calls this function to erase one character backwards.  Default value
is `delete-backward-char', with `backward-delete-char-untabify' being a
popular alternate setting.Ssimple.elc
Fdelete-forward-p
Ssimple.elc
Fbackward-or-forward-delete-char
Delete either one character backwards or one character forwards.
Controlled by the state of `delete-key-deletes-forward' and whether the
BackSpace keysym even exists on your keyboard.  If you don't have a
BackSpace keysym, the delete key should always delete one character
backwards.Ssimple.elc
Fbackward-or-forward-kill-word
Delete either one word backwards or one word forwards.
Controlled by the state of `delete-key-deletes-forward' and whether the
BackSpace keysym even exists on your keyboard.  If you don't have a
BackSpace keysym, the delete key should always delete one character
backwards.Ssimple.elc
Fbackward-or-forward-kill-sentence
Delete either one sentence backwards or one sentence forwards.
Controlled by the state of `delete-key-deletes-forward' and whether the
BackSpace keysym even exists on your keyboard.  If you don't have a
BackSpace keysym, the delete key should always delete one character
backwards.Ssimple.elc
Fbackward-or-forward-kill-sexp
Delete either one sexpr backwards or one sexpr forwards.
Controlled by the state of `delete-key-deletes-forward' and whether the
BackSpace keysym even exists on your keyboard.  If you don't have a
BackSpace keysym, the delete key should always delete one character
backwards.Ssimple.elc
Fzap-to-char
Kill up to and including ARG'th occurrence of CHAR.
Goes backward if ARG is negative; error if CHAR not found.Ssimple.elc
Fzap-up-to-char
Kill up to ARG'th occurrence of CHAR.
Goes backward if ARG is negative; error if CHAR not found.Ssimple.elc
Fbeginning-of-buffer
Move point to the beginning of the buffer; leave mark at previous position.
With arg N, put point N/10 of the way from the beginning.

If the buffer is narrowed, this command uses the beginning and size
of the accessible part of the buffer.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.

Don't use this command in Lisp programs!
(goto-char (point-min)) is faster and avoids clobbering the mark.Ssimple.elc
Fend-of-buffer
Move point to the end of the buffer; leave mark at previous position.
With arg N, put point N/10 of the way from the end.

If the buffer is narrowed, this command uses the beginning and size
of the accessible part of the buffer.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.

Don't use this command in Lisp programs!
(goto-char (point-max)) is faster and avoids clobbering the mark.Ssimple.elc
Fmark-beginning-of-buffer
Push a mark at the beginning of the buffer; leave point where it is.
With arg N, push mark N/10 of the way from the true beginning.Ssimple.elc
Fmark-end-of-buffer
Push a mark at the end of the buffer; leave point where it is.
With arg N, push mark N/10 of the way from the true end.Ssimple.elc
Fmark-whole-buffer
Put point at beginning and mark at end of buffer.
You probably should not use this function in Lisp programs;
it is usually a mistake for a Lisp function to use any subroutine
that uses or sets the mark.Ssimple.elc
Feval-current-buffer
Evaluate the current buffer as Lisp code.
Programs can pass argument PRINTFLAG which controls printing of output:
nil means discard it; anything else is stream for print.Ssimple.elc
Fcount-words-buffer
Print the number of words in BUFFER.
If called noninteractively, the value is returned rather than printed.
BUFFER defaults to the current buffer.Ssimple.elc
Fcount-words-region
Print the number of words in region between START and END in BUFFER.
If called noninteractively, the value is returned rather than printed.
BUFFER defaults to the current buffer.Ssimple.elc
Fcount-lines-region
Print number of lines and characters in the region.Ssimple.elc
Fcount-lines-buffer
Print number of lines and characters in BUFFER.Ssimple.elc
Fwhat-line
Print the following variants of the line number of point:
     Region line     - displayed line within the active region
     Collapsed line  - includes only selectively displayed lines;
     Buffer line     - physical line in the buffer;
     Narrowed line   - line number from the start of the buffer narrowing.Ssimple.elc
Fline-number
Return the line number of POS (defaults to point).
If RESPECT-NARROWING is non-nil, then the narrowed line number is returned;
otherwise, the absolute line number is returned.  The returned line can always
be given to `goto-line' to get back to the current line.Ssimple.elc
Fline-number-at-pos
Ssimple.elc
Fcount-lines
Return number of lines between START and END.
This is usually the number of newlines between them,
but can be one more if START is not equal to END
and the greater of them is not at the start of a line.

With optional IGNORE-INVISIBLE-LINES-FLAG non-nil, lines collapsed with
selective-display are excluded from the line count.

NOTE: The expression to return the current line number is not obvious:

(1+ (count-lines 1 (point-at-bol)))

See also `line-number'.Ssimple.elc
Fwhat-cursor-position
Print info on cursor position (on screen and within buffer).
Also describe the character after point, giving its UCS code point and Mule
charset and codes; for ASCII characters, give its code in octal, decimal and
hex.

With prefix argument, show extended details about the character in a
separate buffer.  See also the command `describe-char'.Ssimple.elc
Ffundamental-mode
Major mode not specialized for anything in particular.
Other major modes are defined by comparison with this one.Ssimple.elc
Feval-expression
Evaluate EXPRESSION and print value in minibuffer.
Value is also consed on to front of the variable `values'.
With prefix argument, insert the result to the current buffer.Ssimple.elc
Fedit-and-eval-command
Prompting with PROMPT, let user edit FORM and eval result.
FORM is a Lisp expression.  Let user edit that expression in
the minibuffer, then read and evaluate the result.Ssimple.elc
Frepeat-complex-command
Edit and re-evaluate last complex command, or ARGth from last.
A complex command is one which used the minibuffer.
The command is placed in the minibuffer as a Lisp form for editing.
The result is executed, repeating the command as changed.
If the command has been changed or is not the most recent previous command
it is added to the front of the command history.
You can use the minibuffer history commands \<minibuffer-local-map>\[next-history-element] and \[previous-history-element]
to get different commands to edit and resubmit.Ssimple.elc
Fgoto-line
Goto line LINE, counting from line 1 at beginning of BUFFER.Ssimple.elc
Fundo
Undo some previous changes.
Repeat this command to undo more changes.
A numeric argument serves as a repeat count.Ssimple.elc
Vpending-undo-list
Within a run of consecutive undo commands, list remaining to be undone.Ssimple.elc
Fundo-start
Set `pending-undo-list' to the front of the undo list.
The next call to `undo-more' will undo the most recently made change.Ssimple.elc
Fundo-more
Undo back N undo-boundaries beyond what was already undone recently.
Call `undo-start' to get ready to undo recent changes,
then call `undo-more' one or more times to undo them.Ssimple.elc
Fundo-all-changes
Keep undoing till the start of the undo list is reached.
Undoes all changes, even past a file save.  Especially useful when you've
saved the file at some point.Ssimple.elc
Fcall-with-transparent-undo
Apply FN to ARGS, and then undo all changes made by FN to the current
buffer.  The undo records are processed even if FN returns non-locally.
There is no trace of the changes made by FN in the buffer's undo history.

You can use this in a write-file-hooks function with continue-save-buffer
to make the contents of a disk file differ from its in-memory buffer.Ssimple.elc
Vuniversal-argument-map
Keymap used while processing \[universal-argument].Ssimple.elc
Vuniversal-argument-num-events
Number of argument-specifying events read by `universal-argument'.
`universal-argument-other-key' uses this to discard those events
from (this-command-keys), and reread only the final command.Ssimple.elc
Funiversal-argument
Begin a numeric argument for the following command.
Digits or minus sign following \[universal-argument] make up the numeric argument.
\[universal-argument] following the digits or minus sign ends the argument.
\[universal-argument] without digits or minus sign provides 4 as argument.
Repeating \[universal-argument] without digits or minus sign
 multiplies the argument by 4 each time.Ssimple.elc
Funiversal-argument-more
Ssimple.elc
Fnegative-argument
Begin a negative numeric argument for the next command.
\[universal-argument] following digits or minus sign ends the argument.Ssimple.elc
Fdigit-argument
Part of the numeric argument for the next command.
\[universal-argument] following digits or minus sign ends the argument.Ssimple.elc
Funiversal-argument-minus
Ssimple.elc
Funiversal-argument-other-key
Ssimple.elc
Fforward-to-indentation
Move forward COUNT lines and position at first nonblank character.Ssimple.elc
Fbackward-to-indentation
Move backward COUNT lines and position at first nonblank character.Ssimple.elc
Vkill-whole-line
*If non-nil, kill the whole line if point is at the beginning.
Otherwise, `kill-line' kills only up to the end of the line, but not
the terminating newline.

WARNING: This is a misnamed variable!  It should be called something
like `kill-whole-line-when-at-beginning'.  If you simply want
\[kill-line] to kill the entire current line, bind it to the function
`kill-entire-line'.  Ssimple.elc
Fkill-line-1
Ssimple.elc
Fkill-entire-line
Kill the entire line.
With prefix argument, kill that many lines from point.  Negative
arguments kill lines backward.

When calling from a program, nil means "no arg",
a number counts as a prefix arg.Ssimple.elc
Fkill-line
Kill the rest of the current line, or the entire line.
If no nonblanks there, kill thru newline.  If called interactively,
may kill the entire line when given no argument at the beginning of a
line; see `kill-whole-line'.  With prefix argument, kill that many
lines from point.  Negative arguments kill lines backward.

WARNING: This is a misnamed function!  It should be called something
like `kill-to-end-of-line'.  If you simply want to kill the entire
current line, use `kill-entire-line'.

When calling from a program, nil means "no arg",
a number counts as a prefix arg.Ssimple.elc
Fbackward-kill-line
Kill back to the beginning of the line.Ssimple.elc
Vkill-hooks
*Functions run when something is added to the XEmacs kill ring.
These functions are called with one argument, the string most recently
cut or copied.  You can use this to, for example, make the most recent
kill become the X Clipboard selection.Ssimple.elc
Vinterprogram-cut-function
Function to call to make a killed region available to other programs.

Most window systems provide some sort of facility for cutting and
pasting text between the windows of different programs.
This variable holds a function that Emacs calls whenever text
is put in the kill ring, to make the new kill available to other
programs.

The function takes one or two arguments.
The first argument, TEXT, is a string containing
the text which should be made available.
The second, PUSH, if non-nil means this is a "new" kill;
nil means appending to an "old" kill.

One reasonable choice is `own-clipboard' (the default).Ssimple.elc
Vinterprogram-paste-function
Function to call to get text cut from other programs.

Most window systems provide some sort of facility for cutting and
pasting text between the windows of different programs.
This variable holds a function that Emacs calls to obtain
text that other programs have provided for pasting.

The function should be called with no arguments.  If the function
returns nil, then no other program has provided such text, and the top
of the Emacs kill ring should be used.  If the function returns a
string, that string should be put in the kill ring as the latest kill.

Note that the function should return a string only if a program other
than Emacs has provided a string for pasting; if Emacs provided the
most recent string, the function should return nil.  If it is
difficult to tell whether Emacs or some other program provided the
current string, it is probably good enough to return nil if the string
is equal (according to `string=') to the last text Emacs provided.

Reasonable choices include `get-clipboard-foreign' (the default), and
functions calling `get-selection-foreign' (q.v.).Ssimple.elc
Vkill-ring
List of killed text sequences.
Since the kill ring is supposed to interact nicely with cut-and-paste
facilities offered by window systems, use of this variable should
interact nicely with `interprogram-cut-function' and
`interprogram-paste-function'.  The functions `kill-new',
`kill-append', and `current-kill' are supposed to implement this
interaction; you may want to use them instead of manipulating the kill
ring directly.Ssimple.elc
Vkill-ring-max
*Maximum length of kill ring before oldest elements are thrown away.Ssimple.elc
Vkill-ring-yank-pointer
The tail of the kill ring whose car is the last thing yanked.Ssimple.elc
Fkill-new
Make STRING the latest kill in the kill ring.
Set `kill-ring-yank-pointer' to point to it.
If `interprogram-cut-function' is non-nil, apply it to STRING.
Run `kill-hooks'.
Optional second argument REPLACE non-nil means that STRING will replace
the front of the kill ring, rather than being added to the list.Ssimple.elc
Fkill-append
Append STRING to the end of the latest kill in the kill ring.
If BEFORE-P is non-nil, prepend STRING to the kill.
Run `kill-hooks'.Ssimple.elc
Fcurrent-kill
Rotate the yanking point by N places, and then return that kill.
If N is zero, `interprogram-paste-function' is set, and calling it
returns a string, then that string is added to the front of the
kill ring and returned as the latest kill.
If optional arg DO-NOT-MOVE is non-nil, then don't actually move the
yanking point; just return the Nth kill forward.Ssimple.elc
Fkill-region
Kill between point and mark.
The text is deleted but saved in the kill ring.
The command \[yank] can retrieve it from there.
(If you want to kill and then yank immediately, use \[copy-region-as-kill].)

This is the primitive for programs to kill text (as opposed to deleting it).
Supply two arguments, character numbers indicating the stretch of text
 to be killed.
Any command that calls this function is a "kill command".
If the previous command was also a kill command,
the text killed this time appends to the text killed last time
to make one entry in the kill ring.Ssimple.elc
Fcopy-region-as-kill
Save the region as if killed, but don't kill it.
Run `kill-hooks'.Ssimple.elc
Fkill-ring-save
Save the region as if killed, but don't kill it.
This command is similar to `copy-region-as-kill', except that it gives
visual feedback indicating the extent of the region being copied.Ssimple.elc
Fappend-next-kill
Cause following command, if it kills, to append to previous kill.Ssimple.elc
Fyank-pop
Replace just-yanked stretch of killed text with a different stretch.
This command is allowed only immediately after a `yank' or a `yank-pop'.
At such a time, the region contains a stretch of reinserted
previously-killed text.  `yank-pop' deletes that text and inserts in its
place a different stretch of killed text.

With no argument, the previous kill is inserted.
With argument N, insert the Nth previous kill.
If N is negative, this is a more recent kill.

The sequence of kills wraps around, so that after the oldest one
comes the newest one.Ssimple.elc
Fyank
Reinsert the last stretch of killed text.
More precisely, reinsert the stretch of killed text most recently
killed OR yanked.  Put point at end, and set mark at beginning.
With just C-u as argument, same but put point at beginning (and mark at end).
With argument N, reinsert the Nth most recently killed stretch of killed
text.
See also the command \[yank-pop].Ssimple.elc
Frotate-yank-pointer
Rotate the yanking point in the kill ring.
With argument, rotate that many kills forward (or backward, if negative).Ssimple.elc
Finsert-buffer
Insert after point the contents of BUFFER.
Puts mark after the inserted text.
BUFFER may be a buffer or a buffer name.Ssimple.elc
Fappend-to-buffer
Append to specified buffer the text of the region.
It is inserted into that buffer before its point.

When calling from a program, give three arguments:
BUFFER (or buffer name), START and END.
START and END specify the portion of the current buffer to be copied.Ssimple.elc
Fprepend-to-buffer
Prepend to specified buffer the text of the region.
It is inserted into that buffer after its point.

When calling from a program, give three arguments:
BUFFER (or buffer name), START and END.
START and END specify the portion of the current buffer to be copied.Ssimple.elc
Fcopy-to-buffer
Copy to specified buffer the text of the region.
It is inserted into that buffer, replacing existing text there.

When calling from a program, give three arguments:
BUFFER (or buffer name), START and END.
START and END specify the portion of the current buffer to be copied.Ssimple.elc
Fmark
Return this buffer's mark value as integer, or nil if no mark.

If `zmacs-regions' is true, then this returns nil unless the region is
currently in the active (highlighted) state.  With an argument of t, this
returns the mark (if there is one) regardless of the active-region state.
You should *generally* not use the mark unless the region is active, if
the user has expressed a preference for the active-region model.

If you are using this in an editing command, you are most likely making
a mistake; see the documentation of `set-mark'.Ssimple.elc
Fset-mark
Set this buffer's mark to POS.  Don't use this function!
That is to say, don't use this function unless you want
the user to see that the mark has moved, and you want the previous
mark position to be lost.

Normally, when a new mark is set, the old one should go on the stack.
This is why most applications should use `push-mark', not `set-mark'.

Novice Emacs Lisp programmers often try to use the mark for the wrong
purposes.  The mark saves a location for the user's convenience.
Most editing commands should not alter the mark.
To remember a location for internal use in the Lisp program,
store it in a Lisp variable.  Example:

   (let ((start (point))) (forward-line 1) (delete-region start (point))).Ssimple.elc
Vmark-ring
The list of former marks of the current buffer, most recent first.
This variable is automatically buffer-local.Ssimple.elc
Vdont-record-current-mark
If set to t, the current mark value should not be recorded on the mark ring.
This is set by commands that manipulate the mark incidentally, to avoid
cluttering the mark ring unnecessarily.  Under most circumstances, you do
not need to set this directly; it is automatically reset each time
`push-mark' is called, according to `mark-ring-unrecorded-commands'.  This
variable is automatically buffer-local.Ssimple.elc
Vmark-ring-unrecorded-commands
*List of commands whose marks should not be recorded on the mark stack.
Many commands set the mark as part of their action.  Normally, all such
marks get recorded onto the mark stack.  However, this tends to clutter up
the mark stack unnecessarily.  You can control this by putting a command
onto this list.  Then, any marks set by the function will not be recorded.

The special value `shifted-motion-commands' causes marks set as a result
of selection using any shifted motion commands to not be recorded.

The value `yank' affects all yank-like commands, as well as just `yank'.Ssimple.elc
Vmark-ring-max
*Maximum size of mark ring.  Start discarding off end if gets this big.Ssimple.elc
Vglobal-mark-ring
The list of saved global marks, most recent first.Ssimple.elc
Vglobal-mark-ring-max
*Maximum size of global mark ring.  Start discarding off end if gets this big.Ssimple.elc
Fset-mark-command
Set mark at where point is, or jump to mark.
With no prefix argument, set mark, push old mark position on local mark
ring, and push mark on global mark ring.
With argument, jump to mark, and pop a new position for mark off the ring
(does not affect global mark ring).

The mark ring is a per-buffer stack of marks, most recent first.  Its
maximum length is controlled by `mark-ring-max'.  Generally, when new
marks are set, the current mark is pushed onto the stack.  You can pop
marks off the stack using \[universal-argument] \[set-mark-command].  The term "ring" is used because when
you pop a mark off the stack, the current mark value is pushed onto the
far end of the stack.  If this is confusing, just think of the mark ring
as a stack.

Novice Emacs Lisp programmers often try to use the mark for the wrong
purposes.  See the documentation of `set-mark' for more information.Ssimple.elc
Fpush-mark
Set mark at LOCATION (point, by default) and push old mark on mark ring.
If the last global mark pushed was not in the current buffer,
also push LOCATION on the global mark ring.
Display `Mark set' unless the optional second arg NOMSG is non-nil.
Activate mark if optional third arg ACTIVATE-REGION non-nil.

Novice Emacs Lisp programmers often try to use the mark for the wrong
purposes.  See the documentation of `set-mark' for more information.Ssimple.elc
Fpop-mark
Pop off mark ring into the buffer's actual mark.
Does not set point.  Does nothing if mark ring is empty.Ssimple.elc
Fexchange-point-and-mark
Put the mark where point is now, and point where the mark is now.
The mark is activated unless DONT-ACTIVATE-REGION is non-nil.Ssimple.elc
Fmark-something
internal function used by mark-sexp, mark-word, etc.Ssimple.elc
Fpop-global-mark
Pop off global mark ring and jump to the top location.Ssimple.elc
Vsignal-error-on-buffer-boundary
*If Non-nil, beep or signal an error when moving past buffer boundary.
The commands that honor this variable are

forward-char-command
backward-char-command
next-line
previous-line
scroll-up-command
scroll-down-commandSsimple.elc
Vnext-line-add-newlines
*If non-nil, `next-line' inserts newline when the point is at end of buffer.
This behavior used to be the default, but is now considered an unnecessary and
unwanted side-effect.Ssimple.elc
Vshifted-motion-keys-select-region
*If non-nil, shifted motion keys select text, like in MS Windows.

More specifically, if a keystroke that matches one of the key
specifications in `motion-keys-for-shifted-motion' is pressed along
with the Shift key, and the command invoked moves the cursor and
preserves the active region (see `zmacs-region-stays'), the
intervening text will be added to the active region.

When the region has been enabled or augmented as a result of a shifted
motion key, an unshifted motion key will normally deselect the region.
However, if `unshifted-motion-keys-deselect-region' is nil, the region
will remain active, augmented by the characters moved over by this
motion key.

This functionality is specifically interpreted in terms of keys, and
*NOT* in terms of particular commands, because that produces the most
intuitive behavior: `forward-char' will work with shifted motion
when invoked by `right' but not `C-f', and user-written motion commands
bound to motion keys will automatically work with shifted motion.Ssimple.elc
Vunshifted-motion-keys-deselect-region
*If non-nil, unshifted motion keys deselect a shifted-motion region.
This only occurs after a region has been selected or augmented using
shifted motion keys (not when using the traditional set-mark-then-move
method), and has no effect if `shifted-motion-keys-select-region' is
nil.Ssimple.elc
Vmotion-keys-for-shifted-motion
*List of keys considered motion keys for the purpose of shifted selection.
When one of these keys is pressed along with the Shift key, and the
command invoked moves the cursor and preserves the active region (see
`zmacs-region-stays'), the intervening text will be added to the active
region.  See `shifted-motion-keys-select-region' for more details.

Each entry should be a keysym or a list (MODIFIERS ... KEYSYM),
i.e. zero or more modifiers followed by a keysym.  When a keysym alone
is given, a keystroke consisting of that keysym, with or without any
modifiers, is considered a motion key.  When the list form is given,
only a keystroke with exactly those modifiers and no others (with the
exception of the Shift key) is considered a motion key.

NOTE: Currently, the keysym cannot be a non-alphabetic character key
such as the `=/+' key.  In any case, the shifted-motion paradigm does
not make much sense with those keys.  The keysym can, however, be an
alphabetic key without problem, and you can specify the key using
either a character or a symbol, uppercase or lowercase.Ssimple.elc
Fhandle-pre-motion-command-current-command-is-motion
Ssimple.elc
Fhandle-pre-motion-command
Ssimple.elc
Fhandle-post-motion-command
Ssimple.elc
Fforward-char-command
Move point right ARG characters (left if ARG negative) in BUFFER.
On attempt to pass end of buffer, stop and signal `end-of-buffer'.
On attempt to pass beginning of buffer, stop and signal `beginning-of-buffer'.
Error signaling is suppressed if `signal-error-on-buffer-boundary'
is nil.  If BUFFER is nil, the current buffer is assumed.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.Ssimple.elc
Fbackward-char-command
Move point left ARG characters (right if ARG negative) in BUFFER.
On attempt to pass end of buffer, stop and signal `end-of-buffer'.
On attempt to pass beginning of buffer, stop and signal `beginning-of-buffer'.
Error signaling is suppressed if `signal-error-on-buffer-boundary'
is nil.  If BUFFER is nil, the current buffer is assumed.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.Ssimple.elc
Fscroll-up-one
Scroll text of current window upward one line.
On attempt to scroll past end of buffer, `end-of-buffer' is signaled.
On attempt to scroll past beginning of buffer, `beginning-of-buffer' is
signaled.

If `signal-error-on-buffer-boundary' is nil, attempts to scroll past buffer
boundaries do not cause an error to be signaled.Ssimple.elc
Fscroll-up-command
Scroll current window upward N lines; or near full screen if N is nil.
A near full screen is `next-screen-context-lines' less than a full screen.
Negative N means scroll downward.
When calling from a program, supply a number as argument or nil.
On attempt to scroll past end of buffer, `end-of-buffer' is signaled.
On attempt to scroll past beginning of buffer, `beginning-of-buffer' is
signaled.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.

If `signal-error-on-buffer-boundary' is nil, attempts to scroll past buffer
boundaries do not cause an error to be signaled.Ssimple.elc
Fscroll-down-one
Scroll text of current window downward one line.
On attempt to scroll past end of buffer, `end-of-buffer' is signaled.
On attempt to scroll past beginning of buffer, `beginning-of-buffer' is
signaled.

If `signal-error-on-buffer-boundary' is nil, attempts to scroll past buffer
boundaries do not cause an error to be signaled.Ssimple.elc
Fscroll-down-command
Scroll current window downward N lines; or near full screen if N is nil.
A near full screen is `next-screen-context-lines' less than a full screen.
Negative N means scroll upward.
When calling from a program, supply a number as argument or nil.
On attempt to scroll past end of buffer, `end-of-buffer' is signaled.
On attempt to scroll past beginning of buffer, `beginning-of-buffer' is
signaled.

If `signal-error-on-buffer-boundary' is nil, attempts to scroll past buffer
boundaries do not cause an error to be signaled.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.Ssimple.elc
Fnext-line
Move cursor vertically down COUNT lines.
If there is no character in the target line exactly under the current column,
the cursor is positioned after the character in that line which spans this
column, or at the end of the line if it is not long enough.

If there is no line in the buffer after this one, behavior depends on the
value of `next-line-add-newlines'.  If non-nil, it inserts a newline character
to create a line, and moves the cursor to that line.  Otherwise it moves the
cursor to the end of the buffer.  If `signal-error-on-buffer-boundary' is
non-nil and you attempt to move past a buffer boundary, XEmacs will ring the
bell using `ding'.

The command \[set-goal-column] can be used to create
a semipermanent goal column to which this command always moves.
Then it does not try to move vertically.  This goal column is stored
in `goal-column', which is nil when there is none.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.

If you are thinking of using this in a Lisp program, consider
using `forward-line' instead.  It is usually easier to use
and more reliable (no dependence on goal column, etc.).Ssimple.elc
Fprevious-line
Move cursor vertically up COUNT lines.
If there is no character in the target line exactly over the current column,
the cursor is positioned after the character in that line which spans this
column, or at the end of the line if it is not long enough.

The command \[set-goal-column] can be used to create
a semipermanent goal column to which this command always moves.
Then it does not try to move vertically.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.

If `signal-error-on-buffer-boundary' is non-nil and you attempt to move past
a buffer boundary, XEmacs will ring the bell using `ding'.

If you are thinking of using this in a Lisp program, consider using
`forward-line' with a negative argument instead.  It is usually easier
to use and more reliable (no dependence on goal column, etc.).Ssimple.elc
Vblock-movement-size
*Number of lines that "block movement" commands (\[forward-block-of-lines], \[backward-block-of-lines]) move by.Ssimple.elc
Fbackward-block-of-lines
Move backward by one "block" of lines.
The number of lines that make up a block is controlled by
`block-movement-size', which defaults to 6.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.Ssimple.elc
Fforward-block-of-lines
Move forward by one "block" of lines.
The number of lines that make up a block is controlled by
`block-movement-size', which defaults to 6.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.Ssimple.elc
Vtrack-eol
*Non-nil means vertical motion starting at end of line keeps to ends of lines.
This means moving to the end of each line moved onto.
The beginning of a blank line does not count as the end of a line.Ssimple.elc
Vgoal-column
*Semipermanent goal column for vertical motion, as set by \[set-goal-column], or nil.Ssimple.elc
Vtemporary-goal-column
Current goal column for vertical motion.
It is the column where point was
at the start of current run of vertical motion commands.
When the `track-eol' feature is doing its job, the value is 9999.Ssimple.elc
Vline-move-ignore-invisible
*Non-nil means \[next-line] and \[previous-line] ignore invisible lines.
Use with care, as it slows down movement significantly.  Outline mode sets this.Ssimple.elc
Fline-move
Ssimple.elc
Fset-goal-column
Set the current horizontal position as a goal for \[next-line] and \[previous-line].
Those commands will move to this position in the line moved to
rather than trying to keep the same horizontal position.
With a non-nil argument, clears out the goal column
so that \[next-line] and \[previous-line] resume vertical motion.
The goal column is stored in the variable `goal-column'.Ssimple.elc
Fscroll-other-window-down
Scroll the "other window" down.
For more details, see the documentation for `scroll-other-window'.Ssimple.elc
Fbeginning-of-buffer-other-window
Move point to the beginning of the buffer in the other window.
Leave mark at previous position.
With arg N, put point N/10 of the way from the true beginning.Ssimple.elc
Fend-of-buffer-other-window
Move point to the end of the buffer in the other window.
Leave mark at previous position.
With arg N, put point N/10 of the way from the true end.Ssimple.elc
Ftranspose-chars
Interchange characters around point, moving forward one character.
With prefix arg ARG, effect is to take character before point
and drag it forward past ARG other characters (backward if ARG negative).
If no argument and at end of line, the previous two chars are exchanged.Ssimple.elc
Ftranspose-preceding-chars
Interchange characters before point.
With prefix arg ARG, effect is to take character before point
and drag it forward past ARG other characters (backward if ARG negative).
If no argument and not at start of line, the previous two chars are exchanged.Ssimple.elc
Ftranspose-words
Interchange words around point, leaving point at end of them.
With prefix arg ARG, effect is to take word before or around point
and drag it forward past ARG other words (backward if ARG negative).
If ARG is zero, the words around or after point and around or after mark
are interchanged.Ssimple.elc
Ftranspose-sexps
Like \[transpose-words] but applies to sexps.
Does not work on a sexp that point is in the middle of
if it is a list or string.Ssimple.elc
FSimple-forward-line-creating-newline
Ssimple.elc
FSimple-transpose-lines-mover
Ssimple.elc
Ftranspose-lines
Exchange current line and previous line, leaving point after both.
With argument ARG, takes previous line and moves it past ARG lines.
With argument 0, interchanges line point is in with line mark is in.Ssimple.elc
Ftranspose-line-up
Move current line one line up, leaving point at beginning of that line.
With argument ARG, move it ARG lines up.  This can be run repeatedly
to move the current line up a number of lines.

If the region is active, move the region up one line (or ARG lines,
if specified).  The region will not be selected afterwards, but this
command can still be run repeatedly to move the region up a number
of lines.Ssimple.elc
Ftranspose-line-down
Move current line one line down, leaving point at beginning of that line.
With argument ARG, move it ARG lines down.  This can be run repeatedly
to move the current line down a number of lines.

If the region is active, move the region down one line (or ARG lines,
if specified).  The region will not be selected afterwards, but this
command can still be run repeatedly to move the region down a number
of lines.Ssimple.elc
Ftranspose-subr
Ssimple.elc
Fprefix-region
Add a prefix string to each line between mark and point.Ssimple.elc
Fbackward-word
Move point backward COUNT words (forward if COUNT is negative).
Normally t is returned, but if an edge of the buffer is reached,
point is left there and nil is returned.

COUNT defaults to 1, and BUFFER defaults to the current buffer.

The characters that are moved over may be added to the current selection
(i.e. active region) if the Shift key is held down, a motion key is used
to invoke this command, and `shifted-motion-keys-select-region' is t; see
the documentation for this variable for more details.Ssimple.elc
Fmark-word
Mark the text from point until encountering the end of a word.
With optional argument COUNT, mark COUNT words.Ssimple.elc
Vkill-word-into-kill-ring
*Non-nil means `kill-word' saves word killed into kill ring.
(Normally, this also affects the clipboard.)
Nil means word is just deleted, without being remembered.
This also applies to `backward-kill-word' and `backward-or-forward-kill-word'.Ssimple.elc
Fkill-word
Kill characters forward until encountering the end of a word.
With optional argument COUNT, do this that many times.Ssimple.elc
Fbackward-kill-word
Kill characters backward until encountering the end of a word.
With argument, do this that many times.Ssimple.elc
Fcurrent-word
Return the word point is on (or a nearby word) as a string.
If optional arg STRICT is non-nil, return nil unless point is within
or adjacent to a word.
If point is not between two word-constituent characters, but immediately
follows one, move back first.
Otherwise, if point precedes a word constituent, move forward first.
Otherwise, move backwards until a word constituent is found and get that word;
if you a newlines is reached first, move forward instead.Ssimple.elc
Vfill-prefix
*String for filling to insert at front of new line, or nil for none.
Setting this variable automatically makes it local to the current buffer.Ssimple.elc
Vauto-fill-inhibit-regexp
*Regexp to match lines which should not be auto-filled.Ssimple.elc
Vcomment-line-break-function
*Mode-specific function which line breaks and continues a comment.

This function is only called during auto-filling of a comment section.
The function should take a single optional argument which is a flag
indicating whether soft newlines should be inserted.Ssimple.elc
Fdo-auto-fill
Ssimple.elc
Vnormal-auto-fill-function
The function to use for `auto-fill-function' if Auto Fill mode is turned on.
Some major modes set this.Ssimple.elc
Fauto-fill-mode
Toggle auto-fill mode.
With arg, turn auto-fill mode on if and only if arg is positive.
In Auto-Fill mode, inserting a space at a column beyond `current-fill-column'
automatically breaks the line at a previous space.

The value of `normal-auto-fill-function' specifies the function to use
for `auto-fill-function' when turning Auto Fill mode on.Ssimple.elc
Fauto-fill-function
Automatically break line at a previous space, in insertion of text.Ssimple.elc
Fturn-on-auto-fill
Unconditionally turn on Auto Fill mode.Ssimple.elc
Fturn-off-auto-fill
Unconditionally turn off Auto Fill mode.Ssimple.elc
Fset-fill-column
Set `fill-column' to specified argument.
Just \[universal-argument] as argument means to use the current column
The variable `fill-column' has a separate value for each buffer.Ssimple.elc
Fset-selective-display
Set `selective-display' to ARG; clear it if no arg.
When the value of `selective-display' is a number > 0,
lines whose indentation is >= that value are not displayed.
The variable `selective-display' has a separate value for each buffer.Ssimple.elc
Fnuke-selective-display
Ensure that the buffer is not in selective-display mode.
If `selective-display' is t, then restore the buffer text to its original
state before disabling selective display.Ssimple.elc
Voverwrite-mode-textual
The string displayed in the mode line when in overwrite mode.Ssimple.elc
Voverwrite-mode-binary
The string displayed in the mode line when in binary overwrite mode.Ssimple.elc
Foverwrite-mode
Toggle overwrite mode.
With arg, turn overwrite mode on iff arg is positive.
In overwrite mode, printing characters typed in replace existing text
on a one-for-one basis, rather than pushing it to the right.  At the
end of a line, such characters extend the line.  Before a tab,
such characters insert until the tab is filled in.
\[quoted-insert] still inserts characters in overwrite mode; this
is supposed to make it easier to insert characters when necessary.Ssimple.elc
Fbinary-overwrite-mode
Toggle binary overwrite mode.
With arg, turn binary overwrite mode on iff arg is positive.
In binary overwrite mode, printing characters typed in replace
existing text.  Newlines are not treated specially, so typing at the
end of a line joins the line to the next, with the typed character
between them.  Typing before a tab character simply replaces the tab
with the character typed.
\[quoted-insert] replaces the text at the cursor, just as ordinary
typing characters do.

Note that binary overwrite mode is not its own minor mode; it is a
specialization of overwrite-mode, entered by setting the
`overwrite-mode' variable to `overwrite-mode-binary'.Ssimple.elc
Vline-number-mode
*Non-nil means display line number in modeline.Ssimple.elc
Fline-number-mode
Toggle Line Number mode.
With arg, enable Line Number mode if arg is positive, else disable.
When Line Number mode is enabled, the line number appears
in the mode line.Ssimple.elc
Vcolumn-number-mode
*Non-nil means display column number in mode line.Ssimple.elc
Fcolumn-number-mode
Toggle Column Number mode.
With arg, enable Column Number mode if arg is positive, else disable.
When Column Number mode is enabled, the column number appears
in the mode line.Ssimple.elc
Vblink-matching-paren
*Non-nil means show matching open-paren when close-paren is inserted.Ssimple.elc
Vblink-matching-paren-on-screen
*Non-nil means show matching open-paren when it is on screen.
nil means don't show it (but the open-paren can still be shown
when it is off screen.Ssimple.elc
Vblink-matching-paren-distance
*If non-nil, is maximum distance to search for matching open-paren.Ssimple.elc
Vblink-matching-delay
*The number of seconds that `blink-matching-open' will delay at a match.Ssimple.elc
Vblink-matching-paren-dont-ignore-comments
*Non-nil means `blink-matching-paren' should not ignore comments.Ssimple.elc
Fblink-matching-open
Move cursor momentarily to the beginning of the sexp before point.Ssimple.elc
Vmail-user-agent
*Your preference for a mail composition package.
Various Emacs Lisp packages (e.g. Reporter) require you to compose an
outgoing email message.  This variable lets you specify which
mail-sending package you prefer.

Valid values may include:
 
  `vm-user-agent'	-- use Kyle Jones' VM, as documented in the `(vm)' 
                           Info node. Compatible with `sendmail-user-agent' 
                           and can handle attachments and non-ASCII content,
                           which the former can't.
  `sendmail-user-agent' -- use the default, bare-bones, Emacs Mail
                           package.  See Info node `(xemacs)Sending Mail'.
  `mh-e-user-agent'     -- use the Emacs interface to the MH mail system.
                           See Info node `(mh-e)'.
  `message-user-agent'  -- use the Gnus Message package.
                           See Info node `(message)'.
  `gnus-user-agent'     -- like `message-user-agent', but with Gnus
                           paraphernalia, particularly the Gcc: header for
                           archiving.

If you examine the value of this variable before setting it or composing a
mail, it will have another value, `xemacs-default-mail-user-agent'--this is to
allow XEmacs to suggest that you use another email client instead of
`sendmail-user-agent'. The latter, while part of the base XEmacs Lisp code,
and very lightweight, doesn't support MIME, a considerable disadvantage
today.

Additional valid symbols may be available; check with the author of
your package for details.  The function should return non-nil if it
succeeds.

See also `read-mail-command' concerning reading mail.Ssimple.elc
Fdefine-mail-user-agent
Define a symbol to identify a mail-sending package for `mail-user-agent'.

SYMBOL can be any Lisp symbol.  Its function definition and/or
value as a variable do not matter for this usage; we use only certain
properties on its property list, to encode the rest of the arguments.

COMPOSEFUNC is program callable function that composes an outgoing
mail message buffer.  This function should set up the basics of the
buffer without requiring user interaction.  It should populate the
standard mail headers, leaving the `to:' and `subject:' headers blank
by default.

COMPOSEFUNC should accept several optional arguments--the same
arguments that `compose-mail' takes.  See that function's documentation.

SENDFUNC is the command a user would run to send the message.

Optional ABORTFUNC is the command a user would run to abort the
message.  For mail packages that don't have a separate abort function,
this can be `kill-buffer' (the equivalent of omitting this argument).

Optional HOOKVAR is a hook variable that gets run before the message
is actually sent.  Callers that use the `mail-user-agent' may
install a hook function temporarily on this hook variable.
If HOOKVAR is nil, `mail-send-hook' is used.

The properties used on SYMBOL are `composefunc', `sendfunc',
`abortfunc', and `hookvar'.Ssimple.elc
Vxemacs-default-composefunc-dont-nag
Disable the `xemacs-default-composefunc' nagging; for bug reports.Ssimple.elc
Fxemacs-default-composefunc
Warn that the default mail-reading package is heinously underfeatured;
compose a mail using it, all the same.  Ssimple.elc
Fxemacs-default-sendfunc
Set `mail-user-agent' to `sendmail-user-agent'; call the send function
associated with that package, passing it the supplied arguments. Ssimple.elc
Frfc822-goto-eoh
Ssimple.elc
Fsendmail-user-agent-compose
Ssimple.elc
Fcompose-mail
Start composing a mail message to send.
This uses the user's chosen mail composition package
as selected with the variable `mail-user-agent'.
The optional arguments TO and SUBJECT specify recipients
and the initial Subject field, respectively.

OTHER-HEADERS is an alist specifying additional
header fields.  Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

CONTINUE, if non-nil, says to continue editing a message already
being composed.

SWITCH-FUNCTION, if non-nil, is a function to use to
switch to and display the buffer used for mail composition.

YANK-ACTION, if non-nil, is an action to perform, if and when necessary,
to insert the raw text of the message being replied to.
It has the form (FUNCTION . ARGS).  The user agent will apply
FUNCTION to ARGS, to insert the raw text of the original message.
(The user agent will also run `mail-citation-hook', *after* the
original text has been inserted in this way.)

SEND-ACTIONS is a list of actions to call when the message is sent.
Each action has the form (FUNCTION . ARGS).Ssimple.elc
Fcompose-mail-other-window
Like \[compose-mail], but edit the outgoing message in another window.Ssimple.elc
Fcompose-mail-other-frame
Like \[compose-mail], but edit the outgoing message in another frame.Ssimple.elc
Vset-variable-value-history
History of values entered with `set-variable'.Ssimple.elc
Fset-variable
Set VARIABLE to VALUE.  VALUE is a Lisp object.
When using this interactively, enter a Lisp object for VALUE.
If you want VALUE to be a string, you must surround it with doublequotes.
VALUE is used literally, not evaluated.

If VARIABLE is a specifier, VALUE is added to it as an instantiator in
the 'global locale with nil tag set (see `set-specifier').

If VARIABLE has a `variable-interactive' property, that is used as if
it were the arg to `interactive' (which see) to interactively read VALUE.

If VARIABLE has been defined with `defcustom', then the type information
in the definition is used to check that VALUE is valid.Ssimple.elc
Vclone-buffer-hook
Normal hook to run in the new buffer at the end of `clone-buffer'.Ssimple.elc
Fclone-process
Create a twin copy of PROCESS.
If NEWNAME is nil, it defaults to PROCESS' name;
NEWNAME is modified by adding or incrementing <N> at the end as necessary.
If PROCESS is associated with a buffer, the new process will be associated
  with the current buffer instead.
Returns nil if PROCESS has already terminated.Ssimple.elc
Fclone-buffer
Create a twin copy of the current buffer.
If NEWNAME is nil, it defaults to the current buffer's name;
NEWNAME is modified by adding or incrementing <N> at the end as necessary.

If DISPLAY-FLAG is non-nil, the new buffer is shown with `pop-to-buffer'.
This runs the normal hook `clone-buffer-hook' in the new buffer
after it has been set up properly in other respects.Ssimple.elc
Fclone-indirect-buffer
Create an indirect buffer that is a twin copy of the current buffer.

Give the indirect buffer name NEWNAME.  Interactively, read NEW-NAME
from the minibuffer when invoked with a prefix arg.  If NEWNAME is nil
or if not called with a prefix arg, NEWNAME defaults to the current
buffer's name.  The name is modified by adding a `<N>' suffix to it
or by incrementing the N in an existing suffix.

DISPLAY-FLAG non-nil means show the new buffer with `pop-to-buffer'.
This is always done when called interactively.

Optional last arg NORECORD non-nil means do not put this buffer at the
front of the list of recently selected ones.Ssimple.elc
Fclone-indirect-buffer-other-window
Create an indirect buffer that is a twin copy of BUFFER.
Select the new buffer in another window.
Optional second arg NORECORD non-nil means do not put this buffer at
the front of the list of recently selected ones.Ssimple.elc
Fcapitalize-region-or-word
Capitalize the selected region or the following word (or ARG words).Ssimple.elc
Fupcase-region-or-word
Upcase the selected region or the following word (or ARG words).Ssimple.elc
Fdowncase-region-or-word
Downcase the selected region or the following word (or ARG words).Ssimple.elc
Fcapitalize-string-as-title
Capitalize the words in the string, except for small words (as in titles).
The words not capitalized are specified in `uncapitalized-title-words'.Ssimple.elc
Fcapitalize-region-as-title
Capitalize the words in the region, except for small words (as in titles).
The words not capitalized are specified in `uncapitalized-title-words'.Ssimple.elc
Factivate-region
Activate the region, if `zmacs-regions' is true.
Setting `zmacs-regions' to true causes LISPM-style active regions to be used.
This function has no effect if `zmacs-regions' is false.Ssimple.elc
Fregion-exists-p
Return t if the region exists.
If active regions are in use (i.e. `zmacs-regions' is true), this means that
 the region is active.  Otherwise, this means that the user has pushed
 a mark in this buffer at some point in the past.
The functions `region-beginning' and `region-end' can be used to find the
 limits of the region.

You should use this, *NOT* `region-active-p', in a menu item
specification that you want grayed out when the region is not active:

  [ ... ... :active (region-exists-p)]

This correctly caters to the user's setting of `zmacs-regions'.Ssimple.elc
Fregion-active-p
Return non-nil if the region is active in the current buffer.
If `zmacs-regions' is true, this is equivalent to `region-exists-p'.
Otherwise, this function always returns false.

You should generally *NOT* use this in a menu item specification that you
want grayed out when the region is not active.  Instead, use this:

  [ ... ... :active (region-exists-p)]

Which correctly caters to the user's setting of `zmacs-regions'.Ssimple.elc
Vzmacs-activate-region-hook
Function or functions called when the region becomes active;
see the variable `zmacs-regions'.Ssimple.elc
Vzmacs-deactivate-region-hook
Function or functions called when the region becomes inactive;
see the variable `zmacs-regions'.Ssimple.elc
Vzmacs-update-region-hook
Function or functions called when the active region changes.
This is called after each command that sets `zmacs-region-stays' to t.
See the variable `zmacs-regions'.Ssimple.elc
Vzmacs-region-extent
The extent of the zmacs region; don't use this.Ssimple.elc
Vzmacs-region-rectangular-p
Whether the zmacs region is a rectangle; don't use this.Ssimple.elc
Fzmacs-make-extent-for-region
Ssimple.elc
Fzmacs-region-buffer
Return the buffer containing the zmacs region, or nil.Ssimple.elc
Fzmacs-activate-region
Make the region between `point' and `mark' be active (highlighted),
if `zmacs-regions' is true.  Only a very small number of commands
should ever do this.  Calling this function will call the hook
`zmacs-activate-region-hook', if the region was previously inactive.
Calling this function ensures that the region stays active after the
current command terminates, even if `zmacs-region-stays' is not set.
Returns t if the region was activated (i.e. if `zmacs-regions' if t).Ssimple.elc
Fzmacs-deactivate-region
Make the region between `point' and `mark' no longer be active,
if `zmacs-regions' is true.  You shouldn't need to call this; the
command loop calls it when appropriate.  Calling this function will
call the hook `zmacs-deactivate-region-hook', if the region was
previously active.  Returns t if the region had been active, nil
otherwise.Ssimple.elc
Fzmacs-update-region
Update the highlighted region between `point' and `mark'.
You shouldn't need to call this; the command loop calls it
when appropriate.  Calling this function will call the hook
`zmacs-update-region-hook', if the region is active.Ssimple.elc
Vmessage-stack
An alist of label/string pairs representing active echo-area messages.
The first element in the list is currently displayed in the echo area.
Do not modify this directly--use the `message' or
`display-message'/`clear-message' functions.Ssimple.elc
Vremove-message-hook
A function or list of functions to be called when a message is removed
from the echo area at the bottom of the frame.  The label of the removed
message is passed as the first argument, and the text of the message
as the second argument.Ssimple.elc
Vlog-message-max-size
Maximum size of the " *Message-Log*" buffer.  See `log-message'.Ssimple.elc
Vlog-message-ignore-regexps
List of regular expressions matching messages which shouldn't be logged.
See `log-message'.

Adding entries to this list slows down messaging significantly.  Wherever
possible, messages which might need to be ignored should be labeled with
'progress, 'prompt, or 'no-log, so they can be filtered by
log-message-ignore-labels.Ssimple.elc
Vlog-message-ignore-labels
List of symbols indicating labels of messages which shouldn't be logged.
See `display-message' for some common labels.  See also `log-message'.Ssimple.elc
Vredisplay-echo-area-function
The function to call to display echo area buffer.Ssimple.elc
Vundisplay-echo-area-function
The function to call to undisplay echo area buffer.
WARNING: any problem with your function is likely to result in an
uninterruptible infinite loop.  Use of custom functions is therefore not
recommended.Ssimple.elc
Vundisplay-echo-area-resize-window-allowed
INTERNAL USE ONLY.
Guards against `undisplay-echo-area-resize-window' infloops.
Touch this at your own risk.Ssimple.elc
Fundisplay-echo-area-resize-window
Resize idle echo area window to `resize-minibuffer-idle-height'.
If either `resize-minibuffer-idle-height' or `resize-minibuffer-mode' is nil,
does nothing.  If `resize-minibuffer-window-exactly' is non-nil, always resize
to this height exactly, otherwise if current height is no larger than this,
leave it as is.Ssimple.elc
Fshow-message-log
Show the " *Message-Log*" buffer, which contains old messages and errors.Ssimple.elc
Vlog-message-filter-function
Value must be a function of two arguments: a symbol (label) and
a string (message).  It should return non-nil to indicate a message
should be logged.  Possible values include 'log-message-filter and
'log-message-filter-errors-only.Ssimple.elc
Flog-message-filter
Default value of `log-message-filter-function'.
Messages whose text matches one of the `log-message-ignore-regexps'
or whose label appears in `log-message-ignore-labels' are not saved.Ssimple.elc
Flog-message-filter-errors-only
For use as the `log-message-filter-function'.  Only logs error messages.Ssimple.elc
Flog-message
Stuff a copy of the message into the " *Message-Log*" buffer,
if it satisfies the `log-message-filter-function'.

For use on `remove-message-hook'.Ssimple.elc
Fmessage-displayed-p
Return a non-nil value if a message is presently displayed in the
minibuffer's echo area.  If optional argument RETURN-STRING is non-nil,
return a string containing the message, otherwise just return t.Ssimple.elc
Fclear-message
Remove any message with the given LABEL from the message-stack,
erasing it from the echo area if it's currently displayed there.
If a message remains at the head of the message-stack and NO-RESTORE
is nil, it will be displayed.  The string which remains in the echo
area will be returned, or nil if the message-stack is now empty.
If LABEL is nil, the entire message-stack is cleared.
STDOUT-P is ignored, except for output to stream devices.  For streams,
STDOUT-P non-nil directs output to stdout, otherwise to stderr.  (This is
used only in case of restoring an earlier message from the stack.)

Unless you need the return value or you need to specify a label,
you should just use (message nil).Ssimple.elc
Fremove-message
Ssimple.elc
Fappend-message
Add MESSAGE to the message-stack, or append it to the existing text.
LABEL is the class of the message.  If it is the same as that of the top of
the message stack, MESSAGE is appended to the existing message, otherwise
it is pushed on the stack.
FRAME determines the minibuffer window to send the message to.
STDOUT-P is ignored, except for output to stream devices.  For streams,
STDOUT-P non-nil directs output to stdout, otherwise to stderr.Ssimple.elc
Fraw-append-message
Ssimple.elc
Fdisplay-message
Print a one-line message at the bottom of the frame.  First argument
LABEL is an identifier for this message.  MESSAGE is the string to display.
Use `clear-message' to remove a labelled message.
STDOUT-P is ignored, except for output to stream devices.  For streams,
STDOUT-P non-nil directs output to stdout, otherwise to stderr.

Here are some standard labels (those marked with `*' are not logged
by default--see the `log-message-ignore-labels' variable):
    message       default label used by the `message' function
    error         default label used for reporting errors
  * progress      progress indicators like "Converting... 45%"
  * prompt        prompt-like messages like "I-search: foo"
  * command       helper command messages like "Mark set"
  * no-log        messages that should never be loggedSsimple.elc
Fcurrent-message
Return the current message in the echo area, or nil.
The FRAME argument is currently unused.Ssimple.elc
Fcurrent-message-label
Ssimple.elc
Fmessage
Print a one-line message at the bottom of the frame.
The arguments are the same as to `format'.

If the only argument is nil, clear any existing message; let the
minibuffer contents show.Ssimple.elc
Flmessage
Print a one-line message at the bottom of the frame.
First argument LABEL is an identifier for this message.  The rest of the
arguments are the same as to `format'.

See `display-message' for a list of standard labels.Ssimple.elc
Vlog-warning-minimum-level
Minimum level of warnings that should be logged.
The warnings in levels below this are completely ignored, as if they never
happened.

The recognized warning levels, in decreasing order of priority, are
'emergency, 'critical, 'error, 'warning, 'alert, 'notice, 'info, and
'debug.

See also `display-warning-minimum-level'.

You can also control which warnings are displayed on a class-by-class
basis.  See `display-warning-suppressed-classes' and
`log-warning-suppressed-classes'.

For a description of the meaning of the levels, see `display-warning'.Ssimple.elc
Vdisplay-warning-minimum-level
Minimum level of warnings that cause the warnings buffer to be displayed.
Warnings at this level or higher will force the *Warnings* buffer, in which
the warnings are logged, to be displayed.  The warnings in levels below
this, but at least as high as `log-warning-suppressed-classes', will be
shown in the minibuffer.

The recognized warning levels, in decreasing order of priority, are
'emergency, 'critical, 'error, 'warning, 'alert, 'notice, 'info, and
'debug.

See also `log-warning-minimum-level'.

You can also control which warnings are displayed on a class-by-class
basis.  See `display-warning-suppressed-classes' and
`log-warning-suppressed-classes'.

For a description of the meaning of the levels, see `display-warning'.Ssimple.elc
Vlog-warning-suppressed-classes
List of classes of warnings that shouldn't be logged or displayed.
If any of the CLASS symbols associated with a warning is the same as
any of the symbols listed here, the warning will be completely ignored,
as it they never happened.

NOTE: In most circumstances, you should *not* set this variable.
Set `display-warning-suppressed-classes' instead.  That way the suppressed
warnings are not displayed but are still unobtrusively logged.

See also `log-warning-minimum-level' and `display-warning-minimum-level'.Ssimple.elc
Vdisplay-warning-suppressed-classes
List of classes of warnings that shouldn't be displayed.
If any of the CLASS symbols associated with a warning is the same as
any of the symbols listed here, the warning will not be displayed.
The warning will still logged in the *Warnings* buffer (unless also
contained in `log-warning-suppressed-classes'), but the buffer will
not be automatically popped up.

See also `log-warning-minimum-level' and `display-warning-minimum-level'.Ssimple.elc
Vwarning-count
Count of the number of warning messages displayed so far.Ssimple.elc
Fwarning-level-p
Non-nil if LEVEL specifies a warning level.Ssimple.elc
Fwarning-level-<
Non-nil if warning level LEVEL1 is lower than LEVEL2.Ssimple.elc
Fafter-init-display-warnings
Display warnings deferred till after the init file is run.
Warnings that occur before then are deferred so that warning
suppression in the .emacs file will be honored.Ssimple.elc
Fdisplay-warning
Display a warning message.

[This is the most basic entry point for displaying a warning.  In practice,
`lwarn' or `warn' are probably more convenient for most usages.]

CLASS should be a symbol describing what sort of warning this is, such as
`resource' or `key-mapping' -- this refers, more or less, to the module in
which the warning is generated and serves to group warnings together with
similar semantics.  A list of such symbols is also accepted.

Optional argument LEVEL can be used to specify a priority for the warning,
other than default priority `warning'.  The currently defined levels are,
from highest to lowest:

Level        Meaning                                                        
-----------------------------------------------------------------------------
emergency    A fatal or near-fatal error.  XEmacs is likely to crash.

critical     A serious, nonrecoverable problem has occurred -- e.g., the
             loss of a major subsystem, such as the crash of the X server
	     when XEmacs is connected to the server.

error        A warning about a problematic condition that should be fixed,
             and XEmacs cannot work around it -- it causes a failure of an
	     operation. (In most circumstances, consider just signalling
             an error). However, there is no permanent damage and the
             situation is ultimately recoverable.

warning      A warning about a problematic condition that should be fixed,
             but XEmacs can work around it.

[By default, warnings above here, as well as being logged, cause the
*Warnings* buffer to be forcibly displayed, so that the warning (and
previous warnings, since often a whole series of warnings are issued at
once) can be examined in detail.  Also, the annoying presence of the
*Warnings* buffer will encourage people to go out and fix the
problem. Warnings below here are displayed in the minibuffer as well as
logged in the *Warnings* buffer. but the *Warnings* buffer will not be
forcibly shown, as these represent conditions the user is not expected to
fix.]

alert        A warning about a problematic condition that can't easily be
             fixed (often having to do with the external environment), and
             causes a failure.  We don't force the *Warnings* buffer to be
	     displayed because the purpose of doing that is to force the
             user to fix the problem so that the buffer no longer appears.
             When the problem is outside the user's control, forcing the
             buffer is pointless and annoying.

notice       A warning about a problematic condition that can't easily be
             fixed (often having to do with the external environment),
             but XEmacs can work around it.

info         Random info about something new or unexpected that was noticed;
             does not generally indicate a problem.

[By default, warnings below here are ignored entirely.  All warnings above
here are logged in the *Warnings* buffer.]

debug        A debugging notice; normally, not seen at all.

NOTE: `specifier-instance' outputs warnings at level `debug' when errors occur
in the process of trying to instantiate a particular instantiator.  If you
want to see these, change `log-warning-minimum-level'.

There are two sets of variables.  One controls the lower level (see the
above diagram) -- i.e. ignored entirely.  One controls the upper level --
whether the *Warnings* buffer is forcibly displayed.  In particular:

`display-warning-minimum-level' sets the upper level (see above), and
`log-warning-minimum-level' the lower level.

Individual classes can be suppressed. `log-warning-suppressed-classes'
specifies a list of classes where warnings on those classes will be treated
as if their level is below `log-warning-minimum-level' (i.e. they will be
ignored completely), regardless of their actual level.  Similarly,
`display-warning-suppressed-classes' specifies a list of classes where
warnings on those classes will be treated as if their level is below
`display-warning-minimum-level', but above `log-warning-minimum-level' so
long as they're not listed in that variable as well.Ssimple.elc
Fwarn
Display a formatted warning message at default class and level.
The message is constructed by passing all args to `format'.  The message
is placed in the *Warnings* buffer, which will be popped up at the next
redisplay.  The class of the warning is `general'; the level is `warning'.

See `display-warning' for more info.Ssimple.elc
Flwarn
Display a formatted warning message at specified class and level.
The message is constructed by passing all args to `format'.  The message
is placed in the *Warnings* buffer, which will be popped up at the next
redisplay.

See `display-warning' for more info.Ssimple.elc
Fdisplay-warning-buffer
Make the buffer that contains the warnings be visible.
The C code calls this periodically, right before redisplay.Ssimple.elc
Femacs-name
Return the printable name of this instance of Emacs.Ssimple.elc
Fdebug-print
Send a string to the debugging output.
If the first argument is a string, it is considered to be a format
specifier if there are sufficient numbers of other args, and the string is
formatted using (apply #'format args).  Otherwise, each argument is printed
individually in a numbered list.Ssimple.elc
Fdebug-backtrace
Send a backtrace to the debugging output.Snewcomment.elc
Vcomment-use-syntax
Non-nil if syntax-tables can be used instead of regexps.
Can also be `undecided' which means that a somewhat expensive test will
be used to try to determine whether syntax-tables should be trusted
to understand comments or not in the given buffer.
Major modes should set this variable.Snewcomment.elc
Vcomment-fill-column
Column to use for `comment-indent'.  If nil, use `fill-column' instead.Snewcomment.elc
Vcomment-column
*Column to indent right-margin comments to.
Each mode establishes a different default value for this variable; you
can set the value for a particular mode using that mode's hook.
Comments might be indented to a value smaller than this in order
not to go beyond `comment-fill-column'.Snewcomment.elc
Vcomment-start
*String to insert to start a new comment, or nil if no comment syntax.Snewcomment.elc
Vcomment-start-skip
*Regexp to match the start of a comment plus everything up to its body.
If there are any \(...\) pairs, the comment delimiter text is held to begin
at the place matched by the close of the first pair.Snewcomment.elc
Vcomment-end-skip
Regexp to match the end of a comment plus everything up to its body.Snewcomment.elc
Vcomment-end
*String to insert to end a new comment.
Should be an empty string if comments are terminated by end-of-line.Snewcomment.elc
Vcomment-indent-function
Function to compute desired indentation for a comment.
This function is called with no args with point at the beginning of
the comment's starting delimiter and should return either the desired
column indentation or nil.
If nil is returned, indentation is delegated to `indent-according-to-mode'.Snewcomment.elc
Vcomment-quote-nested
Non-nil if nested comments should be quoted.
This should be locally set by each major mode if needed.Snewcomment.elc
Vcomment-continue
Continuation string to insert for multiline comments.
This string will be added at the beginning of each line except the very
first one when commenting a region with a commenting style that allows
comments to span several lines.
It should generally have the same length as `comment-start' in order to
preserve indentation.
If it is nil a value will be automatically derived from `comment-start'
by replacing its first character with a space.Snewcomment.elc
Vcomment-add
How many more comment chars should be inserted by `comment-region'.
This determines the default value of the numeric argument of `comment-region'.
This should generally stay 0, except for a few modes like Lisp where
it can be convenient to set it to 1 so that regions are commented with
two semi-colons.Snewcomment.elc
Vcomment-styles
Possible comment styles of the form (STYLE . (MULTI ALIGN EXTRA INDENT)).
STYLE should be a mnemonic symbol.
MULTI specifies that comments are allowed to span multiple lines.
ALIGN specifies that the `comment-end' markers should be aligned.
EXTRA specifies that an extra line should be used before and after the
  region to comment (to put the `comment-end' and `comment-start').
INDENT specifies that the `comment-start' markers should not be put at the
  left margin but at the current indentation of the region to comment.Snewcomment.elc
Vcomment-style
*Style to be used for `comment-region'.
See `comment-styles' for a list of available styles.Snewcomment.elc
Vcomment-padding
Padding string that `comment-region' puts between comment chars and text.
Can also be an integer which will be automatically turned into a string
of the corresponding number of spaces.

Extra spacing between the comment characters and the comment text
makes the comment easier to read.  Default is 1.  nil means 0.Snewcomment.elc
Vcomment-multi-line
*Non-nil means \[indent-new-comment-line] should continue same comment
on new line, with no new terminator or starter.
This is obsolete because you might as well use \[newline-and-indent].Snewcomment.elc
Fcomment-string-strip
Strip STR of any leading (if BEFOREP) and/or trailing (if AFTERP) space.Snewcomment.elc
Fcomment-string-reverse
Return the mirror image of string S, without any trailing space.Snewcomment.elc
Fcomment-normalize-vars
Snewcomment.elc
Fcomment-quote-re
Snewcomment.elc
Fcomment-quote-nested
Quote or unquote nested comments.
If UNP is non-nil, unquote nested comment markers.Snewcomment.elc
Fcomment-search-forward
Find a comment start between point and LIMIT.
Moves point to inside the comment and returns the position of the
comment-starter.  If no comment is found, moves point to LIMIT
and raises an error or returns nil of NOERROR is non-nil.Snewcomment.elc
Fcomment-search-backward
Find a comment start between LIMIT and point.
Moves point to inside the comment and returns the position of the
comment-starter.  If no comment is found, moves point to LIMIT
and raises an error or returns nil of NOERROR is non-nil.Snewcomment.elc
Fcomment-beginning
Find the beginning of the enclosing comment.
Returns nil if not inside a comment, else moves point and returns
the same as `comment-search-forward'.Snewcomment.elc
Fcomment-forward
Skip forward over N comments.
Just like `forward-comment' but only for positive N
and can use regexps instead of syntax.Snewcomment.elc
Fcomment-enter-backward
Move from the end of a comment to the end of its content.
Point is assumed to be just at the end of a comment.Snewcomment.elc
Fcomment-indent-default
Default for `comment-indent-function'.Snewcomment.elc
Fcomment-indent
Indent this line's comment to comment column, or insert an empty comment.
If CONTINUE is non-nil, use the `comment-continue' markers if any.
Comments starting in column 0 are not moved.Snewcomment.elc
Fcomment-set-column
Set the comment column based on point.
With no ARG, set the comment column to the current column.
With just minus as arg, kill any comment on this line.
With any other arg, set comment column to indentation of the previous comment
 and then align or create a comment on this line at that column.Snewcomment.elc
Fcomment-kill
Kill the comment on this line, if any.
With prefix ARG, kill comments on that many lines starting with this one.Snewcomment.elc
Fcomment-padright
Construct a string composed of STR plus `comment-padding'.
It also adds N copies of the last non-whitespace chars of STR.
If STR already contains padding, the corresponding amount is
ignored from `comment-padding'.
N defaults to 0.
If N is `re', a regexp is returned instead, that would match
the string for any N.Snewcomment.elc
Fcomment-padleft
Construct a string composed of `comment-padding' plus STR.
It also adds N copies of the first non-whitespace chars of STR.
If STR already contains padding, the corresponding amount is
ignored from `comment-padding'.
N defaults to 0.
If N is `re', a regexp is returned instead, that would match
  the string for any N.Snewcomment.elc
Funcomment-region
Uncomment each line in the BEG .. END region.
The numeric prefix ARG can specify a number of chars to remove from the
comment markers.Snewcomment.elc
Fcomment-make-extra-lines
Make the leading and trailing extra lines.
This is used for `extra-line' style (or `box' style if BLOCK is specified).Snewcomment.elc
Fcomment-with-narrowing
Execute BODY with BEG..END narrowing.
Space is added (and then removed) at the beginning for the text's
indentation to be kept as it was before narrowing.Snewcomment.elc
Fcomment-region-internal
Comment region BEG .. END.
CS and CE are the comment start resp end string.
CCS and CCE are the comment continuation strings for the start resp end
of lines (default to CS and CE).
BLOCK indicates that end of lines should be marked with either CCE, CE or CS
(if CE is empty) and that those markers should be aligned.
LINES indicates that an extra lines will be used at the beginning and end
of the region for CE and CS.
INDENT indicates to put CS and CCS at the current indentation of the region
rather than at left margin.Snewcomment.elc
Fcomment-region
Comment or uncomment each line in the region.
With just \[universal-argument] prefix arg, uncomment each line in region BEG .. END.
Numeric prefix arg ARG means use ARG comment characters.
If ARG is negative, delete that many comment characters instead.
By default, comments start at the left margin, are terminated on each line,
even for syntax in which newline does not end the comment and blank lines
do not get comments.  This can be changed with `comment-style'.

The strings used as comment starts are built from
`comment-start' without trailing spaces and `comment-padding'.Snewcomment.elc
Fcomment-box
Comment out the BEG .. END region, putting it inside a box.
The numeric prefix ARG specifies how many characters to add to begin- and
end- comment markers additionally to what `comment-add' already specifies.Snewcomment.elc
Fcomment-or-uncomment-region
Call `comment-region', unless the region only consists of comments,
in which case call `uncomment-region'.  If a prefix arg is given, it
is passed on to the respective function.Snewcomment.elc
Fcomment-dwim
Call the comment command you want (Do What I Mean).
If the region is active and `transient-mark-mode' is on, call
  `comment-region' (unless it only consists of comments, in which
  case it calls `uncomment-region').
Else, if the current line is empty, insert a comment and indent it.
Else if a prefix ARG is specified, call `comment-kill'.
Else, call `comment-indent'.Snewcomment.elc
Vcomment-auto-fill-only-comments
Non-nil means to only auto-fill inside comments.
This has no effect in modes that do not define a comment syntax.Snewcomment.elc
Fcomment-valid-prefix
Snewcomment.elc
Fcomment-indent-new-line
Break line at point and indent, continuing comment if within one.
This indents the body of the continued comment
under the previous comment line.

This command is intended for styles where you write a comment per line,
starting a new comment (and terminating it if necessary) on each line.
If you want to continue one comment across several lines, use \[newline-and-indent].

If a fill column is specified, it overrides the use of the comment column
or comment indentation.

The inserted newline is marked hard if variable `use-hard-newlines' is true,
unless optional argument SOFT is non-nil.Skeydefs.elc
Vglobal-map
Default global keymap mapping XEmacs keyboard input into commands.
The value is a keymap which is usually (but not necessarily) XEmacs's
global map.Skeydefs.elc
Vesc-map
Default keymap for ESC (meta) commands.
The normal global definition of the character ESC indirects to this keymap.Skeydefs.elc
Vctl-x-map
Default keymap for C-x commands.
The normal global definition of the character C-x indirects to this keymap.Skeydefs.elc
Vctl-x-4-map
Keymap for subcommands of C-x 4Skeydefs.elc
Vctl-x-5-map
Keymap for subcommands of C-x 5Skeydefs.elc
Vmode-specific-map
Keymap for characters following C-c.Sabbrev.elc
Vabbrev-mode
Word abbreviations mode.Sabbrev.elc
Vonly-global-abbrevs
*Non-nil means user plans to use global abbrevs only.
Makes the commands to define mode-specific abbrevs define global ones instead.Sabbrev.elc
Vdefining-abbrev-turns-on-abbrev-mode
*NOn-nil turns on abbrev-mode whenever an abbrev is defined.
This occurs only when the user-level commands (e.g. `add-global-abbrev')
are used.  abbrev-mode is turned on in all buffers or the current-buffer
only, depending on whether a global or mode-specific abbrev is defined.Sabbrev.elc
Vabbrev-table-name-list
List of symbols whose values are abbrev tables.Sabbrev.elc
Vabbrevs-changed
Set non-nil by defining or altering any word abbrevs.
This causes `save-some-buffers' to offer to save the abbrevs.Sabbrev.elc
Fmake-abbrev-table
Return a new, empty abbrev table object.Sabbrev.elc
Fclear-abbrev-table
Undefine all abbrevs in abbrev table TABLE, leaving it empty.Sabbrev.elc
Fdefine-abbrev-table
Define TABLE-NAME (a symbol) as an abbrev table name.
Define abbrevs in it according to DEFINITIONS, which is a list of elements
of the form (ABBREVNAME EXPANSION HOOK USECOUNT).Sabbrev.elc
Fdefine-abbrev
Define an abbrev in TABLE named NAME, to expand to EXPANSION or call HOOK.
NAME and EXPANSION are strings.  Hook is a function or `nil'.
To undefine an abbrev, define it with an expansion of `nil'.Sabbrev.elc
Fdefine-global-abbrev
Define ABBREV as a global abbreviation for EXPANSION.Sabbrev.elc
Fdefine-mode-abbrev
Define ABBREV as a mode-specific abbreviation for EXPANSION.Sabbrev.elc
Fabbrev-symbol
Return the symbol representing abbrev named ABBREV.
This symbol's name is ABBREV, but it is not the canonical symbol of that name;
it is interned in an abbrev-table rather than the normal obarray.
The value is nil if that abbrev is not defined.
Optional second arg TABLE is abbrev table to look it up in.
The default is to try buffer's mode-specific abbrev table, then global table.Sabbrev.elc
Fabbrev-expansion
Return the string that ABBREV expands into in the current buffer.
Optionally specify an abbrev table as second arg;
then ABBREV is looked up in that table only.Sabbrev.elc
Funexpand-abbrev
Undo the expansion of the last abbrev that expanded.
This differs from ordinary undo in that other editing done since then
is not undone.Sabbrev.elc
Fabbrev-mode
Toggle abbrev mode.
With argument ARG, enable abbrev mode if ARG is positive, else disable.
In abbrev mode, inserting an abbreviation causes it to expand
and be replaced by its expansion.Sabbrev.elc
Fglobal-abbrev-mode
Toggle abbrev mode in all buffers.
With argument ARG, enable abbrev mode globally if ARG is positive, else
disable.  In abbrev mode, inserting an abbreviation causes it to expand
and be replaced by its expansion.Sabbrev.elc
Vedit-abbrevs-map
Keymap used in edit-abbrevs.Sabbrev.elc
Fkill-all-abbrevs
Undefine all defined abbrevs.Sabbrev.elc
Finsert-abbrevs
Insert after point a description of all defined abbrevs.
Mark is set after the inserted text.Sabbrev.elc
Flist-abbrevs
Display a list of all defined abbrevs.Sabbrev.elc
Fprepare-abbrev-list-buffer
Sabbrev.elc
Fedit-abbrevs-mode
Major mode for editing the list of abbrev definitions.
\{edit-abbrevs-map}Sabbrev.elc
Fedit-abbrevs
Alter abbrev definitions by editing a list of them.
Selects a buffer containing a list of abbrev definitions.
You can edit them and type \<edit-abbrevs-map>\[edit-abbrevs-redefine] to redefine abbrevs
according to your editing.
Buffer contains a header line for each abbrev table,
 which is the abbrev table name in parentheses.
This is followed by one line per abbrev in that table:
NAME   USECOUNT   EXPANSION   HOOK
where NAME and EXPANSION are strings with quotes,
USECOUNT is an integer, and HOOK is any valid function
or may be omitted (it is usually omitted).Sabbrev.elc
Fedit-abbrevs-redefine
Redefine abbrevs according to current buffer contents.Sabbrev.elc
Fdefine-abbrevs
Define abbrevs according to current visible buffer contents.
See documentation of `edit-abbrevs' for info on the format of the
text you must have in the buffer.
With argument, eliminate all abbrev definitions except
the ones defined from the buffer now.Sabbrev.elc
Fread-abbrev-file
Read abbrev definitions from file written with `write-abbrev-file'.
Optional argument FILE is the name of the file to read;
it defaults to the value of `abbrev-file-name'.
Optional second argument QUIETLY non-nil means don't print anything.Sabbrev.elc
Fquietly-read-abbrev-file
Read abbrev definitions from file written with `write-abbrev-file'.
Optional argument FILE is the name of the file to read;
it defaults to the value of `abbrev-file-name'.
Does not print anything.Sabbrev.elc
Fwrite-abbrev-file
Write all abbrev definitions to a file of Lisp code.
This does not include system abbrevs; it includes only the abbrev tables
listed in listed in `abbrev-table-name-list'.
The file written can be loaded in another session to define the same abbrevs.
The argument FILE is the file name to write.  If omitted or nil, the file
specified in `abbrev-file-name' is used.Sabbrev.elc
Fabbrev-string-to-be-defined
Return the string for which an abbrev will be defined.
ARG is the argument to `add-global-abbrev' or `add-mode-abbrev'.Sabbrev.elc
Fadd-mode-abbrev
Define mode-specific abbrev for region or last word(s) before point.
If region active, use it as the expansion; otherwise, choose the word
before point.  A prefix argument specifies the number of words before point
that form the expansion; or zero means the text between point and mark is
the expansion.  A negative argument means to undefine the specified abbrev.
This command uses the minibuffer to read the abbreviation.

Don't use this function in a Lisp program; use `define-abbrev' instead.Sabbrev.elc
Fadd-global-abbrev
Define global (all modes) abbrev for region or last word(s) before point.
If region active, use it as the expansion; otherwise, choose the word
before point.  A prefix argument specifies the number of words before point
that form the expansion; or zero means the text between point and mark is
the expansion.  A negative argument means to undefine the specified abbrev.
This command uses the minibuffer to read the abbreviation.

Don't use this function in a Lisp program; use `define-abbrev' instead.Sabbrev.elc
Fadd-abbrev
Add an abbreviation to abbrev table TABLE.
TYPE is a string describing in English the kind of abbrev this will be
(typically, "global" or "mode-specific"); this is used in
prompting the user.  ARG is the number of words in the expansion.

Return the symbol that internally represents the new abbrev, or nil if
the user declines to confirm redefining an existing abbrev.Sabbrev.elc
Finverse-abbrev-string-to-be-defined
Return the string for which an inverse abbrev will be defined.
ARG is the argument to `inverse-add-global-abbrev' or
`inverse-add-mode-abbrev'.Sabbrev.elc
Finverse-add-mode-abbrev
Define last word before point as a mode-specific abbrev.
With prefix argument N, defines the Nth word before point.
This command uses the minibuffer to read the expansion.
Expands the abbreviation after defining it.Sabbrev.elc
Finverse-add-global-abbrev
Define last word before point as a global (mode-independent) abbrev.
With prefix argument N, defines the Nth word before point.
This command uses the minibuffer to read the expansion.
Expands the abbreviation after defining it.Sabbrev.elc
Finverse-add-abbrev
Sabbrev.elc
Fabbrev-prefix-mark
Mark current point as the beginning of an abbrev.
Abbrev to be expanded starts here rather than at beginning of word.
This way, you can expand an abbrev with a prefix: insert the prefix,
use this command, then insert the abbrev.Sabbrev.elc
Fexpand-region-abbrevs
For abbrev occurrence in the region, offer to expand it.
The user is asked to type y or n for each occurrence.
A prefix argument means don't query; expand all abbrevs.
If called from a Lisp program, arguments are START END &optional NOQUERY.Sderived.elc
Fderived-mode-hook-name
Construct the mode hook name based on mode name MODE.Sderived.elc
Fderived-mode-map-name
Construct a map name based on a MODE name.Sderived.elc
Fderived-mode-syntax-table-name
Construct a syntax-table name based on a MODE name.Sderived.elc
Fderived-mode-abbrev-table-name
Construct an abbrev-table name based on a MODE name.Sderived.elc
Fdefine-derived-mode
Create a new mode as a variant of an existing mode.

The arguments to this command are as follow:

CHILD:     the name of the command for the derived mode.
PARENT:    the name of the command for the parent mode (e.g. `text-mode')
           or nil if there is no parent.
NAME:      a string which will appear in the status line (e.g. "Hypertext")
DOCSTRING: an optional documentation string--if you do not supply one,
           the function will attempt to invent something useful.
BODY:      forms to execute just before running the
           hooks for the new mode.  Do not use `interactive' here.

BODY can start with a bunch of keyword arguments.  The following keyword
  arguments are currently understood:
:group GROUP
	Declare the customization group that corresponds to this mode.
:syntax-table TABLE
	Use TABLE instead of the default.
	A nil value means to simply use the same syntax-table as the parent.
:abbrev-table TABLE
	Use TABLE instead of the default.
	A nil value means to simply use the same abbrev-table as the parent.

Here is how you could define LaTeX-Thesis mode as a variant of LaTeX mode:

  (define-derived-mode LaTeX-thesis-mode LaTeX-mode "LaTeX-Thesis")

You could then make new key bindings for `LaTeX-thesis-mode-map'
without changing regular LaTeX mode.  In this example, BODY is empty,
and DOCSTRING is generated by default.

On a more complicated level, the following command uses `sgml-mode' as
the parent, and then sets the variable `case-fold-search' to nil:

  (define-derived-mode article-mode sgml-mode "Article"
    "Major mode for editing technical articles."
    (setq case-fold-search nil))

Note that if the documentation string had been left out, it would have
been generated automatically, with a reference to the keymap.

The new mode runs the hook constructed by the function
`derived-mode-hook-name'.Sderived.elc
Fderived-mode-class
Find the class of a major MODE.
A mode's class is the first ancestor which is NOT a derived mode.
Use the `derived-mode-parent' property of the symbol to trace backwards.
Since major-modes might all derive from `fundamental-mode', this function
is not very useful.Sderived.elc
Fderived-mode-p
Non-nil if the current major mode is derived from one of MODES.
Uses the `derived-mode-parent' property of the symbol to trace backwards.Sderived.elc
Fderived-mode-make-docstring
Construct a docstring for a new mode if none is provided.Sderived.elc
Fderived-mode-setup-function-name
Construct a setup-function name based on a MODE name.Sderived.elc
Fderived-mode-init-mode-variables
Initialise variables for a new MODE.
Right now, if they don't already exist, set up a blank keymap, an
empty syntax table, and an empty abbrev table -- these will be merged
the first time the mode is used.Sderived.elc
Fderived-mode-set-keymap
Set the keymap of the new MODE, maybe merging with the parent.Sderived.elc
Fderived-mode-set-syntax-table
Set the syntax table of the new MODE, maybe merging with the parent.Sderived.elc
Fderived-mode-set-abbrev-table
Set the abbrev table for MODE if it exists.
Always merge its parent into it, since the merge is non-destructive.Sderived.elc
Fderived-mode-run-hooks
Run the mode hook for MODE.Sderived.elc
Fderived-mode-merge-keymaps
Merge an OLD keymap into a NEW one.
The old keymap is set to be the last cdr of the new one, so that there will
be automatic inheritance.Sderived.elc
Fderived-mode-merge-syntax-tables
Merge an OLD syntax table into a NEW one.
Where the new table already has an entry, nothing is copied from the old one.Sderived.elc
Fderived-mode-merge-abbrev-tables
Sminibuf.elc
Vinsert-default-directory
*Non-nil means when reading a filename start with default dir in minibuffer.Sminibuf.elc
Vminibuffer-history-uniquify
*Non-nil means when adding an item to a minibuffer history, remove
previous occurrences of the same item from the history list first,
rather than just consing the new element onto the front of the list.Sminibuf.elc
Vminibuffer-completion-table
List, hash table, function or obarray used for minibuffer completion.

This becomes the COLLECTION argument to `try-completion', `all-completions'
and `test-completion'; see the documentation of those functions for how
values are interpreted.Sminibuf.elc
Vminibuffer-completion-predicate
Within call to `completing-read', this holds the PREDICATE argument.Sminibuf.elc
Vminibuffer-completion-confirm
Non-nil => demand confirmation of completion before exiting minibuffer.Sminibuf.elc
Vminibuffer-confirm-incomplete
If true, then in contexts where completing-read allows answers which
are not valid completions, an extra RET must be typed to confirm the
response.  This is helpful for catching typos, etc.Sminibuf.elc
Vcompletion-auto-help
*Non-nil means automatically provide help for invalid completion input.Sminibuf.elc
Venable-recursive-minibuffers
*Non-nil means to allow minibuffer commands while in the minibuffer.
More precisely, this variable makes a difference when the minibuffer window
is the selected window.  If you are in some other window, minibuffer commands
are allowed even if a minibuffer is active.Sminibuf.elc
Vminibuffer-max-depth
*Global maximum number of minibuffers allowed;
compare to enable-recursive-minibuffers, which is only consulted when the
minibuffer is reinvoked while it is the selected window.Sminibuf.elc
Vminibuffer-exit-hook
Normal hook run just after exit from minibuffer.Sminibuf.elc
Vminibuffer-help-form
Value that `help-form' takes on inside the minibuffer.Sminibuf.elc
Vminibuffer-default
Default value for minibuffer input.Sminibuf.elc
Vminibuffer-local-map
Default keymap to use when reading from the minibuffer.Sminibuf.elc
Vminibuffer-local-completion-map
Local keymap for minibuffer input with completion.Sminibuf.elc
Vminibuffer-local-must-match-map
Local keymap for minibuffer input with completion, for exact match.Sminibuf.elc
Vread-expression-map
Minibuffer keymap used for reading Lisp expressions.Sminibuf.elc
Vread-shell-command-map
Minibuffer keymap used by `shell-command' and related commands.Sminibuf.elc
Vuse-dialog-box
*Variable controlling usage of the dialog box.
If nil, the dialog box will never be used, even in response to mouse events.Sminibuf.elc
Vminibuffer-electric-file-name-behavior
*If non-nil, slash and tilde in certain places cause immediate deletion.
These are the same places where this behavior would occur later on anyway,
in `substitute-in-file-name'.Sminibuf.elc
Fminibuffer-electric-separator
Sminibuf.elc
Fminibuffer-electric-tilde
Sminibuf.elc
Fminibuffer-keyboard-quit
Abort recursive edit.
If `zmacs-regions' is true, and the zmacs region is active in this buffer,
then this key deactivates the region without beeping.Sminibuf.elc
Freset-buffer
Sminibuf.elc
Vminibuffer-history-variable
History list symbol to add minibuffer values to.
Each minibuffer output is added with
  (set minibuffer-history-variable
       (cons STRING (symbol-value minibuffer-history-variable)))Sminibuf.elc
Vminibuffer-history-minimum-string-length
*If this variable is non-nil, a string will not be added to the
minibuffer history if its length is less than that value.Sminibuf.elc
Fread-from-minibuffer
Read a string from the minibuffer, prompting with string PROMPT.
If optional second arg INITIAL-CONTENTS is non-nil, it is a string
  to be inserted into the minibuffer before reading input.
  If INITIAL-CONTENTS is (STRING . POSITION), the initial input
  is STRING, but point is placed POSITION characters into the string.
Third arg KEYMAP is a keymap to use while reading;
  if omitted or nil, the default is `minibuffer-local-map'.
If fourth arg READ is non-nil, then interpret the result as a lisp object
  and return that object:
  in other words, do `(car (read-from-string INPUT-STRING))'
Fifth arg HISTORY, if non-nil, specifies a history list
  and optionally the initial position in the list.
  It can be a symbol, which is the history list variable to use,
  or it can be a cons cell (HISTVAR . HISTPOS).
  In that case, HISTVAR is the history list variable to use,
  and HISTPOS is the initial position (the position in the list
  which INITIAL-CONTENTS corresponds to).
  If HISTORY is `t', no history will be recorded.
  Positions are counted starting from 1 at the beginning of the list.
Sixth arg ABBREV-TABLE, if non-nil, becomes the value of `local-abbrev-table'
  in the minibuffer.
Seventh arg DEFAULT, if non-nil, will be returned when user enters
  an empty string.

See also the variable `completion-highlight-first-word-only' for
  control over completion display.Sminibuf.elc
Fminibuffer-max-depth-exceeded
Sminibuf.elc
Ftemp-minibuffer-message
Sminibuf.elc
Fminibuffer-do-completion-1
Sminibuf.elc
Fminibuffer-do-completion
Sminibuf.elc
Fcompleting-read
Read a string in the minibuffer, with completion.

PROMPT is a string to prompt with; normally it ends in a colon and a space.
COLLECTION is a set of objects that are the possible completions.
PREDICATE limits completion to a subset of COLLECTION.
See `try-completion' and `all-completions' for details of COLLECTION,
  PREDICATE, and completion in general.

If REQUIRE-MATCH is non-nil, the user is not allowed to exit unless
  the input is (or completes to) an element of COLLECTION or is null.
  If it is also not t, Return does not exit if it does non-null completion.
If INITIAL-CONTENTS is non-nil, insert it in the minibuffer initially.
  If it is (STRING . POSITION), the initial input
  is STRING, but point is placed POSITION characters into the string.

HISTORY, if non-nil, specifies a history list
  and optionally the initial position in the list.
  It can be a symbol, which is the history list variable to use,
  or it can be a cons cell (HISTVAR . HISTPOS).
  In that case, HISTVAR is the history list variable to use,
  and HISTPOS is the initial position (the position in the list
  which INITIAL-CONTENTS corresponds to).
  If HISTORY is `t', no history will be recorded.
  Positions are counted starting from 1 at the beginning of the list.
DEFAULT, if non-nil, will be returned when the user enters an empty
  string.

Completion ignores case if the ambient value of
  `completion-ignore-case' is non-nil.Sminibuf.elc
Fminibuffer-complete
Complete the minibuffer contents as far as possible.
Return nil if there is no valid completion, else t.
If no characters can be completed, display a list of possible completions.
If you repeat this command after it displayed such a list,
scroll the window of possible completions.Sminibuf.elc
Fminibuffer-complete-and-exit
Complete the minibuffer contents, and maybe exit.
Exit if the name is valid with no completion needed.
If name was completed to a valid match,
a repetition of this command will exit.Sminibuf.elc
Fself-insert-and-exit
Terminate minibuffer input.Sminibuf.elc
Fexit-minibuffer
Terminate this minibuffer argument.
If minibuffer-confirm-incomplete is true, and we are in a completing-read
of some kind, and the contents of the minibuffer is not an existing
completion, requires an additional RET before the minibuffer will be exited
(assuming that RET was the character that invoked this command:
the character in question must be typed again).Sminibuf.elc
Fminibuffer-complete-word
Complete the minibuffer contents at most a single word.
After one word is completed as much as possible, a space or hyphen
is added, provided that matches some possible completion.
Return nil if there is no valid completion, else t.Sminibuf.elc
Vminibuffer-smart-completion-tracking-behavior
*If non-nil, look for completions under mouse in all buffers.
This allows you to click on something that looks like a completion
and have it selected, regardless of what buffer it is in.

This is not enabled by default because

-- The "mysterious" highlighting in normal buffers is confusing to
   people not expecting it, and looks like a bug
-- If ange-ftp is enabled, this tracking sometimes causes ange-ftp
   action as a result of mouse motion, which is *bad bad bad*.
   Hopefully this bug will be fixed at some point.Sminibuf.elc
Fminibuffer-smart-mouse-tracker
Sminibuf.elc
Fminibuffer-smart-select-kludge-filename
Sminibuf.elc
Fminibuffer-smart-select-highlighted-completion
Select the highlighted text under the mouse as a minibuffer response.
When the minibuffer is being used to prompt the user for a completion,
any valid completions which are visible on the frame will highlight
when the mouse moves over them.  Clicking \<minibuffer-local-map>\[minibuffer-smart-select-highlighted-completion] will select the
highlighted completion under the mouse.

If the mouse is clicked while not over a highlighted completion,
then the global binding of \[minibuffer-smart-select-highlighted-completion] will be executed instead.  In this
way you can get at the normal global behavior of \[minibuffer-smart-select-highlighted-completion] as well as
the special minibuffer behavior.Sminibuf.elc
Fminibuffer-smart-select-highlighted-completion-1
Sminibuf.elc
Fminibuffer-smart-maybe-select-highlighted-completion
Like `minibuffer-smart-select-highlighted-completion' but does nothing if
there is no completion (as opposed to executing the global binding).  Useful
as the value of `mouse-track-click-hook'.Sminibuf.elc
Vminibuffer-history
Default minibuffer history list.
This is used for all minibuffer input except when an alternate history
list is specified.Sminibuf.elc
Vminibuffer-history-sexp-flag
Non-nil when doing history operations on `command-history'.
More generally, indicates that the history list being acted on
contains expressions rather than strings.Sminibuf.elc
Fprevious-matching-history-element
Find the previous history element that matches REGEXP.
(Previous history elements refer to earlier actions.)
With prefix argument N, search for Nth previous match.
If N is negative, find the next or Nth next match.Sminibuf.elc
Fnext-matching-history-element
Find the next history element that matches REGEXP.
(The next history element refers to a more recent action.)
With prefix argument N, search for Nth next match.
If N is negative, find the previous or Nth previous match.Sminibuf.elc
Fnext-history-element
Insert the next element of the minibuffer history into the minibuffer.Sminibuf.elc
Fprevious-history-element
Insert the previous element of the minibuffer history into the minibuffer.Sminibuf.elc
Fnext-complete-history-element
Get next element of history which is a completion of minibuffer contents.Sminibuf.elc
Fprevious-complete-history-element
Get previous element of history which is a completion of minibuffer contents.Sminibuf.elc
Fread-expression
Return a Lisp object read using the minibuffer, prompting with PROMPT.
If non-nil, optional second arg INITIAL-CONTENTS is a string to insert
 in the minibuffer before reading.
Third arg HISTORY, if non-nil, specifies a history list.
Fourth arg DEFAULT-VALUE is the default value.  If non-nil, it is used
 for history command, and as the value to return if the user enters the
 empty string.Sminibuf.elc
Fread-string
Return a string from the minibuffer, prompting with string PROMPT.
If non-nil, optional second arg INITIAL-CONTENTS is a string to insert
 in the minibuffer before reading.
Third arg HISTORY, if non-nil, specifies a history list.
Fourth arg DEFAULT-VALUE is the default value.  If non-nil, it is used
 for history command, and as the value to return if the user enters the
 empty string.Sminibuf.elc
Feval-minibuffer
Return value of Lisp expression read using the minibuffer.
Prompt with PROMPT.  If non-nil, optional second arg INITIAL-CONTENTS
is a string to insert in the minibuffer before reading.
Third arg HISTORY, if non-nil, specifies a history list.
Fourth arg DEFAULT-VALUE is the default value.  If non-nil, it is used
 for history command, and as the value to return if the user enters the
 empty string.Sminibuf.elc
Fread-command
Read the name of a command and return as a symbol.
Prompts with PROMPT.  By default, return DEFAULT-VALUE.Sminibuf.elc
Fread-function
Read the name of a function and return as a symbol.
Prompts with PROMPT.  By default, return DEFAULT-VALUE.Sminibuf.elc
Fread-variable
Read the name of a user variable and return it as a symbol.
Prompts with PROMPT.  By default, return DEFAULT-VALUE.
A user variable is one whose documentation starts with a `*' character.Sminibuf.elc
Fread-buffer
Read the name of a buffer and return as a string.
Prompts with PROMPT.  Optional second arg DEFAULT is value to return if user
enters an empty line.  If optional third arg REQUIRE-MATCH is non-nil,
only existing buffer names are allowed.  Optional fourth argument EXCLUDE is
a buffer or a list of buffers to exclude from the completion list.Sminibuf.elc
Fread-number
Read a number from the minibuffer, prompting with PROMPT.
If optional second argument INTEGERS-ONLY is non-nil, accept
 only integer input.
If DEFAULT-VALUE is non-nil, return that if user enters an empty
 line.Sminibuf.elc
Fread-shell-command
Just like read-string, but uses read-shell-command-map:
\{read-shell-command-map}Sminibuf.elc
Fun-substitute-in-file-name
Sminibuf.elc
Fminibuf-directory-files
Sminibuf.elc
Fread-file-name-2
Sminibuf.elc
Fread-file-name-activate-callback
Sminibuf.elc
Fread-file-name-1
Sminibuf.elc
Fread-file-name
Read file name, prompting with PROMPT and completing in directory DIR.
This will prompt with a dialog box if appropriate, according to
 `should-use-dialog-box-p'.
Value is not expanded---you must call `expand-file-name' yourself.
Value is subject to interpretation by `substitute-in-file-name' however.
Default name to DEFAULT if user enters a null string.
 (If DEFAULT is omitted, the visited file name is used,
  except that if INITIAL-CONTENTS is specified, that combined with DIR is
  used.)
Fourth arg MUST-MATCH non-nil means require existing file's name.
 Non-nil and non-t means also require confirmation after completion.
Fifth arg INITIAL-CONTENTS specifies text to start with.  If this is not
 specified, and `insert-default-directory' is non-nil, DIR or the current
 directory will be used.
Sixth arg HISTORY specifies the history list to use.  Default is
 `file-name-history'.
DIR defaults to current buffer's directory default.Sminibuf.elc
Fread-directory-name
Read directory name, prompting with PROMPT and completing in directory DIR.
This will prompt with a dialog box if appropriate, according to
 `should-use-dialog-box-p'.
Value is not expanded---you must call `expand-file-name' yourself.
Value is subject to interpreted by substitute-in-file-name however.
Default name to DEFAULT if user enters a null string.
 (If DEFAULT is omitted, the current buffer's default directory is used.)
Fourth arg MUST-MATCH non-nil means require existing directory's name.
 Non-nil and non-t means also require confirmation after completion.
Fifth arg INITIAL-CONTENTS specifies text to start with.
Sixth arg HISTORY specifies the history list to use.  Default is
 `file-name-history'.
DIR defaults to current buffer's directory default.Sminibuf.elc
Fread-file-name-internal-1
Sminibuf.elc
Fread-file-name-internal
Sminibuf.elc
Fread-directory-name-internal
Sminibuf.elc
Fappend-expand-filename
Append STRING to FILE-STRING differently depending on whether STRING
is a username (~string), an environment variable ($string),
or a filename (/string).  The resultant string is returned with the
environment variable or username expanded and resolved to indicate
whether it is a file(/result) or a directory (/result/).Sminibuf.elc
Fmouse-rfn-setup-vars
Sminibuf.elc
Fmouse-file-display-completion-list
Sminibuf.elc
Fmouse-directory-display-completion-list
Sminibuf.elc
Fmouse-read-file-name-activate-callback
Sminibuf.elc
Fmouse-read-file-name-1
Sminibuf.elc
Fread-face
Read the name of a face from the minibuffer and return it as a symbol.Sminibuf.elc
Fread-color-completion-table
Sminibuf.elc
Fread-color
Read the name of a color from the minibuffer.
On X devices, this uses `x-library-search-path' to find rgb.txt in order
 to build a completion table.
On TTY devices, this uses `tty-color-list'.
On mswindows devices, this uses `mswindows-color-list'.Sminibuf.elc
Fread-coding-system
Read a coding-system (or nil) from the minibuffer.
Prompting with string PROMPT.
If the user enters null input, return second argument DEFAULT-CODING-SYSTEM.
DEFAULT-CODING-SYSTEM can be a string, symbol, or coding-system object.Sminibuf.elc
Fread-non-nil-coding-system
Read a non-nil coding-system from the minibuffer.
Prompt with string PROMPT.Sminibuf.elc
Vforce-dialog-box-use
*If non-nil, always use a dialog box for asking questions, if possible.
You should *bind* this, not set it.  This is useful if you're doing
something mousy but which wasn't actually invoked using the mouse.Sminibuf.elc
Fshould-use-dialog-box-p
If non-nil, questions should be asked with a dialog box instead of the
minibuffer.  This looks at `last-command-event' to see if it was a mouse
event, and checks whether dialog-support exists and the current device
supports dialog boxes.

The dialog box is totally disabled if the variable `use-dialog-box'
is set to nil.Sminibuf.elc
Fget-user-response
Ask a question and get a response from the user, in minibuffer or dialog box.
POSITION specifies which frame to use.
This is normally an event or a window or frame.
If POSITION is t or nil, it means to use the frame the mouse is on.
The dialog box appears in the middle of the specified frame.

QUESTION is the question to ask (it should end with a question mark followed
by a space).

ANSWERS are the possible answers.  It is a list; each item looks like

  (KEY BUTTON-TEXT RESPONSE)

where KEY is the key to be pressed in the minibuffer, BUTTON-TEXT is the
text to be displayed in a dialog box button (you should put %_ in it to
indicate the accelerator), and RESPONSE is a value (typically a symbol)
to be returned if the user selects this response.  KEY should be either a
single character or a string; which one you use needs to be consistent for
all responses and determines whether the user responds by hitting a single
key or typing in a string and hitting ENTER.

An item may also be just a string--that makes a nonselectable item in the
dialog box and is ignored in the minibuffer.

An item may also be nil -- that means to put all preceding items
on the left of the dialog box and all following items on the right; ignored
in the minibuffer.Slist-mode.elc
Vlist-mode-map
Local map for buffers containing lists of items.Slist-mode.elc
Vlist-mode-hook
Normal hook run when entering List mode.Slist-mode.elc
Flist-mode
Major mode for buffer containing lists of items.Slist-mode.elc
Vlist-mode-extent-old-point
The value of point when pre-command-hook is called.
Used to determine the direction of motion.Slist-mode.elc
Flist-mode-extent-pre-hook
Slist-mode.elc
Fset-list-mode-extent
Move to the closest list item and set up the extent for it.
This is called from `post-command-hook'.Slist-mode.elc
Fprevious-list-mode-item
Move to the previous item in list-mode.Slist-mode.elc
Fnext-list-mode-item
Move to the next item in list-mode.
With prefix argument N, move N items (negative N means move backward).Slist-mode.elc
Flist-mode-item-selected-1
Slist-mode.elc
Flist-mode-item-keyboard-selected
Slist-mode.elc
Flist-mode-item-mouse-selected
Slist-mode.elc
Fadd-list-mode-item
Add a new list item in list-mode, from START to END in BUFFER.
BUFFER defaults to the current buffer.
This works by creating an extent for the span of text in question.
If ACTIVATE-CALLBACK is non-nil, it should be a function of three
  arguments (EVENT EXTENT USER-DATA) that will be called when button2
  is pressed on the extent.  USER-DATA comes from the optional
  USER-DATA argument.Slist-mode.elc
Vcompletion-highlight-first-word-only
*Completion will only highlight the first blank delimited word if t.
If the variable in not t or nil, the string is taken as a regexp to match for end
of highlightSlist-mode.elc
Vcompletion-setup-hook
Normal hook run at the end of setting up the text of a completion buffer.
When run, the completion buffer is the current buffer.Slist-mode.elc
Vcompletion-default-help-string
Form the evaluate to get a help string for completion lists.
This string is inserted at the beginning of the buffer.
See `display-completion-list'.Slist-mode.elc
Fdisplay-completion-list
Display the list of completions, COMPLETIONS, using `standard-output'.
Each element may be just a symbol or string or may be a list of two
 strings to be printed as if concatenated.
Frob a mousable extent onto each completion.  This extent has properties
 'mouse-face (so it highlights when the mouse passes over it) and
 'list-mode-item (so it can be located).

Keywords:
  :activate-callback (default is `default-choose-completion')
    See `add-list-mode-item'.
  :user-data
    Value passed to activation callback.
  :window-width
    If non-nil, width to use in displaying the list, instead of the
    actual window's width.
  :window-height
    If non-nil, use no more than this many lines, and extend line width as
    necessary.
  :help-string (default is the value of `completion-default-help-string')
    Form to evaluate to get a string to insert at the beginning of
    the completion list buffer.  This is evaluated when that buffer
    is the current buffer and after it has been put into
    completion-list-mode.
  :reference-buffer (default is the current buffer)
    This specifies the value of `completion-reference-buffer' in
    the completion buffer.  This specifies the buffer (normally a
    minibuffer) that `default-choose-completion' will insert the
    completion into.

At the end, run the normal hook `completion-setup-hook'.
It can find the completion buffer in `standard-output'.
If `completion-highlight-first-word-only' is non-nil, then only the start
 of the string is highlighted.

arguments: (COMPLETIONS &key USER-DATA REFERENCE-BUFFER (ACTIVATE-CALLBACK (QUOTE DEFAULT-CHOOSE-COMPLETION)) (HELP-STRING COMPLETION-DEFAULT-HELP-STRING) (COMPLETION-STRING "Possible completions are:") WINDOW-WIDTH WINDOW-HEIGHT)
Slist-mode.elc
Vcompletion-display-completion-list-function
Function to set up the list of completions in the completion buffer.
The function is called with one argument, the sorted list of completions.
Particular minibuffer interface functions (e.g. `read-file-name') may
want to change this.  To do that, set a local value for this variable
in the minibuffer; that ensures that other minibuffer invocations will
not be affected.Slist-mode.elc
Fminibuffer-completion-help
Display a list of possible completions of the current minibuffer contents.
The list of completions is determined by calling `all-completions',
passing it the current minibuffer contents, the value of
`minibuffer-completion-table', and the value of
`minibuffer-completion-predicate'.  The list is displayed by calling
the value of `completion-display-completion-list-function' on the sorted
list of completions, with the standard output set to the completion
buffer.Slist-mode.elc
Vcompletion-list-mode-hook
Hook run when entering Completion List mode.Slist-mode.elc
Fcompletion-list-mode
Major mode for buffers showing lists of possible completions.
\{completion-list-mode-map}

In addition to any hooks its parent mode `list-mode' might have run,
this mode runs the hook `completion-list-mode-hook', as the final step
during initialization.Slist-mode.elc
Vcompletion-reference-buffer
Record the buffer that was current when the completion list was requested.
This is a local variable in the completion list buffer.
Initial value is nil to avoid some compiler warnings.Slist-mode.elc
Vcompletion-base-size
Number of chars at beginning of minibuffer not involved in completion.
This is a local variable in the completion list buffer
but it talks about the buffer in `completion-reference-buffer'.
If this is nil, it means to compare text to determine which part
of the tail end of the buffer's text is involved in completion.Slist-mode.elc
Fdelete-completion-window
Delete the completion list window.
Go to the window from which completion was requested.Slist-mode.elc
Fcompletion-switch-to-minibuffer
Move from a completions buffer to the active minibuffer window.Slist-mode.elc
Fcompletion-list-mode-quit
Abort any recursive edit and bury the completions buffer.Slist-mode.elc
Fcompletion-do-in-minibuffer
Slist-mode.elc
Fdefault-choose-completion
Click on an alternative in the `*Completions*' buffer to choose it.Slist-mode.elc
Fchoose-completion-delete-max-match
Slist-mode.elc
Fchoose-completion-string
Slist-mode.elc
Fswitch-to-completions
Select the completion list window.Smodeline.elc
Vmodeline-3d-p
Whether the modeline is displayed with raised, 3-d appearance.
This option only has an effect when set using `customize-set-variable',
or through the Options menu.Smodeline.elc
Vdrag-divider-event-lag
*The pause (in msecs) between divider drag events before redisplaying.
If this value is too small, dragging will be choppy because redisplay cannot
keep up. If it is too large, dragging will be choppy because of the explicit
redisplay delay specified.Smodeline.elc
Vmodeline-click-swaps-buffers
*If non-nil, clicking on the modeline changes the current buffer.
Click on the left half of the modeline cycles forward through the
buffer list and clicking on the right half cycles backward.Smodeline.elc
Vmodeline-scrolling-method
*If non-nil, dragging the modeline with the mouse may also scroll its
text horizontally (vertical motion controls window resizing and horizontal
motion controls modeline scrolling).

With a value of t, the modeline text is scrolled in the same direction as
the mouse motion. With a value of 'scrollbar, the modeline is considered as
a scrollbar for its own text, which then moves in the opposite direction.

This option should be set using `customize-set-variable'.Smodeline.elc
Fmouse-drag-modeline
Resize a window by dragging its modeline.
This command should be bound to a button-press event in modeline-map.
Holding down a mouse button and moving the mouse up and down will
make the clicked-on window taller or shorter.

See also the variable `modeline-scrolling-method'.Smodeline.elc
Fmodeline-swap-buffers
Handle mouse clicks on modeline by switching buffers.
If click on left half of a frame's modeline, bury current buffer.
If click on right half of a frame's modeline, raise bottommost buffer.
Arg EVENT is the button release event that occurred on the modeline.Smodeline.elc
Fmodeline-menu
Smodeline.elc
Vmodeline-map
Keymap consulted for mouse-clicks on the modeline of a window.
This variable may be buffer-local; its value will be looked up in
the buffer of the window whose modeline was clicked upon.Smodeline.elc
Fmake-modeline-command-wrapper
Return a function object wrapping COMMAND, for use with the modeline.

The function (itself a command, with "e" as its interactive spec) calls
COMMAND with the appropriate window selected, and is suitable as a binding
in the keymaps associated with the modeline.Smodeline.elc
Vminor-mode-alist
Alist saying how to show minor modes in the modeline.
Each element looks like (VARIABLE STRING);
STRING is included in the modeline iff VARIABLE's value is non-nil.

Actually, STRING need not be a string; any possible modeline element
is okay.  See `modeline-format'.Smodeline.elc
Vminor-mode-map-alist
Alist of keymaps to use for minor modes.
Each element looks like (VARIABLE . KEYMAP); KEYMAP is used to read
key sequences and look up bindings iff VARIABLE's value is non-nil.
If two active keymaps bind the same key, the keymap appearing earlier
in the list takes precedence.Smodeline.elc
Vmodeline-mousable-minor-mode-extent
Extent managing the mousable minor mode modeline strings.Smodeline.elc
Fadd-minor-mode
Add a minor mode to `minor-mode-alist' and `minor-mode-map-alist'.

TOGGLE is a symbol whose value as a variable specifies whether the
minor mode is active.

NAME is the name that should appear in the modeline.  It should either
be a string beginning with a space, or a symbol with a similar string
as its value.

KEYMAP is a keymap to make active when the minor mode is active.

AFTER is the toggling symbol used for another minor mode.  If AFTER is
non-nil, then it is used to position the new mode in the minor-mode
alists.

TOGGLE-FUN specifies an interactive function that is called to toggle
the mode on and off; this affects what happens when button2 is pressed
on the mode, and when button3 is pressed somewhere in the list of
modes.  If TOGGLE-FUN is nil and TOGGLE names an interactive function,
TOGGLE is used as the toggle function.

Example: (add-minor-mode 'view-minor-mode " View" view-mode-map)Smodeline.elc
Vabbrev-mode-line-string
*String to display in the modeline when `abbrev-mode' is active.
Set this to nil if you don't want a modeline indicator.Smodeline.elc
Voverwrite-mode-line-string
*String to display in the modeline when `overwrite-mode' is active.
Set this to nil if you don't want a modeline indicator.Smodeline.elc
Vauto-fill-mode-line-string
*String to display in the modeline when `auto-fill-mode' is active.
Set this to nil if you don't want a modeline indicator.Smodeline.elc
Vdefining-kbd-macro-mode-line-string
*String to display in the modeline when `defining-kbd-macro' is active.
Set this to nil if you don't want a modeline indicator.Smodeline.elc
Fmodeline-minor-mode-menu
The menu that pops up when you press `button3' inside the
parentheses on the modeline.Smodeline.elc
Vmodeline-minor-mode-map
Keymap consulted for mouse-clicks on the minor-mode modeline list.Smodeline.elc
Vmodeline-minor-mode-extent
Extent covering the minor mode modeline strings.Smodeline.elc
Fdefine-modeline-control
Define a modeline control named NAME, a symbol.
A modeline control is a section of the modeline whose contents can easily
be changed independently of the rest of the modeline, which can have its
own color, and which can have its own mouse commands, which apply when the
mouse is over the control.

Logically, a modeline control should be an object; but we have terrible
object support in XEmacs, and so history has given us a series of related
variables, which [hopefully] all follow the same conventions.

Three variables are created:

1. The variable holding the control specification is called
   `modeline-NAME', and is automatically buffer-local.

2. The variable holding the extent that covers the control area in the
   modeline is called `modeline-NAME-extent'.  Onto this extent, colors and
   keymaps (and possibly glyphs?) can be added, and will be noticed by the
   modeline redisplay code.  The attachment of the extent and its control
   is done somewhere in the modeline specification: either in the main spec
   in `modeline-format', or in some other control, like this:

   (cons modeline-NAME-extent 'modeline-NAME)

3. The keymap holding the mousable commands for the control is called
   `modeline-NAME-map'.  This is automatically attached to the extent by
   this macro.

Initial contents of the control are CONTENTS (see `modeline-format' for
information about the structure of this contents).  DOC-STRING specifies
help text that will be placed in the control variable's documentation,
indicating what's supposed to be in the control.

Optional argument FACE specifies the face of the control's
extent. (`modeline-mousable' is a good choice if your control is, in fact,
mousable (i.e. it has some mouse commands defined for it).  Optional
argument HELP-ECHO specifies some help-echo to be displayed when the mouse
moves over the control, indicating what mouse strokes are available.  Smodeline.elc
Fmodeline-buffers-menu
Smodeline.elc
Vmodeline-buffer-id-left
Modeline control for left half of buffer ID.

The format of the contents of this variable is documented in
`modeline-format'.  The way the control is displayed can be changed by
setting the face of `modeline-buffer-id-left-extent'.  Mouse commands
for the control can be set using `modeline-buffer-id-left-map'.Smodeline.elc
Vmodeline-buffer-id-left-extent
Extent covering the `modeline-buffer-id-left' control.Smodeline.elc
Vmodeline-buffer-id-left-map
Keymap consulted for mouse-clicks on the `modeline-buffer-id-left' control.Smodeline.elc
Vmodeline-buffer-id-right
Modeline control for right half of buffer ID.

The format of the contents of this variable is documented in
`modeline-format'.  The way the control is displayed can be changed by
setting the face of `modeline-buffer-id-right-extent'.  Mouse commands
for the control can be set using `modeline-buffer-id-right-map'.Smodeline.elc
Vmodeline-buffer-id-right-extent
Extent covering the `modeline-buffer-id-right' control.Smodeline.elc
Vmodeline-buffer-id-right-map
Keymap consulted for mouse-clicks on the `modeline-buffer-id-right' control.Smodeline.elc
Vmodeline-buffer-id
Modeline control for identifying the buffer being displayed.
Its default value is

  (list (cons modeline-buffer-id-left-extent 'modeline-buffer-id-left)
	(cons modeline-buffer-id-right-extent 'modeline-buffer-id-right))

Major modes that edit things other than ordinary files may change this
(e.g. Info, Dired,...).

The format of the contents of this variable is documented in
`modeline-format'.  The way the control is displayed can be changed by
setting the face of `modeline-buffer-id-extent'.  Mouse commands
for the control can be set using `modeline-buffer-id-map'.Smodeline.elc
Vmodeline-buffer-id-extent
Extent covering the `modeline-buffer-id' control.Smodeline.elc
Vmodeline-buffer-id-map
Keymap consulted for mouse-clicks on the `modeline-buffer-id' control.Smodeline.elc
Fmodeline-update-buffer-names
Smodeline.elc
Vmodeline-new-buffer-id-format
Whether the new format for the modeline buffer ID (with directory) is used.
This option only has an effect when set using `customize-set-variable',
or through the Options menu.Smodeline.elc
Vmodeline-coding-system
Modeline control for showing current coding system.

The format of the contents of this variable is documented in
`modeline-format'.  The way the control is displayed can be changed by
setting the face of `modeline-coding-system-extent'.  Mouse commands
for the control can be set using `modeline-coding-system-map'.Smodeline.elc
Vmodeline-coding-system-extent
Extent covering the `modeline-coding-system' control.Smodeline.elc
Vmodeline-coding-system-map
Keymap consulted for mouse-clicks on the `modeline-coding-system' control.Smodeline.elc
Vmodeline-modified
Modeline control for displaying whether current buffer is modified.

The format of the contents of this variable is documented in
`modeline-format'.  The way the control is displayed can be changed by
setting the face of `modeline-modified-extent'.  Mouse commands
for the control can be set using `modeline-modified-map'.Smodeline.elc
Vmodeline-modified-extent
Extent covering the `modeline-modified' control.Smodeline.elc
Vmodeline-modified-map
Keymap consulted for mouse-clicks on the `modeline-modified' control.Smodeline.elc
Fmodeline-toggle-read-only
Change whether this buffer is visiting its file read-only.
With arg, set read-only iff arg is positive.
This function is designed to be called when the read-only indicator on the
modeline is clicked.  It will call `vc-toggle-read-only' if available,
otherwise it will call the usual `toggle-read-only'.Smodeline.elc
Vmodeline-line-number
Modeline control for displaying the line number of point.

The format of the contents of this variable is documented in
`modeline-format'.  The way the control is displayed can be changed by
setting the face of `modeline-line-number-extent'.  Mouse commands
for the control can be set using `modeline-line-number-map'.Smodeline.elc
Vmodeline-line-number-extent
Extent covering the `modeline-line-number' control.Smodeline.elc
Vmodeline-line-number-map
Keymap consulted for mouse-clicks on the `modeline-line-number' control.Smodeline.elc
Vmodeline-column-number
Modeline control for displaying the column number of point.

The format of the contents of this variable is documented in
`modeline-format'.  The way the control is displayed can be changed by
setting the face of `modeline-column-number-extent'.  Mouse commands
for the control can be set using `modeline-column-number-map'.Smodeline.elc
Vmodeline-column-number-extent
Extent covering the `modeline-column-number' control.Smodeline.elc
Vmodeline-column-number-map
Keymap consulted for mouse-clicks on the `modeline-column-number' control.Smodeline.elc
Vmodeline-percentage
Modeline control for displaying percentage of file above point.

The format of the contents of this variable is documented in
`modeline-format'.  The way the control is displayed can be changed by
setting the face of `modeline-percentage-extent'.  Mouse commands
for the control can be set using `modeline-percentage-map'.Smodeline.elc
Vmodeline-percentage-extent
Extent covering the `modeline-percentage' control.Smodeline.elc
Vmodeline-percentage-map
Keymap consulted for mouse-clicks on the `modeline-percentage' control.Smodeline.elc
Vmodeline-position-status
Modeline control for providing status about the location of point.
Generally includes the line number of point, its column number, and the
percentage of the file above point.

The format of the contents of this variable is documented in
`modeline-format'.  The way the control is displayed can be changed by
setting the face of `modeline-position-status-extent'.  Mouse commands
for the control can be set using `modeline-position-status-map'.Smodeline.elc
Vmodeline-position-status-extent
Extent covering the `modeline-position-status' control.Smodeline.elc
Vmodeline-position-status-map
Keymap consulted for mouse-clicks on the `modeline-position-status' control.Smodeline.elc
Fmodeline-update-tty-frame-specifier
Smodeline.elc
Vmodeline-tty-frame-id
Modeline control for showing which TTY frame is selected.

The format of the contents of this variable is documented in
`modeline-format'.  The way the control is displayed can be changed by
setting the face of `modeline-tty-frame-id-extent'.  Mouse commands
for the control can be set using `modeline-tty-frame-id-map'.Smodeline.elc
Vmodeline-tty-frame-id-extent
Extent covering the `modeline-tty-frame-id' control.Smodeline.elc
Vmodeline-tty-frame-id-map
Keymap consulted for mouse-clicks on the `modeline-tty-frame-id' control.Smodeline.elc
Vmodeline-narrowed
Modeline control for displaying whether current buffer is narrowed.

The format of the contents of this variable is documented in
`modeline-format'.  The way the control is displayed can be changed by
setting the face of `modeline-narrowed-extent'.  Mouse commands
for the control can be set using `modeline-narrowed-map'.Smodeline.elc
Vmodeline-narrowed-extent
Extent covering the `modeline-narrowed' control.Smodeline.elc
Vmodeline-narrowed-map
Keymap consulted for mouse-clicks on the `modeline-narrowed' control.Smodeline.elc
Vmodeline-process
Modeline control for displaying info on process status.
Normally nil in most modes, since there is no process to display.

The format of the contents of this variable is documented in
`modeline-format'.  The way the control is displayed can be changed by
setting the face of `modeline-process-extent'.  Mouse commands
for the control can be set using `modeline-process-map'.Smodeline.elc
Vmodeline-process-extent
Extent covering the `modeline-process' control.Smodeline.elc
Vmodeline-process-map
Keymap consulted for mouse-clicks on the `modeline-process' control.Scus-file.elc
Vcustom-file-base
Base of file name for storing customization information.Scus-file.elc
Vcustom-file
File used for storing customization information.
If you change this from the default you need to
explicitly load that file for the settings to take effect.Scus-file.elc
Fmake-custom-file-name
Construct the default custom file name from the init file name.
If FORCE-NEW is non-nil, force post-migration location.Sstartup.elc
Vcommand-line-processed
t once command line has been processedSstartup.elc
Vinhibit-startup-message
*Non-nil inhibits the initial startup message.
This is for use in your personal init file, once you are familiar
with the contents of the startup message.Sstartup.elc
Vinhibit-default-init
*Non-nil inhibits loading the `default' library.Sstartup.elc
Vcommand-line-args-left
List of command-line args not yet processed.Sstartup.elc
Vcommand-line-default-directory
Default directory to use for command line arguments.
This is normally copied from `default-directory' when XEmacs starts.Sstartup.elc
Vbefore-init-hook
Functions to call after handling urgent options but before init files.
The frame system uses this to open frames to display messages while
XEmacs loads the user's initialization file.Sstartup.elc
Vafter-init-hook
*Functions to call after loading the init file.
The call is not protected by a condition-case, so you can set `debug-on-error'
in the init file, and put all the actual code on `after-init-hook'.Sstartup.elc
Vterm-setup-hook
*Functions to be called after loading terminal-specific Lisp code.
See `run-hooks'.  This variable exists for users to set, so as to
override the definitions made by the terminal-specific file.  XEmacs
never sets this variable itself.Sstartup.elc
Vkeyboard-type
The brand of keyboard you are using.
This variable is used to define the proper function and keypad keys
for use under X.  It is used in a fashion analogous to the environment
value TERM.Sstartup.elc
Vwindow-setup-hook
Normal hook run to initialize window system display.
XEmacs runs this hook after processing the command line arguments and loading
the user's init file.Sstartup.elc
Vinitial-major-mode
Major mode command symbol to use for the initial *scratch* buffer.Sstartup.elc
Vemacs-roots
List of plausible roots of the XEmacs hierarchy.
This is a list of plausible directories in which to search for the important
directories used by XEmacs at run-time, for example `exec-directory',
`data-directory' and `lisp-directory'.

Normally set at startup by calling `paths-find-emacs-roots'.Sstartup.elc
Vemacs-data-roots
List of plausible data roots of the XEmacs hierarchy.Sstartup.elc
Vuser-init-directory-base
Base of directory where user-installed init files may go.Sstartup.elc
Vuser-init-directory
Directory where user-installed init files may go.Sstartup.elc
Vuser-init-file-base
Default name of the user init file if uncompiled.
This should be used for migration purposes only.Sstartup.elc
Vuser-init-file-base-list
List of allowed init files in the user's init directory.
The first one found takes precedence.  .elc files do not need to be listed.Sstartup.elc
Vuser-home-init-file-base-list
List of allowed init files in the user's home directory.
The first one found takes precedence.  .elc files do not need to be listed.Sstartup.elc
Vload-home-init-file
Non-nil if XEmacs should load the init file from the home directory.
Otherwise, XEmacs will offer migration to the init directory.Sstartup.elc
Vload-user-init-file-p
Non-nil if XEmacs should load the user's init file.Sstartup.elc
Vsite-start-file
File containing site-wide run-time initializations.
It is loaded at run-time before the user's init file (see `user-init-file').
It contains inits that need to be in place for the entire site, but
which, due to their higher incidence of change, don't make sense to
load into XEmacs's dumped image.  Thus, the run-time load order is:

  1. file described in this variable, if non-nil;
  2. the file computed by `find-user-init-file';
  3. `/path/to/xemacs/lisp/default.el'.

Don't use the `site-start.el' file for things some users may not like.
Put them in `default.el' instead, so that users can more easily
override them.  Users can prevent loading `default.el' with the `-q'
option or by setting `inhibit-default-init' in their own init files,
but inhibiting `site-start.el' requires `--no-site-file', which
is less convenient.Sstartup.elc
Vmail-host-address
*Name of this machine, for purposes of naming users.Sstartup.elc
Vuser-mail-address
*Full mailing address of this user.
This is initialized based on `mail-host-address',
after your init file is read, in case it sets `mail-host-address'.Sstartup.elc
Vinit-file-loaded
True after the user's init file has been loaded (or suppressed with -q).
This will be true when `after-init-hook' is run and at all times
after, and will not be true at any time before.Sstartup.elc
Vcommand-switch-alist
Alist of command-line switches.
Elements look like (SWITCH-STRING . HANDLER-FUNCTION).
HANDLER-FUNCTION receives switch name as sole arg;
remaining command-line args are in the variable `command-line-args-left'.Sstartup.elc
Fcommand-line-do-help
Print the XEmacs usage message and exit.Sstartup.elc
Fcommand-line-do-funcall
Invoke the named lisp function with no arguments.
<function>Sstartup.elc
Fcommand-line-do-eval
Evaluate the lisp form.  Quote it carefully.
<form>Sstartup.elc
Fcommand-line-do-load
Load the named file of Lisp code into XEmacs.
<file>Sstartup.elc
Fcommand-line-do-script
Load the named file of Lisp code into XEmacs.
<file>Sstartup.elc
Fcommand-line-do-insert
Insert file into the current buffer.
<file>Sstartup.elc
Fcommand-line-do-kill
Exit XEmacs.Sstartup.elc
Fcommand-line-do-version
Print version info and exit.Sstartup.elc
Fcommand-line-do-enable-eol-detection
Turn on EOL detection (only applies to Unix).Sstartup.elc
Fearly-error-handler
You should probably not be using this.Sstartup.elc
Fnormal-top-level
Sstartup.elc
Fcommand-line-early
Sstartup.elc
Vinitial-scratch-message
Initial message displayed in *scratch* buffer at startup.
If this is nil, no message will be displayed.Sstartup.elc
Fcommand-line
Sstartup.elc
Fload-terminal-library
Sstartup.elc
Ffind-init-file-1
Sstartup.elc
Ffind-user-init-directory-init-file
Determine the user's init file if in the init directory.Sstartup.elc
Ffind-user-home-directory-init-file
Determine the user's init file if in the home directory.Sstartup.elc
Ffind-user-init-file
Determine the user's init file.Sstartup.elc
Fask-about-user-init-file-migration-p
Check whether we want to ask the user if she wants to migrate the init file.Sstartup.elc
Fmaybe-migrate-user-init-file
Ask user if she wants to migrate the init file(s) to new location.Sstartup.elc
Fmaybe-create-compatibility-dot-emacs
Ask user if she wants to create a .emacs compatibility file.Sstartup.elc
Fmigrate-user-init-file
Migrate the init file from the home directory.Sstartup.elc
Fset-load-home-init-file
Put code in `filename' to set `load-home-init-file' to `val'.
More precisely, remove the first `setq' form for `load-home-init-file',
and replace it by (setq load-home-init-file t) if `val' is non-nil.Sstartup.elc
Fcreate-compatibility-dot-emacs
Create .emacs compatibility file for migrated setup.Sstartup.elc
Fmaybe-unmigrate-user-init-file
Possibly unmigrate the user's init and custom files.Sstartup.elc
Funmigrate-user-init-file
Unmigrate the user's init and custom files.Sstartup.elc
Fload-user-init-file
This function actually reads the init file.Sstartup.elc
Fload-init-file
Sstartup.elc
Fload-options-file
Load the file of saved options (from the Options menu) called FILENAME.
Currently this does nothing but call `load', but it might be redefined
in the future to support automatically converting older options files to
a new format, when variables have changed, etc.Sstartup.elc
Fcommand-line-1
Sstartup.elc
Fstartup-presentation-hack-help
Sstartup.elc
Fstartup-presentation-activate
Sstartup.elc
Fsplash-screen-present-hack
Sstartup.elc
Fsplash-hack-version-string
Sstartup.elc
Fsplash-screen-present
Sstartup.elc
Fstartup-center-spaces
Sstartup.elc
Fsplash-screen-window-body
Sstartup.elc
Fsplash-screen-tty-body
Sstartup.elc
Fdisplay-splash-screen
Sstartup.elc
Fxemacs-splash-buffer
Display XEmacs splash screen in a buffer.Sstartup.elc
Fstartup-set-invocation-environment
Sstartup.elc
Fstartup-find-load-path
Determine the value for `load-path'.
INHIBIT-PACKAGES says which types of packages, if any, to omit from the
returned value.  It can be `t' (omit all), one of the symbols `early',
`late', or `last', or a list of one or more of the symbols.

If SET-GLOBAL-PACKAGE-PATHS is non-nil, initialize the global package path
variables referring to the particular types of packages
(`early-package-hierarchies', `early-package-load-path',
`late-package-hierarchies', `late-package-load-path',
`last-package-hierarchies', `last-package-load-path').Sstartup.elc
Fstartup-setup-paths
Setup all the various paths.
INHIBIT-PACKAGES says which types of packages, if any, to omit from the
returned value.  It can be `t' (omit all), one of the symbols `early',
`late', or `last', or a list of one or more of the symbols.

This function is idempotent, so call this as often as you like!Sstartup.elc
Fstartup-find-load-path-for-packages
Return a suitable load-path for PACKAGES.
PACKAGES is a list of package names (strings).  This looks for package
directories in the load path whose last component is one of the members of
PACKAGES.Sstartup.elc
Fstartup-setup-paths-warning
Sstartup.elc
Fstartup-load-autoloads
Smisc.elc
Fcopy-from-above-command
Copy characters from previous nonblank line, starting just above point.
Copy ARG characters, but not past the end of that line.
If no argument given, copy the entire rest of the line.
The characters copied are inserted in the buffer before point.Sloadhist.elc
Fsymbol-file
Return the input source from which SYM was loaded.
This is a file name, or nil if the source was a buffer with no associated file.

If TYPE is nil or omitted, any kind of definition is acceptable.
If TYPE is `defun', then function, subr, special operator or macro definitions
are acceptable.
If TYPE is `defvar', then variable definitions are acceptable.

`defface' specifies a face definition only, and for the moment, it won't
return faces created with `make-face' or `copy-face', just those created
with `defface' and `custom-declare-face'.Sloadhist.elc
Ffeature-symbols
Return the file and list of symbols associated with a given FEATURE.Sloadhist.elc
Ffeature-file
Return the file name from which a given FEATURE was loaded.
Actually, return the load argument, if any; this is sometimes the name of a
Lisp file without an extension.  If the feature came from an eval-buffer on
a buffer with no associated file, or an eval-region, return nil.Sloadhist.elc
Ffile-symbols
Return the file and list of symbols associated with FILE.
The file name in the returned list is the string used to load the file,
and may not be the same string as FILE, but it will be equivalent.Sloadhist.elc
Ffile-provides
Return the list of features provided by FILE.Sloadhist.elc
Ffile-requires
Return the list of features required by FILE.Sloadhist.elc
Ffile-dependents
Return the list of loaded libraries that depend on FILE.
This can include FILE itself.Sloadhist.elc
Funload-feature
Unload the library that provided FEATURE, restoring all its autoloads.
If the feature is required by any other loaded code, and optional FORCE
is nil, raise an error.Sfiles.elc
Vdelete-auto-save-files
*Non-nil means delete auto-save file when a buffer is saved or killed.

Note that auto-save file will not be deleted if the buffer is killed
when it has unsaved changes.Sfiles.elc
Vdirectory-abbrev-alist
*Alist of abbreviations for file directories.
A list of elements of the form (FROM . TO), each meaning to replace
FROM with TO when it appears in a directory name.
This replacement is done when setting up the default directory of a
newly visited file.  *Every* FROM string should start with \\` or ^.

Do not use `~' in the TO strings.
They should be ordinary absolute directory names.

Use this feature when you have directories which you normally refer to
via absolute symbolic links or to eliminate automounter mount points
from the beginning of your filenames.  Make TO the name of the link,
and FROM the name it is linked to.Sfiles.elc
Vmake-backup-files
*Non-nil means make a backup of a file the first time it is saved.
This can be done by renaming the file or by copying.

Renaming means that XEmacs renames the existing file so that it is a
backup file, then writes the buffer into a new file.  Any other names
that the old file had will now refer to the backup file.  The new file
is owned by you and its group is defaulted.

Copying means that XEmacs copies the existing file into the backup
file, then writes the buffer on top of the existing file.  Any other
names that the old file had will now refer to the new (edited) file.
The file's owner and group are unchanged.

The choice of renaming or copying is controlled by the variables
`backup-by-copying', `backup-by-copying-when-linked' and
`backup-by-copying-when-mismatch' and
`backup-by-copying-when-privileged-mismatch'.  See also `backup-inhibited'.Sfiles.elc
Vbackup-inhibited
Non-nil means don't make a backup, regardless of the other parameters.
This variable is intended for use by making it local to a buffer.
But it is local only if you make it local.Sfiles.elc
Vbackup-by-copying
*Non-nil means always use copying to create backup files.
See documentation of variable `make-backup-files'.Sfiles.elc
Vbackup-by-copying-when-linked
*Non-nil means use copying to create backups for files with multiple names.
This causes the alternate names to refer to the latest version as edited.
This variable is relevant only if `backup-by-copying' is nil.Sfiles.elc
Vbackup-by-copying-when-mismatch
*Non-nil means create backups by copying if this preserves owner or group.
Renaming may still be used (subject to control of other variables)
when it would not result in changing the owner or group of the file;
that is, for files which are owned by you and whose group matches
the default for a new file created there by you.
This variable is relevant only if `backup-by-copying' is nil.Sfiles.elc
Vbackup-by-copying-when-privileged-mismatch
*Non-nil means create backups by copying to preserve a privileged owner.
Renaming may still be used (subject to control of other variables)
when it would not result in changing the owner of the file or if the owner
has a user id greater than the value of this variable.  This is useful
when low-numbered uid's are used for special system users (such as root)
that must maintain ownership of certain files.
This variable is relevant only if `backup-by-copying' and
`backup-by-copying-when-mismatch' are nil.Sfiles.elc
Fnormal-backup-enable-predicate
Default `backup-enable-predicate' function.
Checks for files in the directory returned by `temp-directory' or specified
by `small-temporary-file-directory'.Sfiles.elc
Vbackup-enable-predicate
Predicate that looks at a file name and decides whether to make backups.
Called with an absolute file name as argument, it returns t to enable backup.Sfiles.elc
Vbuffer-offer-save
*Non-nil in a buffer means always offer to save buffer on exit.
Do so even if the buffer is not visiting a file.
Automatically local in all buffers.Sfiles.elc
Vrevert-without-query
*Specify which files should be reverted without query.
The value is a list of regular expressions.
If the file name matches one of these regular expressions,
then `revert-buffer' reverts the file without querying
if the file has changed on disk and you have not edited the buffer.Sfiles.elc
Vbuffer-file-number
The device number and file number of the file visited in the current buffer.
The value is a list of the form (FILENUM DEVNUM).
This pair of numbers uniquely identifies the file.
If the buffer is visiting a new file, the value is nil.Sfiles.elc
Vbuffer-file-numbers-unique
Non-nil means that buffer-file-number uniquely identifies files.Sfiles.elc
Vsmall-temporary-file-directory
The directory for writing small temporary files.
If non-nil, this directory is used instead of `temporary-file-directory'
by programs that create small temporary files.  This is for systems that
have fast storage with limited space, such as a RAM disk.Sfiles.elc
Vfile-precious-flag
*Non-nil means protect against I/O errors while saving files.
Some modes set this non-nil in particular buffers.

This feature works by writing the new contents into a temporary file
and then renaming the temporary file to replace the original.
In this way, any I/O error in writing leaves the original untouched,
and there is never any instant where the file is nonexistent.

Note that this feature forces backups to be made by copying.
Yet, at the same time, saving a precious file
breaks any hard links between it and other files.Sfiles.elc
Vversion-control
*Control use of version numbers for backup files.
t means make numeric backup versions unconditionally.
nil means make them for files that have some already.
`never' means do not make them.Sfiles.elc
Vdelete-old-versions
*If t, delete excess backup versions silently.
If nil, ask confirmation.  Any other value prevents any trimming.Sfiles.elc
Vkept-old-versions
*Number of oldest versions to keep when a new numbered backup is made.Sfiles.elc
Vkept-new-versions
*Number of newest versions to keep when a new numbered backup is made.
Includes the new backup.  Must be > 0Sfiles.elc
Vrequire-final-newline
*Value of t says silently ensure a file ends in a newline when it is saved.
Non-nil but not t says ask user whether to add a newline when there isn't one.
nil means don't add newlines.Sfiles.elc
Vauto-save-default
*Non-nil says by default do auto-saving of every file-visiting buffer.Sfiles.elc
Vauto-save-visited-file-name
*Non-nil says auto-save a buffer in the file it is visiting, when practical.
Normally auto-save files are written under other names.Sfiles.elc
Vauto-save-file-name-transforms
*Transforms to apply to buffer file name before making auto-save file name.
Each transform is a list (REGEXP REPLACEMENT):
REGEXP is a regular expression to match against the file name.
If it matches, `replace-match' is used to replace the
matching part with REPLACEMENT.
All the transforms in the list are tried, in the order they are listed.
When one transform applies, its result is final;
no further transforms are tried.

The default value is set up to put the auto-save file into the temporary
directory (see the function `temp-directory') for editing a remote file.Sfiles.elc
Vsave-abbrevs
*Non-nil means save word abbrevs too when files are saved.
If `silently', don't ask the user before saving.
Loading an abbrev file sets this to t.Sfiles.elc
Vfind-file-run-dired
*Non-nil means allow `find-file' to visit directories.
To visit the directory, `find-file' runs `find-directory-functions'.Sfiles.elc
Vfind-directory-functions
*List of functions to try in sequence to visit a directory.
Each function is called with the directory name as the sole argument
and should return either a buffer or nil.Sfiles.elc
Vfind-file-not-found-hooks
List of functions to be called for `find-file' on nonexistent file.
These functions are called as soon as the error is detected.
Variable `buffer-file-name' is already set up.
The functions are called in the order given until one of them returns non-nil.Sfiles.elc
Vfind-file-hooks
List of functions to be called after a buffer is loaded from a file.
The buffer's local variables (if any) will have been processed before the
functions are called.Sfiles.elc
Vwrite-file-hooks
List of functions to be called before writing out a buffer to a file.
If one of them returns non-nil, the file is considered already written
and the rest are not called.
These hooks are considered to pertain to the visited file.
So any buffer-local binding of `write-file-hooks' is
discarded if you change the visited file name with \[set-visited-file-name].
 
Don't make this variable buffer-local; instead, use `local-write-file-hooks'.
See also `write-contents-hooks' and `continue-save-buffer'.Sfiles.elc
Vlocal-write-file-hooks
Just like `write-file-hooks', except intended for per-buffer use.
The functions in this list are called before the ones in
`write-file-hooks'.

This variable is meant to be used for hooks that have to do with a
particular visited file.  Therefore, it is a permanent local, so that
changing the major mode does not clear it.  However, calling
`set-visited-file-name' does clear it.Sfiles.elc
Vafter-set-visited-file-name-hooks
List of functions to be called after \[set-visited-file-name]
or during \[write-file].
You can use this hook to restore local values of `write-file-hooks',
`after-save-hook', and `revert-buffer-function', which pertain
to a specific file and therefore are normally killed by a rename.
Put hooks pertaining to the buffer contents on `write-contents-hooks'
and `revert-buffer-insert-file-contents-function'.Sfiles.elc
Vwrite-contents-hooks
List of functions to be called before writing out a buffer to a file.
If one of them returns non-nil, the file is considered already written
and the rest are not called.

This variable is meant to be used for hooks that pertain to the
buffer's contents, not to the particular visited file; thus,
`set-visited-file-name' does not clear this variable; but changing the
major mode does clear it.

This variable automatically becomes buffer-local whenever it is set.
If you use `add-hook' to add elements to the list, use nil for the
LOCAL argument.

See also `write-file-hooks' and `continue-save-buffer'.Sfiles.elc
Vwrite-file-data-hooks
List of functions to be called to put the bytes on disk.
These functions receive the name of the file to write to as argument.
The default behavior is to call
  (write-region (point-min) (point-max) filename nil t)
If one of them returns non-nil, the file is considered already written
and the rest are not called.
These hooks are considered to pertain to the visited file.
So any buffer-local binding of `write-file-data-hooks' is
discarded if you change the visited file name with \[set-visited-file-name].
See also `write-file-hooks'.Sfiles.elc
Venable-local-variables
*Control use of local variables in files you visit.
The value can be t, nil or something else.
A value of t means file local variables specifications are obeyed;
nil means they are ignored; anything else means query.
This variable also controls use of major modes specified in
a -*- line.

The command \[normal-mode], when used interactively,
always obeys file local variable specifications and the -*- line,
and ignores this variable.Sfiles.elc
Venable-local-eval
*Control processing of the "variable" `eval' in a file's local variables.
The value can be t, nil or something else.
A value of t means obey `eval' variables;
nil means ignore them; anything else means query.

The command \[normal-mode] always obeys local-variables lists
and ignores this variable.Sfiles.elc
Vview-read-only
*Non-nil means buffers visiting files read-only, do it in view mode.Sfiles.elc
Fconvert-standard-filename
Convert a standard file's name to something suitable for the current OS.Sfiles.elc
Fpwd
Show the current default directory.Sfiles.elc
Vcd-path
Value of the CDPATH environment variable, as a list.
Not actually set up until the first time you use it.Sfiles.elc
Vcdpath-previous
Prior value of the CDPATH environment variable.Sfiles.elc
Fparse-colon-path
Explode a colon-separated search path into a list of directory names.

If you think you want to use this, you probably don't.  This function
is provided for backward compatibility.  A more robust implementation
of the same functionality is available as `split-path', which see.Sfiles.elc
Fcd-absolute
Change current directory to given absolute file name DIR.Sfiles.elc
Fcd
Make DIR become the current buffer's default directory.
If your environment includes a `CDPATH' variable, try each one of that
colon-separated list of directories when resolving a relative directory name.Sfiles.elc
Fload-file
Load the Lisp file named FILE.Sfiles.elc
Ffile-local-copy
Copy the file FILE into a temporary file on this machine.
Returns the name of the local copy, or nil, if FILE is directly
accessible.Sfiles.elc
Fcompute-buffer-file-truename
Recompute BUFFER's value of `buffer-file-truename'
based on the current value of `buffer-file-name'.
BUFFER defaults to the current buffer if unspecified.Sfiles.elc
Ffile-chase-links
Chase links in FILENAME until a name that is not a link.
Does not examine containing directories for links,
unlike `file-truename'.Sfiles.elc
Fmake-temp-file
Create a temporary file.
The returned file name (created by appending some random characters at the
end of PREFIX, and expanding against the return value of `temp-directory' if
necessary), is guaranteed to point to a newly created empty file.  You can
then use `write-region' to write new data into the file.

If DIR-FLAG is non-nil, create a new empty directory instead of a file.

If SUFFIX is non-nil, add that at the end of the file name.

This function is analogous to mkstemp(3) under POSIX, avoiding the race
condition between testing for the existence of the generated filename (under
POSIX with mktemp(3), under Emacs Lisp with `make-temp-name') and creating
it.Sfiles.elc
Fswitch-to-other-buffer
Switch to the previous buffer.  With a numeric arg, n, switch to the nth
most recent buffer.  With an arg of 0, buries the current buffer at the
bottom of the buffer stack.Sfiles.elc
Fswitch-to-buffer-other-window
Select buffer BUFFER in another window.

This uses the function `display-buffer' as a subroutine; see its
documentation for additional customization information.Sfiles.elc
Fswitch-to-buffer-other-frame
Switch to buffer BUFFER in a newly-created frame.

 This uses the function `display-buffer' as a subroutine; see its
 documentation for additional customization information.Sfiles.elc
Fswitch-to-next-buffer
Switch to the next-most-recent buffer.
This essentially rotates the buffer list forward.
N (interactively, the prefix arg) specifies how many times to rotate
forward, and defaults to 1.  Buffers whose name begins with a space
(i.e. "invisible" buffers) are ignored.Sfiles.elc
Fswitch-to-previous-buffer
Switch to the previously most-recent buffer.
This essentially rotates the buffer list backward.
N (interactively, the prefix arg) specifies how many times to rotate
backward, and defaults to 1.  Buffers whose name begins with a space
(i.e. "invisible" buffers) are ignored.Sfiles.elc
Fswitch-to-next-buffer-in-group
Switch to the next-most-recent buffer in the current group.
This essentially rotates the buffer list forward.
N (interactively, the prefix arg) specifies how many times to rotate
forward, and defaults to 1.  Buffers whose name begins with a space
(i.e. "invisible" buffers) are ignored.Sfiles.elc
Fswitch-to-previous-buffer-in-group
Switch to the previously most-recent buffer in the current group.
This essentially rotates the buffer list backward.
N (interactively, the prefix arg) specifies how many times to rotate
backward, and defaults to 1.  Buffers whose name begins with a space
(i.e. "invisible" buffers) are ignored.Sfiles.elc
Ffind-file-create-switch-thunk
Mark buffer modified if needed, then call SWITCH-FUNCTION. 

The buffer will be marked modified if the file associated with the buffer
does not exist.  This means that \[find-file] on a non-existent file will
create a modified buffer, making \[save-buffer] sufficient to create the
file.

SWITCH-FUNCTION should be `switch-to-buffer' or a related function.  This
function (that is, `find-file-create-switch-thunk') is implemented as a macro
because we don't have built-in lexical scope, a closure created with
`lexical-let' will always run as interpreted code.  Though functions created
by this macro are unlikely to be called in performance-critical contexts.

This function may be called from functions related to `find-file', as well
as `find-file' itself.Sfiles.elc
Ffind-file
Edit file FILENAME.
Switch to a buffer visiting file FILENAME, creating one if none already
exists.  Optional second argument specifies the coding system to use when
decoding the file.  Interactively, with a prefix argument, you will be
prompted for the coding system.

If you do not explicitly specify a coding system, the coding system
is determined as follows:

1. `coding-system-for-read', if non-nil. (This is used by Lisp programs to
      temporarily set an overriding coding system and should almost never
      apply here in `find-file'.)
2. The result of `insert-file-contents-pre-hook', if non-nil. (This is a
      complex interface for handling special cases.)
3. The matching value for this filename from `file-coding-system-alist',
      if any. (This lets you specify the coding system to be used for
      files with particular extensions, names, etc.)
4. `buffer-file-coding-system-for-read', if non-nil. (This is the global
      default -- normally `undecided', so the built-in auto-detection
      mechanism can do its thing.)
5. The coding system 'raw-text.

See `insert-file-contents' for more details about how the process of
determining the coding system works.

Interactively, or if WILDCARDS is non-nil in a call from Lisp,
expand wildcards (if any) and visit multiple files.  Wildcard expansion
can be suppressed by setting `find-file-wildcards' to `nil'.Sfiles.elc
Ffind-file-other-window
Edit file FILENAME, in another window.
May create a new window, or reuse an existing one.  See the function
`display-buffer'.  Optional second argument specifies the coding system to
use when decoding the file.  Interactively, with a prefix argument, you
will be prompted for the coding system.Sfiles.elc
Ffind-file-other-frame
Edit file FILENAME, in a newly-created frame.
Optional second argument specifies the coding system to use when decoding
the file.  Interactively, with a prefix argument, you will be prompted for
the coding system.Sfiles.elc
Ffind-file-read-only
Edit file FILENAME but don't allow changes.
Like \[find-file] but marks buffer as read-only.
Use \[toggle-read-only] to permit editing.
Optional second argument specifies the coding system to use when decoding
the file.  Interactively, with a prefix argument, you will be prompted for
the coding system.Sfiles.elc
Ffind-file-read-only-other-window
Edit file FILENAME in another window but don't allow changes.
Like \[find-file-other-window] but marks buffer as read-only.
Use \[toggle-read-only] to permit editing.
Optional second argument specifies the coding system to use when decoding
the file.  Interactively, with a prefix argument, you will be prompted for
the coding system.Sfiles.elc
Ffind-file-read-only-other-frame
Edit file FILENAME in another frame but don't allow changes.
Like \[find-file-other-frame] but marks buffer as read-only.
Use \[toggle-read-only] to permit editing.
Optional second argument specifies the coding system to use when decoding
the file.  Interactively, with a prefix argument, you will be prompted for
the coding system.Sfiles.elc
Ffind-alternate-file-other-window
Find file FILENAME as a replacement for the file in the next window.
This command does not select that window.  Optional second argument
specifies the coding system to use when decoding the file.  Interactively,
with a prefix argument, you will be prompted for the coding system.Sfiles.elc
Ffind-alternate-file
Find file FILENAME, select its buffer, kill previous buffer.
If the current buffer now contains an empty file that you just visited
(presumably by mistake), use this command to visit the file you really
want.  Optional second argument specifies the coding system to use when
decoding the file.  Interactively, with a prefix argument, you will be
prompted for the coding system.Sfiles.elc
Fcreate-file-buffer
Create a suitably named buffer for visiting FILENAME, and return it.
FILENAME (sans directory) is used unchanged if that name is free;
otherwise a string <2> or <3> or ... is appended to get an unused name.Sfiles.elc
Fgenerate-new-buffer
Create and return a buffer with a name based on NAME.
Choose the buffer's name using `generate-new-buffer-name'.Sfiles.elc
Vabbreviated-home-dir
The user's homedir abbreviated according to `directory-abbrev-alist'.Sfiles.elc
Fabbreviate-file-name
Return a version of FILENAME shortened using `directory-abbrev-alist'.
Type \[describe-variable] directory-abbrev-alist RET for more information.
If optional argument HACK-HOMEDIR is non-nil, then this also substitutes
"~" for the user's home directory.Sfiles.elc
Vfind-file-not-true-dirname-list
*List of logical names for which visiting shouldn't save the true dirname.Sfiles.elc
Ffind-buffer-visiting
Return the buffer visiting file FILENAME (a string).
This is like `get-file-buffer', except that it checks for any buffer
visiting the same file, possibly under a different name.
If there is no such live buffer, return nil.Sfiles.elc
Vfind-file-wildcards
*Non-nil means file-visiting commands should handle wildcards.
For example, if you specify `*.c', that would visit all the files
whose names match the pattern.Sfiles.elc
Vfind-file-suppress-same-file-warnings
*Non-nil means suppress warning messages for symlinked files.
When nil, Emacs prints a warning when visiting a file that is already
visited, but with a different name.  Setting this option to t
suppresses this warning.Sfiles.elc
Ffind-file-noselect
Read file FILENAME into a buffer and return the buffer.
If a buffer exists visiting FILENAME, return that one, but
verify that the file has not changed since visited or saved.
The buffer is not selected, just returned to the caller.
If NOWARN is non-nil, warning messages will be suppressed.
If RAWFILE is non-nil, the file is read literally.Sfiles.elc
Ffind-file-noselect-1
Sfiles.elc
Finsert-file-contents-literally
Like `insert-file-contents', but only reads in the file literally.
A buffer may be modified in several ways after reading into the buffer,
due to Emacs features such as format decoding, character code
conversion, `find-file-hooks', automatic uncompression, etc.

This function ensures that none of these modifications will take place.Sfiles.elc
Finsert-file-literally
Insert contents of file FILENAME into buffer after point with no conversion.

This function is meant for the user to run interactively.
Don't call it from programs!  Use `insert-file-contents-literally' instead.
(Its calling sequence is different; see its documentation).Sfiles.elc
Vfind-file-literally
Non-nil if this buffer was made by `find-file-literally' or equivalent.
This is a permanent local.Sfiles.elc
Ffind-file-literally
Visit file FILENAME with no conversion of any kind.
Format conversion and character code conversion are both disabled,
and multibyte characters are disabled in the resulting buffer.
The major mode used is Fundamental mode regardless of the file name,
and local variable specifications in the file are ignored.
Automatic uncompression and adding a newline at the end of the
file due to `require-final-newline' is also disabled.

You cannot absolutely rely on this function to result in
visiting the file literally.  If Emacs already has a buffer
which is visiting the file, you get the existing buffer,
regardless of whether it was created literally or not.

In a Lisp program, if you want to be sure of accessing a file's
contents literally, you should create a temporary buffer and then read
the file contents into it using `insert-file-contents-literally'.Sfiles.elc
Fafter-find-file
Called after finding a file and by the default revert function.
Sets buffer mode, parses local variables.
Optional args ERROR, WARN, and NOAUTO: ERROR non-nil means there was an
error in reading the file.  WARN non-nil means warn if there
exists an auto-save file more recent than the visited file.
NOAUTO means don't mess with auto-save mode.
Fourth arg AFTER-FIND-FILE-FROM-REVERT-BUFFER non-nil
 means this call was from `revert-buffer'.
Fifth arg NOMODES non-nil means don't alter the file's modes.
Finishes by calling the functions in `find-file-hooks'
unless NOMODES is non-nil.Sfiles.elc
Fnormal-mode
Choose the major mode for this buffer automatically.
Also sets up any specified local variables of the file.
Uses the visited file name, the -*- line, and the local variables spec.

This function is called automatically from `find-file'.  In that case,
we may set up the file-specified mode and local variables,
depending on the value of `enable-local-variables': if it is t, we do;
if it is nil, we don't; otherwise, we query.
In addition, if `local-enable-local-variables' is nil, we do
not set local variables (though we do notice a mode specified with -*-.)

`enable-local-variables' is ignored if you run `normal-mode' interactively,
or from Lisp without specifying the optional argument FIND-FILE;
in that case, this function acts as if `enable-local-variables' were t.Sfiles.elc
Vauto-mode-alist
Alist of filename patterns vs. corresponding major mode functions.
Each element looks like (REGEXP . FUNCTION) or (REGEXP FUNCTION NON-NIL).
(NON-NIL stands for anything that is not nil; the value does not matter.)
Visiting a file whose name matches REGEXP specifies FUNCTION as the
mode function to use.  FUNCTION will be called, unless it is nil.

If the element has the form (REGEXP FUNCTION NON-NIL), then after
calling FUNCTION (if it's not nil), we delete the suffix that matched
REGEXP and search the list again for another match.Sfiles.elc
Vinterpreter-mode-alist
Alist mapping interpreter names to major modes.
This alist is used to guess the major mode of a file based on the
contents of the first line.  This line often contains something like:
#!/bin/sh
but may contain something more imaginative like
#! /bin/env python
or
eval 'exec perl -w -S $0 ${1+"$@"}'.

Each alist element looks like (INTERPRETER . MODE).
The car of each element is a regular expression which is compared
with the name of the interpreter specified in the first line.
If it matches, mode MODE is selected.Sfiles.elc
Vbinary-file-regexps
List of regexps of filenames containing binary (non-text) data.Sfiles.elc
Vinhibit-first-line-modes-regexps
List of regexps; if one matches a file name, don't look for `-*-'.Sfiles.elc
Vinhibit-first-line-modes-suffixes
List of regexps for what to ignore, for `inhibit-first-line-modes-regexps'.
When checking `inhibit-first-line-modes-regexps', we first discard
from the end of the file name anything that matches one of these regexps.Sfiles.elc
Vuser-init-file
File name including directory of user's initialization file.Sfiles.elc
Fset-auto-mode
Select major mode appropriate for current buffer.
This checks for a -*- mode tag in the buffer's text,
compares the filename against the entries in `auto-mode-alist',
or checks the interpreter that runs this file against
`interpreter-mode-alist'.

It does not check for the `mode:' local variable in the
Local Variables section of the file; for that, use `hack-local-variables'.

If `enable-local-variables' is nil, this function does not check for a
-*- mode tag.

If the optional argument JUST-FROM-FILE-NAME is non-nil,
then we do not set anything but the major mode,
and we don't even do that unless it would come from the file name.Sfiles.elc
Vhack-local-variables-hook
Normal hook run after processing a file's local variables specs.
Major modes can use this to examine user-specified local variables
in order to initialize other data structure based on them.

This hook runs even if there were no local variables or if their
evaluation was suppressed.  See also `enable-local-variables' and
`enable-local-eval'.Sfiles.elc
Fhack-local-variables
Parse, and bind or evaluate as appropriate, any local variables
for current buffer.Sfiles.elc
Fhack-local-variables-p
Sfiles.elc
Fhack-local-variables-last-page
Sfiles.elc
Fhack-local-variables-prop-line
Sfiles.elc
Vignored-local-variables
Variables to be ignored in a file's local variable spec.Sfiles.elc
Fhack-one-local-variable-quotep
Sfiles.elc
Fhack-one-local-variable
"Set" one variable in a local variables spec.
A few variable names are treated specially.Sfiles.elc
Vchange-major-mode-with-file-name
*Non-nil means \[write-file] should set the major mode from the file name.
However, the mode will not be changed if
(1) a local variables list or the `-*-' line specifies a major mode, or
(2) the current major mode is a "special" mode,
    not suitable for ordinary files, or
(3) the new file name does not particularly specify any mode.Sfiles.elc
Fset-visited-file-name
Change name of file visited in current buffer to FILENAME.
The next time the buffer is saved it will go in the newly specified file.
nil or empty string as argument means make buffer not be visiting any file.
Remember to delete the initial contents of the minibuffer
if you wish to pass an empty string as the argument.

The optional second argument NO-QUERY, if non-nil, inhibits asking for
confirmation in the case where another buffer is already visiting FILENAME.

The optional third argument ALONG-WITH-FILE, if non-nil, means that
the old visited file has been renamed to the new name FILENAME.Sfiles.elc
Fwrite-file
Write current buffer into file FILENAME.
This makes the buffer visit that file, and marks it as not modified.

If you specify just a directory name as FILENAME, that means to use
the default file name but in that directory.  You can also yank
the default file name into the minibuffer to edit it, using M-n.

If the buffer is not already visiting a file, the default file name
for the output file is the buffer name.

If optional second arg CONFIRM is non-nil, this function
asks for confirmation before overwriting an existing file.
Interactively, this is always the case.

Optional third argument specifies the coding system to use when encoding
the file.  Interactively, with a prefix argument, you will be prompted for
the coding system.Sfiles.elc
Fbackup-buffer
Make a backup of the disk file visited by the current buffer, if appropriate.
This is normally done before saving the buffer the first time.
If the value is non-nil, it is the result of `file-modes' on the original
file; this means that the caller, after saving the buffer, should change
the modes of the new file to agree with the old modes.

A backup may be done by renaming or by copying; see documentation of
variable `make-backup-files'.  If it's done by renaming, then the file is
no longer accessible under its old name.Sfiles.elc
Ffile-name-sans-versions
Return FILENAME sans backup versions or strings.
This is a separate procedure so your site-init or startup file can
redefine it.
If the optional argument KEEP-BACKUP-VERSION is non-nil,
we do not remove backup version numbers, only true file version numbers.Sfiles.elc
Ffile-ownership-preserved-p
Return t if deleting FILE and rewriting it would preserve the owner.Sfiles.elc
Ffile-name-sans-extension
Return FILENAME sans final "extension".
The extension, in a file name, is the part that follows the last `.'.Sfiles.elc
Ffile-name-extension
Return FILENAME's final "extension".
The extension, in a file name, is the part that follows the last `.'.
Return nil for extensionless file names such as `foo'.
Return the empty string for file names such as `foo'.

If PERIOD is non-nil, then the returned value includes the period
that delimits the extension, and if FILENAME has no extension,
the value is "".Sfiles.elc
Vmake-backup-file-name-function
A function to use instead of the default `make-backup-file-name'.
A value of nil gives the default `make-backup-file-name' behaviour.

This could be buffer-local to do something special for specific
files.  If you define it, you may need to change `backup-file-name-p'
and `file-name-sans-versions' too.

See also `backup-directory-alist'.Sfiles.elc
Vbackup-directory-alist
Alist of filename patterns and backup directory names.
Each element looks like (REGEXP . DIRECTORY).  Backups of files with
names matching REGEXP will be made in DIRECTORY.  DIRECTORY may be
relative or absolute.  If it is absolute, so that all matching files
are backed up into the same directory, the file names in this
directory will be the full name of the file backed up with all
directory separators changed to `!' to prevent clashes.  This will not
work correctly if your filesystem truncates the resulting name.

For the common case of all backups going into one directory, the alist
should contain a single element pairing "." with the appropriate
directory name.

If this variable is nil, or it fails to match a filename, the backup
is made in the original file's directory.

On MS-DOS filesystems without long names this variable is always
ignored.Sfiles.elc
Fmake-backup-file-name
Create the non-numeric backup file name for FILE.
Normally this will just be the file's name with `~' appended.
Customization hooks are provided as follows.

If the variable `make-backup-file-name-function' is non-nil, its value
should be a function which will be called with FILE as its argument;
the resulting name is used.

Otherwise a match for FILE is sought in `backup-directory-alist'; see
the documentation of that variable.  If the directory for the backup
doesn't exist, it is created.Sfiles.elc
Fmake-backup-file-name-1
Subroutine of `make-backup-file-name' and `find-backup-file-name'.Sfiles.elc
Fbackup-file-name-p
Return non-nil if FILE is a backup file name (numeric or not).
This is a separate function so you can redefine it for customization.
You may need to redefine `file-name-sans-versions' as well.Sfiles.elc
Fbackup-extract-version
Given the name of a numeric backup file, FN, return the backup number.
Uses the free variable `backup-extract-version-start', whose value should be
the index in the name where the version number begins.Sfiles.elc
Ffind-backup-file-name
Find a file name for a backup file FN, and suggestions for deletions.
Value is a list whose car is the name for the backup file
and whose cdr is a list of old versions to consider deleting now.
If the value is nil, don't make a backup.
Uses `backup-directory-alist' in the same way as does
`make-backup-file-name'.Sfiles.elc
Ffile-nlinks
Return number of names file FILENAME has.Sfiles.elc
Ffile-relative-name
Convert FILENAME to be relative to DIRECTORY (default: `default-directory').
This function returns a relative file name which is equivalent to FILENAME
when used with that default directory as the default.
If this is impossible (which can happen on MS Windows when the file name
and directory use different drive names) then it returns FILENAME.Sfiles.elc
Fsave-buffer
Save current buffer in visited file if modified.  Versions described below.
By default, makes the previous version into a backup file
 if previously requested or if this is the first save.
With 1 \[universal-argument], marks this version
 to become a backup when the next save is done.
With 2 \[universal-argument]'s,
 unconditionally makes the previous version into a backup file.
With 3 \[universal-argument]'s, marks this version
 to become a backup when the next save is done,
 and unconditionally makes the previous version into a backup file.

With argument of 0, never make the previous version into a backup file.

If a file's name is FOO, the names of its numbered backup versions are
 FOO.~i~ for various integers i.  A non-numbered backup file is called FOO~.
Numeric backups (rather than FOO~) will be made if value of
 `version-control' is not the atom `never' and either there are already
 numeric versions of the file being backed up, or `version-control' is
 non-nil.
We don't want excessive versions piling up, so there are variables
 `kept-old-versions', which tells Emacs how many oldest versions to keep,
 and `kept-new-versions', which tells how many newest versions to keep.
 Defaults are 2 old versions and 2 new.
`dired-kept-versions' controls dired's clean-directory (.) command.
If `delete-old-versions' is nil, system will query user
 before trimming versions.  Otherwise it does it silently.

If `vc-make-backup-files' is nil, which is the default,
 no backup files are made for files managed by version control.
 (This is because the version control system itself records previous versions.)

See the subroutine `basic-save-buffer' for more information.Sfiles.elc
Fdelete-auto-save-file-if-necessary
Delete auto-save file for current buffer if `delete-auto-save-files' is t.
Normally delete only if the file was written by this XEmacs since
the last real save, but optional arg FORCE non-nil means delete anyway.Sfiles.elc
Fbasic-write-file-data
Sfiles.elc
Vafter-save-hook
Normal hook that is run after a buffer is saved to its file.
These hooks are considered to pertain to the visited file.
So this list is cleared if you change the visited file name.Sfiles.elc
Vsave-buffer-coding-system
If non-nil, use this coding system for saving the buffer.
More precisely, use this coding system in place of the
value of `buffer-file-coding-system', when saving the buffer.
Calling `write-region' for any purpose other than saving the buffer
will still use `buffer-file-coding-system'; this variable has no effect
in such cases.Sfiles.elc
Ffiles-fetch-hook-value
Sfiles.elc
Fbasic-save-buffer
Save the current buffer in its visited file, if it has been modified.
The hooks `write-contents-hooks', `local-write-file-hooks' and
`write-file-hooks' get a chance to do the job of saving; if they do not,
then the buffer is saved in the visited file in the usual way.
After saving the buffer, this function runs `after-save-hook'.Sfiles.elc
Fbasic-save-buffer-1
Sfiles.elc
Fbasic-save-buffer-2
Sfiles.elc
Fcontinue-save-buffer
Provide a clean way for a write-file-hook to wrap AROUND
the execution of the remaining hooks and writing to disk.
Do not call this function except from a functions
on the `write-file-hooks' or `write-contents-hooks' list.
A hook that calls this function must return non-nil,
to signal completion to its caller.  `continue-save-buffer'
always returns non-nil.Sfiles.elc
Fdiff-buffer-with-file
View the differences between BUFFER and its associated file.
This requires the external program `diff' to be in your `exec-path'.Sfiles.elc
Fdiff-files-for-recover
Diff two files for recovering or comparing against the last saved version.
PURPOSE is an informational string used for naming the resulting buffer.
FILE-1 and FILE-2 are the two files to compare.
FAILED-FILE-1 and FAILED-FILE-2 are the names of files for which we should 
generate directory listings on failure.
CODING-SYSTEM is the coding system of the resulting buffer.Sfiles.elc
Vsave-some-buffers-query-display-buffer
*Non-nil makes `\[save-some-buffers]' switch to the buffer offered for saving.Sfiles.elc
Fsave-some-buffers
Save some modified file-visiting buffers.  Asks user about each one.
Optional argument (the prefix) non-nil means save all with no questions.
Optional second argument PRED determines which buffers are considered:
If PRED is nil, all the file-visiting buffers are considered.
If PRED is t, then certain non-file buffers will also be considered.
If PRED is a zero-argument function, it indicates for each buffer whether
to consider it or not when called with that buffer current.Sfiles.elc
Fnot-modified
Mark current buffer as unmodified, not needing to be saved.
With prefix arg, mark buffer as modified, so \[save-buffer] will save.

It is not a good idea to use this function in Lisp programs, because it
prints a message in the minibuffer.  Instead, use `set-buffer-modified-p'.Sfiles.elc
Ftoggle-read-only
Change whether this buffer is visiting its file read-only.
With arg, set read-only iff arg is positive.
If visiting file read-only and `view-read-only' is non-nil, enter view mode.Sfiles.elc
Finsert-file
Insert contents of file FILENAME into buffer after point.
Set mark after the inserted text.

Optional second argument specifies the coding system to use when decoding
the file.  Interactively, with a prefix argument, you will be prompted for
the coding system.

This function is meant for the user to run interactively.  Don't call it
from programs!  Use `insert-file-contents' instead.  (Its calling sequence
is different; see its documentation).Sfiles.elc
Fappend-to-file
Append the contents of the region to the end of file FILENAME.
When called from a function, expects three arguments, START, END and
FILENAME.  START and END are buffer positions saying what text to write.
Optional fourth argument specifies the coding system to use when encoding
the file.  Interactively, with a prefix argument, you will be prompted for
the coding system.Sfiles.elc
Ffile-newest-backup
Return most recent backup file for FILENAME or nil if no backups exist.Sfiles.elc
Frename-uniquely
Rename current buffer to a similar name not already taken.
This function is useful for creating multiple shell process buffers
or multiple mail buffers, etc.Sfiles.elc
Fmake-directory-path
Create all the directories along path that don't exist yet.Sfiles.elc
Fmake-directory
Create the directory DIR and any nonexistent parent dirs.
Interactively, the default choice of directory to create
is the current default directory for file names.
That is useful when you have visited a file in a nonexistent directory.

Noninteractively, the second (optional) argument PARENTS says whether
to create parent directories if they don't exist.Sfiles.elc
Vrevert-buffer-function
Function to use to revert this buffer, or nil to do the default.
The function receives two arguments IGNORE-AUTO and NOCONFIRM,
which are the arguments that `revert-buffer' received.Sfiles.elc
Vrevert-buffer-insert-file-contents-function
Function to use to insert contents when reverting this buffer.
Gets two args, first the nominal file name to use,
and second, t if reading the auto-save file.
If the current buffer contents are to be discarded, the function must do
so itself.

The function you specify is responsible for updating (or preserving) point.Sfiles.elc
Vbefore-revert-hook
Normal hook for `revert-buffer' to run before reverting.
If `revert-buffer-function' is used to override the normal revert
mechanism, this hook is not used.Sfiles.elc
Vafter-revert-hook
Normal hook for `revert-buffer' to run after reverting.
Note that the hook value that it runs is the value that was in effect
before reverting; that makes a difference if you have buffer-local
hook functions.

If `revert-buffer-function' is used to override the normal revert
mechanism, this hook is not used.Sfiles.elc
Vrevert-buffer-internal-hook
Don't use this.Sfiles.elc
Frevert-buffer
Replace the buffer text with the text of the visited file on disk.
This undoes all changes since the file was visited or saved.
With a prefix argument, offer to revert from latest auto-save file, if
that is more recent than the visited file.

This command also refreshes certain special buffers that contain text
which doesn't come from a file, but reflects some other data base
instead: for example, Dired buffers and buffer-list buffers.  This is
implemented by having the modes set `revert-buffer-function'.

When called from Lisp, the first argument is IGNORE-AUTO; only offer
to revert from the auto-save file when this is nil.  Note that the
sense of this argument is the reverse of the prefix argument, for the
sake of backward compatibility.  IGNORE-AUTO is optional, defaulting
to nil.

Optional second argument NOCONFIRM means don't ask for confirmation at
all.

Optional third argument PRESERVE-MODES non-nil means don't alter
the buffer's modes.  Otherwise, reinitialize them using `normal-mode'.

If the value of `revert-buffer-function' is non-nil, it is called to
do all the work for this command.  Otherwise, the hooks
`before-revert-hook' and `after-revert-hook' are run at the beginning
and the end, and if `revert-buffer-insert-file-contents-function' is
non-nil, it is called instead of rereading visited file contents.

If the buffer-modified flag is nil, and we are not reverting from an
auto-save file, then compare the contents of the buffer and the file.
Revert only if they differ.Sfiles.elc
Frevert-buffer-internal
Read contents of FILE-NAME into a buffer, and compare to current buffer.
Return nil if identical, and the new buffer if different.Sfiles.elc
Vrecover-file-diff-program
Absolute or relative name of the `diff' program used by `recover-file'.Sfiles.elc
Vrecover-file-diff-arguments
List of arguments (switches) to pass to `diff' by `recover-file'.Sfiles.elc
Frecover-file
Visit file FILE, but get contents from its last auto-save file.Sfiles.elc
Frecover-session
Recover auto save files from a previous Emacs session.
This command first displays a Dired buffer showing you the
previous sessions that you could recover from.
To choose one, move point to the proper line and then type C-c C-c.
Then you'll be asked about a number of files to recover.Sfiles.elc
FRecover-session-files-from-auto-save-list-file
Return the auto save files in list file FILE that are current.Sfiles.elc
Frecover-session-finish
Choose one saved session to recover auto-save files from.
This command is used in the special Dired buffer created by
\[recover-session].Sfiles.elc
Fkill-some-buffers
For each buffer in LIST, ask whether to kill it.
LIST defaults to all existing live buffers.Sfiles.elc
Fauto-save-mode
Toggle auto-saving of contents of current buffer.
With prefix argument ARG, turn auto-saving on if positive, else off.Sfiles.elc
Frename-auto-save-file
Adjust current buffer's auto save file name for current conditions.
Also rename any existing auto save file, if it was made in this session.Sfiles.elc
Fwildcard-to-regexp
Given a shell file name pattern WILDCARD, return an equivalent regexp.
The generated regexp will match a filename iff the filename
matches that wildcard according to shell rules.  Only wildcards known
by `sh' are supported.Sfiles.elc
Vlist-directory-brief-switches
*Switches for list-directory to pass to `ls' for brief listing.Sfiles.elc
Vlist-directory-verbose-switches
*Switches for list-directory to pass to `ls' for verbose listing,Sfiles.elc
Ffile-expand-wildcards
Expand wildcard pattern PATTERN.
This returns a list of file names which match the pattern.

If PATTERN is written as an absolute relative file name,
the values are absolute also.

If PATTERN is written as a relative file name, it is interpreted
relative to the current default directory, `default-directory'.
The file names returned are normally also relative to the current
default directory.  However, if FULL is non-nil, they are absolute.Sfiles.elc
Flist-directory
Display a list of files in or matching DIRNAME, a la `ls'.
DIRNAME is globbed by the shell if necessary.
Prefix arg (second arg if noninteractive) means supply -l switch to `ls'.
Actions controlled by variables `list-directory-brief-switches'
and `list-directory-verbose-switches'.Sfiles.elc
Fshell-quote-wildcard-pattern
Quote characters special to the shell in PATTERN, leave wildcards alone.

PATTERN is assumed to represent a file-name wildcard suitable for the
underlying filesystem.  For Unix and GNU/Linux, the characters from the
set [ \t\n;<>&|()#$] are quoted with a backslash; for DOS/Windows, all
the parts of the pattern which don't include wildcard characters are
quoted with double quotes.
Existing quote characters in PATTERN are left alone, so you can pass
PATTERN that already quotes some of the special characters.Sfiles.elc
Vinsert-directory-program
Absolute or relative name of the `ls' program used by `insert-directory'.Sfiles.elc
Finsert-directory
Insert directory listing for FILE, formatted according to SWITCHES.
Leaves point after the inserted text.
SWITCHES may be a string of options, or a list of strings.
Optional third arg WILDCARD means treat FILE as shell wildcard.
Optional fourth arg FULL-DIRECTORY-P means file is a directory and
switches do not contain `d', so that a full listing is expected.

This works by running a directory listing program
whose name is in the variable `insert-directory-program'.
If WILDCARD, it also runs the shell specified by `shell-file-name'.Sfiles.elc
Finsert-directory-adj-pos
Convert `ls --dired' file name position value POS to a buffer position.
File name position values returned in ls --dired output
count only stdout; they don't count the error messages sent to stderr.
So this function converts to them to real buffer positions.
ERROR-LINES is a list of buffer positions of error message lines,
of the form (START END).Sfiles.elc
Finsert-directory-safely
Insert directory listing for FILE, formatted according to SWITCHES.

Like `insert-directory', but if FILE does not exist, it inserts a
message to that effect instead of signaling an error.Sfiles.elc
Vkill-emacs-query-functions
Functions to call with no arguments to query about killing XEmacs.
If any of these functions returns nil, killing Emacs is cancelled.
`save-buffers-kill-emacs' (\[save-buffers-kill-emacs]) calls these functions,
but `kill-emacs', the low level primitive, does not.
See also `kill-emacs-hook'.Sfiles.elc
Vconfirm-kill-emacs
How to ask for confirmation when leaving Emacs.
If nil, the default, don't ask at all.  If the value is non-nil, it should
be a predicate function such as `yes-or-no-p'.Sfiles.elc
Fsave-buffers-kill-emacs
Offer to save each buffer, then kill this XEmacs process.
With prefix arg, silently save all file-visiting buffers, then kill.Sfiles.elc
Fsymlink-expand-file-name
If FILENAME is a symlink, return its non-symlink equivalent.
Unlike `file-truename', this doesn't chase symlinks in directory
components of the file or expand a relative pathname into an
absolute one.Sfiles.elc
Ffile-remote-p
Test whether FILE specifies a location on a remote system.
Return an identification of the system if the location is indeed
remote.  The identification of the system may comprise a method
to access the system and its hostname, amongst other things.

For example, the filename "/user@host:/foo" specifies a location
on the system "/user@host:".

IDENTIFICATION specifies which part of the identification shall
be returned as string.  IDENTIFICATION can be the symbol
`method', `user' or `host'; any other value is handled like nil
and means to return the complete identification string.

If CONNECTED is non-nil, the function returns an identification only
if FILE is located on a remote system, and a connection is established
to that remote system.

`file-remote-p' will never open a connection on its own.Sfiles.elc
Ffile-name-non-special
Sfiles.elc
Vfile-system-case-alist
Alist to decide where file name case is significant. 

The format is ((PATTERN . VAL) ...), where PATTERN is a regular expression
matching a file name, and VAL is t if corresponding file names are
case-insensitive, nil if corresponding file names are case sensitive. Only
the first match will be used.

This list is used by `file-system-ignore-case-p', itself used in tab
completion; see also `default-file-system-ignore-case'.Sfiles.elc
Ffile-system-ignore-case-p
Return t if PATH resides on a file system with case-insensitive names.
Otherwise, return nil.  See `file-system-case-alist' and
`default-file-system-ignore-case'.Slib-complete.elc
Flibrary-all-completions
Return all completions for FILE in any directory on SEARCH-PATH.
If optional third argument FULL is non-nil, returned pathnames should be 
  absolute rather than relative to some directory on the SEARCH-PATH.
If optional fourth argument FAST is non-nil, don't sort the completions,
  or remove duplicates.Slib-complete.elc
Fprogn-with-message
(progn-with-message MESSAGE FORMS ...)
Display MESSAGE and evaluate FORMS, returning value of the last one.Slib-complete.elc
Vlib-complete:cache
Used within `read-library' and `read-library-internal' to prevent 
costly repeated calls to `library-all-completions'.
Format is a list of lists of the form

    ([<path> <subdir>] <cache-record> <cache-record> ...)

where each <cache-record> has the form

   (<root> <modtimes> <completion-table>)Slib-complete.elc
Vlib-complete:max-cache-size
*Maximum number of search paths which are cached.Slib-complete.elc
Fread-library-internal
Don't call this.Slib-complete.elc
Fread-library
Read library name, prompting with PROMPT and completing in directories
from SEARCH-PATH.  A nil in the search path represents the current
directory.  Completions for a given search-path are cached, with the
cache being invalidated whenever one of the directories on the path changes.
Default to DEFAULT if user enters a null string.
Optional fourth arg MUST-MATCH non-nil means require existing file's name.
  Non-nil and non-t means also require confirmation after completion.
Optional fifth argument FULL non-nil causes a full pathname, rather than a 
  relative pathname, to be returned.  Note that FULL implies MUST-MATCH.
Optional sixth argument FILTER can be used to provide a function to
  filter the completions.  This function is passed the filename, and should
  return a transformed filename (possibly a null transformation) or nil, 
  indicating that the filename should not be included in the completions.Slib-complete.elc
Fread-library-name
PROMPTs for and returns an existing Elisp library name (without any suffix)
or the empty string.Slib-complete.elc
Fload-library
Load the library named LIBRARY.
This is an interface to the function `load'.Slib-complete.elc
Vfind-library-source-path
The default list of directories where find-library searches.

If this variable is `nil' then find-library searches `load-path' by
default.

If this is set to a function, it will be called the first time this value
is needed, to compute the actual list, which will then be substituted into
the variable.

A good way to set this variable is like this:

(setq find-library-source-path
  #'(lambda ()
     (paths-find-recursive-load-path
      (list lisp-directory "/src/xemacs/xemacs-packages-src/"))))
Slib-complete.elc
Ffind-library
Find and display in the current window the source for the Elisp LIBRARY.
LIBRARY should be a name without any path information and may include or omit
the ".el" suffix.  Under XEmacs/Mule, the optional second argument CODESYS
specifies the coding system to use when decoding the file.  Interactively,
with a prefix argument, this prompts for the coding system.  Optional third
argument DISPLAY-FUNCTION must take two arguments, the filename to display
and CODESYS.  The default for DISPLAY-FUNCTION is `find-file'.

This function searches `find-library-source-path' to find the library;
if this is nil (the default), then `load-path' is searched.Slib-complete.elc
Ffind-library-other-window
Find and display in another window the source for the Elisp LIBRARY.
LIBRARY should be a name without any path information and may include or omit
the ".el" suffix.  Under XEmacs/Mule, the optional second argument CODESYS
specifies the coding system to use when decoding the file.  Interactively,
with a prefix argument, this prompts for the coding system.Slib-complete.elc
Ffind-library-other-frame
Find and display in another frame the source for the Elisp LIBRARY.
LIBRARY should be a name without any path information and may include or omit
the ".el" suffix.  Under XEmacs/Mule, the optional second argument CODESYS
specifies the coding system to use when decoding the file.  Interactively,
with a prefix argument, this prompts for the coding system.Sformat.elc
Vformat-alist
List of information about understood file formats.
Elements are of the form (NAME DOC-STR REGEXP FROM-FN TO-FN MODIFY MODE-FN).

NAME    is a symbol, which is stored in `buffer-file-format'.

DOC-STR should be a single line providing more information about the
        format.  It is currently unused, but in the future will be shown to
        the user if they ask for more information.

REGEXP  is a regular expression to match against the beginning of the file;
        it should match only files in that format.

FROM-FN is called to decode files in that format; it gets two args, BEGIN
        and END, and can make any modifications it likes, returning the new
        end.  It must make sure that the beginning of the file no longer
        matches REGEXP, or else it will get called again.
	Alternatively, FROM-FN can be a string, which specifies a shell command
	(including options) to be used as a filter to perform the conversion.

TO-FN   is called to encode a region into that format; it is passed three
        arguments: BEGIN, END, and BUFFER.  BUFFER is the original buffer that
        the data being written came from, which the function could use, for
        example, to find the values of local variables.  TO-FN should either
        return a list of annotations like `write-region-annotate-functions',
        or modify the region and return the new end.
	Alternatively, TO-FN can be a string, which specifies a shell command
	(including options) to be used as a filter to perform the conversion.

MODIFY, if non-nil, means the TO-FN wants to modify the region.  If nil,
        TO-FN will not make any changes but will instead return a list of
        annotations.

MODE-FN, if specified, is called when visiting a file with that format.Sformat.elc
Fformat-encode-run-method
Translate using function or shell script METHOD the text from FROM to TO.
If METHOD is a string, it is a shell command;
otherwise, it should be a Lisp function.
BUFFER should be the buffer that the output originally came from.Sformat.elc
Fformat-decode-run-method
Decode using function or shell script METHOD the text from FROM to TO.
If METHOD is a string, it is a shell command;
otherwise, it should be a Lisp function.Sformat.elc
Fformat-annotate-function
Return annotations for writing region as FORMAT.
FORMAT is a symbol naming one of the formats defined in `format-alist',
it must be a single symbol, not a list like `buffer-file-format'.
FROM and TO delimit the region to be operated on in the current buffer.
ORIG-BUF is the original buffer that the data came from.
This function works like a function on `write-region-annotate-functions':
it either returns a list of annotations, or returns with a different buffer
current, which contains the modified text to write.

For most purposes, consider using `format-encode-region' instead.Sformat.elc
Fformat-decode
Decode text from any known FORMAT.
FORMAT is a symbol appearing in `format-alist' or a list of such symbols,
or nil, in which case this function tries to guess the format of the data by
matching against the regular expressions in `format-alist'.  After a match is
found and the region decoded, the alist is searched again from the beginning
for another match.

Second arg LENGTH is the number of characters following point to operate on.
If optional third arg VISIT-FLAG is true, set `buffer-file-format'
to the list of formats used, and call any mode functions defined for those
formats.

Returns the new length of the decoded region.

For most purposes, consider using `format-decode-region' instead.

This function is called by insert-file-contents whenever a file is read.Sformat.elc
Fformat-decode-buffer
Translate the buffer from some FORMAT.
If the format is not specified, this function attempts to guess.
`buffer-file-format' is set to the format used, and any mode-functions
for the format are called.Sformat.elc
Fformat-decode-region
Decode the region from some format.
Arg FORMAT is optional; if omitted the format will be determined by looking
for identifying regular expressions at the beginning of the region.Sformat.elc
Fformat-encode-buffer
Translate the buffer into FORMAT.
FORMAT defaults to `buffer-file-format'.  It is a symbol naming one of the
formats defined in `format-alist', or a list of such symbols.Sformat.elc
Fformat-encode-region
Translate the region into some FORMAT.
FORMAT defaults to `buffer-file-format', it is a symbol naming
one of the formats defined in `format-alist', or a list of such symbols.Sformat.elc
Fformat-write-file
Write current buffer into a FILE using some FORMAT.
Makes buffer visit that file and sets the format as the default for future
saves.  If the buffer is already visiting a file, you can specify a directory
name as FILE, to write a file of the same old name in that directory.Sformat.elc
Fformat-find-file
Find the file FILE using data format FORMAT.
If FORMAT is nil then do not do any format conversion.Sformat.elc
Fformat-insert-file
Insert the contents of file FILE using data format FORMAT.
If FORMAT is nil then do not do any format conversion.
The optional third and fourth arguments START and END specify
the part of the file to read.

The return value is like the value of `insert-file-contents':
a list (ABSOLUTE-FILE-NAME . SIZE).Sformat.elc
Fformat-read
Read and return the name of a format.
Return value is a list, like `buffer-file-format'; it may be nil.
Formats are defined in `format-alist'.  Optional arg is the PROMPT to use.Sformat.elc
Fformat-replace-strings
Do multiple replacements on the buffer.
ALIST is a list of (from . to) pairs, which should be proper arguments to
`search-forward' and `replace-match' respectively.
Optional 2nd arg REVERSE, if non-nil, means the pairs are (to . from), so that
you can use the same list in both directions if it contains only literal
strings.
Optional args BEGIN and END specify a region of the buffer to operate on.Sformat.elc
Fformat-deannotate-region
Translate annotations in the region into text properties.
This sets text properties between FROM to TO as directed by the
TRANSLATIONS and NEXT-FN arguments.

NEXT-FN is a function that searches forward from point for an annotation.
It should return a list of 4 elements: (BEGIN END NAME POSITIVE).  BEGIN and
END are buffer positions bounding the annotation, NAME is the name searched
for in TRANSLATIONS, and POSITIVE should be non-nil if this annotation marks
the beginning of a region with some property, or nil if it ends the region.
NEXT-FN should return nil if there are no annotations after point.

The basic format of the TRANSLATIONS argument is described in the
documentation for the `format-annotate-region' function.  There are some
additional things to keep in mind for decoding, though:

When an annotation is found, the TRANSLATIONS list is searched for a
text-property name and value that corresponds to that annotation.  If the
text-property has several annotations associated with it, it will be used only
if the other annotations are also in effect at that point.  The first match
found whose annotations are all present is used.

The text property thus determined is set to the value over the region between
the opening and closing annotations.  However, if the text-property name has a
non-nil `format-list-valued' property, then the value will be consed onto the
surrounding value of the property, rather than replacing that value.

There are some special symbols that can be used in the "property" slot of
the TRANSLATIONS list: PARAMETER and FUNCTION (spelled in uppercase).
Annotations listed under the pseudo-property PARAMETER are considered to be
arguments of the immediately surrounding annotation; the text between the
opening and closing parameter annotations is deleted from the buffer but saved
as a string.  The surrounding annotation should be listed under the
pseudo-property FUNCTION.  Instead of inserting a text-property for this
annotation, the function listed in the VALUE slot is called to make whatever
changes are appropriate.  The function's first two arguments are the START and
END locations, and the rest of the arguments are any PARAMETERs found in that
region.

Any annotations that are found by NEXT-FN but not defined by TRANSLATIONS
are saved as values of the `unknown' text-property (which is list-valued).
The TRANSLATIONS list should usually contain an entry of the form
    (unknown (nil format-annotate-value))
to write these unknown annotations back into the file.Sformat.elc
Fformat-subtract-regions
Remove the regions in SUBTRAHEND from the regions in MINUEND.  A region
is a dotted pair (from . to).  Both parameters are lists of regions.  Each
list must contain nonoverlapping, noncontiguous regions, in descending
order.  The result is also nonoverlapping, noncontiguous, and in descending
order.  The first element of MINUEND can have a cdr of nil, indicating that
the end of that region is not yet known.Sformat.elc
Fformat-property-increment-region
Increment property PROP over the region between FROM and TO by the
amount DELTA (which may be negative).  If property PROP is nil anywhere
in the region, it is treated as though it were DEFAULT.Sformat.elc
Fformat-insert-annotations
Apply list of annotations to buffer as `write-region' would.
Inserts each element of the given LIST of buffer annotations at its
appropriate place.  Use second arg OFFSET if the annotations' locations are
not relative to the beginning of the buffer: annotations will be inserted
at their location-OFFSET+1 (ie, the offset is treated as the character number
of the first character in the buffer).Sformat.elc
Fformat-annotate-value
Return OLD and NEW as a (close . open) annotation pair.
Useful as a default function for TRANSLATIONS alist when the value of the text
property is the name of the annotation that you want to use, as it is for the
`unknown' text property.Sformat.elc
Fformat-annotate-region
Generate annotations for text properties in the region.
Searches for changes between FROM and TO, and describes them with a list of
annotations as defined by alist TRANSLATIONS and FORMAT-FN.  IGNORE lists text
properties not to consider; any text properties that are neither ignored nor
listed in TRANSLATIONS are warned about.
If you actually want to modify the region, give the return value of this
function to `format-insert-annotations'.

Format of the TRANSLATIONS argument:

Each element is a list whose car is a PROPERTY, and the following
elements are VALUES of that property followed by the names of zero or more
ANNOTATIONS.  Whenever the property takes on that value, the annotations
(as formatted by FORMAT-FN) are inserted into the file.
When the property stops having that value, the matching negated annotation
will be inserted (it may actually be closed earlier and reopened, if
necessary, to keep proper nesting).

If the property's value is a list, then each element of the list is dealt with
separately.

If a VALUE is numeric, then it is assumed that there is a single annotation
and each occurrence of it increments the value of the property by that number.
Thus, given the entry (left-margin (4 "indent")), if the left margin
changes from 4 to 12, two <indent> annotations will be generated.

If the VALUE is nil, then instead of annotations, a function should be
specified.  This function is used as a default: it is called for all
transitions not explicitly listed in the table.  The function is called with
two arguments, the OLD and NEW values of the property.  It should return
lists of annotations like `format-annotate-location' does.

    The same structure can be used in reverse for reading files.Sformat.elc
Fformat-annotate-location
Return annotation(s) needed at LOCATION.
This includes any properties that change between LOC-1 and LOC.
If ALL is true, don't look at previous location, but generate annotations for
all non-nil properties.
Third argument IGNORE is a list of text-properties not to consider.

Return value is a vector of 3 elements:
1. List of names of the annotations to close
2. List of the names of annotations to open.
3. List of properties that were ignored or couldn't be annotated.Sformat.elc
Fformat-annotate-single-property-change
Return annotations for PROPERTY changing from OLD to NEW.
These are searched for in the TRANSLATIONS alist.
If NEW does not appear in the list, but there is a default function, then that
function is called.
Annotations to open and to close are returned as a dotted pair.Sformat.elc
Fformat-annotate-atomic-property-change
Internal function annotate a single property change.
PROP-ALIST is the relevant segment of a TRANSLATIONS list.
OLD and NEW are the values.Sindent.elc
Vstandard-indent
Default number of columns for margin-changing functions to indent.Sindent.elc
Vindent-line-function
Function to indent current line.Sindent.elc
Findent-according-to-mode
Indent line in proper way for current major mode.Sindent.elc
Findent-for-tab-command
Indent line in proper way for current major mode.Sindent.elc
Findent-rigidly
Indent all lines starting in the region sideways by COUNT columns.
Called from a program, takes three arguments, START, END and COUNT.Sindent.elc
Findent-line-to
Indent current line to COLUMN.
This function removes or adds spaces and tabs at beginning of line
only if necessary.  It leaves point at end of indentation.Sindent.elc
Fcurrent-left-margin
Return the left margin to use for this line.
This is the value of the buffer-local variable `left-margin' plus the value
of the `left-margin' text-property at the start of the line.Sindent.elc
Fmove-to-left-margin
Move to the left margin of the current line.
With optional argument, move forward N-1 lines first.
The column moved to is the one given by the `current-left-margin' function.
If the line's indentation appears to be wrong, and this command is called
interactively or with optional argument FORCE, it will be fixed.Sindent.elc
Findent-to-left-margin
Indent current line to the column given by `current-left-margin'.Sindent.elc
Fdelete-to-left-margin
Remove left margin indentation from a region.
The amount of indentation to delete is determined by calling the
function `current-left-margin'.
In no case will it delete non-whitespace.
Args FROM and TO are optional; default is the whole buffer.Sindent.elc
Fset-left-margin
Set the left margin of the region to WIDTH.
If `auto-fill-mode' is active, re-fill the region to fit the new margin.Sindent.elc
Fset-right-margin
Set the right margin of the region to WIDTH.
If `auto-fill-mode' is active, re-fill the region to fit the new margin.Sindent.elc
Falter-text-property
Programmatically change value of a text-property.
For each region between FROM and TO that has a single value for PROPERTY,
apply FUNCTION to that value and sets the property to the function's result.
Optional fifth argument OBJECT specifies the string or buffer to operate on.Sindent.elc
Fincrease-left-margin
Increase or decrease the left-margin of the region.
With no prefix argument, this adds `standard-indent' of indentation.
A prefix arg (optional third arg INC noninteractively) specifies the amount
to change the margin by, in characters.
If `auto-fill-mode' is active, re-fill the region to fit the new margin.Sindent.elc
Fdecrease-left-margin
Make the left margin of the region smaller.
With no prefix argument, decrease the indentation by `standard-indent'.
A prefix arg (optional third arg INC noninteractively) specifies the amount
to change the margin by, in characters.
If `auto-fill-mode' is active, re-fill the region to fit the new margin.Sindent.elc
Fincrease-right-margin
Increase the right-margin of the region.
With no prefix argument, increase the right margin by `standard-indent'.
A prefix arg (optional third arg INC noninteractively) specifies the amount
to change the margin by, in characters.  A negative argument decreases
the right margin width.
If `auto-fill-mode' is active, re-fill the region to fit the new margin.Sindent.elc
Fdecrease-right-margin
Make the right margin of the region smaller.
With no prefix argument, decrease the right margin by `standard-indent'.
A prefix arg (optional third arg INC noninteractively) specifies the amount
of width to remove, in characters.  A negative argument increases
the right margin width.
If `auto-fill-mode' is active, re-fills region to fit in new margin.Sindent.elc
Fbeginning-of-line-text
Move to the beginning of the text on this line.
With optional argument, move forward N-1 lines first.
From the beginning of the line, moves past the left-margin indentation, the
fill-prefix, and any indentation used for centering or right-justifying the
line, but does not move past any whitespace that was explicitly inserted
(such as a tab used to indent the first line of a paragraph).Sindent.elc
Vindent-region-function
Short cut function to indent region using `indent-according-to-mode'.
A value of nil means really run `indent-according-to-mode' on each line.Sindent.elc
Findent-region
Indent each nonblank line in the region.
With no argument, indent each line using `indent-according-to-mode',
or use `indent-region-function' to do the whole region if that's non-nil.
If there is a fill prefix, make each line start with the fill prefix.
With argument COLUMN, indent each line to that column.
Called from a program, takes three args: START, END and COLUMN.Sindent.elc
Vindent-balanced-expression-function
Short cut function to indent balanced expression.
A value of nil means really run `indent-according-to-mode' on each line of
balanced expression as computed with `forward-sexp'.Sindent.elc
Findent-balanced-expression
Indent each nonblank line in the balanced expression at point.
Use `indent-balanced-expression-function' if that's non-nil, or find
expression with `forward-sexp' and use `indent-region' on result.Sindent.elc
Findent-region-or-balanced-expression
Indent region if active, or balanced expression at point.
See `indent-region' and `indent-balanced-expression'.Sindent.elc
Findent-relative-maybe
Indent a new line like previous nonblank line.Sindent.elc
Findent-relative
Space out to under next indent point in previous nonblank line.
An indent point is a non-whitespace character following whitespace.
If the previous nonblank line has no indent points beyond the
column point starts at, `tab-to-tab-stop' is done instead.Sindent.elc
Vtab-stop-list
*List of tab stop positions used by `tab-to-tab-stops'.
This should be a list of integers, ordered from smallest to largest.Sindent.elc
Vedit-tab-stops-map
Keymap used in `edit-tab-stops'.Sindent.elc
Vedit-tab-stops-buffer
Buffer whose tab stops are being edited--in case
the variable `tab-stop-list' is local in that buffer.Sindent.elc
Fedit-tab-stops
Edit the tab stops used by `tab-to-tab-stop'.
Creates a buffer *Tab Stops* containing text describing the tab stops.
A colon indicates a column where there is a tab stop.
You can add or remove colons and then do \<edit-tab-stops-map>\[edit-tab-stops-note-changes] to make changes take effect.Sindent.elc
Fedit-tab-stops-note-changes
Put edited tab stops into effect.Sindent.elc
Ftab-to-tab-stop
Insert spaces or tabs to next defined tab-stop column.
The variable `tab-stop-list' is a list of columns at which there are tab stops.
Use \[edit-tab-stops] to edit them interactively.Sindent.elc
Fmove-to-tab-stop
Move point to next defined tab-stop column.
The variable `tab-stop-list' is a list of columns at which there are tab stops.
Use \[edit-tab-stops] to edit them interactively.Sisearch-mode.elc
Vsearch-exit-option
*Non-nil means random control characters terminate incremental search.Sisearch-mode.elc
Vsearch-slow-window-lines
*Number of lines in slow search display windows.
These are the short windows used during incremental search on slow terminals.
Negative means put the slow search window at the top (normally it's at bottom)
and the value is minus the number of lines.Sisearch-mode.elc
Vsearch-slow-speed
*Highest terminal speed at which to use "slow" style incremental search.
This is the style where a one-line window is created to show the line
that the search has reached.Sisearch-mode.elc
Vsearch-nonincremental-instead
*If non-nil, do a nonincremental search instead if exiting immediately.
Actually, `isearch-edit-string' is called to let you enter the search
string, and RET terminates editing and does a nonincremental search.Sisearch-mode.elc
Vsearch-whitespace-regexp
*If non-nil, regular expression to match a sequence of whitespace chars.Sisearch-mode.elc
Vsearch-highlight
*Whether incremental search and query-replace should highlight
the text that currently matches the search string.Sisearch-mode.elc
Vsearch-invisible
If t incremental search can match hidden text.
nil means don't match invisible text.
If the value is `open', if the text matched is made invisible by
an overlay having an `invisible' property and that overlay has a property
`isearch-open-invisible', then incremental search will show the contents.
(This applies when using `outline.el' and `hideshow.el'.)Sisearch-mode.elc
Visearch-hide-immediately
If non-nil, re-hide an invisible match right away.
This variable makes a difference when `search-invisible' is set to `open'.
It means that after search makes some invisible text visible
to show the match, it makes the text invisible again when the match moves.
Ordinarily the text becomes invisible again at the end of the search.Sisearch-mode.elc
Visearch-mode-hook
Function(s) to call after starting up an incremental search.Sisearch-mode.elc
Visearch-mode-end-hook
Function(s) to call after terminating an incremental search.Sisearch-mode.elc
Vsearch-ring
List of search string sequences.Sisearch-mode.elc
Vregexp-search-ring
List of regular expression search string sequences.Sisearch-mode.elc
Vsearch-ring-max
*Maximum length of search ring before oldest elements are thrown away.Sisearch-mode.elc
Vregexp-search-ring-max
*Maximum length of regexp search ring before oldest elements are thrown away.Sisearch-mode.elc
Vsearch-ring-yank-pointer
Index in `search-ring' of last string reused.
nil if none yet.Sisearch-mode.elc
Vregexp-search-ring-yank-pointer
Index in `regexp-search-ring' of last string reused.
nil if none yet.Sisearch-mode.elc
Vsearch-ring-update
*Non-nil if advancing or retreating in the search ring should cause search.
Default nil means edit the string from the search ring first.Sisearch-mode.elc
Visearch-mode-line-string
*String to display in the modeline when `isearch-mode' is active.
Set this to nil if you don't want a modeline indicator.Sisearch-mode.elc
Visearch-mode-map
Keymap for isearch-mode.Sisearch-mode.elc
Vminibuffer-local-isearch-map
Keymap for editing isearch strings in the minibuffer.Sisearch-mode.elc
Fisearch-forward
Do incremental search forward.
With a prefix argument, do an incremental regular expression search instead.
\<isearch-mode-map>
As you type characters, they add to the search string and are found.
The following non-printing keys are bound in `isearch-mode-map'.

Type \[isearch-delete-char] to cancel characters from end of search string.
Type \[isearch-exit] to exit, leaving point at location found.
Type LFD (C-j) to match end of line.
Type \[isearch-repeat-forward] to search again forward, \[isearch-repeat-backward] to search again backward.
Type \[isearch-yank-word] to yank word from buffer onto end of search string and search for it.
Type \[isearch-yank-line] to yank rest of line onto end of search string and search for it.
Type \[isearch-yank-kill] to yank last killed text onto end of search string and search for it.
Type \[isearch-quote-char] to quote control character to search for it.
Type \[isearch-whitespace-chars] to match all whitespace chars in regexp.
\[isearch-abort] while searching or when search has failed cancels input back to what has
 been found successfully.
\[isearch-abort] when search is successful aborts and moves point to starting point,
 leaving the search string at the head of the search ring.  Note that this
 behavior differs from GNU Emacs, which forgets the current search string
 on abort regardless of success or failure.

Also supported is a search ring of the previous 16 search strings.
Type \[isearch-ring-advance] to search for the next item in the search ring.
Type \[isearch-ring-retreat] to search for the previous item in the search ring.
Type \[isearch-complete] to complete the search string using the search ring.

The above keys are bound in the isearch-mode-map.  To change the keys which
 are special to isearch-mode, simply change the bindings in that map.

Other control and meta characters terminate the search
 and are then executed normally (depending on `search-exit-option').

If this function is called non-interactively, it does not return to
the calling function until the search is done.

The bindings, more precisely:
\{isearch-mode-map}Sisearch-mode.elc
Fisearch-forward-regexp
Do incremental search forward for regular expression.
With a prefix argument, do a regular string search instead.
Like ordinary incremental search except that your input
is treated as a regexp.  See \[isearch-forward] for more info.Sisearch-mode.elc
Fisearch-backward
Do incremental search backward.
With a prefix argument, do a regular expression search instead.
See \[isearch-forward] for more information.Sisearch-mode.elc
Fisearch-backward-regexp
Do incremental search backward for regular expression.
With a prefix argument, do a regular string search instead.
Like ordinary incremental search except that your input
is treated as a regexp.  See \[isearch-forward] for more info.Sisearch-mode.elc
Fisearch-mode-help
Sisearch-mode.elc
Fisearch-mode
Start isearch minor mode.  Called by `isearch-forward', etc.

\{isearch-mode-map}Sisearch-mode.elc
Fisearch-update
Sisearch-mode.elc
Fisearch-done
Sisearch-mode.elc
Fisearch-update-ring
Add STRING to the beginning of the search ring.
REGEXP says which ring to use.Sisearch-mode.elc
Fisearch-exit
Exit search normally.
However, if this is the first command after starting incremental
search and `search-nonincremental-instead' is non-nil, do a
nonincremental search instead via `isearch-edit-string'.Sisearch-mode.elc
Fisearch-edit-string
Edit the search string in the minibuffer.
The following additional command keys are active while editing.
\<minibuffer-local-isearch-map>
\[exit-minibuffer] to resume incremental searching with the edited string.
\[isearch-nonincremental-exit-minibuffer] to do one nonincremental search.
\[isearch-forward-exit-minibuffer] to resume isearching forward.
\[isearch-reverse-exit-minibuffer] to resume isearching backward.
\[isearch-ring-advance-edit] to replace the search string with the next item in the search ring.
\[isearch-ring-retreat-edit] to replace the search string with the previous item in the search ring.
\[isearch-complete-edit] to complete the search string using the search ring.
\<isearch-mode-map>
If first char entered is \[isearch-yank-word], then do word search instead.Sisearch-mode.elc
Fisearch-nonincremental-exit-minibuffer
Sisearch-mode.elc
Fisearch-forward-exit-minibuffer
Sisearch-mode.elc
Fisearch-reverse-exit-minibuffer
Sisearch-mode.elc
Fisearch-cancel
Terminate the search and go back to the starting point.Sisearch-mode.elc
Fisearch-abort
Abort incremental search mode if searching is successful, signaling quit.
Leave the search string at the head of the search ring.  Note that this
behavior differs from GNU Emacs, which forgets the current search string
on abort regardless of success or failure.  Use `isearch-cancel' to abort
and forget regardless of success or failure.

Otherwise, revert to previous successful search and continue searching.
Use `isearch-exit' to quit without signaling.Sisearch-mode.elc
Fisearch-repeat
Sisearch-mode.elc
Fisearch-repeat-forward
Repeat incremental search forwards.Sisearch-mode.elc
Fisearch-repeat-backward
Repeat incremental search backwards.Sisearch-mode.elc
Fisearch-toggle-regexp
Toggle regexp searching on or off.Sisearch-mode.elc
Fisearch-toggle-case-fold
Toggle case folding in searching on or off.Sisearch-mode.elc
Fisearch-delete-char
Discard last input item and move point back.
If no previous match was done, just beep.Sisearch-mode.elc
Fisearch-help-or-delete-char
Show Isearch help or delete backward in the search string.
Deletes when `delete-key-deletes-forward' is t and C-h is used for deleting
backwards.Sisearch-mode.elc
Fisearch-yank
Sisearch-mode.elc
Fisearch-yank-word
Pull next word from buffer into search string.Sisearch-mode.elc
Fisearch-yank-line
Pull rest of line from buffer into search string.Sisearch-mode.elc
Fisearch-yank-kill
Pull rest of line from kill ring into search string.Sisearch-mode.elc
Fisearch-yank-sexp
Pull next expression from buffer into search string.Sisearch-mode.elc
Fisearch-yank-selection
Pull the current selection into the search string.Sisearch-mode.elc
Fisearch-yank-clipboard
Pull the current clipboard selection into the search string.Sisearch-mode.elc
Fisearch-fix-case
Sisearch-mode.elc
Fisearch-search-and-update
Sisearch-mode.elc
Fisearch-*-char
Handle * and ? specially in regexps.Sisearch-mode.elc
Fisearch-|-char
If in regexp search, jump to the barrier.Sisearch-mode.elc
Fisearch-quote-char
Quote special characters for incremental search.Sisearch-mode.elc
Fisearch-return-char
Convert return into newline for incremental search.
Obsolete.Sisearch-mode.elc
Fisearch-printing-char
Add this ordinary printing character to the search string and search.Sisearch-mode.elc
Fisearch-whitespace-chars
Match all whitespace chars, if in regexp mode.Sisearch-mode.elc
Fisearch-process-search-char
Sisearch-mode.elc
Fisearch-process-search-string
Sisearch-mode.elc
Fisearch-ring-adjust
Sisearch-mode.elc
Fisearch-ring-advance
Advance to the next search string in the ring.Sisearch-mode.elc
Fisearch-ring-retreat
Retreat to the previous search string in the ring.Sisearch-mode.elc
Fisearch-ring-advance-edit
Insert the next element of the search history into the minibuffer.Sisearch-mode.elc
Fisearch-ring-retreat-edit
Inserts the previous element of the search history into the minibuffer.Sisearch-mode.elc
Fisearch-complete1
Sisearch-mode.elc
Fisearch-complete
Complete the search string from the strings on the search ring.
The completed string is then editable in the minibuffer.
If there is no completion possible, say so and continue searching.Sisearch-mode.elc
Fisearch-complete-edit
Same as `isearch-complete' except in the minibuffer.Sisearch-mode.elc
Fisearch-top-state
Sisearch-mode.elc
Fisearch-pop-state
Sisearch-mode.elc
Fisearch-push-state
Sisearch-mode.elc
Fisearch-message
Sisearch-mode.elc
Fisearch-message-prefix
Sisearch-mode.elc
Fisearch-message-suffix
Sisearch-mode.elc
Fisearch-pre-command-hook
Sisearch-mode.elc
Fisearch-highlight
Sisearch-mode.elc
Fisearch-dehighlight
Sisearch-mode.elc
Fisearch-search
Sisearch-mode.elc
Fisearch-unhide-extent
Sisearch-mode.elc
Fisearch-range-invisible
Return t if all the text from START to END is invisible.
Before that, if search-invisible is `open', unhide the extents with an
`isearch-open-invisible' property.Sisearch-mode.elc
Fisearch-restore-extent
Sisearch-mode.elc
Fisearch-restore-invisible-extents
Sisearch-mode.elc
Fisearch-no-upper-case-p
Return t if there are no upper case chars in string.
But upper case chars preceded by \ do not count since they
have special meaning in a regexp.Sisearch-mode.elc
Fisearch-char-to-string
Sisearch-mode.elc
Fwith-caps-disable-folding
Eval BODY with `case-fold-search' let to nil if STRING contains
uppercase letters and `search-caps-disable-folding' is t.Sisearch-mode.elc
Visearch-highlight-all-matches
*Non-nil means highlight all visible matches.Sisearch-mode.elc
Fisearch-delete-extents-in-range
Sisearch-mode.elc
Fisearch-highlight-all-cleanup
Sisearch-mode.elc
Fisearch-highlight-all-update
Sisearch-mode.elc
Fisearch-highlight-advance
Sisearch-mode.elc
Fisearch-highlightify-region
Sbuffer.elc
Fswitch-to-buffer
Select buffer BUFNAME in the current window.
BUFNAME may be a buffer or a buffer name and is created if it did not exist.
Optional second arg NORECORD non-nil means do not put this buffer at the
front of the list of recently selected ones.

WARNING: This is NOT the way to work on another buffer temporarily
within a Lisp program!  Use `set-buffer' instead.  That avoids messing with
the window-buffer correspondences.Sbuffer.elc
Fpop-to-buffer
Select buffer BUFNAME in some window, preferably a different one.
If BUFNAME is nil, then some other buffer is chosen.
If `pop-up-windows' is non-nil, windows can be split to do this.
If optional second arg NOT-THIS-WINDOW-P is non-nil, insist on finding
another window even if BUFNAME is already visible in the selected window.
If optional third arg is non-nil, it is the frame to pop to this
buffer on.
If `focus-follows-mouse' is non-nil, keyboard focus is left unchanged.

Buffers with names that are members of the `same-window-buffer-names'
list, or that match an element of the `same-window-regexps' list are
treated specially by this function--they are always selected in the
same window rather than in a different one.Sbuff-menu.elc
FBuffer-menu-mode
Major mode for editing a list of buffers.
Each line describes one of the buffers in Emacs.
Letters do not insert themselves; instead, they are commands.
\<Buffer-menu-mode-map>
\[Buffer-menu-mouse-select] -- select buffer you click on, in place of the buffer menu.
\[Buffer-menu-this-window] -- select current line's buffer in place of the buffer menu.
\[Buffer-menu-other-window] -- select that buffer in another window,
  so the buffer menu buffer remains visible in its window.
\[Buffer-menu-switch-other-window] -- make another window display that buffer.
\[Buffer-menu-mark] -- mark current line's buffer to be displayed.
\[Buffer-menu-select] -- select current line's buffer.
  Also show buffers marked with m, in other windows.
\[Buffer-menu-1-window] -- select that buffer in full-frame window.
\[Buffer-menu-2-window] -- select that buffer in one window,
  together with buffer selected before this one in another window.
\[Buffer-menu-visit-tags-table] -- visit-tags-table this buffer.
\[Buffer-menu-not-modified] -- clear modified-flag on that buffer.
\[Buffer-menu-save] -- mark that buffer to be saved, and move down.
\[Buffer-menu-delete] -- mark that buffer to be deleted, and move down.
\[Buffer-menu-delete-backwards] -- mark that buffer to be deleted, and move up.
\[Buffer-menu-execute] -- delete or save marked buffers.
\[Buffer-menu-unmark] -- remove all kinds of marks from current line.
  With prefix argument, also move up one line.
\[Buffer-menu-backup-unmark] -- back up a line and remove marks.
\[Buffer-menu-toggle-read-only] -- toggle read-only status of buffer on this line.Sbuff-menu.elc
FBuffer-menu-revert-function
Sbuff-menu.elc
FBuffer-menu-buffer
Return buffer described by this line of buffer menu.Sbuff-menu.elc
Fbuffer-menu
Make a menu of buffers so you can save, delete or select them.
With argument, show only buffers that are visiting files.
Type ? after invocation to get help on commands available.
Type q immediately to make the buffer menu go away.Sbuff-menu.elc
Fbuffer-menu-other-window
Display a list of buffers in another window.
With the buffer list buffer, you can save, delete or select the buffers.
With argument, show only buffers that are visiting files.
Type ? after invocation to get help on commands available.
Type q immediately to make the buffer menu go away.Sbuff-menu.elc
FBuffer-menu-quit
Quit the buffer menu.Sbuff-menu.elc
FBuffer-menu-mark
Mark buffer on this line for being displayed by \<Buffer-menu-mode-map>\[Buffer-menu-select] command.Sbuff-menu.elc
FBuffer-menu-unmark
Cancel all requested operations on buffer on this line and move down.
Optional ARG means move up.Sbuff-menu.elc
FBuffer-menu-backup-unmark
Move up and cancel all requested operations on buffer on line above.Sbuff-menu.elc
FBuffer-menu-delete
Mark buffer on this line to be deleted by \<Buffer-menu-mode-map>\[Buffer-menu-execute] command.
Prefix arg is how many buffers to delete.
Negative arg means delete backwards.Sbuff-menu.elc
FBuffer-menu-delete-backwards
Mark buffer on this line to be deleted by \<Buffer-menu-mode-map>\[Buffer-menu-execute] command
and then move up one line.  Prefix arg means move that many lines.Sbuff-menu.elc
FBuffer-menu-rename
Rename buffer on this line to NEWNAME, immediately.
If given a prefix argument, automatically uniquify.  See `rename-buffer'.Sbuff-menu.elc
FBuffer-menu-save
Mark buffer on this line to be saved by \<Buffer-menu-mode-map>\[Buffer-menu-execute] command.Sbuff-menu.elc
FBuffer-menu-not-modified
Mark buffer on this line as unmodified (no changes to save).Sbuff-menu.elc
FBuffer-menu-execute
Save and/or delete buffers marked with \<Buffer-menu-mode-map>\[Buffer-menu-save] or \<Buffer-menu-mode-map>\[Buffer-menu-delete] commands.Sbuff-menu.elc
FBuffer-menu-select
Select this line's buffer; also display buffers marked with `>'.
You can mark buffers with the \<Buffer-menu-mode-map>\[Buffer-menu-mark] command.
This command deletes and replaces all the previously existing windows
in the selected frame.Sbuff-menu.elc
FBuffer-menu-visit-tags-table
Visit the tags table in the buffer on this line.  See `visit-tags-table'.Sbuff-menu.elc
FBuffer-menu-1-window
Select this line's buffer, alone, in full frame.Sbuff-menu.elc
FBuffer-menu-mouse-select
Select the buffer whose line you click on.Sbuff-menu.elc
FBuffer-menu-maybe-mouse-select
Sbuff-menu.elc
FBuffer-menu-this-window
Select this line's buffer in this window.Sbuff-menu.elc
FBuffer-menu-other-window
Select this line's buffer in other window, leaving buffer menu visible.Sbuff-menu.elc
FBuffer-menu-switch-other-window
Make the other window select this line's buffer.
The current window remains selected.Sbuff-menu.elc
FBuffer-menu-2-window
Select this line's buffer, with previous buffer in second window.Sbuff-menu.elc
FBuffer-menu-toggle-read-only
Toggle read-only status of buffer on this line, perhaps via version control.Sbuff-menu.elc
FBuffer-menu-popup-menu
Sbuff-menu.elc
Vlist-buffers-identification
String used to identify this buffer, or a function of one argument
to generate such a string.  This variable is always buffer-local.Sbuff-menu.elc
Fdefault-list-buffers-identification
Sbuff-menu.elc
Flist-buffers-internal
Sbuff-menu.elc
Flist-buffers
Display a list of names of existing buffers.
The list is displayed in a buffer named `*Buffer List*'.
Note that buffers with names starting with spaces are omitted.
Non-nil optional arg FILES-ONLY means mention only file buffers.

The M column contains a * for buffers that are modified.
The R column contains a % for buffers that are read-only.Sbuff-menu.elc
Flist-buffers-noselect
Create and return a buffer with a list of names of existing buffers.
The buffer is named `*Buffer List*'.
Note that buffers with names starting with spaces are omitted.
Non-nil optional arg FILES-ONLY means mention only file buffers.

The M column contains a * for buffers that are modified.
The R column contains a % for buffers that are read-only.Sbuff-menu.elc
Fbuffers-menu-omit-invisible-buffers
For use as a value of `buffers-menu-omit-function'.
Omits normally invisible buffers (those whose name begins with a space).Sbuff-menu.elc
Vbuffers-tab-max-size
*Maximum number of entries which may appear on the "Buffers" tab.
If this is 10, then only the ten most-recently-selected buffers will be
shown.  If this is nil, then all buffers will be shown.  Setting this to
a large number or nil will slow down tab responsiveness.Sbuff-menu.elc
Vbuffers-tab-switch-to-buffer-function
*The function to call to select a buffer from the buffers tab.
`switch-to-buffer' is a good choice, as is `pop-to-buffer'.Sbuff-menu.elc
Vbuffers-tab-omit-function
*If non-nil, a function specifying the buffers to omit from the buffers tab.
This is passed a buffer and should return non-nil if the buffer should be
omitted.  The default value `buffers-menu-omit-invisible-buffers' omits
buffers that are normally considered "invisible" (those whose name
begins with a space).Sbuff-menu.elc
Vbuffers-tab-selection-function
*If non-nil, a function specifying the buffers to select from the
buffers tab.  This is passed two buffers and should return non-nil if
the second buffer should be selected.  The default value
`select-buffers-tab-buffers-by-mode' groups buffers by major mode and
by `buffers-tab-grouping-regexp'.Sbuff-menu.elc
Vbuffers-tab-filter-functions
*If non-nil, a list of functions specifying the buffers to select 
from the buffers tab.
Each function in the list is passed two buffers, the buffer to
potentially select and the context buffer, and should return non-nil
if the first buffer should be selected.  The default value groups
buffers by major mode and by `buffers-tab-grouping-regexp'.Sbuff-menu.elc
Vbuffers-tab-sort-function
*If non-nil, a function specifying the buffers to select from the
buffers tab.  This is passed the buffer list and returns the list in the
order desired for the tab widget.  The default value `nil' leaves the
list in `buffer-list' order (usual most-recently-selected-first).Sbuff-menu.elc
Vbuffers-tab-face
*Face to use for displaying the buffers tab.Sbuff-menu.elc
Vbuffers-tab-grouping-regexp
*If non-nil, a list of regular expressions for buffer grouping.
Each regular expression is applied to the current major-mode symbol
name and mode-name, if it matches then any other buffers that match
the same regular expression be added to the current group.Sbuff-menu.elc
Vbuffers-tab-format-buffer-line-function
*The function to call to return a string to represent a buffer in the
buffers tab.  The function is passed a buffer and should return a
string.  The default value `format-buffers-tab-line' just returns the
name of the buffer, optionally truncated to
`buffers-tab-max-buffer-line-length'.  Also check out
`slow-format-buffers-menu-line' which returns a whole bunch of info
about a buffer.Sbuff-menu.elc
Vbuffers-tab-default-buffer-line-length
*Maximum length of text which may appear in a "Buffers" tab.
This is a specifier, use set-specifier to modify it.Sbuff-menu.elc
Vbuffers-tab-max-buffer-line-length
*Maximum length of text which may appear in a "Buffers" tab.
Buffer names over this length will be truncated with elipses.
If this is 0, then the full buffer name will be shown.Sbuff-menu.elc
Fbuffers-tab-switch-to-buffer
For use as a value for `buffers-tab-switch-to-buffer-function'.Sbuff-menu.elc
Fselect-buffers-tab-buffers-by-mode
For use as a value of `buffers-tab-selection-function'.
This selects buffers by major mode `buffers-tab-grouping-regexp'.Sbuff-menu.elc
Fformat-buffers-tab-line
For use as a value of `buffers-tab-format-buffer-line-function'.
This just returns the buffer's name, optionally truncated.Sbuff-menu.elc
Fbuild-buffers-tab-internal
Sbuff-menu.elc
Fbuffers-tab-items
Return a list of tab instantiators based on the current buffers list.
This function is used as the tab filter for the top-level buffers
"Buffers" tab.  It dynamically creates a list of tab instantiators
to use as the contents of the tab.  The contents and order of the list
is controlled by `buffers-tab-filter-functions' which by default
groups buffers according to major mode and removes invisible buffers.
You can control how many buffers will be shown by setting
`buffers-tab-max-size'.  You can control the text of the tab items by
redefining the function `format-buffers-menu-line'.Spaths.elc
Vnews-path
The root directory below which all news files are stored.Spaths.elc
Vnews-inews-program
Program to post news.Spaths.elc
Vmh-progs
Directory containing MH commands.Spaths.elc
Vmh-lib
Directory of MH library.Spaths.elc
Vrmail-file-name
Name of user's primary mail file.Spaths.elc
Vrmail-spool-directory
Name of directory used by system mailer for delivering new mail.
Its name should end with a slash.Spaths.elc
Vsendmail-program
Program used to send messages.Spaths.elc
Vremote-shell-program
Program used to execute shell commands on a remote machine.Spaths.elc
Vterm-file-prefix
If non-nil, Emacs startup does (load (concat term-file-prefix (getenv "TERM")))
You may set this variable to nil in your `.emacs' file if you do not wish
the terminal-initialization file to be loaded.Spaths.elc
Vmanual-program
Program to run to print man pages.Spaths.elc
Vabbrev-file-name
*Default name of file to read abbrevs from.Spaths.elc
Finitialize-xemacs-paths
Initialize the XEmacs path variables from the environment.
Called automatically at dump time and run time.  Do not call this.
Will not override settings in site-init.el or site-run.el.Slisp.elc
Vdefun-prompt-regexp
*Non-nil => regexp to ignore, before the character that starts a defun.
This is only necessary if the opening paren or brace is not in column 0.
See `beginning-of-defun'.Slisp.elc
Vparens-require-spaces
Non-nil => `insert-parentheses' should insert whitespace as needed.Slisp.elc
Fforward-sexp
Move forward across one balanced expression (sexp).
With non-nil COUNT, do it that many times.  Negative COUNT means
move backward across -COUNT balanced expressions.Slisp.elc
Fbackward-sexp
Move backward across one balanced expression (sexp).
With non-nil COUNT, do it that many times.  Negative COUNT means
move forward across -COUNT balanced expressions.Slisp.elc
Fmark-sexp
Set mark COUNT sexps from point.
The place mark goes is the same place \[forward-sexp] would
move to with the same argument.
Repeat this command to mark more sexps in the same direction.Slisp.elc
Fforward-list
Move forward across one balanced group of parentheses.
With non-nil COUNT, do it that many times.
Negative COUNT means move backward across -COUNT groups of parentheses.Slisp.elc
Fbackward-list
Move backward across one balanced group of parentheses.
With non-nil COUNT, do it that many times.
Negative COUNT means move forward across -COUNT groups of parentheses.Slisp.elc
Fdown-list
Move forward down one level of parentheses.
With non-nil COUNT, do this that many times.
A negative COUNT means move backward but still go down a level.Slisp.elc
Fbackward-up-list
Move backward out of one level of parentheses.
With COUNT, do this that many times.
A negative COUNT means move forward but still to a less deep spot.Slisp.elc
Fup-list
Move forward out of one level of parentheses.
With non-nil COUNT, do this that many times.
A negative COUNT means move backward but still to a less deep spot.
In Lisp programs, an argument is required.Slisp.elc
Fkill-sexp
Kill the sexp (balanced expression) following the cursor.
With non-nil COUNT, kill that many sexps after the cursor.
Negative COUNT means kill -COUNT sexps before the cursor.Slisp.elc
Fbackward-kill-sexp
Kill the sexp (balanced expression) preceding the cursor.
With non-nil COUNT, kill that many sexps before the cursor.
Negative COUNT means kill -COUNT sexps after the cursor.Slisp.elc
Vbeginning-of-defun-function
If non-nil, this function will be called by `beginning-of-defun-raw'.
It will be called with one argument, which is a repetition count.
It provides an alternative algorithm to find the beginning of the current
defun instead of using the standard one implemented by `beginning-of-defun'.
See also `defun-prompt-regexp' for minor tweaks.Slisp.elc
Vend-of-defun-function
If non-nil, this function will be called by `end-of-defun'.
It will be called with no arguments.  (Repetition is implemented in
`end-of-defun' by calling this function that many times.)
This function provides an alternative algorithm to find the end
of the current defun instead of using the standard one implemented by
`end-of-defun'.
Slisp.elc
Fbeginning-of-defun
Move backward to the beginning of the current defun.
With COUNT, do it that many times.  Negative COUNT
means move forward to -COUNTth following beginning of defun.
Returns t unless search stops due to beginning or end of buffer.

In the default implementation provided by `beginning-of-defun-raw',
a defun starts at a char with open-parenthesis syntax at the beginning
of a line.  If `defun-prompt-regexp' is non-nil, then a string which
matches that regexp may precede the open-parenthesis.  Alternatively,
if `beginning-of-defun-function' is non-nil, that function is called,
and none of the default processing is done.

If the beginning of defun function returns t, point moves to the
beginning of the line containing the beginning of defun.Slisp.elc
Fbeginning-of-defun-raw
Move point to the character that starts a defun.
This is identical to beginning-of-defun, except that point does not move
to the beginning of the line when `defun-prompt-regexp' is non-nil.Slisp.elc
Fbuffer-end
Return `point-max' of BUFFER if DIRECTION > 0, else return `point-min'.
BUFFER defaults to the current buffer if omitted.Slisp.elc
Fend-of-defun
Move forward to next end of defun.
Non-nil COUNT means do it that many times (default is 1).
Negative COUNT means move back to -COUNTth preceding end of defun.

In the default implementation, the end of a defun is the end of the
s-expression started at the character identified by `beginning-of-defun'.

If `end-of-defun-function' is non-nil, none of the default processing is
done.  For a repetition count greater than 1, `end-of-defun-function' is
called that many times.  If the repetition count is less than 1, nothing
is done.  (This is a bug.)Slisp.elc
Fmark-defun
Put mark at end of this defun, point at beginning.
The defun marked is the one that contains point or follows point.Slisp.elc
Fnarrow-to-defun
Make text outside current defun invisible.
The defun visible is the one that contains point or follows point.
Optional ARG is currently ignored.Slisp.elc
Finsert-parentheses
Enclose following COUNT sexps in parentheses.  Leave point after open-paren.
A negative COUNT encloses the preceding -COUNT sexps instead.
COUNT defaults to zero: just insert `()' and leave point between.
If `parens-require-spaces' is non-nil, this command also inserts a space
before and after, depending on the surrounding characters.Slisp.elc
Fmove-past-close-and-reindent
Move past next `)', delete indentation before it, then indent after it.Slisp.elc
Flisp-complete-symbol
Perform completion on Lisp symbol preceding point.
Compare that symbol against the known Lisp symbols.

The context determines which symbols are considered.
If the symbol starts just after an open-parenthesis, only symbols
with function definitions are considered.  Otherwise, all symbols with
function definitions, values or properties are considered.Spage.elc
Fforward-page
Move forward to page boundary.  With arg, repeat, or go back if negative.
A page boundary is any line whose beginning matches the regexp
`page-delimiter'.Spage.elc
Fbackward-page
Move backward to page boundary.  With arg, repeat, or go fwd if negative.
A page boundary is any line whose beginning matches the regexp
`page-delimiter'.Spage.elc
Fmark-page
Put mark at end of page, point at beginning.
A numeric arg specifies to move forward or backward by that many pages,
thus marking a page other than the one point was originally in.Spage.elc
Fnarrow-to-page
Make text outside current page invisible.
A numeric arg specifies to move forward or backward by that many pages,
thus showing a page other than the one point was originally in.Spage.elc
Fcount-lines-page
Report number of lines on current page, and how many are before or after point.Spage.elc
Fwhat-page
Print page and line number of point.Sregister.elc
Vregister-alist
Alist of elements (NAME . CONTENTS), one for each Emacs register.
NAME is a character (a number).  CONTENTS is a string, number, marker or list.
A list of strings represents a rectangle.
A list of the form (file . NAME) represents the file named NAME.
A list of the form (file-query NAME POSITION) represents position POSITION
 in the file named NAME, but query before visiting it.
A list of the form (WINDOW-CONFIGURATION POSITION)
 represents a saved window configuration plus a saved value of point.
A list of the form (FRAME-CONFIGURATION POSITION)
 represents a saved frame configuration plus a saved value of point.Sregister.elc
Fget-register
Return contents of Emacs register named REG, or nil if none.Sregister.elc
Fset-register
Set contents of Emacs register named REGISTER to VALUE.  Returns VALUE.
See the documentation of the variable `register-alist' for possible VALUE.Sregister.elc
Fpoint-to-register
Store current location of point in register REGISTER.
With prefix argument, store current frame configuration.
Use \[jump-to-register] to go to that location or restore that configuration.
Argument is a character, naming the register.Sregister.elc
Fwindow-configuration-to-register
Store the window configuration of the selected frame in register REGISTER.
Use \[jump-to-register] to restore the configuration.
Argument is a character, naming the register.Sregister.elc
Fframe-configuration-to-register
Store the window configuration of all frames in register REGISTER.
Use \[jump-to-register] to restore the configuration.
Argument is a character, naming the register.Sregister.elc
Fregister-to-point
Sregister.elc
Fjump-to-register
Move point to location stored in a register.
If the register contains a file name, find that file.
 (To put a file name in a register, you must use `set-register'.)
If the register contains a window configuration (one frame) or a frame
configuration (all frames), restore that frame or all frames accordingly.
First argument is a character, naming the register.
Optional second arg non-nil (interactively, prefix argument) says to
delete any existing frames that the frame configuration doesn't mention.
(Otherwise, these frames are iconified.)Sregister.elc
Fregister-swap-out
Turn markers into file-query references when a buffer is killed.Sregister.elc
Fnumber-to-register
Store a number in a register.
Two args, NUMBER and REGISTER (a character, naming the register).
If NUMBER is nil, a decimal number is read from the buffer starting
at point, and point moves to the end of that number.
Interactively, NUMBER is the prefix arg (none means nil).Sregister.elc
Fincrement-register
Add NUMBER to the contents of register REGISTER.
Interactively, NUMBER is the prefix arg.Sregister.elc
Fview-register
Display what is contained in register named REGISTER.
The Lisp value REGISTER is a character.Sregister.elc
Flist-registers
Display a list of nonempty registers saying briefly what they contain.Sregister.elc
Fdescribe-register-1
Sregister.elc
Finsert-register
Insert contents of register REGISTER.  (REGISTER is a character.)
Normally puts point before and mark after the inserted text.
If optional second arg is non-nil, puts mark before and point after.
Interactively, second arg is non-nil if prefix arg is supplied.Sregister.elc
Fcopy-to-register
Copy region into register REGISTER.  With prefix arg, delete as well.
Called from program, takes four args: REGISTER, START, END and DELETE-FLAG.
START and END are buffer positions indicating what to copy.Sregister.elc
Fappend-to-register
Append region to text in register REGISTER.
With prefix arg, delete as well.
Called from program, takes four args: REGISTER, START, END and DELETE-FLAG.
START and END are buffer positions indicating what to append.Sregister.elc
Fprepend-to-register
Prepend region to text in register REGISTER.
With prefix arg, delete as well.
Called from program, takes four args: REGISTER, START, END and DELETE-FLAG.
START and END are buffer positions indicating what to prepend.Sregister.elc
Fcopy-rectangle-to-register
Copy rectangular region into register REGISTER.
With prefix arg, delete as well.
Called from program, takes four args: REGISTER, START, END and DELETE-FLAG.
START and END are buffer positions giving two corners of rectangle.Siso8859-1.elc
Vascii-case-table
Case table for the ASCII character set.Seasy-mmode.elc
Feasy-mmode-pretty-mode-name
Turn the symbol MODE into a string intended for the user.
If provided LIGHTER will be used to help choose capitalization.Seasy-mmode.elc
Feasy-mmode-define-minor-mode
Seasy-mmode.elc
Fdefine-minor-mode
Define a new minor mode MODE.
This function defines the associated control variable MODE, keymap MODE-map,
toggle command MODE, and hook MODE-hook.

DOC is the documentation for the mode toggle command.
Optional INIT-VALUE is the initial value of the mode's variable.
Optional LIGHTER is displayed in the modeline when the mode is on.
Optional KEYMAP is the default (defvar) keymap bound to the mode keymap.
  If it is a list, it is passed to `easy-mmode-define-keymap'
  in order to build a valid keymap.  It's generally better to use
  a separate MODE-map variable than to use this argument.
The above three arguments can be skipped if keyword arguments are
used (see below).

BODY contains code that will be executed each time the mode is (de)activated.
  It will be executed after any toggling but before running the hooks.
  Before the actual body code, you can write
  keyword arguments (alternating keywords and values).
  These following keyword arguments are supported:
:group GROUP	Custom group name to use in all generated `defcustom' forms.
:global GLOBAL	If non-nil specifies that the minor mode is not meant to be
              	buffer-local, so don't make the variable MODE buffer-local.
		By default, the mode is buffer-local.
:init-value VAL	Same as the INIT-VALUE argument.
:lighter SPEC	Same as the LIGHTER argument.
:require SYM	Same as in `defcustom'.

For backwards compatibility, these hooks are run each time the mode is
(de)activated.  When the mode is toggled, MODE-hook is always run before the
other hook.
MODE-hook: run if the mode is toggled.
MODE-on-hook: run if the mode is activated.
MODE-off-hook: run if the mode is deactivated.
 
(defmacro easy-mmode-define-minor-mode
  (MODE DOC &optional INIT-VALUE LIGHTER KEYMAP &rest BODY)...)

For example, you could write
  (define-minor-mode foo-mode "If enabled, foo on you!"
    nil "Foo " foo-keymap
    :require 'foo :global t :group 'inconvenience
    ...BODY CODE...)Seasy-mmode.elc
Feasy-mmode-define-global-mode
Make GLOBAL-MODE out of the buffer-local minor MODE.
TURN-ON is a function that will be called with no args in every buffer
  and that should try to turn MODE on if applicable for that buffer.
KEYS is a list of CL-style keyword arguments:
:group to specify the custom group.Seasy-mmode.elc
Feasy-mmode-define-keymap
Return a keymap built from bindings BS.
BS must be a list of (KEY . BINDING) where
KEY and BINDINGS are suitable for `define-key'.
Optional NAME is passed to `make-sparse-keymap'.
Optional map M can be used to modify an existing map.
ARGS is a list of additional keyword arguments.Seasy-mmode.elc
Feasy-mmode-defmap
Seasy-mmode.elc
Feasy-mmode-define-syntax
Seasy-mmode.elc
Feasy-mmode-defsyntax
Define variable ST as a syntax-table.
CSS contains a list of syntax specifications of the form (CHAR . SYNTAX).Seasy-mmode.elc
Feasy-mmode-define-navigation
Define BASE-next and BASE-prev to navigate in the buffer.
RE determines the places the commands should move point to.
NAME should describe the entities matched by RE.  It is used to build
  the docstrings of the two functions.
BASE-next also tries to make sure that the whole entry is visible by
  searching for its end (by calling ENDFUN if provided or by looking for
  the next entry) and recentering if necessary.
ENDFUN should return the end position (with or without moving point).Shelp.elc
Vhelp-map
Keymap for characters following the Help key.Shelp.elc
Vhelp-mode-hook
Hook run when entering Help mode.Shelp.elc
Fhelp-mode
Major mode for viewing help text.
Entry to this mode runs the normal hook `help-mode-hook'.
Commands:
\{help-mode-map}Shelp.elc
Vtemp-buffer-mode-hook
Hook run when entering Temp mode.Shelp.elc
Ftemp-buffer-mode
Major mode for viewing temporary buffers.
Exit using \<temp-buffer-mode-map>\[help-mode-quit].

Entry to this mode runs the normal hook `temp-buffer-mode-hook'.
Commands:
\{temp-buffer-mode-map}Shelp.elc
Fdescribe-function-at-point
Describe directly the function at point in the other window.Shelp.elc
Fdescribe-variable-at-point
Describe directly the variable at point in the other window.Shelp.elc
Fhelp-next-symbol
Move point to the next quoted symbol.Shelp.elc
Fhelp-prev-symbol
Move point to the previous quoted symbol.Shelp.elc
Fhelp-next-section
Move point to the next quoted symbol.Shelp.elc
Fhelp-prev-section
Move point to the previous quoted symbol.Shelp.elc
Fhelp-mode-bury
Bury the help buffer, possibly restoring the previous window configuration.Shelp.elc
Fhelp-mode-quit
Exit from help mode, possibly restoring the previous window configuration.
If the optional argument BURY is non-nil, the help buffer is buried,
otherwise it is killed.Shelp.elc
Fhelp-quit
Shelp.elc
Vtutorial-supported-languages
Alist of supported languages in TUTORIAL files.
Add languages here, as more are translated.Shelp.elc
Fhelp-with-tutorial
Select the XEmacs learn-by-doing tutorial.
Optional arg TUTORIAL specifies the tutorial file; if not specified or
if this command is invoked interactively, the tutorial appropriate to
the current language environment is used.  If there is no tutorial
written in that language, or if this version of XEmacs has no
international (Mule) support, the English-language tutorial is used.
With a prefix argument, you are asked to select which language.Shelp.elc
Fkey-or-menu-binding
Return the command invoked by KEY.
Like `key-binding', but handles menu events and toolbar presses correctly.
KEY is any value returned by `next-command-event'.
MENU-FLAG is a symbol that should be set to t if KEY is a menu event,
 or nil otherwise.Shelp.elc
Fdescribe-key-briefly
Print the name of the function KEY invokes.  KEY is a string.
If INSERT (the prefix arg) is non-nil, insert the message in the buffer.Shelp.elc
Fprint-help-return-message
Display or return message saying how to restore windows after help command.
Computes a message and applies the optional argument FUNCTION to it.
If FUNCTION is nil, applies `message' to it, thus printing it.Shelp.elc
Vhelp-selects-help-window
*If nil, use the "old Emacs" behavior for Help buffers.
This just displays the buffer in another window, rather than selecting
the window.Shelp.elc
Vhelp-max-help-buffers
*Maximum help buffers to allow before they start getting killed.
If this is a positive integer, before a help buffer is displayed
by `with-displaying-help-buffer', any excess help buffers which
are not being displayed are first killed.  Otherwise, if it is
zero or nil, only one help buffer, "*Help*" is ever used.Shelp.elc
Vhelp-buffer-list
List of help buffers used by `help-register-and-maybe-prune-excess'Shelp.elc
Fhelp-register-and-maybe-prune-excess
Register help buffer named NEWBUF and possibly kill excess ones.Shelp.elc
Vhelp-buffer-prefix-string
Initial string to use in constructing help buffer names.
You should never set this directly, only let-bind it.Shelp.elc
Fhelp-buffer-name
Return a name for a Help buffer using string NAME for context.Shelp.elc
Vmode-for-help
*Mode that help buffers are put into.Shelp.elc
Vmode-for-temp-buffer
*Mode that help buffers are put into.Shelp.elc
Fwith-displaying-temp-buffer
Make a help buffer with given NAME and evaluate BODY, sending stdout there.

Use this function for displaying information in temporary buffers, where the
user will typically view the information and then exit using
\<temp-buffer-mode-map>\[help-mode-quit].

On exit from this form, the buffer is put into the mode specified in
`mode-for-temp-buffer' and displayed, typically in a popup window.  Ie,
the buffer is a scratchpad which is displayed all at once in formatted
form.

N.B. Write to this buffer with functions like `princ', not `insert'.Shelp.elc
Fwith-displaying-help-buffer
Form which makes a help buffer with given NAME and evaluates BODY there.
The actual name of the buffer is generated by the function `help-buffer-name'.

Use this function for displaying help when C-h something is pressed or
in similar situations.  Do *not* use it when you are displaying a help
message and then prompting for input in the minibuffer -- this macro
usually selects the help buffer, which is not what you want in those
situations.Shelp.elc
Fdescribe-key
Display documentation of the function invoked by KEY.
KEY is a string, or vector of events.
When called interactively, KEY may also be a menu selection.Shelp.elc
Fdescribe-mode
Display documentation of current major mode and minor modes.
For this to work correctly for a minor mode, the mode's indicator variable
(listed in `minor-mode-alist') must also be a function whose documentation
describes the minor mode.Shelp.elc
FHelp-find-file
Shelp.elc
Fdescribe-distribution
Display info on how to obtain the latest version of XEmacs.Shelp.elc
Fdescribe-beta
Display info on how to deal with Beta versions of XEmacs.Shelp.elc
Fdescribe-copying
Display info on how you may redistribute copies of XEmacs.Shelp.elc
Fdescribe-pointer
Show a list of all defined mouse buttons, and their definitions.Shelp.elc
Fdescribe-no-warranty
Display info on all the kinds of warranty XEmacs does NOT have.Shelp.elc
Fdescribe-bindings
Show a list of all defined keys, and their definitions.
The list is put in a buffer, which is displayed.
If optional first argument PREFIX is supplied, only commands
which start with that sequence of keys are described.
If optional second argument MOUSE-ONLY-P (prefix arg, interactively)
is non-nil then only the mouse bindings are displayed.Shelp.elc
Fdescribe-bindings-1
Shelp.elc
Fdescribe-prefix-bindings
Describe the bindings of the prefix used to reach this command.
The prefix described consists of all but the last event
of the key sequence that ran this command.Shelp.elc
Fdescribe-installation
Display a buffer showing information about this XEmacs was compiled.Shelp.elc
Fview-emacs-news
Display info on recent changes to XEmacs.Shelp.elc
Fview-xemacs-problems
Display known problems with XEmacs.Shelp.elc
Fxemacs-www-page
Go to the XEmacs World Wide Web page.Shelp.elc
Fxemacs-www-faq
View the latest and greatest XEmacs FAQ using the World Wide Web.Shelp.elc
Fxemacs-local-faq
View the local copy of the XEmacs FAQ.
If you have access to the World Wide Web, you should use `xemacs-www-faq'
instead, to ensure that you get the most up-to-date information.Shelp.elc
Fview-sample-init-el
Display the sample init.el file.Shelp.elc
Vview-lossage-key-count
*Number of keys `view-lossage' shows.
The maximum number of available keys is governed by `recent-keys-ring-size'.Shelp.elc
Vview-lossage-message-count
*Number of minibuffer messages `view-lossage' shows.Shelp.elc
Fprint-recent-messages
Print N most recent messages to standard-output, most recent first.
If N is nil, all messages will be printed.Shelp.elc
Fview-warnings
Display warnings issued.Shelp.elc
Fview-lossage
Display recent input keystrokes and recent minibuffer messages.
The number of keys shown is controlled by `view-lossage-key-count'.
The number of messages shown is controlled by `view-lossage-message-count'.

If optional arg NO-KEYS (prefix arg, interactively) is non-nil,
then recent input keystrokes output is omitted.Shelp.elc
Fhelp-for-help
Type a Help option:
(Use SPC or DEL to scroll through this text.  Type \<help-map>\[help-quit] to exit the Help command.)

Help on key bindings:

\[describe-bindings]	Table of all key bindings.
\[describe-key-briefly]	Type a key sequence or select a menu item;
        it displays the corresponding command name.
\[describe-key]	Type a key sequence or select a menu item;
        it displays the documentation for the command bound to that key.
	(Terser but more up-to-date than what's in the manual.)
\[Info-goto-emacs-key-command-node]	Type a key sequence or select a menu item;
	it jumps to the full documentation in the XEmacs User's Manual
	for the corresponding command.
\[view-lossage]	Recent input keystrokes and minibuffer messages.
\[describe-mode]	Documentation of current major and minor modes.
\[describe-pointer]	Table of all mouse-button bindings.
\[where-is]	Type a command name; it displays which keystrokes invoke that command.

Help on functions and variables:

\[hyper-apropos]	Type a substring; it shows a hypertext list of
        functions and variables that contain that substring.
\[command-apropos]	Older version of apropos; superseded by previous command.
\[apropos-documentation]	Type a substring; it shows a hypertext list of
        functions and variables containing that substring anywhere
        in their documentation.
\[Info-goto-emacs-command-node]	Type a command name; it jumps to the full documentation
	in the XEmacs User's Manual.
\[describe-function]	Type a command or function name; it shows its documentation.
	(Terser but more up-to-date than what's in the manual.)
\[Info-elisp-ref]	Type a function name; it jumps to the full documentation
	in the XEmacs Lisp Reference Manual.
\[Info-search-index-in-xemacs-and-lispref]	Type a substring; it looks it up in the indices of both
	the XEmacs User's Manual and the XEmacs Lisp Reference Manual.
	It jumps to the first match (preferring an exact match); you
	can use `\<Info-mode-map>\[Info-index-next]\<help-map>' to successively visit other matches.
\[describe-variable]	Type a variable name; it displays its documentation and value.

Miscellaneous:

\[describe-beta]	Special considerations about running a beta version of XEmacs.

\[view-xemacs-problems]	Known problems.
\[customize]	Customize Emacs options.
\[describe-distribution]	How to obtain XEmacs.
\[describe-last-error]	Information about the most recent error.
\[xemacs-local-faq]	Local copy of the XEmacs FAQ.
\[info]	Info documentation reader.
\[Info-query]	Type an Info file name; it displays it in Info reader.
\[describe-copying]	XEmacs copying permission (General Public License).
\[view-emacs-news]	News of recent XEmacs changes.
\[finder-by-keyword]	Type a topic keyword; it finds matching packages.
\[describe-syntax]	Contents of syntax table with explanations.
\[view-sample-init-el]	View the sample init.el that comes with XEmacs.
\[help-with-tutorial]	XEmacs learn-by-doing tutorial.
\[describe-no-warranty]	Information on absence of warranty for XEmacs.Shelp.elc
Ffunction-called-at-point
Return the function which is called by the list containing point.
If that gives no function, return the function whose name is around point.
If that doesn't give a function, return nil.Shelp.elc
Ffunction-at-point
Return the function whose name is around point.
If that gives no function, return the function which is called by the
list containing point.  If that doesn't give a function, return nil.Shelp.elc
Ffunction-at-event
Return the function whose name is around the position of EVENT.
EVENT should be a mouse event.  When calling from a popup or context menu,
use `last-popup-menu-event' to find out where the mouse was clicked.
(You cannot use (interactive "e"), unfortunately.  This returns a
misc-user event.)

If the event contains no position, or the position is not over text, or
there is no function around that point, nil is returned.Shelp.elc
Vdescribe-function-show-arglist
*If non-nil, describe-function will show the function's arglist.Shelp.elc
Fdescribe-function
Display the full documentation of FUNCTION (a symbol).
When run interactively, it defaults to any function found by
`function-at-point'.Shelp.elc
Ffunction-obsolete-p
Return non-nil if FUNCTION is obsolete.Shelp.elc
Ffunction-obsoleteness-doc
If FUNCTION is obsolete, return a string describing this.Shelp.elc
Ffunction-compatible-p
Return non-nil if FUNCTION is present for Emacs compatibility.Shelp.elc
Ffunction-compatibility-doc
If FUNCTION is Emacs compatible, return a string describing this.Shelp.elc
Ffunction-arglist
Return a string giving the argument list of FUNCTION.
For example:

	(function-arglist 'function-arglist)
	=> "(function-arglist FUNCTION)"

This function is used by `describe-function-1' to list function
arguments in the standard Lisp style.Shelp.elc
Ffunction-documentation-1
Shelp.elc
Ffunction-documentation
Return a string giving the documentation for FUNCTION, if any.
If the optional argument STRIP-ARGLIST is non-nil, remove the arglist
part of the documentation of internal subroutines, CL lambda forms, etc.Shelp.elc
FHelp-princ-face
Shelp.elc
FHelp-prin1-face
Shelp.elc
Fhelp-symbol-run-function-1
Shelp.elc
Fhelp-symbol-run-function
Shelp.elc
Ffrob-help-extents
Shelp.elc
Fdescribe-function-1
This function does the work for `describe-function'.Shelp.elc
Fdescribe-function-arglist
Shelp.elc
Fvariable-at-point
Shelp.elc
Fvariable-at-event
Return the variable whose name is around the position of EVENT.
EVENT should be a mouse event.  When calling from a popup or context menu,
use `last-popup-menu-event' to find out where the mouse was clicked.
(You cannot use (interactive "e"), unfortunately.  This returns a
misc-user event.)

If the event contains no position, or the position is not over text, or
there is no variable around that point, nil is returned.Shelp.elc
Fvariable-obsolete-p
Return non-nil if VARIABLE is obsolete.Shelp.elc
Fvariable-obsoleteness-doc
If VARIABLE is obsolete, return a string describing this.Shelp.elc
Fvariable-compatible-p
Return non-nil if VARIABLE is Emacs compatible.Shelp.elc
Fvariable-compatibility-doc
If VARIABLE is Emacs compatible, return a string describing this.Shelp.elc
Fbuilt-in-variable-doc
Return a string describing whether VARIABLE is built-in.Shelp.elc
Fdescribe-variable
Display the full documentation of VARIABLE (a symbol).Shelp.elc
Fsorted-key-descriptions
Sort and separate the key descriptions for KEYS.
The sorting is done by length (shortest bindings first), and the bindings
are separated with SEPARATOR (", " by default).Shelp.elc
Fwhere-is
Print message listing key sequences that invoke specified command.
Argument is a command definition, usually a symbol with a function definition.
When run interactively, it defaults to any function found by
`function-at-point'.
If INSERT (the prefix arg) is non-nil, insert the message in the buffer.Shelp.elc
Fdescribe-syntax
Describe the syntax specifications in the syntax table.
The descriptions are inserted in a buffer, which is then displayed.Shelp.elc
Flist-processes
Display a list of all processes.
(Any processes listed as Exited or Signaled are actually eliminated
after the listing is made.)Shelp.elc
Fhelp-keymap-with-help-key
Return a copy of KEYMAP with an help-key binding according to help-char
 invoking FORM like help-form.  An existing binding is not overridden.
 If FORM is nil then no binding is made.Shelp.elc
Fhelp-print-help-form
Shelp.elc
Fhelp-find-source-or-scroll-up
Follow any cross reference to source code; if none, scroll up.  Shelp.elc
Fhelp-mouse-find-source-or-track
Follow any cross reference to source code under the mouse; 
if none, call mouse-track.  Shelp.elc
Vtemp-buffer-resize-mode
Non-nil if Temp-Buffer-Resize mode is enabled.
See the command `temp-buffer-resize-mode' for a description of this minor-mode.
Setting this variable directly does not take effect;
use either \[customize] or the function `temp-buffer-resize-mode'.Shelp.elc
Ftemp-buffer-resize-mode
Toggle the mode which makes windows smaller for temporary buffers.
With prefix argument ARG, turn the resizing of windows displaying temporary
buffers on if ARG is positive or off otherwise.
This makes the window the right height for its contents, but never
less than `window-min-height' nor a higher proportion of its frame than
`temp-buffer-max-height'. (Note the differing semantics of the latter
versus GNU Emacs, where `temp-buffer-max-height' is an integer number of
lines.)
This applies to `help', `apropos' and `completion' buffers, and some others.Shelp.elc
Vtemp-buffer-resize-mode-hook
Hook run at the end of function `temp-buffer-resize-mode'.Shelp.elc
Vtemp-buffer-resize-mode-on-hook
Hook to run when entering temp-buffer-resize-mode.Shelp.elc
Vtemp-buffer-resize-mode-off-hook
Hook to run when exiting temp-buffer-resize-mode.Seasymenu.elc
Feasy-menu-define
Define a menu bar submenu in maps MAPS, according to MENU.
The arguments SYMBOL and DOC are ignored; they are present for
compatibility only.  SYMBOL is not evaluated.  In other Emacs versions
these arguments may be used as a variable to hold the menu data, and a
doc string for that variable.

The first element of MENU must be a string.  It is the menu bar item name.
The rest of the elements are menu items.

A menu item is usually a vector of three elements:  [NAME CALLBACK ENABLE]

NAME is a string--the menu item name.

CALLBACK is a command to run when the item is chosen,
or a list to evaluate when the item is chosen.

ENABLE is an expression; the item is enabled for selection
whenever this expression's value is non-nil.

Alternatively, a menu item may have the form:

   [ NAME CALLBACK [ KEYWORD ARG ] ... ]

Where KEYWORD is one of the symbol defined below.

   :keys KEYS

KEYS is a string; a complex keyboard equivalent to this menu item.

   :active ENABLE

ENABLE is an expression; the item is enabled for selection
whenever this expression's value is non-nil.

   :suffix NAME

NAME is a string; the name of an argument to CALLBACK.

   :style STYLE

STYLE is a symbol describing the type of menu item.  The following are
defined:

toggle: A checkbox.
        Currently just prepend the name with the string "Toggle ".
radio: A radio button.
nil: An ordinary menu item.

   :selected SELECTED

SELECTED is an expression; the checkbox or radio button is selected
whenever this expression's value is non-nil.
Currently just disable radio buttons, no effect on checkboxes.

A menu item can be a string.  Then that string appears in the menu as
unselectable text.  A string consisting solely of hyphens is displayed
as a solid horizontal line.

A menu item can be a list.  It is treated as a submenu.
The first element should be the submenu name.  That's used as the
menu item in the top-level menu.  The cdr of the submenu list
is a list of menu items, as above.Seasymenu.elc
Feasy-menu-do-define
Seasymenu.elc
Feasy-menu-change
Seasymenu.elc
Veasy-menu-all-popups
This variable holds all the popup menus easy-menu knows about. 
This includes any menu created with `easy-menu-add' and any
non-default value for `mode-popup-menu' that existed when
`easy-menu-add' was first called.Seasymenu.elc
Feasy-menu-add
Add MENU to the current menu bar.Seasymenu.elc
Feasy-menu-remove
Remove MENU from the current menu bar.Seasymenu.elc
Feasy-menu-normalize
Seasymenu.elc
Feasy-menu-add-item
At the end of the submenu of MENU with path PATH, add ITEM.
If ITEM is already present in this submenu, then this item will be changed.
otherwise ITEM will be added at the end of the submenu, unless the optional
argument BEFORE is present, in which case ITEM will instead be added
before the item named BEFORE.
MENU is either a symbol, which have earlier been used as the first
argument in a call to `easy-menu-define', or the value of such a symbol
i.e. a menu, or nil, which stands for the current menubar.
PATH is a list of strings for locating the submenu where ITEM is to be
added.  If PATH is nil, MENU itself is used.  Otherwise, the first
element should be the name of a submenu directly under MENU.  This
submenu is then traversed recursively with the remaining elements of PATH.
ITEM is either defined as in `easy-menu-define', a menu defined earlier
by `easy-menu-define' or `easy-menu-create-menu' or an item returned
from `easy-menu-item-present-p' or `easy-menu-remove-item'.Seasymenu.elc
Feasy-menu-item-present-p
In submenu of MENU with path PATH, return true iff item NAME is present.
MENU and PATH are defined as in `easy-menu-add-item'.
NAME should be a string, the name of the element to be looked for.

The return value can be used as an argument to `easy-menu-add-item'.Seasymenu.elc
Feasy-menu-remove-item
From submenu of MENU with path PATH, remove item NAME.
MENU and PATH are defined as in `easy-menu-add-item'.
NAME should be a string, the name of the element to be removed.

The return value can be used as an argument to `easy-menu-add-item'.Seasymenu.elc
Feasy-menu-title
Sspecial-mode.elc
Vspecial-mode-hook
Hook run when entering Special mode.Sspecial-mode.elc
Fspecial-mode
Parent major mode from which special major modes should inherit.

This mode runs the hook `special-mode-hook', as the final step
during initialization.

\{special-mode-map}Slisp-mode.elc
Fconstruct-lisp-mode-menu
Slisp-mode.elc
Vlisp-imenu-generic-expression
Imenu generic expression for Lisp mode.  See `imenu-generic-expression'.Slisp-mode.elc
Flisp-mode-variables
Slisp-mode.elc
Vshared-lisp-mode-map
Keymap for commands shared by all sorts of Lisp modes.Slisp-mode.elc
Vemacs-lisp-mode-map
Keymap for Emacs Lisp mode.
All commands in `shared-lisp-mode-map' are inherited by this map.Slisp-mode.elc
Vemacs-lisp-mode-hook
Hook to run when entering emacs-lisp-mode.Slisp-mode.elc
Vlisp-mode-hook
Hook to run when entering lisp-mode.Slisp-mode.elc
Vlisp-interaction-mode-hook
Hook to run when entering lisp-interaction-mode.Slisp-mode.elc
Femacs-lisp-byte-compile
Byte compile the file containing the current buffer.Slisp-mode.elc
Femacs-lisp-byte-compile-and-load
Byte-compile the current file (if it has changed), then load compiled code.Slisp-mode.elc
Femacs-lisp-mode
Major mode for editing Lisp code to run in Emacs.
Commands:
Delete converts tabs to spaces as it moves back.
Blank lines separate paragraphs.  Semicolons start comments.
\{emacs-lisp-mode-map}
Entry to this mode calls the value of `emacs-lisp-mode-hook'
if that value is non-nil.Slisp-mode.elc
Vlisp-mode-map
Keymap for ordinary Lisp mode.
All commands in `shared-lisp-mode-map' are inherited by this map.Slisp-mode.elc
Flisp-mode
Major mode for editing Lisp code for Lisps other than Emacs Lisp.
Commands:
Delete converts tabs to spaces as it moves back.
Blank lines separate paragraphs.  Semicolons start comments.
\{lisp-mode-map}
Note that `run-lisp' may be used either to start an inferior Lisp job
or to switch back to an existing one.

Entry to this mode calls the value of `lisp-mode-hook'
if that value is non-nil.Slisp-mode.elc
Vlisp-interaction-mode-map
Keymap for Lisp Interaction mode.
All commands in `shared-lisp-mode-map' are inherited by this map.Slisp-mode.elc
Flisp-interaction-mode
Major mode for typing and evaluating Lisp forms.
Like Lisp mode except that \[eval-print-last-sexp] evals the Lisp expression
before point, and prints its value into the buffer, advancing point.

Commands:
Delete converts tabs to spaces as it moves back.
Paragraphs are separated only by blank lines.
Semicolons start comments.
\{lisp-interaction-mode-map}
Entry to this mode calls the value of `lisp-interaction-mode-hook'
if that value is non-nil.Slisp-mode.elc
Feval-print-last-sexp
Evaluate sexp before point; print value into current buffer.Slisp-mode.elc
Veval-interactive-verbose
*Non-nil means that interactive evaluation can print messages.
The messages are printed when the expression is treated differently
using `\[eval-last-sexp]' and `\[eval-defun]' than it would have
been treated noninteractively.

The printed messages are "defvar treated as defconst" and "defcustom
evaluation forced".  See `eval-interactive' for more details.Slisp-mode.elc
Feval-interactive
Evaluate EXPR; pass back multiple values, transform defvars to defconsts. 

Always returns a list.  The length of this list will be something other than
one if the form returned multiple values.  It will be zero if the form
returned a single zero-length multiple value.Slisp-mode.elc
Fprin1-list-as-multiple-values
Call `prin1' on each element of MULTIPLE-VALUE-LIST, separated by " ;\n"

If MULTIPLE-VALUE-LIST is zero-length, print the text
"#<zero length multiple value> ;\n".  Always returns nil.Slisp-mode.elc
Feval-last-sexp
Evaluate sexp before point; print value in minibuffer.
With argument, print output into current buffer.Slisp-mode.elc
Feval-defun
Evaluate defun that point is in or before.
Print value in minibuffer.
With argument, insert value in current buffer after the defun.Slisp-mode.elc
Flisp-comment-indent
Slisp-mode.elc
Flisp-indent-for-comment
Indent this line's comment appropriately, or insert an empty comment.
If adding a new comment on a blank line, use `block-comment-start' instead
of `comment-start' to open the comment.Slisp-mode.elc
Flisp-indent-line
Indent current line as Lisp code.
With argument, indent any additional lines of the same expression
rigidly along with this one.Slisp-mode.elc
Fcalculate-lisp-indent
Return appropriate indentation for current line as Lisp code.
In usual case returns an integer: the column to indent to.
Can instead return a list, whose car is the column to indent to.
This means that following lines at the same level of indentation
should not necessarily be indented the same way.
The second element of the list is the buffer position
of the start of the containing expression.Slisp-mode.elc
Vlisp-function-and-type-regexp
Regular expression to match the function and type keywords used in Lisp.
This matches, for example, the string "defun", as well as defsetf,
defsubst*, define-prefix-command, etc.  Match string 1 matches everything
but the three-letter "def" string at the beginning.  Match string 2
matches everything after that, when it's *NOT* a "type" declaration --
which includes defclass, defstruct, and deftype.  Match string 3 is similar
to match string 2 in that it matches everything after the "def", when
(and only when) the keyword matched *IS* a type declaration.  You can use
match strings 2 and 3 to easily determine whether a function or type was
matched.  The regex is terminated with a \> so that there must be a
word-end; i.e. defunbbb won't match.Slisp-mode.elc
Flisp-indent-function
Slisp-mode.elc
Flisp-indent-quoteform
Slisp-mode.elc
Vlisp-body-indent
Number of columns to indent the second line of a `(def...)' form.Slisp-mode.elc
Flisp-indent-specform
Slisp-mode.elc
Flisp-indent-defform
Slisp-mode.elc
Findent-sexp
Indent each line of the list starting just after point.
If optional arg ENDPOS is given, indent each line, stopping when
ENDPOS is encountered.Slisp-mode.elc
Flisp-indent-region
Slisp-mode.elc
Flisp-fill-paragraph
Like \[fill-paragraph], but handle Emacs Lisp comments.
If any of the current line is a comment, fill the comment or the
paragraph of it that point is in, preserving the comment's indentation
and initial semicolons.Slisp-mode.elc
Findent-code-rigidly
Indent all lines of code, starting in the region, sideways by ARG columns.
Does not affect lines starting inside comments or strings, assuming that
the start of the region is not inside them.

Called from a program, takes args START, END, COLUMNS and NOCHANGE-REGEXP.
The last is a regexp which, if matched at the beginning of a line,
means don't indent that line.Stext-mode.elc
Vtext-mode-hook
Normal hook run when entering Text mode and many related modes.Stext-mode.elc
Vtext-mode-variant
Non-nil if this buffer's major mode is a variant of Text mode.Stext-mode.elc
Vtext-mode-syntax-table
Syntax table used while in text mode.Stext-mode.elc
Vtext-mode-abbrev-table
Abbrev table used while in text mode.Stext-mode.elc
Vtext-mode-map
Keymap for Text mode.
Many other modes, such as Mail mode, Outline mode and Indented Text mode,
inherit all the commands defined in this map.Stext-mode.elc
Ftext-mode
Major mode for editing text written for humans to read.
In this mode, paragraphs are delimited only by blank or white lines.
You can thus get the full benefit of adaptive filling
 (see the variable `adaptive-fill-mode').
\{text-mode-map}
Turning on Text mode runs the normal hook `text-mode-hook'.Stext-mode.elc
Fparagraph-indent-text-mode
Major mode for editing text, with leading spaces starting a paragraph.
In this mode, you do not need blank lines between paragraphs
when the first line of the following paragraph starts with whitespace.
Special commands:
\{text-mode-map}
Turning on Paragraph-Indent Text mode runs the normal hooks
`text-mode-hook' and `paragraph-indent-text-mode-hook'.Stext-mode.elc
Findented-text-mode
Stext-mode.elc
Ftext-mode-hook-identify
Mark that this mode has run `text-mode-hook'.
This is how `toggle-text-mode-auto-fill' knows which buffers to operate on.Stext-mode.elc
Ftoggle-text-mode-auto-fill
Toggle whether to use Auto Fill in Text mode and related modes.
This command affects all buffers that use modes related to Text mode,
both existing buffers and buffers that you subsequently create.Stext-mode.elc
Fcenter-paragraph
Center each nonblank line in the paragraph at or after point.
See `center-line' for more info.Stext-mode.elc
Fcenter-region
Center each nonblank line starting in the region.
See `center-line' for more info.Stext-mode.elc
Fcenter-line
Center the line point is on, within the width specified by `fill-column'.
This means adjusting the indentation so that it equals
the distance between the end of the text and `fill-column'.
The argument NLINES says how many lines to center.Sfill.elc
Vfill-individual-varying-indent
*Controls criterion for a new paragraph in `fill-individual-paragraphs'.
Non-nil means changing indent doesn't end a paragraph.
That mode can handle paragraphs with extra indentation on the first line,
but it requires separator lines between paragraphs.
A value of nil means that any change in indentation starts a new paragraph.Sfill.elc
Vsentence-end-double-space
*Non-nil means a single space does not end a sentence.
This variable applies only to filling, not motion commands.  To
change the behavior of motion commands, see `sentence-end'.Sfill.elc
Vcolon-double-space
*Non-nil means put two spaces after a colon when filling.Sfill.elc
Vfill-paragraph-function
Mode-specific function to fill a paragraph, or nil if there is none.
If the function returns nil, then `fill-paragraph' does its normal work.Sfill.elc
Fset-fill-prefix
Set the fill prefix to the current line up to point.
Filling expects lines to start with the fill prefix and
reinserts the fill prefix in each resulting line.Sfill.elc
Vadaptive-fill-mode
*Non-nil means determine a paragraph's fill prefix from its text.Sfill.elc
Vadaptive-fill-regexp
*Regexp to match text at start of line that constitutes indentation.
If Adaptive Fill mode is enabled, whatever text matches this pattern
on the second line of a paragraph is used as the standard indentation
for the paragraph.  If the paragraph has just one line, the indentation
is taken from that line.Sfill.elc
Vadaptive-fill-function
*Function to call to choose a fill prefix for a paragraph.
This function is used when `adaptive-fill-regexp' does not match.Sfill.elc
Ffill-move-backward-to-break-point
Sfill.elc
Ffill-move-forward-to-break-point
Sfill.elc
Ffill-end-of-sentence-p
Sfill.elc
Fcurrent-fill-column
Return the fill-column to use for this line.
The fill-column to use for a buffer is stored in the variable `fill-column',
but can be locally modified by the `right-margin' text property, which is
subtracted from `fill-column'.

The fill column to use for a line is the first column at which the column
number equals or exceeds the local fill-column - right-margin difference.Sfill.elc
Fcanonically-space-region
Remove extra spaces between words in region.
Leave one space between words, two at end of sentences or after colons
(depending on values of `sentence-end-double-space' and `colon-double-space').
Remove indentation from each line.Sfill.elc
Ffill-context-prefix
Compute a fill prefix from the text between FROM and TO.
This uses the variables `adaptive-fill-prefix' and `adaptive-fill-function'.
If FIRST-LINE-REGEXP is non-nil, then when taking a prefix from the
first line, insist it must match FIRST-LINE-REGEXP.Sfill.elc
Fmaybe-adapt-fill-prefix
Sfill.elc
Ffill-region-as-paragraph
Fill the region as one paragraph.
It removes any paragraph breaks in the region and extra newlines at the end,
indents and fills lines between the margins given by the
`current-left-margin' and `current-fill-column' functions.
It leaves point at the beginning of the line following the paragraph.

Normally performs justification according to the `current-justification'
function, but with a prefix arg, does full justification instead.

From a program, optional third arg JUSTIFY can specify any type of
justification.  Fourth arg NOSQUEEZE non-nil means not to make spaces
between words canonical before filling.  Fifth arg SQUEEZE-AFTER, if non-nil,
means don't canonicalize spaces before that position.

If `sentence-end-double-space' is non-nil, then period followed by one
space does not end a sentence, so don't break a line there.Sfill.elc
Ffill-paragraph
Fill paragraph at or after point.  Prefix arg means justify as well.
If `sentence-end-double-space' is non-nil, then period followed by one
space does not end a sentence, so don't break a line there.

If `fill-paragraph-function' is non-nil, we call it (passing our
argument to it), and if it returns non-nil, we simply return its value.Sfill.elc
Ffill-region
Fill each of the paragraphs in the region.
Prefix arg (non-nil third arg, if called from program) means justify as well.

Noninteractively, fourth arg NOSQUEEZE non-nil means to leave
whitespace other than line breaks untouched, and fifth arg TO-EOP
non-nil means to keep filling to the end of the paragraph (or next
hard newline, if `use-hard-newlines' is on).

If `sentence-end-double-space' is non-nil, then period followed by one
space does not end a sentence, so don't break a line there.Sfill.elc
Ffill-paragraph-or-region
Fill the current region, if it's active; otherwise, fill the paragraph.
See `fill-paragraph' and `fill-region' for more information.Sfill.elc
Vdefault-justification
*Method of justifying text not otherwise specified.
Possible values are `left', `right', `full', `center', or `none'.
The requested kind of justification is done whenever lines are filled.
The `justification' text-property  can locally override this variable.
This variable automatically becomes buffer-local when set in any fashion.Sfill.elc
Fcurrent-justification
How should we justify this line?
This returns the value of the text-property `justification',
or the variable `default-justification' if there is no text-property.
However, it returns nil rather than `none' to mean "don't justify".Sfill.elc
Fset-justification
Set the region's justification style.
The kind of justification to use is prompted for.
If the mark is not active, this command operates on the current paragraph.
If the mark is active, the region is used.  However, if the beginning and end
of the region are not at paragraph breaks, they are moved to the beginning and
end of the paragraphs they are in.
If `use-hard-newlines' is true, all hard newlines are taken to be paragraph
breaks.

When calling from a program, operates just on region between BEGIN and END,
unless optional fourth arg WHOLE-PAR is non-nil.  In that case bounds are
extended to include entire paragraphs as in the interactive command.Sfill.elc
Fset-justification-none
Disable automatic filling for paragraphs in the region.
If the mark is not active, this applies to the current paragraph.Sfill.elc
Fset-justification-left
Make paragraphs in the region left-justified.
This is usually the default, but see the variable `default-justification'.
If the mark is not active, this applies to the current paragraph.Sfill.elc
Fset-justification-right
Make paragraphs in the region right-justified:
Flush at the right margin and ragged on the left.
If the mark is not active, this applies to the current paragraph.Sfill.elc
Fset-justification-full
Make paragraphs in the region fully justified:
This makes lines flush on both margins by inserting spaces between words.
If the mark is not active, this applies to the current paragraph.Sfill.elc
Fset-justification-center
Make paragraphs in the region centered.
If the mark is not active, this applies to the current paragraph.Sfill.elc
Ffind-space-insertable-point
Search backward for a permissible point for inserting justification spaces.Sfill.elc
Fjustify-current-line
Do some kind of justification on this line.
Normally does full justification: adds spaces to the line to make it end at
the column given by `current-fill-column'.
Optional first argument HOW specifies alternate type of justification:
it can be `left', `right', `full', `center', or `none'.
If HOW is t, will justify however the `current-justification' function says to.
If HOW is nil or missing, full justification is done by default.
Second arg EOP non-nil means that this is the last line of the paragraph, so
it will not be stretched by full justification.
Third arg NOSQUEEZE non-nil means to leave interior whitespace unchanged,
otherwise it is made canonical.Sfill.elc
Funjustify-current-line
Remove justification whitespace from current line.
If the line is centered or right-justified, this function removes any
indentation past the left margin.  If the line is full-justified, it removes
extra spaces between words.  It does nothing in other justification modes.Sfill.elc
Funjustify-region
Remove justification whitespace from region.
For centered or right-justified regions, this function removes any indentation
past the left margin from each line.  For full-justified lines, it removes
extra spaces between words.  It does nothing in other justification modes.
Arguments BEGIN and END are optional; default is the whole buffer.Sfill.elc
Ffill-nonuniform-paragraphs
Fill paragraphs within the region, allowing varying indentation within each.
This command divides the region into "paragraphs",
only at paragraph-separator lines, then fills each paragraph
using as the fill prefix the smallest indentation of any line
in the paragraph.

When calling from a program, pass range to fill as first two arguments.

Optional third and fourth arguments JUSTIFY and MAIL-FLAG:
JUSTIFY to justify paragraphs (prefix arg),
MAIL-FLAG for a mail message, i. e. don't fill header lines.Sfill.elc
Ffill-individual-paragraphs
Fill paragraphs of uniform indentation within the region.
This command divides the region into "paragraphs",
treating every change in indentation level as a paragraph boundary,
then fills each paragraph using its indentation level as the fill prefix.

When calling from a program, pass range to fill as first two arguments.

Optional third and fourth arguments JUSTIFY and MAIL-FLAG:
JUSTIFY to justify paragraphs (prefix arg),
MAIL-FLAG for a mail message, i. e. don't fill header lines.Sauto-save.elc
Vauto-save-version
Version number of auto-save.Sauto-save.elc
Vauto-save-directory
If non-nil, fixed directory for autosaving: all autosave files go
there.  If this directory does not yet exist at load time, it is
created and its mode is set to 0700 so that nobody else can read your
autosave files.

If nil, each autosave files goes into the same directory as its
corresponding visited file.

A non-nil `auto-save-directory' could be on a local disk such as in
/tmp, then auto-saves will always be fast, even if NFS or the
automounter is slow.  In the usual case of /tmp being locally mounted,
note that if you run emacs on two different machines, they will not
see each other's auto-save files.

The value (expand-file-name "~/.autosave/") might be better if /tmp
is mounted from swap (possible in SunOS, type `df /tmp' to find out)
and thus vanishes after a reboot, or if your system is particularly
thorough when cleaning up /tmp, clearing even non-empty subdirectories.

It should never be an efs remote filename because that would
defeat `efs-auto-save-remotely'.

Unless you set `auto-save-hash-p', you shouldn't set this to a
directory in a filesystem that does not support long filenames, since
a file named

    /home/sk/lib/emacs/lisp/auto-save.el

will have a longish filename like

    AUTO-SAVE-DIRECTORY/#=2Fhome=2Fsk=2Flib=2Femacs=2Flisp=2Fauto-save.el#

as auto save file.

See also variables `auto-save-directory-fallback',
`efs-auto-save' and `efs-auto-save-remotely'.Sauto-save.elc
Vauto-save-hash-p
If non-nil, hashed autosave names of length 14 are used.
This is to avoid autosave filenames longer than 14 characters.
The directory used is `auto-save-hash-directory' regardless of
`auto-save-directory'.
Hashing defeats `recover-all-files', you have to recover files
individually by doing `recover-file'.Sauto-save.elc
Vauto-save-offer-delete
*If non-nil, `recover-all-files' offers to delete autosave files
that are out of date or were dismissed for recovering.
Special value 'always deletes those files silently.Sauto-save.elc
Vauto-save-directory-fallback
Directory used for local autosaving of remote files if
both `auto-save-directory' and `efs-auto-save-remotely' are nil.
Also used if a working directory to be used for autosaving is not writable.
This *must* always be the name of directory that exists or can be
created by you, never nil.Sauto-save.elc
Vauto-save-hash-directory
If non-nil, directory used for hashed autosave filenames.Sauto-save.elc
Fauto-save-checked-directory
Make sure the directory DIR exists and return it expanded if non-nil.Sauto-save.elc
Fmake-auto-save-file-name
Return file name to use for auto-saves of current buffer.
Does not consider `auto-save-visited-file-name'; that is checked
before calling this function.

Offers to autosave all files in the same `auto-save-directory'.  All
autosave files can then be recovered at once with function
`recover-all-files'.

Takes care to make autosave files for files accessed through efs
be local files if variable `efs-auto-save-remotely' is nil.

Takes care of slashes in buffer names to prevent autosave errors.

Takes care that autosave files for buffers not visiting any file (such
as `*mail*') from two simultaneous Emacses don't collide by prepending
the Emacs pid.

Uses 14 character autosave names if `auto-save-hash-p' is true.

Autosaves even if the current directory is not writable, using
directory `auto-save-directory-fallback'.

You can redefine this for customization (he he :-).
See also function `auto-save-file-name-p'.Sauto-save.elc
Fauto-save-file-name-p
Return non-nil if FILENAME can be yielded by `make-auto-save-file-name'.
FILENAME should lack slashes.
You can redefine this for customization.Sauto-save.elc
Fauto-save-original-name
Reverse of `make-auto-save-file-name'.
Returns nil if SAVENAME was not associated with a file (e.g., it came
from an autosaved `*mail*' buffer) or does not appear to be an
autosave file at all.
Hashed files are not understood, see `auto-save-hash-p'.Sauto-save.elc
Fauto-save-name-in-fixed-directory
Sauto-save.elc
Fauto-save-name-in-same-directory
Sauto-save.elc
Vauto-save-reserved-chars
List of characters disallowed (or potentially disallowed) in filenames.
Includes everything that can get us into trouble under MS Windows or Unix.Sauto-save.elc
Fauto-save-escape-name
Escape any evil nasty characters in a potential filename.
Uses quoted-printable-style escaping -- e.g. the dreaded =3D.
Does not use URL escaping (with %) because filenames beginning with #% are
a special signal for non-file buffers.Sauto-save.elc
Fauto-save-unescape-name
Undo any escaping of evil nasty characters in a file name.
See `auto-save-escape-name'.Sauto-save.elc
Fauto-save-cyclic-hash-14
Sauto-save.elc
Frecover-all-files
Do recover-file for all autosave files which are current.
Only works if you have a non-nil `auto-save-directory'.

Optional prefix argument SILENT means to be silent about non-current
autosave files.  This is useful if invoked automatically at Emacs
startup.

If `auto-save-offer-delete' is t, this function will offer to delete
old or rejected autosave files.

Hashed files (see `auto-save-hash-p') are not understood, use
`recover-file' to recover them individually.Smovemail.elc
Vmail-lock-method
mail spool locking method used by this instance of XEmacs.
This must be one of the symbols in MAIL-LOCK-METHODS.Smovemail.elc
Fmove-mail-spool
Move mail spool in file FROM to file TO.
BUFFER is a buffer for error messages.
POP-PASSWORD is a password for POP mailbox access.Sfloat-sup.elc
Vpi
The value of Pi (3.1415926...)Sfloat-sup.elc
Ve
The value of e (2.7182818...)Sfloat-sup.elc
Vdegrees-to-radians
Degrees to radian conversion constantSfloat-sup.elc
Vradians-to-degrees
Radian to degree conversion constantSfloat-sup.elc
Fdegrees-to-radians
Convert ARG from degrees to radians.Sfloat-sup.elc
Fradians-to-degrees
Convert ARG from radians to degrees.Sitimer.elc
Vitimer-version
Version number of the itimer package.Sitimer.elc
Vitimer-list
List of all active itimers.Sitimer.elc
Vitimer-process
Process that drives all itimers, if a subprocess is being used.Sitimer.elc
Vitimer-timer
Emacs internal timer that drives the itimer system, if a subprocess
is not being used to drive the system.Sitimer.elc
Vitimer-timer-last-wakeup
The time the timer driver function last ran.Sitimer.elc
Vitimer-short-interval
Interval used for scheduling an event a very short time in the future.
Used internally to make the scheduler wake up early.
Unit is seconds.Sitimer.elc
Vitimer-next-wakeup
Itimer process will wakeup to service running itimers within this
many seconds.Sitimer.elc
Vitimer-edit-map
Keymap used when in Itimer Edit mode.Sitimer.elc
Fitimerp
Return non-nil if OBJECT is an itimer.Sitimer.elc
Fitimer-live-p
Return non-nil if OBJECT is an itimer and is active.
``Active'' means Emacs will run it when it expires.
`activate-itimer' must be called on an itimer to make it active.
Itimers started with `start-itimer' are automatically active.Sitimer.elc
Fitimer-name
Return the name of ITIMER.Sitimer.elc
Fitimer-value
Return the number of seconds until ITIMER expires.Sitimer.elc
Fitimer-restart
Return the value to which ITIMER will be set at restart.
The value nil is returned if this itimer isn't set to restart.Sitimer.elc
Fitimer-function
Return the function of ITIMER.
This function is called each time ITIMER expires.Sitimer.elc
Fitimer-is-idle
Return non-nil if ITIMER is an idle timer.
Normal timers expire after a set interval.  Idle timers expire
only after Emacs has been idle for a specific interval.  ``Idle''
means no command events have occurred within the interval.Sitimer.elc
Fitimer-uses-arguments
Return non-nil if the function of ITIMER will be called with arguments.
ITIMER's function is called with the arguments each time ITIMER expires.
The arguments themselves are retrievable with `itimer-function-arguments'.Sitimer.elc
Fitimer-function-arguments
Return the function arguments of ITIMER as a list.
ITIMER's function is called with these arguments each time ITIMER expires.Sitimer.elc
Fitimer-recorded-run-time
Sitimer.elc
Fset-itimer-name
Set the name of ITIMER to be NAME.
NAME is an identifier for the itimer.  It must be a string.  If an active
itimer already exists with this name, an error is signaled.Sitimer.elc
Fset-itimer-value
Set the timeout value of ITIMER to be VALUE.
Itimer will expire in this many seconds.
If your version of Emacs supports floating point numbers then
VALUE can be a floating point number.  Otherwise it
must be an integer.
Returns VALUE.Sitimer.elc
Fset-itimer-value-internal
Sitimer.elc
Fset-itimer-restart
Set the restart value of ITIMER to be RESTART.
If RESTART is nil, ITIMER will not restart when it expires.
If your version of Emacs supports floating point numbers then
RESTART can be a floating point number.  Otherwise it
must be an integer.
Returns RESTART.Sitimer.elc
Fset-itimer-function
Set the function of ITIMER to be FUNCTION.
FUNCTION will be called when itimer expires.
Returns FUNCTION.Sitimer.elc
Fset-itimer-is-idle
Set flag that says whether ITIMER is an idle timer.
If FLAG is non-nil, then ITIMER will be considered an idle timer.
Returns FLAG.Sitimer.elc
Fset-itimer-uses-arguments
Set flag that says whether the function of ITIMER is called with arguments.
If FLAG is non-nil, then the function will be called with one argument,
otherwise the function will be called with no arguments.
Returns FLAG.Sitimer.elc
Fset-itimer-function-arguments
Set the function arguments of ITIMER to be ARGUMENTS.
The function of ITIMER will be called with ARGUMENTS when itimer expires.
Returns ARGUMENTS.Sitimer.elc
Fset-itimer-recorded-run-time
Sitimer.elc
Fget-itimer
Return itimer named NAME, or nil if there is none.Sitimer.elc
Fread-itimer
Read the name of an itimer from the minibuffer and return the itimer
associated with that name.  The user is prompted with PROMPT.
Optional second arg INITIAL-INPUT non-nil is inserted into the
minibuffer as initial user input.Sitimer.elc
Fdelete-itimer
Deletes ITIMER.  ITIMER may be an itimer or the name of one.Sitimer.elc
Fstart-itimer
Start an itimer.
Arguments are
  NAME, FUNCTION, VALUE &optional RESTART, IS-IDLE, WITH-ARGS, &rest FUNCTION-ARGUMENTS.
NAME is an identifier for the itimer.  It must be a string.  If an itimer
  already exists with this name, NAME will be modified slightly to make
  it unique.
FUNCTION should be a function (or symbol naming one).  It
  will be called each time the itimer expires with arguments of
  FUNCTION-ARGUMENTS.  The function can access the itimer that
  invoked it through the variable `current-itimer'.  If WITH-ARGS
  is nil then FUNCTION is called with no arguments.  This is for
  backward compatibility with older versions of the itimer
  package which always called FUNCTION with no arguments.
VALUE is the number of seconds until this itimer expires.
  If your version of Emacs supports floating point numbers then
  VALUE can be a floating point number.  Otherwise it
  must be an integer.
Optional fourth arg RESTART non-nil means that this itimer should be
  restarted automatically after its function is called.  Normally an itimer
  is deleted at expiration after its function has returned.
  If non-nil RESTART should be a number indicating the value at which the
  itimer should be set at restart time.
Optional fifth arg IS-IDLE specifies if this is an idle timer.
  Normal timers expire after a set interval.  Idle timers expire
  only after Emacs has been idle for specific interval.  ``Idle''
  means no command events have occurred within the interval.
Returns the newly created itimer.Sitimer.elc
Fmake-itimer
Create an unactivated itimer.
The itimer will not begin running until activated with `activate-itimer'.
Set the itimer's expire interval with `set-itimer-value'.
Set the itimer's function interval with `set-itimer-function'.
Once this is done, the timer can be activated.Sitimer.elc
Factivate-itimer
Activate ITIMER, which was previously created with `make-itimer'.
ITIMER will be added to the global list of running itimers,
its FUNCTION will be called when it expires, and so on.Sitimer.elc
Flist-itimers
Pop up a buffer containing a list of all itimers.
The major mode of the buffer is Itimer Edit mode.  This major mode provides
commands to manipulate itimers; see the documentation for
`itimer-edit-mode' for more information.Sitimer.elc
Fedit-itimers
Display a list of all itimers and select it for editing.
The major mode of the buffer containing the listing is Itimer Edit mode.
This major mode provides commands to manipulate itimers; see the documentation
for `itimer-edit-mode' for more information.Sitimer.elc
Fitimer-edit-mode
Major mode for manipulating itimers.
Attributes of running itimers are changed by moving the cursor to the
desired field and typing `s' to set that field.  The field will then be
set to the value read from the minibuffer.

Commands:
TAB    move forward a field
DEL    move backward a field
s      set a field
d      delete the selected itimer
x      start a new itimer
?      helpSitimer.elc
Fitimer-edit-help
Help function for Itimer Edit.Sitimer.elc
Fitimer-edit-quit
End Itimer Edit.Sitimer.elc
Fitimer-edit-set-field
Sitimer.elc
Fitimer-edit-delete-itimer
Sitimer.elc
Fitimer-edit-next-field
Sitimer.elc
Fitimer-edit-previous-field
Sitimer.elc
Fitimer-edit-beginning-of-field
Sitimer.elc
Fitimer-truncate-string
Sitimer.elc
Fitimer-run-expired-timers
Sitimer.elc
Fitimer-process-filter
Sitimer.elc
Fitimer-process-sentinel
Sitimer.elc
Fitimer-process-start
Sitimer.elc
Fitimer-process-wakeup
Sitimer.elc
Fitimer-timer-start
Sitimer.elc
Fitimer-disable-timeout
Sitimer.elc
Fitimer-timer-wakeup
Sitimer.elc
Fitimer-time-difference
Sitimer.elc
Fitimer-timer-driver
Sitimer.elc
Fitimer-driver-start
Sitimer.elc
Fitimer-driver-wakeup
Sitimer-autosave.elc
Vauto-save-timeout
*Number of seconds idle time before auto-save.
Zero or nil means disable auto-saving due to idleness.

The actual amount of idle time between auto-saves is logarithmically related
to the size of the current buffer.  This variable is the number of seconds
after which an auto-save will happen when the current buffer is 50k or less;
the timeout will be 2 1/4 times this in a 200k buffer, 3 3/4 times this in a
1000k buffer, and 4 1/2 times this in a 2000k buffer.

See also the variable `auto-save-interval', which controls auto-saving based
on the number of characters typed.Sitimer-autosave.elc
Vauto-gc-threshold
*GC when this many bytes have been consed since the last GC, 
and the user has been idle for `auto-save-timeout' seconds.Sitimer-autosave.elc
Fauto-save-itimer
For use as a itimer callback function.
Auto-saves and garbage-collects based on the size of the current buffer
and the value of `auto-save-timeout', `auto-gc-threshold', and the current
keyboard idle-time.Sitimer-autosave.elc
Fitimer-init-auto-gc
Sprinter.elc
Vprinter-name
*Name of printer to print to.
If nil, use default.
Under Windows, use `mswindows-printer-list' to get names of installed
printers.Sprinter.elc
FPrint-context-pageno
Sprinter.elc
FPrint-context-window
Sprinter.elc
FPrint-context-start-time
Sprinter.elc
FPrint-context-printer-name
Sprinter.elc
FPrint-context-p
Sprinter.elc
Fcopy-Print-context
Sprinter.elc
Fmake-Print-context


arguments: (&key PAGENO WINDOW START-TIME PRINTER-NAME)
Sprinter.elc
FPrinter-get-device
Sprinter.elc
FPrinter-clear-device
Sprinter.elc
Vprinter-page-header
*Controls printed page header.

This can be:
- nil.  Header is not printed.
- An fbound symbol or lambda expression.  The function is called with
   one parameter, a print-context object, every time the headers need
   to be set up.  It can use the function `print-context-property' to
   query the properties of this object.  The return value is treated as
   if it was literally specified: i.e. it will be reprocessed.
- A list of up to three elements, for left, center and right portions
   of the header.  Each of these can be
   - nil, not to print the portion
   - A string, which will be printed literally.
   - A predefined symbol, on of the following:
     printer-name     Name of printer being printed to
     short-file-name  File name only, no path
     long-file-name   File name with its path
     buffer-name      Buffer name
     date             Date current when printing started
     time             Time current when printing started
     page             Current printout page number, 1-based
     user-id          User logon id
     user-name        User full name
   - A list of three elements: (face FACE-NAME EXPR).  EXPR is any of the
     items given here.  The item will be displayed in the given face.
   - A cons of an extent and any of the items given here.  The item will
     be displayed using the extent's face, begin-glyph and end-glyph
     properties.
   - A list, each element of which is any of the items given here.
     Each element of the list is rendered in sequence.  For example,
     '("Page " page) is rendered as "Page 5" on the fifth page.
   - An fbound symbol or lambda expression, called with one parameter,
     a print-context object, as above.  The return value is treated as
     if it was literally specified: i.e. it will be reprocessed.Sprinter.elc
Vprinter-page-footer
*Controls printed page footer.

Format is the same as `printer-page-header'.Sprinter.elc
Fgenerate-header-element
Sprinter.elc
Fgenerate-header-line
Sprinter.elc
Fprint-context-property
Return property PROP of PRINT-CONTEXT.

Valid properties are

print-buffer     Buffer being printed
print-window     Window on printer device containing print buffer
print-frame      Frame on printer device corresponding to current page
print-device     Device referring to printer
print-start-time Time current when printing started (`current-time' format)
print-page       Current printout page number, 1-based
printer-name     Name of printer being printed to
short-file-name  File name only, no path
long-file-name   File name with its path
buffer-name      Buffer name
date             Date current when printing started (as a string)
time             Time current when printing started (as a string)
page             Current printout page number, 1-based (as a string)
user-id          User logon id (as a string)
user-name        User full nameSprinter.elc
Fgeneric-page-setup
Display the Page Setup dialog box.
Changes made are recorded internally.Sprinter.elc
Fgeneric-print-buffer
Print buffer BUFFER using a printing method appropriate to the O.S. being run.
Under Unix, `lpr' is normally used to spool out a no-frills version of the
buffer, or the `ps-print' package is used to pretty-print the buffer to a
PostScript printer.  Under MS Windows, the built-in printing support is used.

If DISPLAY-PRINT-DIALOG is t, the print dialog will first be
displayed, allowing the user to select various printing settings
(e.g. which printer to print to, the range of pages, number of copies,
modes such landscape/portrait/2-up/4-up [2 or 4 (small!) logical pages
per physical page], etc.).  At this point the user can cancel the printing
operation using the dialog box, and `generic-print-buffer' will not print
anything.  When called interactively, use a prefix arg to suppress the
display of the print dialog box.

If BUFFER is nil or omitted, the current buffer is used.Sprinter.elc
Fgeneric-print-region
Print region using a printing method appropriate to the O.S. being run.
The region between START and END of BUFFER (defaults to the current
buffer) is printed.

Under Unix, `lpr' is normally used to spool out a no-frills version of the
buffer, or the `ps-print' package is used to pretty-print the buffer to a
PostScript printer.  Under MS Windows, the built-in printing support is used.

Optional PRINT-DEVICE is a device, already created, to use to do the
printing.  This is typically used when this function was invoked from
`generic-print-buffer' and it displayed a dialog box.  That function created
the device, and then the dialog box stuffed it with the user's selections
of how the buffer should be printed.

PROPS, if given, is typically the plist returned from the call to
`make-dialog-box' that displayed the Print box.  It contains properties
relevant to us when we print.  

Recognized properties are the same as those in `make-dialog-box':

  name       Printer device name.  If omitted, the current system-selected
             printer will be used.
  from-page  First page to print, 1-based. If omitted, printing starts from
             the beginning.
  to-page    Last page to print, inclusive, If omitted, printing ends at
             the end.
  copies     Number of copies to print.  If omitted, one copy is printed.Sbehavior.elc
Venabled-behavior-list
List of currently enabled behaviors.
Normally, don't set it directly; use `enable-behavior' or `disable-behavior'.Sbehavior.elc
Vbehavior-history
History of entered behaviors.Sbehavior.elc
Fbehavior-group-p
Non-nil if GROUP is the name of a valid behavior group.Sbehavior.elc
Fcheck-behavior-group
Verify that GROUP is a valid behavior group, or nil.
Return GROUP if so.Sbehavior.elc
Fdefine-behavior
Define a behavior named NAME.
DOC-STRING must be specified, a description of what the behavior does
when it's enabled and how to further control it (typically through
custom variables).  Accepted keywords are

:group	    Symbol naming the behavior group this behavior is within.
:custom-group Symbol naming the custom group containing the options that
            can be set in association with this behavior.  If not specified,
            the custom group with the same name as the behavior will be
            used, if it exists.
:short-doc  A "pretty" version of the name, for use in menus.  If omitted
              a prettified name will be generated.
:require    A single symbol or a list of such symbols, which need to be
              present at enable time, or will be loaded using `require'.
:enable     A function of no variables, which turns the behavior on.
:disable    A function of no variables, which turns the behavior off.
:commands   A list of interactive commands that can be invoked in
            conjunction with the behavior.  These will appear in a submenu
            along with the rest of the items for the behavior.

Behaviors are assumed to be global, and to take effect immediately; if
the underlying package is per-buffer, it may have to scan all existing
buffers and frob them.  When a behavior is disabled, it should completely
go away *everywhere*, as if it were never invoked at all.

The :disable keyword can be missing, although this is considered bad
practice.  In such a case, attempting to disable the behavior will signal
an error unless you use the `force' option.

The :enable keyword can be missing.  This is useful for behaviors that
are really a series of related commands without anything semantically
corresponding to "turning on" or "turning off" the behavior.

A behavior with no :enable and no :command is possible.  This might be
used, for example, by a behavior that encapsulates a series of related
Lisp functions.  Such behaviors may be handled specially, e.g. not
displayed in the menus or displayed in a separate location, since they
have no user-invocable behavior.

arguments: (NAME DOC-STRING &key GROUP CUSTOM-GROUP (SHORT-DOC (CAPITALIZE-STRING-AS-TITLE (REPLACE-IN-STRING (SYMBOL-NAME NAME) "-" " "))) REQUIRE ENABLE DISABLE COMMANDS &allow-other-keys)
Sbehavior.elc
Foverride-behavior
Override the default properties of a behavior group NAME.
Normally, groups are created and assigned properties by individual packages.
The resulting hierarchy may not make much sense globally.  This function
allows the hierarchy and appearance of a group to be specified globally,
and will take precendence over the properties assigned by `define-behavior-group'.  This allows a global organization to be imposed on groups, while still allowing for graceful handling of new or unknown groups.

NAME can be a symbol specifying a group name, or a list of
(PARENT [...] NAME), where a path from a particular parent is explicitly
given. (This latter form allows the same name to be assigned to more than one
group.)

Accepted keywords are

:short-doc  A "pretty" version of the name, for use in menus.
:group      Parent group, if any.  Should not be given if the parents are
            explicitly specified in NAME.
:include    A list of behaviors that are specifically included in this
            group, in addition to those that are included by the behaviors
            themselves.
:demote-others If non-nil, exclude all behaviors not specified in the :include
            list and put them instead (i.e. "demote" them) to another group,
            usually a subgroup.

arguments: (NAME &key SHORT-DOC GROUP INCLUDE DEMOTE-OTHERS)
Sbehavior.elc
Fdefine-behavior-group
Define a behavior group NAME.

NAME can be a symbol specifying a group name, or a list of
(PARENT [...] NAME), where a path from a particular parent is explicitly
given. (This latter form allows the same name to be assigned to more than one
group.)

Accepted keywords are

:short-doc  A "pretty" version of the name, for use in menus.  If omitted
              a prettified name will be generated.
:group      Parent group, if any.  Should not be given if the parents are
            explicitly specified in NAME.

arguments: (NAME &key (SHORT-DOC (CAPITALIZE-STRING-AS-TITLE (REPLACE-IN-STRING (SYMBOL-NAME NAME) "-" " "))) GROUP)
Sbehavior.elc
Fread-behavior
Return a behavior symbol from the minibuffer, prompting with string PROMPT.
If non-nil, optional second arg INITIAL-CONTENTS is a string to insert
 in the minibuffer before reading.
Third arg HISTORY, if non-nil, specifies a history list. (It defaults to
`behavior-history'.)
Fourth arg DEFAULT-VALUE is the default value.  If non-nil, it is used
 for history command, and as the value to return if the user enters the
 empty string.Sbehavior.elc
Fbehavior-enabled-p
Non-nil if BEHAVIOR (a symbol) if currently enabled.Sbehavior.elc
Fenable-behavior
Enable the specified behavior.Sbehavior.elc
Fdisable-behavior
Disable the specified behavior.Sbehavior.elc
Fcompute-behavior-group-children
Compute the actual children for GROUP and its subgroups.
This takes into account the override information specified.Sbehavior.elc
Fbehavior-menu-filter
Sdiagnose.elc
Fshow-memory-usage
Show statistics about memory usage of various sorts in XEmacs.Sdiagnose.elc
Fshow-object-memory-usage-stats
Show statistics about object memory usage in XEmacs.Sdiagnose.elc
Fshow-mc-alloc-memory-usage
Show statistics about memory usage of the new allocator.Sdiagnose.elc
Fshow-gc-stats
Show statistics about garbage collection cycles.Sgui.elc
Vdialog-frame-plist
Plist of frame properties for initially creating a dialog frame.
Properties specified here supersede the values given in
`default-frame-plist'.Sgui.elc
Fmake-dialog-frame
Create a frame suitable for use as a dialog box.
The frame is made a child of PARENT (defaults to the selected frame),
and has additional properties PROPS, as well as `dialog-frame-plist'.
Normally it also has no modelines, menubars, or toolbars.Sgui.elc
Fgui-button-p
True if OBJECT is a GUI button.Sgui.elc
Fmake-gui-button
Make a GUI button whose label is STRING and whose action is ACTION.
If the button is inserted in a buffer and then clicked on, and ACTION
is non-nil, ACTION will be called with one argument, USER-DATA.
When ACTION is called, the buffer containing the button is made current.Sgui.elc
Finsert-gui-button
Insert GUI button BUTTON at POS in BUFFER.Smouse.elc
Vmouse-track-rectangle-p
*If true, then dragging out a region with the mouse selects rectangles
instead of simple start/end regions.Smouse.elc
Vmouse-yank-at-point
*If non-nil, the function `mouse-yank' will yank text at the cursor location.
Otherwise, the cursor will be moved to the location of the pointer click before
text is inserted.Smouse.elc
Vmouse-highlight-text
*Choose the default double-click highlighting behavior.
If set to `context', double-click will highlight words when the mouse
 is at a word character, or a symbol if the mouse is at a symbol
 character.
If set to `word', double-click will always attempt to highlight a word.
If set to `symbol', double-click will always attempt to highlight a
 symbol (the default behavior in previous XEmacs versions).Smouse.elc
Vmouse-yank-function
Function that is called upon by `mouse-yank' to actually insert text.Smouse.elc
Fmouse-consolidated-yank
Insert the current selection at point.
(Under X Windows, if there is none, insert the X cutbuffer.)  A mark is
pushed, so that the inserted text lies between point and mark.  This is the
default value of `mouse-yank-function', and as such is called by
`mouse-yank' to do the actual work.Smouse.elc
Finsert-selection
Insert the current selection into buffer at point.Smouse.elc
Fmouse-select
Select Emacs window the mouse is on.Smouse.elc
Fmouse-delete-window
Delete the Emacs window the mouse is on.Smouse.elc
Fmouse-keep-one-window
Select Emacs window mouse is on, then kill all other Emacs windows.Smouse.elc
Fmouse-select-and-split
Select Emacs window mouse is on, then split it vertically in half.Smouse.elc
Fmouse-set-point
Select Emacs window mouse is on, and move point to mouse position.Smouse.elc
Fmouse-yank
Paste text with the mouse.
If the variable `mouse-yank-at-point' is nil, then pasting occurs at the
location of the click; otherwise, pasting occurs at the current cursor
location.  This calls the value of the variable `mouse-yank-function'
(normally the function `mouse-consolidated-yank') to do the actual work.
This is normally called as a result of a click of button2 by
`default-mouse-track-click-hook'.Smouse.elc
Fclick-inside-extent-p
Return non-nil if the button event is within the primary selection-extent.
Return nil otherwise.Smouse.elc
Fclick-inside-selection-p
Smouse.elc
Fpoint-inside-extent-p
Return t if point is within the bounds of the primary selection extent.
Return t is point is at the end position of the extent.
Return nil otherwise.Smouse.elc
Fpoint-inside-selection-p
Smouse.elc
Fmouse-begin-drag-n-drop
Begin a drag-n-drop operation.
EVENT should be the button event that initiated the drag.
Returns whether a drag was begun.Smouse.elc
Fmouse-eval-sexp
Evaluate the sexp under the mouse.  Usually, this is the last sexp before
the click, but if you click on a left paren, then it is the sexp beginning
with the paren that is evaluated.  Also, since strings evaluate to themselves,
they're fed to `re-search-forward' and the matched region is highlighted until
the mouse button is released.

Perhaps the most useful thing about this function is that the evaluation of
the expression which is clicked upon is relative not to the window where you
click, but to the current window and the current position of point.  Thus,
you can use `mouse-eval-sexp' to interactively test code that acts upon a
buffer...something you cannot do with the standard `eval-last-sexp' function.
It's also fantastic for debugging regular expressions.Smouse.elc
Fmouse-line-length
Print the length of the line indicated by the pointer.Smouse.elc
Fmouse-set-mark
Select Emacs window mouse is on, and set mark at mouse position.
Display cursor at that position for a second.Smouse.elc
Fmouse-scroll
Scroll point to the mouse position.Smouse.elc
Fmouse-del-char
Delete the char pointed to by the mouse.Smouse.elc
Fmouse-kill-line
Kill the line pointed to by the mouse.Smouse.elc
Fmouse-bury-buffer
Bury the buffer pointed to by the mouse, thus selecting the next one.Smouse.elc
Fmouse-unbury-buffer
Unbury and select the most recently buried buffer.Smouse.elc
Fnarrow-window-to-region
Narrow window to region between point and last mark.Smouse.elc
Fmouse-window-to-region
Narrow window to region between cursor and mouse pointer.Smouse.elc
Fmouse-ignore
Don't do anything.Smouse.elc
Vdefault-mouse-track-normalize-point-function
Function called to normalize position of point.
Called with two arguments: TYPE depends on the number of times that the
mouse has been clicked and is a member of `default-mouse-track-type-list',
FORWARDP determines the direction in which the point should be moved.Smouse.elc
Vmouse-track-down-hook
Function or functions called when the user presses the mouse.
This hook is invoked by `mouse-track'; thus, it will not be called
for any buttons with a different binding.  The functions will be
called with two arguments: the button-press event and a click
count (see `mouse-track-click-hook').

If any function returns non-nil, the remaining functions will not be
called.

Note that most applications should take action when the mouse is
released, not when it is pressed.Smouse.elc
Vmouse-track-drag-hook
Function or functions called when the user drags the mouse.
This hook is invoked by `mouse-track'; thus, it will not be called
for any buttons with a different binding.  The functions will be
called with three arguments: the mouse-motion event, a click
count (see `mouse-track-click-hook'), and whether the call to
this hook occurred as a result of a drag timeout (see
`mouse-track-scroll-delay').

If any function returns non-nil, the remaining functions will not be
called.

Note that no calls to this function will be made until the user
initiates a drag (i.e. moves the mouse more than a certain
threshold in either the X or the Y direction, as defined by
`mouse-track-x-threshold' and `mouse-track-y-threshold').

See also `mouse-track-drag-up-hook'.Smouse.elc
Vmouse-track-drag-up-hook
Function or functions called when the user finishes a drag.
This hook is invoked by `mouse-track'; thus, it will not be called
for any buttons with a different binding.  The functions will be
called with two arguments: the button-press event and a click
count (see `mouse-track-click-hook').

If any function returns non-nil, the remaining functions will not be
called.

Note that this hook will not be invoked unless the user has
initiated a drag, i.e. moved the mouse more than a certain threshold
(see `mouse-track-drag-hook').  When this function is invoked,
`mouse-track-drag-hook' will have been invoked at least once.

See also `mouse-track-click-hook'.Smouse.elc
Vmouse-track-click-hook
Function or functions called when the user clicks the mouse.
`Clicking' means pressing and releasing the mouse without having
initiated a drag (i.e. without having moved more than a certain
threshold -- see `mouse-track-drag-hook').

This hook is invoked by `mouse-track'; thus, it will not be called
for any buttons with a different binding.  The functions will be
called with two arguments: the button-release event and a click
count, which specifies the number of times that the mouse has been
clicked in a series of clicks, each of which is separated by at most
`mouse-track-multi-click-time'.  This can be used to implement actions
that are called on double clicks, triple clicks, etc.

If any function returns non-nil, the remaining functions will not be
called.

See also `mouse-track-drag-up-hook.Smouse.elc
Vmouse-track-up-hook
Function or functions called when the user releases the mouse.
This hook is invoked by `mouse-track'; thus, it will not be called
for any buttons with a different binding.  The functions will be
called with two arguments: the button-release event and a click
count (see `mouse-track-click-hook').

For many applications, it is more appropriate to use one or both
of `mouse-track-click-hook' and `mouse-track-drag-up-hook'.Smouse.elc
Vmouse-track-cleanup-hook
Function or functions called when `mouse-track' terminates.
This hook will be called in all circumstances, even upon a
non-local exit out of `mouse-track', and so is useful for
doing cleanup work such as removing extents that may have
been created during the operation of `mouse-track'.

Unlike all of the other mouse-track hooks, this is a "normal"
hook: the hook functions are called with no arguments, and
all hook functions are called regardless of their return
values.

This function is called with the buffer where the mouse was clicked
set to the current buffer, unless that buffer was killed.Smouse.elc
Vmouse-track-multi-click-time
*Maximum number of milliseconds allowed between clicks for a multi-click.
See `mouse-track-click-hook'.Smouse.elc
Vmouse-track-scroll-delay
Maximum of milliseconds between calls to `mouse-track-drag-hook'.
If the user is dragging the mouse (i.e. the button is held down and
a drag has been initiated) and does not move the mouse for this many
milliseconds, the hook will be called with t as the value of the
WAS-TIMEOUT parameter.  This can be used to implement scrolling
in a selection when the user drags the mouse out the window it
was in.

A value of nil disables the timeout feature.Smouse.elc
Vmouse-track-activate-strokes
Mouse strokes causing "activation" of the text extent under the mouse.
The exact meaning of "activation" is dependent on the text clicked on and
the mode of the buffer, but typically entails actions such as following a
hyperlink or selecting an entry in a completion buffer.

See also `mouse-track-conservative-activate-strokes'.

Possible list entries are

button1-click
button1-double-click
button1-triple-click
button1-down
button2-click
button2-double-click
button2-triple-click
button2-down

As a general rule, you should not use the "-down" values, because this
makes it impossible to have other simultaneous actions, such as selection.Smouse.elc
Vmouse-track-conservative-activate-strokes
Mouse strokes causing "conservative activation" of text extent under mouse.
The exact meaning of "activation" is dependent on the text clicked on and
the mode of the buffer, but typically entails actions such as following a
hyperlink or selecting an entry in a completion buffer.

"Conservative activation" differs from regular activation in that it is
not meant to be triggered by a button1 click, and thus is suitable for larger
regions of text where the user might want to position the cursor inside of
the region.

See also `mouse-track-activate-strokes'.

Possible list entries are

button1-click
button1-double-click
button1-triple-click
button1-down
button2-click
button2-double-click
button2-triple-click
button2-down

As a general rule, you should not use the "-down" values, because this
makes it impossible to have other simultaneous actions, such as selection.Smouse.elc
Vmouse-track-x-threshold
Minimum number of pixels in the X direction for a drag to be initiated.
If the mouse is moved more than either the X or Y threshold while the
button is held down (see also `mouse-track-y-threshold'), then a drag
is initiated; otherwise the gesture is considered to be a click.
See `mouse-track'.

The value should be either a number or a form to be evaluated to
produce a number.Smouse.elc
Vmouse-track-y-threshold
Minimum number of pixels in the Y direction for a drag to be initiated.
If the mouse is moved more than either the X or Y threshold while the
button is held down (see also `mouse-track-x-threshold'), then a drag
is initiated; otherwise the gesture is considered to be a click.
See `mouse-track'.

The value should be either a number of a form to be evaluated to
produce a number.Smouse.elc
Fmouse-track-set-timeout
Smouse.elc
Fmouse-track-run-hook
Smouse.elc
Fmouse-track-scroll-undefined
Smouse.elc
Fmouse-track
Generalized mouse-button handler.
This is the function that handles standard mouse behavior -- moving point
when clicked, selecting text when dragged, etc. -- and should be bound to a
mouse button (normally, button1 and button2).

This allows for overloading of different mouse strokes with different
commands.  The behavior of this function is customizable using various
hooks and variables: see `mouse-track-click-hook', `mouse-track-drag-hook',
`mouse-track-drag-up-hook', `mouse-track-down-hook', `mouse-track-up-hook',
`mouse-track-cleanup-hook', `mouse-track-multi-click-time',
`mouse-track-scroll-delay', `mouse-track-x-threshold', and
`mouse-track-y-threshold'.

Default handlers are provided to implement standard selecting/positioning
behavior.  You can explicitly request this default behavior, and override
any custom-supplied handlers, by using the function `mouse-track-default'
instead of `mouse-track'.

(In general, you can override specific hooks by using the argument
OVERRIDING-HOOKS, which should be a plist of alternating hook names
and values.)

Default behavior is as follows:

If you click-and-drag, the selection will be set to the region between the
point of the initial click and the point at which you release the button.
These positions need not be ordered.

If you click-and-release without moving the mouse, then the point is moved
and the selection is disowned (there will be no selection owner).  The mark
will be set to the previous position of point.

If you double-click, the selection will extend by symbols instead of by
characters.  If you triple-click, the selection will extend by lines.

If you drag the mouse off the top or bottom of the window, you can select
pieces of text which are larger than the visible part of the buffer; the
buffer will scroll as necessary.

The point will be left at the position at which you released the button,
and the mark will be left at the initial click position.

Under X Windows, the selected text becomes the current X Selection, and can
be immediately inserted elsewhere using button2.  Under MS Windows, this
also works, because the behavior is emulated.Smouse.elc
Fdefault-mouse-track-set-point-in-window
Smouse.elc
Fdefault-mouse-track-scroll-and-set-point
Smouse.elc
Fdefault-mouse-track-set-point
Smouse.elc
Fdefault-mouse-track-beginning-of-word
Smouse.elc
Fdefault-mouse-track-end-of-word
Smouse.elc
Fdefault-mouse-track-symbolp
Smouse.elc
Fdefault-mouse-track-point-at-opening-quote-p
Smouse.elc
Fdefault-mouse-track-normalize-point
Smouse.elc
Fdefault-mouse-track-next-move
Smouse.elc
Fdefault-mouse-track-next-move-rect
Smouse.elc
Fdefault-mouse-track-has-selection-p
Smouse.elc
Fdefault-mouse-track-anchor
Smouse.elc
Fdefault-mouse-track-maybe-own-selection
Smouse.elc
Fmouse-track-activate-rectangular-selection
Smouse.elc
Fdefault-mouse-track-deal-with-down-event
Smouse.elc
Fdefault-mouse-track-event-is-with-button
Smouse.elc
Fdefault-mouse-track-check-for-activation
Smouse.elc
Fdefault-mouse-track-down-hook
Smouse.elc
Fdefault-mouse-track-click-hook
Smouse.elc
Fdefault-mouse-track-cleanup-extents-hook
Smouse.elc
Fdefault-mouse-track-cleanup-hook
Smouse.elc
Fdefault-mouse-track-cleanup-extent
Smouse.elc
Fdefault-mouse-track-drag-hook
Smouse.elc
Fdefault-mouse-track-return-dragged-selection
Smouse.elc
Fdefault-mouse-track-drag-up-hook
Smouse.elc
Fmouse-track-default
Invoke `mouse-track' with only the default handlers active.Smouse.elc
Fmouse-track-do-rectangle
Like `mouse-track' but selects rectangles instead of regions.Smouse.elc
Fmouse-track-by-lines
Make a line-by-line selection with the mouse.
This actually works the same as `mouse-track' (which handles all
mouse-button behavior) but forces whole lines to be selected.Smouse.elc
Fmouse-track-adjust
Extend the existing selection.  This should be bound to a mouse button.
The selection will be enlarged or shrunk so that the point of the mouse
click is one of its endpoints.  This function in fact behaves fairly
similarly to `mouse-track', but begins by extending the existing selection
(or creating a new selection from the previous text cursor position to
the current mouse position) instead of creating a new, empty selection.

The mouse-track handlers are run from this command just like from
`mouse-track'.  Therefore, do not call this command from a mouse-track
handler!Smouse.elc
Fmouse-track-adjust-default
Extend the existing selection, using only the default handlers.
This is just like `mouse-track-adjust' but will override any
custom mouse-track handlers that the user may have installed.Smouse.elc
Fmouse-track-adjust-by-lines
Extend the existing selection by lines.
This works the same as `mouse-track-adjust' (bound to \[mouse-track-adjust])
but forces whole lines to be selected.Smouse.elc
Fmouse-track-insert-1
Guts of mouse-track-insert and friends.
If DELETE, delete the selection as well as inserting it at the new place.
If LINE-P, select by lines and insert before current line.Smouse.elc
Fmouse-track-insert
Make a selection with the mouse and insert it at point.
This works the same as just selecting text using the mouse (the
`mouse-track' command), except that point is not moved; the selected text
is immediately inserted after being selected; and the selection is
immediately disowned afterwards.Smouse.elc
Fmouse-track-delete-and-insert
Make a selection with the mouse and move it to point.
This works the same as just selecting text using the mouse (the
`mouse-track' command), except that point is not moved; the selected text
is immediately inserted after being selected; and the text of the
selection is deleted.Smouse.elc
Fmouse-track-insert-by-lines
Make a line-oriented selection with the mouse and insert it at line start.
This is similar to `mouse-track-insert' except that it always selects
entire lines and inserts the lines before the current line rather than at
point.Smouse.elc
Fmouse-track-delete-and-insert-by-lines
Make a line-oriented selection with the mouse and move it to line start.
This is similar to `mouse-track-insert' except that it always selects
entire lines and inserts the lines before the current line rather than at
point.Smouse.elc
Vinhibit-help-echo
Inhibits display of `help-echo' extent properties in the minibuffer.Smouse.elc
Fclear-help-echo
Smouse.elc
Fshow-help-echo
Smouse.elc
Fdefault-mouse-motion-handler
For use as the value of `mouse-motion-handler'.
This implements the various pointer-shape variables,
as well as extent highlighting, help-echo, toolbar up/down,
and `mode-motion-hook'.Smouse.elc
Fdrag-window-divider
Handle resizing windows by dragging window dividers.
This is an internal function, normally bound to button1 event in
window-divider-map. You would not call it, but you may bind it to
other mouse buttons.Smode-motion.elc
Vmode-motion-hook
Function or functions which are called whenever the mouse moves.
Each function must take a single argument of the motion event.
You should normally use this rather than `mouse-motion-handler', which 
does some additional window-system-dependent things.  This hook is local
to every buffer, and should normally be set up by major-modes which want
to use special highlighting.  Every time the mouse moves over a window,
the mode-motion-hook of the buffer of that window is run.Smode-motion.elc
Vmode-motion-help-echo-string
String to be added as the 'help-echo property of the mode-motion extent.
In order for this to work, you need to add the hook function
`mode-motion-add-help-echo' to the mode-motion hook.  If this is a function,
it will be called with one argument (the event) and should return a string
to be added.  This variable is local to every buffer.Smode-motion.elc
Fmode-motion-ensure-extent-ok
Smode-motion.elc
Fmode-motion-highlight-internal
Smode-motion.elc
Fmode-motion-highlight-line
For use as the value of `mode-motion-hook' -- highlight line under mouse.Smode-motion.elc
Fmode-motion-highlight-word
For use as the value of `mode-motion-hook' -- highlight word under mouse.Smode-motion.elc
Fmode-motion-highlight-symbol
For use as the value of `mode-motion-hook' -- highlight symbol under mouse.Smode-motion.elc
Fmode-motion-highlight-sexp
For use as the value of `mode-motion-hook' -- highlight form under mouse.Smode-motion.elc
Fmode-motion-add-help-echo
For use as the value of `mode-motion-hook' -- add a 'help-echo property.
This causes the string in the 'help-echo property to be displayed when the
mouse moves over the extent.  See `mode-motion-help-echo-string' for
documentation on how to control the string that is added.Stoolbar.elc
Vtoolbar-visible-p
*Whether the default toolbar is globally visible.
This option only has an effect when set using `customize-set-variable',
or through the Options menu.Stoolbar.elc
Vtoolbar-captioned-p
*Whether the toolbars buttons are globally captioned.
This option only has an effect when set using `customize-set-variable',
or through the Options menu.Stoolbar.elc
Vdefault-toolbar-position
*The location of the default toolbar: 'top, 'bottom, 'left or 'right.
This option only has an effect when set using `customize-set-variable',
or through the Options menu.Stoolbar.elc
Vtoolbar-help-enabled
If non-nil help is echoed for toolbar buttons.Stoolbar.elc
Vtoolbar-icon-directory
Location of standard toolbar icon bitmaps.Stoolbar.elc
Ftoolbar-make-button-list
Call make-glyph on each arg and return a list of the results.Stoolbar.elc
Finit-toolbar-location
Stoolbar.elc
Finit-toolbar-from-resources
Stoolbar.elc
Vtoolbar-map
Keymap consulted for mouse-clicks over a toolbar.Stoolbar.elc
Vtoolbar-blank-press-function
Function to call if a blank area of the toolbar is pressed.Stoolbar.elc
Fpress-toolbar-button
Press a toolbar button.  This only changes its appearance.
Call function stored in `toolbar-blank-press-function', if any, with EVENT as
an argument if press is over a blank area of the toolbar.Stoolbar.elc
Frelease-and-activate-toolbar-button
Release a toolbar button and activate its callback.
Call function stored in `toolbar-blank-release-function', if any, with EVENT
as an argument if release is over a blank area of the toolbar.Stoolbar.elc
Frelease-toolbar-button-internal
Stoolbar.elc
Frelease-toolbar-button
Release all pressed toolbar buttons.Stoolbar.elc
Frelease-previous-toolbar-button
Stoolbar.elc
Fmake-toolbar-specifier
Return a new `toolbar' specifier object with the given specification list.
SPEC-LIST can be a list of specifications (each of which is a cons of a
locale and a list of instantiators), a single instantiator, or a list
of instantiators.  See `make-specifier' for more information about
specifiers.

Toolbar specifiers are used to specify the format of a toolbar.
The values of the variables `default-toolbar', `top-toolbar',
`left-toolbar', `right-toolbar', and `bottom-toolbar' are always
toolbar specifiers.

Valid toolbar instantiators are called "toolbar descriptors"
and are lists of vectors.  See `default-toolbar' for a description
of the exact format.Sscrollbar.elc
Vscrollbars-visible-p
Whether the scrollbars are globally visible.
This variable can be customized through the options menu.Sscrollbar.elc
Finit-scrollbar-from-resources
Sscrollbar.elc
Fscrollbar-char-left
Function called when the char-left arrow on the scrollbar is clicked.
This is the little arrow to the left of the scrollbar.  One argument is
passed, the scrollbar's window.  You can advise this function to
change the scrollbar behavior.Sscrollbar.elc
Fscrollbar-char-right
Function called when the char-right arrow on the scrollbar is clicked.
This is the little arrow to the right of the scrollbar.  One argument is
passed, the scrollbar's window.  You can advise this function to
change the scrollbar behavior.Sscrollbar.elc
Fscrollbar-page-left
Function called when the user gives the "page-left" scrollbar action.
(The way this is done can vary from scrollbar to scrollbar.) One argument is
passed, the scrollbar's window.  You can advise this function to
change the scrollbar behavior.Sscrollbar.elc
Fscrollbar-page-right
Function called when the user gives the "page-right" scrollbar action.
(The way this is done can vary from scrollbar to scrollbar.) One argument is
passed, the scrollbar's window.  You can advise this function to
change the scrollbar behavior.Sscrollbar.elc
Fscrollbar-to-left
Function called when the user gives the "to-left" scrollbar action.
(The way this is done can vary from scrollbar to scrollbar.). One argument is
passed, the scrollbar's window.  You can advise this function to
change the scrollbar behavior.Sscrollbar.elc
Fscrollbar-to-right
Function called when the user gives the "to-right" scrollbar action.
(The way this is done can vary from scrollbar to scrollbar.). One argument is
passed, the scrollbar's window.  You can advise this function to
change the scrollbar behavior.Sscrollbar.elc
Fscrollbar-horizontal-drag
Function called when the user drags the horizontal scrollbar thumb.
One argument is passed, a cons containing the scrollbar's window and a value
representing how many columns the thumb is slid over.  You can advise
this function to change the scrollbar behavior.Smenubar.elc
Fkill-this-buffer
Kill the current buffer.Smenubar.elc
Fset-menubar-dirty-flag
Tell XEmacs that the menubar has to be updated.
NOTE: XEmacs now recognizes when you set a different value for
`current-menubar'.  You *only* need to call this function if you
destructively modify a part of the menubar and don't set `current-menubar'.
Note that all the functions that modify a menu call this automatically.Smenubar.elc
Fset-menubar
Set the default menubar to be MENUBAR.
See `current-menubar' for a description of the syntax of a menubar.Smenubar.elc
Fset-buffer-menubar
Set the buffer-local menubar to be MENUBAR.
See `current-menubar' for a description of the syntax of a menubar.Smenubar.elc
Fcheck-menu-syntax
Smenubar.elc
Fmenu-item-text
Return the text that is displayed for a menu item.
If ITEM is a string (unselectable text), it is returned; otherwise,
the first element of the cons or vector is returned.
If NORMALIZE is non-nil, pass the text through `normalize-menu-text'
before being returned, to remove accelerator specs and convert %% to %.Smenubar.elc
Ffind-menu-item
Search MENUBAR for item given by ITEM-PATH-LIST.
Returns (ITEM . PARENT), where PARENT is the immediate parent of
 the item found.
If the item does not exist, the car of the returned value is nil.
If some menu in the ITEM-PATH-LIST does not exist, an error is signalled.Smenubar.elc
Fadd-menu-item-1
Smenubar.elc
Fadd-menu-button
Add a menu item to some menu, creating the menu first if necessary.
If the named item exists already, it is changed.
MENU-PATH identifies the menu under which the new menu item should be inserted.
 It is a list of strings; for example, ("File") names the top-level "File"
 menu.  ("File" "Foo") names a hypothetical submenu of "File".
MENU-LEAF is a menubar leaf node.  See the documentation of `current-menubar'.
BEFORE, if provided, is the name of a menu item before which this item should
 be added, if this item is not on the menu already.  If the item is already
 present, it will not be moved.
IN-MENU, if provided, means use that instead of `current-menubar' as the
 menu to change.Smenubar.elc
Fadd-submenu
Add a menu to the menubar or one of its submenus.
If the named menu exists already, it is changed.
MENU-PATH identifies the menu under which the new menu should be inserted.
 It is a list of strings; for example, ("File") names the top-level "File"
 menu.  ("File" "Foo") names a hypothetical submenu of "File".
 If MENU-PATH is nil, then the menu will be added to the menubar itself.
SUBMENU is the new menu to add.
 See the documentation of `current-menubar' for the syntax.
BEFORE, if provided, is the name of a menu before which this menu should
 be added, if this menu is not on its parent already.  If the menu is already
 present, it will not be moved.
IN-MENU, if provided, means use that instead of `current-menubar' as the
 menu to change.Smenubar.elc
Fdelete-menu-item
Remove the named menu item from the menu hierarchy.
PATH is a list of strings which identify the position of the menu item
in the menu hierarchy.  The documentation of `add-submenu' describes
menu paths.
FROM-MENU, if provided, means use that instead of `current-menubar'
as the menu to change.Smenubar.elc
Frelabel-menu-item
Change the string of the specified menu item.
PATH is a list of strings which identify the position of the menu item in
the menu hierarchy.  ("File" "Save") means the menu item called "Save"
under the toplevel "File" menu.  ("Menu" "Foo" "Item") means the
menu item called "Item" under the "Foo" submenu of "Menu".
NEW-NAME is the string that the menu item will be printed as from now on.Smenubar.elc
Fenable-menu-item-1
Smenubar.elc
Fenable-menu-item
Make the named menu item be selectable.
PATH is a list of strings which identify the position of the menu item in
the menu hierarchy.  ("File" "Save") means the menu item called "Save"
under the toplevel "File" menu.  ("Menu" "Foo" "Item") means the
menu item called "Item" under the "Foo" submenu of "Menu".Smenubar.elc
Fdisable-menu-item
Make the named menu item be unselectable.
PATH is a list of strings which identify the position of the menu item in
the menu hierarchy.  ("File" "Save") means the menu item called "Save"
under the toplevel "File" menu.  ("Menu" "Foo" "Item") means the
menu item called "Item" under the "Foo" submenu of "Menu".Smenubar.elc
Fselect-toggle-menu-item
Make the named toggle- or radio-style menu item be in the `selected' state.
PATH is a list of strings which identify the position of the menu item in
the menu hierarchy.  ("File" "Save") means the menu item called "Save"
under the toplevel "File" menu.  ("Menu" "Foo" "Item") means the
menu item called "Item" under the "Foo" submenu of "Menu".Smenubar.elc
Fdeselect-toggle-menu-item
Make the named toggle- or radio-style menu item be in the `unselected' state.
PATH is a list of strings which identify the position of the menu item in
the menu hierarchy.  ("File" "Save") means the menu item called "Save"
under the toplevel "File" menu.  ("Menu" "Foo" "Item") means the
menu item called "Item" under the "Foo" submenu of "Menu".Smenubar.elc
Fsubmenu-generate-accelerator-spec
Add auto-generated accelerator specifications to a submenu.
This can be used to add accelerators to the return value of a menu filter
function.  It correctly ignores unselectable items.  It will destructively
modify the list passed to it.  If an item already has an auto-generated
accelerator spec, this will be removed before the new one is added, making
this function idempotent.

If OMIT-CHARS-LIST is given, it should be a list of lowercase characters,
which will not be used as accelerators.Smenubar.elc
Fmenu-item-strip-accelerator-spec
Strip an auto-generated accelerator spec off of ITEM.
ITEM should be a string.  This removes specs added by
`menu-item-generate-accelerator-spec' and `submenu-generate-accelerator-spec'.Smenubar.elc
Fmenu-item-generate-accelerator-spec
Return an accelerator specification for use with auto-generated menus.
This should be concat'd onto the beginning of each menu line.  The spec
allows the Nth line to be selected by the number N.  '0' is used for the
10th line, and 'a' through 'z' are used for the following 26 lines.

If OMIT-CHARS-LIST is given, it should be a list of lowercase characters,
which will not be used as accelerators.Smenubar.elc
Vmenu-max-items
*Maximum number of items in generated menus.
If number of entries in such a menu is larger than this value, split menu
into submenus of nearly equal length (see `menu-submenu-max-items').  If
nil, never split menu into submenus.Smenubar.elc
Vmenu-submenu-max-items
*Maximum number of items in submenus when splitting menus.
We split large menus into submenus of this many items, and then balance
them out as much as possible (otherwise the last submenu may have very few
items).Smenubar.elc
Vmenu-submenu-name-format
*Format specification of the submenu name when splitting menus.
Used by `menu-split-long-menu' if the number of entries in a menu is
larger than `menu-menu-max-items'.
This string should contain one %s for the name of the first entry and
one %s for the name of the last entry in the submenu.
If the value is a function, it should return the submenu name.  The
function is be called with two arguments, the names of the first and
the last entry in the menu.Smenubar.elc
Fmenu-split-long-menu-and-sort
Sort MENU, split according to `menu-max-items' and add accelerator specs.
This is useful for menus generated by filter functions, to make them look
nice.  This is equivalent to

(menu-split-long-menu (menu-sort-menu menu))

and you can call those functions individually if necessary.
You can also call `submenu-generate-accelerator-spec' yourself to add
accelerator specs -- this works even if the specs have already been added.Smenubar.elc
Fmenu-split-long-menu
Split MENU according to `menu-max-items' and add accelerator specs.
If MENU already has accelerator specs, they will be removed and new ones
generated.  You should normally use `menu-split-long-menu-and-sort' instead.
The menu should already be sorted to get meaningful results when it is
split, since the outer menus are of the format `FROM ... TO'.Smenubar.elc
Fmenu-sort-menu
Sort MENU alphabetically.
You should normally use `menu-split-long-menu-and-sort' instead.Smenubar.elc
Vglobal-popup-menu
The global popup menu.  This is present in all modes.
See the function `popup-menu' for a description of menu syntax.Smenubar.elc
Vmode-popup-menu
The mode-specific popup menu.  Automatically buffer local.
This is appended to the default items in `global-popup-menu'.
See the function `popup-menu' for a description of menu syntax.Smenubar.elc
Vactivate-popup-menu-hook
Function or functions run before a mode-specific popup menu is made visible.
These functions are called with no arguments, and should interrogate and
modify the value of `global-popup-menu' or `mode-popup-menu' as desired.
Note: this hook is only run if you use `popup-mode-menu' for activating the
global and mode-specific commands; if you have your own binding for button3,
this hook won't be run.Smenubar.elc
Vlast-popup-menu-event
The mouse event that invoked the last popup menu.
NOTE: This is EXPERIMENTAL and may change at any time.Smenubar.elc
Fpopup-mode-menu
Pop up a menu of global and mode-specific commands.
The menu is computed by combining `global-popup-menu' and `mode-popup-menu'
with any items derived from the `context-menu' property of the extent where the
button was clicked.Smenubar.elc
Fpopup-buffer-menu
Pop up a copy of the menubar Buffers menu where the mouse is clicked.Smenubar.elc
Fpopup-menubar-menu
Pop up a copy of menu that also appears in the menubar.Smenubar.elc
Fmenu-call-at-event
Call FORM while temporarily setting point to the position in EVENT.
NOTE: This is EXPERIMENTAL and may change at any time.

FORM is called the way forms in menu specs are: i.e. if a symbol, it's called
with `call-interactively', otherwise with `eval'.  EVENT defaults to
`last-popup-menu-event', making this function especially useful in popup
menus.  The buffer and point are set temporarily within a `save-excursion'.
If EVENT is not a mouse event, or was not over a buffer, nothing
happens unless DEFAULT-BEHAVIOR-FALLBACK is non-nil, in which case the
FORM is called normally.Smenubar.elc
Fget-popup-menu-response
Pop up the given menu and wait for a response.
This blocks until the response is received, and returns the misc-user
event that encapsulates the response.  To execute it, you can do
  (funcall (event-function response) (event-object response))
If no response was received, nil is returned.

MENU-DESC and EVENT are as in the call to `popup-menu'.Smenubar.elc
Fpopup-menu-and-execute-in-window
Pop up the given menu and execute its response in EVENT's window.
This blocks until the response is received, temporarily selects
EVENT's window, and executes the command specified in the response.
EVENT can also be a window.  See `popup-menu' for the semantics of
MENU-DESC.Sdialog.elc
Fyes-or-no-p-dialog-box
Ask user a yes-or-no question with a popup dialog box.
Return t if the answer is "yes".
Takes one argument, which is the string to display to ask the question.Sdialog.elc
Fget-dialog-box-response
Pop up a dialog box and return user's selection.
POSITION specifies which frame to use.
This is normally an event or a window or frame.
If POSITION is t or nil, it means to use the frame the mouse is on.
The dialog box appears in the middle of the specified frame.

CONTENTS specifies the alternatives to display in the dialog box.
It is a list of the form (TITLE ITEM1 ITEM2...).
Each ITEM is a cons cell (STRING . VALUE).
The return value is VALUE from the chosen item.

An ITEM may also be just a string--that makes a nonselectable item.
An ITEM may also be nil--that means to put all preceding items
on the left of the dialog box and all following items on the right.Sdialog.elc
Fmessage-box
Display a message, in a dialog box if possible.
If the selected device has no dialog-box support, use the echo area.
The arguments are the same as to `format'.

If the only argument is nil, clear any existing message; let the
minibuffer contents show.Sdialog.elc
Fmessage-or-box
Display a message in a dialog box or in the echo area.
If this command was invoked with the mouse, use a dialog box.
Otherwise, use the echo area.
The arguments are the same as to `format'.

If the only argument is nil, clear any existing message; let the
minibuffer contents show.Sdialog.elc
Fmake-dialog-box
Pop up a dialog box.
TYPE is a symbol, the type of dialog box.  Remaining arguments are
keyword-value pairs, specifying the particular characteristics of the
dialog box.  The allowed keywords are particular to each type, but
some standard keywords are common to many types:

:title
  The title of the dialog box's window.

:modal
  If true, indicates that XEmacs will wait until the user is "done"
  with the dialog box (usually, this means that a response has been
  given).  Typically, the response is returned.  NOTE: Some dialog
  boxes are always modal.  If the dialog box is modal, `make-dialog-box'
  returns immediately.  The return value will be either nil or a
  dialog box handle of some sort, e.g. a frame for type `general'.

---------------------------------------------------------------------------

Recognized types are

general
  A dialog box consisting of an XEmacs glyph, typically a `layout'
  widget specifying a dialog box arrangement.  This is the most
  general and powerful dialog box type, but requires more work than
  the other types below.

question
  A simple dialog box that displays a question and contains one or
  more user-defined buttons to specify possible responses. (This is
  compatible with the old built-in dialog boxes formerly specified
  using `popup-dialog-box'.)

file
  A file dialog box, of the type typically used in the window system
  XEmacs is running on.

color
  A color picker.

find
  A find dialog box.

font
  A font chooser.

print
  A dialog box used when printing (e.g. number of pages, printer).

page-setup
  A dialog box for setting page options (e.g. margins) for printing.

replace
  A find/replace dialog box.

mswindows-message
  An MS Windows-specific standard dialog box type similar to `question'.

---------------------------------------------------------------------------

For type `general':

This type creates a frame and puts the specified widget layout in it.
(Currently this is done by eliminating all areas but the gutter and placing
the layout there; but this is an implementation detail and may change.)

The keywords allowed for `general' are

:spec
  The widget spec -- anything that can be passed to `make-glyph'.
:title
  The title of the frame.
:parent
  The frame is made a child of this frame (defaults to the selected frame).
:properties
  Additional properties of the frame, as well as `dialog-frame-plist'.
:autosize
  If t the frame is sized to exactly fit the widgets given by :spec.

---------------------------------------------------------------------------

For type `question':

The keywords allowed are

:modal
  t or nil.  When t, the dialog box callback should exit the dialog box
  using the functions `dialog-box-finish' or `dialog-box-cancel'.
:title
  The title of the frame.
:question
  A string, the question.
:buttons
  A list, describing the buttons below the question.  Each of these is a
  vector, the syntax of which is essentially the same as that of popup menu
  items.  They may have any of the following forms:

   [ "name" callback <active-p> ]
   [ "name" callback <active-p> "suffix" ]
   [ "name" callback :<keyword> <value>  :<keyword> <value> ... ]
  
  The name is the string to display on the button; it is filtered through the
  resource database, so it is possible for resources to override what string
  is actually displayed.
  
  Accelerators can be indicated in the string by putting the sequence
  "%_" before the character corresponding to the key that will invoke
  the button.  Uppercase and lowercase accelerators are equivalent.  The
  sequence "%%" is also special, and is translated into a single %.
  
  If the `callback' of a button is a symbol, then it must name a command.
  It will be invoked with `call-interactively'.  If it is a list, then it is
  evaluated with `eval'.
  
  One (and only one) of the buttons may be `nil'.  This marker means that all
  following buttons should be flushright instead of flushleft.
  
  Though the keyword/value syntax is supported for dialog boxes just as in
  popup menus, the only keyword which is both meaningful and fully implemented
  for dialog box buttons is `:active'.

---------------------------------------------------------------------------

For type `file':

The keywords allowed are

:initial-filename
  The initial filename to be placed in the dialog box (defaults to nothing).
:initial-directory
  The initial directory to be selected in the dialog box (defaults to the
  current buffer's `default-directory).
:filter-list
  A list of                     (filter-desc filter ...)
:title
  The title of the dialog box (defaults to "Open").
:allow-multi-select             t or nil
:create-prompt-on-nonexistent   t or nil
:overwrite-prompt               t or nil
:file-must-exist                t or nil
:no-network-button              t or nil
:no-read-only-return            t or nil

---------------------------------------------------------------------------

For type `directory':

The keywords allowed are

:initial-directory
  The initial directory to be selected in the dialog box (defaults to the
  current buffer's `default-directory).
:title
  The title of the dialog box (defaults to "Open").

---------------------------------------------------------------------------

For type `print':

This invokes the Windows standard Print dialog.
This dialog is usually invoked when the user selects the Print command.
After the user presses OK, the program should start actual printout.

The keywords allowed are

:device
  An 'msprinter device.
:print-settings
  A printer settings object.
:allow-selection
  t or nil -- whether the "Selection" button is enabled (defaults to nil).
:allow-pages
  t or nil -- whether the "Pages" button and associated edit controls
  are enabled (defaults to t).
:selected-page-button
  `all', `selection', or `pages' -- which page button is initially
  selected.

Exactly one of :device and :print-settings must be given.

The function brings up the Print dialog, where the user can
select a different printer and/or change printer options.  Connection
name can change as a result of selecting a different printer device.  If
a device is specified, then changes are stored into the settings object
currently selected into that printer.  If a settings object is supplied,
then changes are recorded into it, and, it is selected into a
printer, then changes are propagated to that printer 
too.

Return value is nil if the user has canceled the dialog.  Otherwise, it
is a new plist, with the following properties:
  name                   Printer device name, even if unchanged by the user.
  from-page              First page to print, 1-based.  Returned if
                         `selected-page-button' is `pages'.
                         user, then this value is not included in the plist.
  to-page                Last page to print, inclusive, 1-based.  Returned if
                         `selected-page-button' is `pages'.
  copies                 Number of copies to print.  Always returned.
  selected-page-button   Which page button was selected (`all', `selection',
                         or `pages').

The DEVICE is destroyed and an error is signaled in case of
initialization problem with the new printer.

See also the `page-setup' dialog box type.

---------------------------------------------------------------------------

For type `page-setup':

This invokes the Windows standard Page Setup dialog.
This dialog is usually invoked in response to the Page Setup command,
and used to choose such parameters as page orientation, print margins
etc.  Note that this dialog contains the "Printer" button, which
invokes the Printer Setup dialog so that the user can update the
printer options or even select a different printer as well.

The keywords allowed are

:device
  An 'msprinter device.
:print-settings
  A printer settings object.
:properties
  A plist of job properties.

Exactly one of these keywords must be given.

The function brings up the Page Setup dialog, where the user
can select a different printer and/or change printer options.
Connection name can change as a result of selecting a different printer
device.  If a device is specified, then changes are stored into the
settings object currently selected into that printer.  If a settings
object is supplied, then changes are recorded into it, and, it is
selected into a printer, then changes are propagated to that printer
too.

:properties specifies a plist of job properties;
see `default-msprinter-frame-plist' for the complete list.  The plist
is used to initialize the dialog.

Return value is nil if the user has canceled the dialog.  Otherwise,
it is a new plist, containing the new list of properties.

NOTE: The margin properties (returned by this function) are *NOT* stored
into the print-settings or device object.

The DEVICE is destroyed and an error is signaled in case of
initialization problem with the new printer.

See also the `print' dialog box type.

---------------------------------------------------------------------------

For type `mswindows-message':

The keywords allowed are

:title
  The title of the dialog box.
:message
  The string to display.
:flags
  A symbol or list of symbols:

    -- To specify the buttons in the message box:
    
    abortretryignore 
      The message box contains three push buttons: Abort, Retry, and Ignore. 
    ok 
      The message box contains one push button: OK. This is the default. 
    okcancel 
      The message box contains two push buttons: OK and Cancel. 
    retrycancel 
      The message box contains two push buttons: Retry and Cancel. 
    yesno 
      The message box contains two push buttons: Yes and No. 
    yesnocancel 
      The message box contains three push buttons: Yes, No, and Cancel. 
    
    
    -- To display an icon in the message box:
     
    iconexclamation, iconwarning
      An exclamation-point icon appears in the message box. 
    iconinformation, iconasterisk
      An icon consisting of a lowercase letter i in a circle appears in
      the message box. 
    iconquestion
      A question-mark icon appears in the message box. 
    iconstop, iconerror, iconhand
      A stop-sign icon appears in the message box. 
    
    
    -- To indicate the default button: 
    
    defbutton1
      The first button is the default button.  This is the default.
    defbutton2
      The second button is the default button. 
    defbutton3
      The third button is the default button. 
    defbutton4
      The fourth button is the default button. 
    
    
    -- To indicate the modality of the dialog box:
     
    applmodal
      The user must respond to the message box before continuing work in
      the window identified by the hWnd parameter. However, the user can
      move to the windows of other applications and work in those windows.
      Depending on the hierarchy of windows in the application, the user
      may be able to move to other windows within the application. All
      child windows of the parent of the message box are automatically
      disabled, but popup windows are not.  This is the default.
    systemmodal
      Same as applmodal except that the message box has the WS_EX_TOPMOST
      style. Use system-modal message boxes to notify the user of serious,
      potentially damaging errors that require immediate attention (for
      example, running out of memory). This flag has no effect on the
      user's ability to interact with windows other than those associated
      with hWnd.
    taskmodal
      Same as applmodal except that all the top-level windows belonging to
      the current task are disabled if the hWnd parameter is NULL. Use
      this flag when the calling application or library does not have a
      window handle available but still needs to prevent input to other
      windows in the current application without suspending other
      applications.
    
    
    In addition, you can specify the following flags: 
    
    default-desktop-only 
      The desktop currently receiving input must be a default desktop;
      otherwise, the function fails. A default desktop is one an
      application runs on after the user has logged on.
    help 
      Adds a Help button to the message box. Choosing the Help button or
      pressing F1 generates a Help event.
    right 
      The text is right-justified. 
    rtlreading 
      Displays message and caption text using right-to-left reading order
      on Hebrew and Arabic systems.
    setforeground 
      The message box becomes the foreground window. Internally, Windows
      calls the SetForegroundWindow function for the message box.
    topmost 
      The message box is created with the WS_EX_TOPMOST window style. 
    service-notification 
      Windows NT only: The caller is a service notifying the user of an
      event. The function displays a message box on the current active
      desktop, even if there is no user logged on to the computer.  If
      this flag is set, the hWnd parameter must be NULL. This is so the
      message box can appear on a desktop other than the desktop
      corresponding to the hWnd.
    

  The return value is one of the following menu-item values returned by
  the dialog box:
   
  abort
    Abort button was selected. 
  cancel
    Cancel button was selected. 
  ignore
    Ignore button was selected. 
  no
    No button was selected. 
  ok
    OK button was selected. 
  retry
    Retry button was selected. 
  yes
    Yes button was selected. 
  
  If a message box has a Cancel button, the function returns the
  `cancel' value if either the ESC key is pressed or the Cancel button
  is selected.  If the message box has no Cancel button, pressing ESC has
  no effect.

arguments: (TYPE &rest REST &key (TITLE "XEmacs") (PARENT (SELECTED-FRAME)) MODAL PROPERTIES AUTOSIZE SPEC &allow-other-keys)
Sdialog.elc
Fdialog-box-finish
Exit a modal dialog box, returning RESULT.
This is meant to be executed from a dialog box callback function.Sdialog.elc
Fdialog-box-cancel
Cancel a modal dialog box.
This is meant to be executed from a dialog box callback function.Sdialog.elc
Finternal-make-dialog-box-exit
Sdialog.elc
Fpopup-dialog-box
Obsolete equivalent of (make-dialog-box 'question ...).

(popup-dialog-box (QUESTION BUTTONS ...)

is equivalent to

(make-dialog-box 'question :question QUESTION :buttons BUTTONS)Sgutter.elc
Vdefault-gutter-position
The location of the default gutter. It can be 'top, 'bottom, 'left or
'right. This option should be customized through the options menu.
To set the gutter position explicitly use `set-default-gutter-position'Sgutter.elc
Vdefault-gutter-position-changed-hook
Function or functions to be called when the gutter position is changed.
The value of this variable may be buffer-local.Sgutter.elc
Vgutter-element-visibility-changed-hook
Function or functions to be called when the visibility of an
element in the gutter changes.  The value of this variable may be
buffer-local. The gutter element symbol is passed as an argument to
the hook, as is the visibility flag.Sgutter.elc
Fset-gutter-element
Set GUTTER-SPECIFIER gutter element PROP to VALUE in optional LOCALE.
This is a convenience function for setting gutter elements.
VALUE in general must be a string. If VALUE is a glyph then a string
will be created to put the glyph into.Sgutter.elc
Fremove-gutter-element
Remove gutter element PROP from GUTTER-SPECIFIER in optional LOCALE.
This is a convenience function for removing gutter elements.Sgutter.elc
Fset-gutter-element-visible-p
Change the visibility of gutter elements.
Set the visibility of element PROP to VISIBLE-P for
GUTTER-SPECIFIER-VISIBLE-P in optional LOCALE.
This is a convenience function for hiding and showing gutter elements.Sgutter.elc
Fgutter-element-visible-p
Determine whether a gutter element is visible.
Given GUTTER-VISIBLE-SPECIFIER-P and gutter element PROP, return
non-nil if it is visible in optional DOMAIN.Sgutter.elc
Fset-gutter-dirty-p
Make GUTTER-OR-LOCATION dirty to force redisplay updates.Sgutter.elc
Fmake-gutter-specifier
Return a new `gutter' specifier object with the given specification list.
SPEC-LIST can be a list of specifications (each of which is a cons of a
locale and a list of instantiators), a single instantiator, or a list
of instantiators.  See `make-specifier' for more information about
specifiers.

Gutter specifiers are used to specify the format of a gutter.
The values of the variables `default-gutter', `top-gutter',
`left-gutter', `right-gutter', and `bottom-gutter' are always
gutter specifiers.

Valid gutter instantiators are called "gutter descriptors" and are
either strings or property-lists of strings.  See `default-gutter' for
a description of the exact format.Sgutter.elc
Fmake-gutter-size-specifier
Return a new `gutter-size' specifier object with the given spec list.
SPEC-LIST can be a list of specifications (each of which is a cons of a
locale and a list of instantiators), a single instantiator, or a list
of instantiators.  See `make-specifier' for more information about
specifiers.

Gutter-size specifiers are used to specify the size of a gutter.  The
values of the variables `default-gutter-size', `top-gutter-size',
`left-gutter-size', `right-gutter-size', and `bottom-gutter-size' are
always gutter-size specifiers.

Valid gutter-size instantiators are either integers or the special
symbol 'autodetect. If a gutter-size is set to 'autodetect them the
size of the gutter will be adjusted to just accommodate the gutters
contents. 'autodetect only works for top and bottom gutters.Sgutter.elc
Fmake-gutter-visible-specifier
Return a new `gutter-visible' specifier object with the given spec list.
SPEC-LIST can be a list of specifications (each of which is a cons of a
locale and a list of instantiators), a single instantiator, or a list
of instantiators.  See `make-specifier' for more information about
specifiers.

Gutter-visible specifiers are used to specify the visibility of a
gutter.  The values of the variables `default-gutter-visible-p',
`top-gutter-visible-p', `left-gutter-visible-p',
`right-gutter-visible-p', and `bottom-gutter-visible-p' are always
gutter-visible specifiers.

Valid gutter-visible instantiators are t, nil or a list of symbols.
If a gutter-visible instantiator is set to a list of symbols, and the
corresponding gutter specification is a property-list strings, then
elements of the gutter specification will only be visible if the
corresponding symbol occurs in the gutter-visible instantiator.Sselect.elc
Vselection-preferred-types
An ordered list of X11 type atoms for selections we want to receive.
We prefer UTF8_STRING over COMPOUND_TEXT, for compatibility with a certain
widely-used browser suite, and COMPOUND_TEXT over STRING. (COMPOUND_TEXT
isn't available on non-Mule.) We also accept several image types.

For compatibility, this can be a single atom. Sselect.elc
Vselection-sets-clipboard
Controls the selection's relationship to the clipboard.
When non-nil, any operation that sets the primary selection will also
set the clipboard.Sselect.elc
Fcopy-primary-selection
Copy the selection to the Clipboard and the kill ring.
This is similar to the command \[kill-ring-save] except that it will
save to the Clipboard even if that command doesn't, and it handles rectangles
properly.Sselect.elc
Fkill-primary-selection
Copy the selection to the Clipboard and the kill ring, then delete it.
This is similar to the command \[kill-region] except that it will
save to the Clipboard even if that command doesn't, and it handles rectangles
properly.Sselect.elc
Fdelete-primary-selection
Delete the selection without copying it to the Clipboard or the kill ring.Sselect.elc
Fyank-clipboard-selection
Insert the current Clipboard selection at point.Sselect.elc
Fget-clipboard
Return text pasted to the clipboard.
Not suitable for `interprogram-paste-function', use `get-clipboard-foreign'.Sselect.elc
Fget-clipboard-foreign
Return text pasted to the clipboard by another program.
See `interprogram-paste-function' for more information.Sselect.elc
Fget-cutbuffer
Return the value of one of the cut buffers.
This will do nothing under anything other than X.Sselect.elc
Fget-selection-no-error
Return the value of a window-system selection.
The argument TYPE (default `PRIMARY') says which selection, and the argument
DATA-TYPE (defaulting to the value of `selection-preferred-types'), says how
to convert the data. Returns NIL if there is no selection.Sselect.elc
Fget-selection
Return the value of a window-system selection.
The argument TYPE (default `PRIMARY') says which selection, and the argument
DATA-TYPE (defaulting to the value of, and compatible with,
`selection-preferred-types') says how to convert the data. If
there is no selection an error is signalled.  Not suitable in a
`interprogram-paste-function', q.v.Sselect.elc
Fget-selection-foreign
Return the value of a window-system selection, or nil if XEmacs owns it.
The argument TYPE (default `PRIMARY') says which selection, and the argument
DATA-TYPE (defaulting to the value of `selection-preferred-types' which see)
says how to convert the data. If there is no selection an error is
signalled.  See `interprogram-paste-function' for more information.Sselect.elc
Fown-selection
Make a window-system selection of type TYPE and value DATA.
The argument TYPE (default `PRIMARY') says which selection,
and DATA specifies the contents.  DATA may be any lisp data type
that can be converted using the function corresponding to DATA-TYPE
in `select-converter-alist'---strings are the usual choice, but
other types may be permissible depending on the DATA-TYPE parameter
(if DATA-TYPE is not supplied, the default behavior is window
system specific, but strings are always accepted).
HOW-TO-ADD may be any of the following:

  'replace-all or nil -- replace all data in the selection.
  'replace-existing   -- replace data for specified DATA-TYPE only.
  'append or t        -- append data to existing DATA-TYPE data.

DATA-TYPE is the window-system specific data type identifier
(see `register-selection-data-type' for more information).

The selection may also be a cons of two markers pointing to the same buffer,
or an overlay.  In these cases, the selection is considered to be the text
between the markers *at whatever time the selection is examined* (note
that the window system clipboard does not necessarily duplicate this
behavior - it doesn't on mswindows for example).
Thus, editing done in the buffer after you specify the selection
can alter the effective value of the selection.

The data may also be a vector of valid non-vector selection values.

Interactively, the text of the region is used as the selection value.Sselect.elc
Fdehilight-selection
for use as a value of `lost-selection-hooks'.Sselect.elc
Fown-clipboard
Paste the given string to the window system Clipboard.
See `interprogram-cut-function' for more information.Sselect.elc
Fdisown-selection
Assuming we own the selection, disown it.
With an argument, discard the secondary selection instead of the
primary selection.Sselect.elc
Factivate-region-as-selection
Sselect.elc
Vprimary-selection-extent
The extent of the primary selection; don't use this.Sselect.elc
Vsecondary-selection-extent
The extent of the secondary selection; don't use this.Sselect.elc
Fselect-make-extent-for-selection
Sselect.elc
Fvalid-simple-selection-p
An obsolete function that tests whether something was a valid simple
selection using the old XEmacs selection support. You shouldn't use this
any more, because just about anything could be a valid selection now.Sselect.elc
Fcut-copy-clear-internal
Sselect.elc
Fselect-convert-in
Attempt to convert the specified external VALUE to the specified DATA-TYPE,
for the specified SELECTION. Return nil if this is impossible, or a
suitable internal representation otherwise.Sselect.elc
Fselect-convert-out
Attempt to convert the specified internal VALUE for the specified DATA-TYPE
and SELECTION. Return nil if this is impossible, or a suitable external
representation otherwise.Sselect.elc
Fselect-coerce
Attempt to convert the specified internal VALUE to a representation
suitable for return from `get-selection' in the specified DATA-TYPE. Return
nil if this is impossible, or a suitable representation otherwise.Sselect.elc
Fselect-convert-to-text
Sselect.elc
Fselect-convert-to-timestamp
Sselect.elc
Fselect-convert-to-utf-8-text
Sselect.elc
Fselect-coerce-to-text
Sselect.elc
Fselect-convert-to-string
Sselect.elc
Fselect-convert-to-compound-text
Sselect.elc
Fselect-convert-to-length
Sselect.elc
Fselect-convert-to-targets
Sselect.elc
Fselect-convert-to-delete
Sselect.elc
Fselect-convert-to-filename
Sselect.elc
Fselect-convert-to-charpos
Sselect.elc
Fselect-convert-to-lineno
Sselect.elc
Fselect-convert-to-colno
Sselect.elc
Fselect-convert-to-sourceloc
Sselect.elc
Fselect-convert-to-os
Sselect.elc
Fselect-convert-to-host
Sselect.elc
Fselect-convert-to-user
Sselect.elc
Fselect-convert-to-class
Sselect.elc
Fselect-convert-to-name
xemacsSselect.elc
Fselect-convert-to-integer
Sselect.elc
Fselect-convert-from-integer
Sselect.elc
Fselect-convert-from-ip-address
Sselect.elc
Fselect-convert-to-atom
Sselect.elc
Fselect-convert-from-utf-8-text
Sselect.elc
Fselect-convert-from-utf-16-le-text
Sselect.elc
Fselect-convert-from-image-data
Take an image type specification--one of the image types this XEmacs
supports--and some data in that format, return a space, with a glyph
corresponding to that data as an end-glyph extent property of that space. Sselect.elc
Fselect-convert-from-cf-text
Sselect.elc
Fselect-convert-from-cf-unicodetext
Sselect.elc
Fselect-convert-to-cf-text
Sselect.elc
Fselect-convert-to-cf-unicodetext
Sselect.elc
Fselect-append-to-text
Sselect.elc
Fselect-append-to-string
Sselect.elc
Fselect-append-to-compound-text
Sselect.elc
Fselect-append-to-cf-text
Sselect.elc
Fselect-append-to-cf-unicodetext
Sselect.elc
Fselect-append-default
Sselect.elc
Fselect-buffer-killed-default
Sselect.elc
Fselect-buffer-killed-text
Smenubar-items.elc
FMenubar-items-truncate-history
Truncate a history LIST to first COUNT items.
Return a list of (label value) lists with labels truncated to last
LABEL-LENGTH characters of value.Smenubar-items.elc
Fcoding-system-menu-filter
Filter for menu entries with a submenu listing all coding systems.
This is for operations that take a coding system as an argument.  FUN
should be a function of one argument, which will be a coding system symbol.
ACTIVE should be a function one argument (again, a coding system symbol),
indicating whether the entry is active.  If DOTS is given, the menu entries
will have three dots appended.

Write your filter like this:

:filter
  (lambda (menu)
    (lambda (entry) ...)
    (lambda (entry) ...))
Smenubar-items.elc
Vdefault-menubar
The default XEmacs menubar.
See the documentation for `current-menubar' for details of the syntax
used here.Smenubar-items.elc
Finit-menubar-at-startup
Don't call this.
Adds `Load init files' button to menubar when starting up with -q.Smenubar-items.elc
Vbuffers-menu-max-size
*Maximum number of entries which may appear on the "Buffers" menu.
If this is 10, then only the ten most-recently-selected buffers will be
shown.  If this is nil, then all buffers will be shown.  Setting this to
a large number or nil will slow down menu responsiveness.Smenubar-items.elc
Vcomplex-buffers-menu-p
*If non-nil, the buffers menu will contain several commands.
Commands will be presented as submenus of each buffer line.  If this
is false, then there will be only one command: select that buffer.Smenubar-items.elc
Vbuffers-menu-submenus-for-groups-p
*If non-nil, the buffers menu will contain one submenu per group of buffers.
The grouping function is specified in `buffers-menu-grouping-function'.
If this is an integer, do not build submenus if the number of buffers
is not larger than this value.Smenubar-items.elc
Vbuffers-menu-switch-to-buffer-function
*The function to call to select a buffer from the buffers menu.
`switch-to-buffer' is a good choice, as is `pop-to-buffer'.Smenubar-items.elc
Vbuffers-menu-omit-function
*If non-nil, a function specifying the buffers to omit from the buffers menu.
This is passed a buffer and should return non-nil if the buffer should be
omitted.  The default value `buffers-menu-omit-invisible-buffers' omits
buffers that are normally considered "invisible" (those whose name
begins with a space).Smenubar-items.elc
Vbuffers-menu-format-buffer-line-function
*The function to call to return a string to represent a buffer in
the buffers menu.  The function is passed a buffer and a number
(starting with 1) indicating which buffer line in the menu is being
processed and should return a string containing an accelerator
spec. (Check out `menu-item-generate-accelerator-spec' as a convenient
way of generating the accelerator specs.) The default value
`format-buffers-menu-line' just returns the name of the buffer and
uses the number as the accelerator.  Also check out
`slow-format-buffers-menu-line' which returns a whole bunch of info
about a buffer.

Note: Gross Compatibility Hack: Older versions of this function prototype
only expected one argument, not two.  We deal gracefully with such
functions by simply calling them with one argument and leaving out the
line number.  However, this may go away at any time, so make sure to
update all of your functions of this type.Smenubar-items.elc
Vbuffers-menu-sort-function
*If non-nil, a function to sort the list of buffers in the buffers menu.
It will be passed two arguments (two buffers to compare) and should return
t if the first is "less" than the second.  One possible value is
`sort-buffers-menu-alphabetically'; another is
`sort-buffers-menu-by-mode-then-alphabetically'.Smenubar-items.elc
Vbuffers-menu-grouping-function
*If non-nil, a function to group buffers in the buffers menu together.
It will be passed two arguments, successive members of the sorted buffers
list after being passed through `buffers-menu-sort-function'.  It should
return non-nil if the second buffer begins a new group.  The return value
should be the name of the old group, which may be used in hierarchical
buffers menus.  The last invocation of the function contains nil as the
second argument, so that the name of the last group can be determined.

The sensible values of this function are dependent on the value specified
for `buffers-menu-sort-function'.Smenubar-items.elc
Vlist-all-buffers-function
*Function that `list-all-buffers' calls.Smenubar-items.elc
Fsort-buffers-menu-alphabetically
For use as a value of `buffers-menu-sort-function'.
Sorts the buffers in alphabetical order by name, but puts buffers beginning
with a star at the end of the list.Smenubar-items.elc
Fsort-buffers-menu-by-mode-then-alphabetically
For use as a value of `buffers-menu-sort-function'.
Sorts first by major mode and then alphabetically by name, but puts buffers
beginning with a star at the end of the list.Smenubar-items.elc
Fslow-format-buffers-menu-line
For use as a value of `buffers-menu-format-buffer-line-function'.
This returns a string containing a bunch of info about the buffer.Smenubar-items.elc
Fformat-buffers-menu-line
For use as a value of `buffers-menu-format-buffer-line-function'.
This just returns the buffer's name.Smenubar-items.elc
Fgroup-buffers-menu-by-mode-then-alphabetically
For use as a value of `buffers-menu-grouping-function'.
This groups buffers by major mode.  It only really makes sense if
`buffers-menu-sorting-function' is
`sort-buffers-menu-by-mode-then-alphabetically'.Smenubar-items.elc
Fbuffer-menu-save-buffer
Smenubar-items.elc
Fbuffer-menu-write-file
Smenubar-items.elc
Fbuild-buffers-menu-internal
Smenubar-items.elc
Fbuffers-menu-filter
This is the menu filter for the top-level buffers "Buffers" menu.
It dynamically creates a list of buffers to use as the contents of the menu.
Only the most-recently-used few buffers will be listed on the menu, for
efficiency reasons.  You can control how many buffers will be shown by
setting `buffers-menu-max-size'.  You can control the text of the menu
items by redefining the function `format-buffers-menu-line'.Smenubar-items.elc
Flist-all-buffers
Display a list of buffers.  Calls `list-all-buffers-function'.Smenubar-items.elc
Ftutorials-menu-filter
Sgutter-items.elc
Vgutter-buffers-tab
A tab widget in the gutter for displaying buffers.
Do not set this. Use `set-glyph-image' to change the properties of the tab.Sgutter-items.elc
Vgutter-buffers-tab-visible-p
Whether the buffers tab is globally visible. 
This option should be set through the options menu.Sgutter-items.elc
Vgutter-buffers-tab-enabled
*Whether to enable support for buffers tab in the gutter.
This is different to `gutter-buffers-tab-visible-p' which still runs hooks
even when the gutter is invisible.Sgutter-items.elc
Vgutter-buffers-tab-orientation
Where the buffers tab currently is. Do not set this.Sgutter-items.elc
Vbuffers-tab-max-size
*Maximum number of entries which may appear on the "Buffers" tab.
If this is 10, then only the ten most-recently-selected buffers will be
shown.  If this is nil, then all buffers will be shown.  Setting this to
a large number or nil will slow down tab responsiveness.Sgutter-items.elc
Vbuffers-tab-switch-to-buffer-function
*The function to call to select a buffer from the buffers tab.
`switch-to-buffer' is a good choice, as is `pop-to-buffer'.Sgutter-items.elc
Vbuffers-tab-omit-function
*If non-nil, a function specifying the buffers to omit from the buffers tab.
This is passed a buffer and should return non-nil if the buffer should be
omitted.  The default value `buffers-tab-omit-some-buffers' omits
buffers based on the value of `buffers-tab-omit-list'.Sgutter-items.elc
Vbuffers-tab-omit-list
*A list of types of buffers to omit from the buffers tab.
This is only used if `buffers-tab-omit-function' is set to
`buffers-tab-omit-some-buffers', its default value.Sgutter-items.elc
Vbuffers-tab-selection-function
*If non-nil, a function specifying the buffers to select in the
buffers tab.  This is passed two buffers and should return non-nil if
the first buffer should be selected.  The default value
`select-buffers-tab-buffers-by-mode' groups buffers by major mode and
by `buffers-tab-grouping-regexp'.Sgutter-items.elc
Vbuffers-tab-filter-functions
*A list of functions specifying buffers to display in the buffers tab.

If nil, all buffers are kept, up to `buffers-tab-max-size', in usual order.
Otherwise, each function in the list must take arguments (BUF1 BUF2).
BUF1 is the candidate, and BUF2 is the current buffer (first in the buffers
list).  The function should return non-nil if BUF1 should be added to the
buffers tab.  BUF1 will be omitted if any of the functions returns nil.

Defaults to `select-buffers-tab-buffers-by-mode', which adds BUF1 if BUF1 and
BUF2 have the same major mode, or both match `buffers-tab-grouping-regexp'.Sgutter-items.elc
Vbuffers-tab-sort-function
*If non-nil, a function specifying the buffers to select from the
buffers tab.  This is passed the buffer list and returns the list in the
order desired for the tab widget.  The default value `nil' leaves the
list in `buffer-list' order (usual most-recently-selected-first).Sgutter-items.elc
Vbuffers-tab-face
*Face to use for displaying the buffers tab.Sgutter-items.elc
Vbuffers-tab-grouping-regexp
*If non-nil, a list of regular expressions for buffer grouping.
Each regular expression is applied to the current major-mode symbol
name and mode-name, if it matches then any other buffers that match
the same regular expression be added to the current group.Sgutter-items.elc
Vbuffers-tab-format-buffer-line-function
*The function to call to return a string to represent a buffer in the
buffers tab.  The function is passed a buffer and should return a
string.  The default value `format-buffers-tab-line' just returns the
name of the buffer, optionally truncated to
`buffers-tab-max-buffer-line-length'.  Also check out
`slow-format-buffers-menu-line' which returns a whole bunch of info
about a buffer.Sgutter-items.elc
Vbuffers-tab-default-buffer-line-length
*Maximum length of text which may appear in a "Buffers" tab.
This is a specifier, use set-specifier to modify it.Sgutter-items.elc
Vbuffers-tab-max-buffer-line-length
*Maximum length of text which may appear in a "Buffers" tab.
Buffer names over this length will be truncated with elipses.
If this is 0, then the full buffer name will be shown.Sgutter-items.elc
Fbuffers-tab-switch-to-buffer
For use as a value for `buffers-tab-switch-to-buffer-function'.Sgutter-items.elc
Fselect-buffers-tab-buffers-by-mode
For use as a value of `buffers-tab-selection-function'.
This selects buffers by major mode `buffers-tab-grouping-regexp'.Sgutter-items.elc
Fformat-buffers-tab-line
For use as a value of `buffers-tab-format-buffer-line-function'.
This just returns the buffer's name, optionally truncated.Sgutter-items.elc
Fbuild-buffers-tab-internal
Sgutter-items.elc
Fbuffers-tab-items
Return a list of tab instantiators based on the current buffers list.
This function is used as the tab filter for the top-level buffers
"Buffers" tab.  It dynamically creates a list of tab instantiators
to use as the contents of the tab.  The contents and order of the list
is controlled by `buffers-tab-filter-functions' which by default
groups buffers according to major mode and removes invisible buffers.
You can control how many buffers will be shown by setting
`buffers-tab-max-size'.  You can control the text of the tab items by
redefining the function `format-buffers-menu-line'.Sgutter-items.elc
Fadd-tab-to-gutter
Put a tab control in the gutter area to hold the most recent buffers.Sgutter-items.elc
Fupdate-tab-in-gutter
Update the tab control in the gutter area.Sgutter-items.elc
Vprogress-feedback-use-echo-area
*Whether progress gauge display should display in the echo area.
If NIL then progress gauges will be displayed with whatever native widgets
are available on the current console. If non-NIL then progress display will be
textual and displayed in the echo area.Sgutter-items.elc
Vprogress-glyph-height
Height of the progress gauge glyph.Sgutter-items.elc
Vprogress-feedback-popup-period
The time that the progress gauge should remain up after completionSgutter-items.elc
Vprogress-feedback-style
*Control the appearance of the progress gauge.
If 'large, the default, then the progress-feedback text is displayed
above the gauge itself. If 'small then the gauge and text are arranged
side-by-side.Sgutter-items.elc
Fset-progress-feedback-instantiator
Sgutter-items.elc
Fset-progress-abort-instantiator
Sgutter-items.elc
Vprogress-stack
An alist of label/string pairs representing active progress gauges.
The first element in the list is currently displayed in the gutter area.
Do not modify this directly--use the `progress-feedback' or
`display-progress-feedback'/`clear-progress-feedback' functions.Sgutter-items.elc
Fprogress-feedback-displayed-p
Return a non-nil value if a progress gauge is presently displayed in the
gutter area.  If optional argument RETURN-STRING is non-nil,
return a string containing the message, otherwise just return t.Sgutter-items.elc
Fclear-progress-feedback
Remove any progress gauge with LABEL from the progress gauge-stack,
erasing it from the gutter area if it's currently displayed there.
If a message remains at the head of the progress-stack and NO-RESTORE
is nil, it will be displayed.  The string which remains in the gutter
area will be returned, or nil if the progress-stack is now empty.
If LABEL is nil, the entire progress-stack is cleared.

Unless you need the return value or you need to specify a label,
you should just use (progress nil).Sgutter-items.elc
Fprogress-feedback-clear-when-idle
Sgutter-items.elc
Fremove-progress-feedback
Sgutter-items.elc
Fprogress-feedback-dispatch-non-command-events
Sgutter-items.elc
Fappend-progress-feedback
Sgutter-items.elc
Fabort-progress-feedback
Sgutter-items.elc
Fraw-append-progress-feedback
Sgutter-items.elc
Fdisplay-progress-feedback
Display a progress gauge and message in the bottom gutter area.
 First argument LABEL is an identifier for this message.  MESSAGE is
the string to display.  Use `clear-progress-feedback' to remove a labelled
message.Sgutter-items.elc
Fcurrent-progress-feedback
Return the current progress gauge in the gutter area, or nil.
The FRAME argument is currently unused.Sgutter-items.elc
Fcurrent-progress-feedback-label
Sgutter-items.elc
Fprogress-feedback
Print a progress gauge and message in the bottom gutter area of the frame.
The arguments are the same as to `format'.

If the only argument is nil, clear any existing progress gauge.Sgutter-items.elc
Fprogress-feedback-with-label
Print a progress gauge and message in the bottom gutter area of the frame.
LABEL is an identifier for this progress gauge.
FMT is a format string to be passed to `format' along with ARGS.
Optional VALUE is the current degree of progress, an integer 0-100.
The remaining ARGS are passed with FMT `(apply #'format FMT ARGS)'.Sgutter-items.elc
Fbuffers-tab-omit-some-buffers
For use as a value of `buffers-tab-omit-function'.
Omit buffers based on the value of `buffers-tab-omit-list', which
see.Stoolbar-items.elc
Ftoolbar-not-configured
Stoolbar-items.elc
Vtoolbar-open-function
*Function to call when the open icon is selected.Stoolbar-items.elc
Ftoolbar-open
Stoolbar-items.elc
Vtoolbar-dired-function
*Function to call when the dired icon is selected.Stoolbar-items.elc
Ftoolbar-dired
Stoolbar-items.elc
Vtoolbar-save-function
*Function to call when the save icon is selected.Stoolbar-items.elc
Ftoolbar-save
Stoolbar-items.elc
Vtoolbar-print-function
*Function to call when the print icon is selected.Stoolbar-items.elc
Ftoolbar-print
Stoolbar-items.elc
Vtoolbar-cut-function
*Function to call when the cut icon is selected.Stoolbar-items.elc
Ftoolbar-cut
Stoolbar-items.elc
Vtoolbar-copy-function
*Function to call when the copy icon is selected.Stoolbar-items.elc
Ftoolbar-copy
Stoolbar-items.elc
Vtoolbar-paste-function
*Function to call when the paste icon is selected.Stoolbar-items.elc
Ftoolbar-paste
Stoolbar-items.elc
Vtoolbar-undo-function
*Function to call when the undo icon is selected.Stoolbar-items.elc
Ftoolbar-undo
Stoolbar-items.elc
Vtoolbar-replace-function
*Function to call when the replace icon is selected.Stoolbar-items.elc
Ftoolbar-replace
Stoolbar-items.elc
Ftoolbar-ispell-internal
Stoolbar-items.elc
Vtoolbar-ispell-function
*Function to call when the ispell icon is selected.Stoolbar-items.elc
Ftoolbar-ispell
Intelligently spell the region or buffer.Stoolbar-items.elc
Ftoolbar-external
Stoolbar-items.elc
Vtoolbar-mail-commands-alist
*Alist of mail readers and their commands.
The car of each alist element is the mail reader, and the cdr is the form
used to start it.Stoolbar-items.elc
Vtoolbar-mail-reader
*Mail reader toolbar will invoke.
The legal values are the keys from `toolbar-mail-command-alist', which
 should be used to add new mail readers.
Mail readers known by default are vm, gnus, rmail, mh, pine, elm,
 mutt, exmh, netscape and send.Stoolbar-items.elc
Ftoolbar-mail
Run mail in a separate frame.Stoolbar-items.elc
Vtoolbar-info-use-separate-frame
*Whether Info is invoked in a separate frame.Stoolbar-items.elc
Vtoolbar-info-frame-plist
*The properties of the frame in which news is displayed.Stoolbar-items.elc
Vtoolbar-info-frame
The frame in which info is displayed.Stoolbar-items.elc
Ftoolbar-info
Run info in a separate frame.Stoolbar-items.elc
Ftoolbar-debug
Stoolbar-items.elc
Ftoolbar-compile
Run compile without having to touch the keyboard.Stoolbar-items.elc
Vtoolbar-news-commands-alist
*Alist of news readers and their commands.
The car of each alist element the pair is the news reader, and the cdr
is the form used to start it.Stoolbar-items.elc
Vtoolbar-news-reader
*News reader toolbar will invoke.
The legal values are the keys from `toolbar-news-command-alist', which should
 be used to add new news readers.
Newsreaders known by default are gnus, rn, nn, trn, xrn, slrn, pine
 and netscape.Stoolbar-items.elc
Vtoolbar-news-use-separate-frame
*Whether Gnus is invoked in a separate frame.Stoolbar-items.elc
Vtoolbar-news-frame
The frame in which news is displayed.Stoolbar-items.elc
Vtoolbar-news-frame-plist
*The properties of the frame in which news is displayed.Stoolbar-items.elc
Ftoolbar-gnus
Run Gnus in a separate frame.Stoolbar-items.elc
Ftoolbar-news
Run News.Stoolbar-items.elc
Vtoolbar-last-win-icon
A `last-win' icon set.Stoolbar-items.elc
Vtoolbar-next-win-icon
A `next-win' icon set.Stoolbar-items.elc
Vtoolbar-file-icon
A `file' icon set.Stoolbar-items.elc
Vtoolbar-folder-icon
A `folder' icon setStoolbar-items.elc
Vtoolbar-disk-icon
A `disk' icon set.Stoolbar-items.elc
Vtoolbar-printer-icon
A `printer' icon set.Stoolbar-items.elc
Vtoolbar-cut-icon
A `cut' icon set.Stoolbar-items.elc
Vtoolbar-copy-icon
A `copy' icon set.Stoolbar-items.elc
Vtoolbar-paste-icon
A `paste' icon set.Stoolbar-items.elc
Vtoolbar-undo-icon
An `undo' icon set.Stoolbar-items.elc
Vtoolbar-spell-icon
A `spell' icon set.Stoolbar-items.elc
Vtoolbar-replace-icon
A `replace' icon set.Stoolbar-items.elc
Vtoolbar-mail-icon
A `mail' icon set.Stoolbar-items.elc
Vtoolbar-info-icon
An `info' icon set.Stoolbar-items.elc
Vtoolbar-compile-icon
A `compile' icon set.Stoolbar-items.elc
Vtoolbar-debug-icon
A `debugger' icon set.Stoolbar-items.elc
Vtoolbar-news-icon
A `news' icon set.Stoolbar-items.elc
Finit-toolbar
Stoolbar-items.elc
Ftoolbar-add-item-data
Stoolbar-items.elc
Vtoolbar-vector-open
Define the vector for the "Open" toolbar buttonStoolbar-items.elc
Vtoolbar-vector-dired
Define the vector for the "Dired" toolbar buttonStoolbar-items.elc
Vtoolbar-vector-save
Define the vector for the "Save" toolbar buttonStoolbar-items.elc
Vtoolbar-vector-print
Define the vector for the "Printer" toolbar buttonStoolbar-items.elc
Vtoolbar-vector-cut
Define the vector for the "Cut" toolbar buttonStoolbar-items.elc
Vtoolbar-vector-copy
Define the vector for the "Copy" toolbar buttonStoolbar-items.elc
Vtoolbar-vector-paste
Define the vector for the "Paste" toolbar buttonStoolbar-items.elc
Vtoolbar-vector-undo
Define the vector for the "Undo" toolbar buttonStoolbar-items.elc
Vtoolbar-vector-spell
Define the vector for the "Spell" toolbar buttonStoolbar-items.elc
Vtoolbar-vector-replace
Define the vector for the "Replace" toolbar buttonStoolbar-items.elc
Vtoolbar-vector-mail
Define the vector for the "Mail" toolbar buttonStoolbar-items.elc
Vtoolbar-vector-info
Define the vector for the "Info" toolbar buttonStoolbar-items.elc
Vtoolbar-vector-compile
Define the vector for the "Compile" toolbar buttonStoolbar-items.elc
Vtoolbar-vector-debug
Define the vector for the "Debug" toolbar buttonStoolbar-items.elc
Vtoolbar-vector-news
Define the vector for the "News" toolbar buttonStoolbar-items.elc
Vinitial-toolbar-spec
The initial toolbar for a buffer.Sdialog-items.elc
Fsearch-dialog-callback
Sdialog-items.elc
Fmake-search-dialog
Popup a search dialog box.Scoding.elc
Fcheck-coding-system
Scoding.elc
Fmodify-coding-system-alist
Modify one of look up tables for finding a coding system on I/O operation.
There are three of such tables, `file-coding-system-alist',
`process-coding-system-alist', and `network-coding-system-alist'.

TARGET-TYPE specifies which of them to modify.
If it is `file', it affects `file-coding-system-alist' (which see).
If it is `process', it affects `process-coding-system-alist' (which see).
If it is `network', it affects `network-coding-system-alist' (which see).

REGEXP is a regular expression matching a target of I/O operation.
The target is a file name if TARGET-TYPE is `file', a program name if
TARGET-TYPE is `process', or a network service name or a port number
to connect to if TARGET-TYPE is `network'.

CODING-SYSTEM is a coding system to perform code conversion on the I/O
operation, or a cons cell (DECODING . ENCODING) specifying the coding systems
for decoding and encoding respectively,
or a function symbol which, when called, returns such a cons cell.Scoding.elc
Fkeyboard-coding-system
Return coding-system of what is sent from terminal keyboard.Scoding.elc
Fset-keyboard-coding-system
Set the coding system used for TTY keyboard input. Currently broken.Scoding.elc
Fterminal-coding-system
Return coding-system of your terminal.Scoding.elc
Fset-terminal-coding-system
Set the coding system used for TTY display output.Scoding.elc
Fwhat-coding-system
Show the encoding of text in the region.
This function is meant to be called interactively;
from a Lisp program, use `detect-coding-region' instead.Scoding.elc
Fdecode-coding-string
Decode the string STR which is encoded in CODING-SYSTEM.
Normally does not modify STR.  Returns the decoded string on
successful conversion.
Optional argument NOCOPY says that modifying STR and returning it is
allowed.Scoding.elc
Fencode-coding-string
Encode the string STR using CODING-SYSTEM.
Does not modify STR.  Returns the encoded string on successful conversion.
Optional argument NOCOPY says that the original string may be returned
if does not differ from the encoded string. Scoding.elc
Fcoding-system-mnemonic
Return the 'mnemonic property of CODING-SYSTEM.Scoding.elc
Fcoding-system-documentation
Return the 'documentation property of CODING-SYSTEM.Scoding.elc
Fcoding-system-eol-type
Return the 'eol-type property of CODING-SYSTEM.Scoding.elc
Fcoding-system-eol-lf
Return the 'eol-lf property of CODING-SYSTEM.Scoding.elc
Fcoding-system-eol-crlf
Return the 'eol-crlf property of CODING-SYSTEM.Scoding.elc
Fcoding-system-eol-cr
Return the 'eol-cr property of CODING-SYSTEM.Scoding.elc
Fcoding-system-post-read-conversion
Return the 'post-read-conversion property of CODING-SYSTEM.Scoding.elc
Fcoding-system-pre-write-conversion
Return the 'pre-write-conversion property of CODING-SYSTEM.Scoding.elc
Fcoding-system-get
Extract a value from CODING-SYSTEM's property list for property PROP.Scoding.elc
Fcoding-system-put
Change value in CODING-SYSTEM's property list PROP to VALUE.Scoding.elc
Fcoding-system-category
Return the coding category of CODING-SYSTEM.Scoding.elc
Fquery-coding-clear-highlights
Remove extent faces added by `query-coding-region' between BEGIN and END.

Optional argument BUFFER-OR-STRING is the buffer or string to use, and
defaults to the current buffer.

The HIGHLIGHTP argument to `query-coding-region' indicates that it should
display unencodable characters using `query-coding-warning-face'.  After
this function has been called, this will no longer be the case.  Scoding.elc
Fquery-coding-string
Work out whether CODING-SYSTEM can losslessly encode STRING.
CODING-SYSTEM is the coding system to check.

IGNORE-INVALID-SEQUENCESP, an optional argument, says to treat XEmacs
characters which have an unambiguous encoded representation, despite being
undefined in what they represent, as encodable.  These chiefly arise with
variable-length encodings like UTF-8 and UTF-16, where an invalid sequence
is passed through to XEmacs as a sequence of characters with a defined
correspondence to the octets on disk, but no non-error semantics; see the
`invalid-sequence-coding-system' argument to `set-language-info'.

They can also arise with fixed-length encodings like ISO 8859-7, where
certain octets on disk have undefined values, and treating them as
corresponding to the ISO 8859-1 characters with the same numerical values
may lead to data that are not understood by other applications.

Optional argument ERRORP says to signal a `text-conversion-error' if some
character in the region cannot be encoded, and defaults to nil.

Optional argument HIGHLIGHT says to display unencodable characters in the
region using `query-coding-warning-face'. It defaults to nil.

This function can return multiple values; the intention is that callers use
`multiple-value-bind' or the related CL multiple value functions to deal
with it.  The first result is `t' if the region can be encoded using
CODING-SYSTEM, or `nil' if not.  If the region cannot be encoded using
CODING-SYSTEM, the second result is a range table describing the positions
of the unencodable characters.

Ranges that describe characters that would be ignored were
IGNORE-INVALID-SEQUENCESP non-nil map to the symbol `invalid-sequence';
other ranges map to the symbol `unencodable'.  If IGNORE-INVALID-SEQUENCESP
is non-nil, all ranges will map to the symbol `unencodable'.  See
`make-range-table' for more details of range tables.Scoding.elc
Funencodable-char-position
Return position of first un-encodable character in a region.
START and END specify the region and CODING-SYSTEM specifies the
encoding to check.  Return nil if CODING-SYSTEM does encode the region.

If optional 4th argument COUNT is non-nil, it specifies at most how
many un-encodable characters to search.  In this case, the value is a
list of positions.

If optional 5th argument STRING is non-nil, it is a string to search
for un-encodable characters.  In that case, START and END are indexes
in the string.Scoding.elc
Fcheck-coding-systems-region
Can coding systems in CODING-SYSTEM-LIST encode text in a region?

CODING-SYSTEM-LIST must be a list of coding systems.  BEGIN and END are
normally buffer positions delimiting the region.  If some coding system in
CODING-SYSTEM-LIST cannot encode the entire region, the return value of this
function is an alist mapping coding system names to lists of individual
buffer positions (not ranges) that the individual coding systems cannot
encode.

If all coding systems in CODING-SYSTEM-LIST can encode the region,
this function returns nil.

If BEGIN is a string, `check-coding-systems-region' ignores END, and checks
whether the coding systems can encode BEGIN.  The alist that is returned
uses zero-based string indices, not one-based buffer positions.

This function is for GNU compatibility.  See also `query-coding-region'.Scoding.elc
Fencode-coding-char
Encode CHAR by CODING-SYSTEM and return the resulting string.
If CODING-SYSTEM can't safely encode CHAR, return nil.
The optional third argument CHARSET is, for the moment, ignored.Scode-files.elc
Vbuffer-file-coding-system-when-loaded
Coding system used when current buffer's file was read in.

Automatically buffer-local when set in any fashion.  This is set
automatically when a file is loaded and is used when the file needs to be
reloaded (e.g. `revert-buffer').  Normally this will have the same value as
`buffer-file-coding-system', but the latter may be changed because it's
also used to specify the encoding when the file is written out.Scode-files.elc
Vbuffer-file-coding-system-for-read
Default coding system used when reading a file.
This provides coarse-grained control; for finer-grained control, use
`file-coding-system-alist'.  From a Lisp program, if you wish to
unilaterally specify the coding system used for one particular
operation, you should bind the variable `coding-system-for-read'
rather than setting this variable, which is intended to be used for
global environment specification.

See `insert-file-contents' for a full description of how a file's
coding system is determined when it is read in.Scode-files.elc
Vfile-coding-system-alist
Alist to decide a coding system to use for a file I/O operation.
The format is ((PATTERN . VAL) ...),
where PATTERN is a regular expression matching a file name,
VAL is a coding system, a cons of coding systems, or a function symbol.
If VAL is a coding system, it is used for both decoding and encoding
the file contents.
If VAL is a cons of coding systems, the car part is used for decoding,
and the cdr part is used for encoding.
If VAL is a function symbol, the function must return a coding system
or a cons of coding systems which are used as above.

This overrides the more general specification in
`buffer-file-coding-system-for-read', but is overridden by
`coding-system-for-read'.Scode-files.elc
Fset-buffer-file-coding-system
Set the file coding-system of the current buffer to CODING-SYSTEM.
This means that when you save the buffer, it will be converted
according to CODING-SYSTEM.  For a list of possible values of CODING-SYSTEM,
use \[list-coding-systems].

If CODING-SYSTEM leaves the text conversion unspecified, or if it
leaves the end-of-line conversion unspecified, FORCE controls what to
do.  If FORCE is nil, get the unspecified aspect (or aspects) from the
buffer's previous `buffer-file-coding-system' value (if it is
specified there).  Otherwise, leave it unspecified.

This marks the buffer modified so that the succeeding \[save-buffer]
surely saves the buffer with CODING-SYSTEM.  From a program, if you
don't want to mark the buffer modified, specify t for NOMODIFY.
If you know exactly what coding system you want to use,
just set the variable `buffer-file-coding-system' directly.Scode-files.elc
Ftoggle-buffer-file-coding-system
Set EOL type of buffer-file-coding-system of the current buffer to
something other than what it is at the moment.Scode-files.elc
Fset-buffer-file-coding-system-for-read
Set the coding system used when reading in a file.
This is equivalent to setting the variable
`buffer-file-coding-system-for-read'.  You can also use
`file-coding-system-alist' to specify the coding system for
particular files.Scode-files.elc
Fset-default-buffer-file-coding-system
Set the default value of `buffer-file-coding-system' to CODING-SYSTEM.
The default value is used both for buffers without associated files
and for files with no apparent coding system (i.e. primarily ASCII).
See `buffer-file-coding-system' for more information.Scode-files.elc
Ffind-file-coding-system-for-read-from-filename
Look up coding system to read a file in `file-coding-system-alist'.
The return value will be nil (no applicable entry) or a coding system
object (the entry specified a coding system).Scode-files.elc
Ffind-file-coding-system-for-write-from-filename
Look up coding system to write a file in `file-coding-system-alist'.
The return value will be nil (no applicable entry) or a coding system
object (the entry specified a coding system).Scode-files.elc
Fload
Execute a file of Lisp code named FILENAME, or load a binary module.
First tries to find a Lisp file FILENAME with .elc appended, then with .el, then with
 FILENAME unmodified.  If unsuccessful, tries to find a binary module FILE with
 the elements of `module-extensions' appended, one at a time.
Searches directories in load-path for Lisp files, and in `module-load-path'
 for binary modules.
If optional second arg NOERROR is non-nil,
 report no error if FILE doesn't exist.
Print messages at start and end of loading unless
 optional third arg NOMESSAGE is non-nil.
If optional fourth arg NOSUFFIX is non-nil, don't try adding suffixes
 .elc, .el, or elements of `module-extensions' to the specified name FILE.
Return t if file exists.Scode-files.elc
Vinsert-file-contents-access-hook
A hook to make a file accessible before reading it.
`insert-file-contents' calls this hook before doing anything else.
Called with two arguments: FILENAME and VISIT, the same as the
corresponding arguments in the call to `insert-file-contents'.Scode-files.elc
Vinsert-file-contents-pre-hook
A special hook to decide the coding system used for reading in a file.

Before reading a file, `insert-file-contents' calls the functions on
this hook with arguments FILENAME and VISIT, the same as the
corresponding arguments in the call to `insert-file-contents'.  In
these functions, you may refer to the global variable
`buffer-file-coding-system-for-read'.

The return value of the functions should be either

-- nil
-- A coding system or a symbol denoting it, indicating the coding system
   to be used for reading the file
-- A list of two elements (absolute pathname and length of data inserted),
   which is used as the return value to `insert-file-contents'.  In this
   case, `insert-file-contents' assumes that the function has inserted
   the file for itself and suppresses further reading.

If any function returns non-nil, the remaining functions are not called.Scode-files.elc
Vinsert-file-contents-error-hook
A hook to set `buffer-file-coding-system' when a read error has occurred.

When a file error (e.g. nonexistent file) occurs while read a file,
`insert-file-contents' calls the functions on this hook with three
arguments: FILENAME and VISIT (the same as the corresponding arguments
in the call to `insert-file-contents') and a cons (SIGNALED-CONDITIONS
. SIGNAL-DATA).

After calling this hook, the error is signalled for real and
propagates to the caller of `insert-file-contents'.Scode-files.elc
Vinsert-file-contents-post-hook
A hook to set `buffer-file-coding-system' for the current buffer.

After successful reading, `insert-file-contents' calls the functions
on this hook with four arguments: FILENAME and VISIT (the same as the
corresponding arguments in the call to `insert-file-contents'),
CODING-SYSTEM (the actual coding system used to decode the file), and
a cons of absolute pathname and length of data inserted (the same
thing as will be returned from `insert-file-contents').Scode-files.elc
Finsert-file-contents
Insert contents of file FILENAME after point.
Returns list of absolute file name and length of data inserted.
If second argument VISIT is non-nil, the buffer's visited filename
and last save file modtime are set, and it is marked unmodified.
If visiting and the file does not exist, visiting is completed
before the error is signaled.

The optional third and fourth arguments START and END specify what portion
of the file to insert, and start at zero, in direct and needless contrast to
buffer offsets.  That is, values of 0 and 10 for START and END respectively
will give the first ten octets of a file.

If VISIT is non-nil, START and END must be nil.
If optional fifth argument REPLACE is non-nil,
it means replace the current buffer contents (in the accessible portion)
with the file contents.  This is better than simply deleting and inserting
the whole thing because (1) it preserves some marker positions
and (2) it puts less data in the undo list.

The coding system used for decoding the file is determined as follows:

1. `coding-system-for-read', if non-nil. (Intended as a temporary overriding
      mechanism for use by Lisp code.)
2. The result of `insert-file-contents-pre-hook', if non-nil. (Intended for
      handling tricky cases where the coding system of the file cannot be
      determined just by looking at the filename's extension and the standard
      auto-detection mechanism isn't suitable, so more clever code is required.
      In general, this hook should rarely be used.)
3. The matching value for this filename from `file-coding-system-alist',
      if any. (Intended as the standard way of determining encoding from
      the name, or esp. the extension, of the file.  Akin to the way
      file-name extensions are used under MS Windows to determine how to
      handle the file, but more flexible.)
4. `buffer-file-coding-system-for-read', if non-nil. (Intended to be where
      the global default coding system is set.  Usually, you want to use
      the value `undecided', to let the system auto-detect according to the
      priorities set up by `set-coding-priority-list'.  This is usually
      initialized from the `coding-system' property of the current language
      environment.)
5. The coding system 'raw-text.

If a local value for `buffer-file-coding-system' in the current buffer
does not exist, it is set to the coding system which was actually used
for reading.

#### This should explain in more detail the exact workings of the
coding-system determination procedure.

See also `insert-file-contents-access-hook',
`insert-file-contents-pre-hook', `insert-file-contents-error-hook',
and `insert-file-contents-post-hook'.Scode-files.elc
Vwrite-region-pre-hook
A special hook to decide the coding system used for writing out a file.

Before writing a file, `write-region' calls the functions on this hook with
arguments START, END, FILENAME, APPEND, VISIT, LOCKNAME and CODING-SYSTEM,
the same as the corresponding arguments in the call to `write-region'.

The return value of each function should be one of

-- nil
-- A coding system or a symbol denoting it, indicating the coding system
   to be used for writing the file
-- A list of two elements (absolute pathname and length of data written),
   which is used as the return value to `write-region'.  In this case,
   `write-region' assumes that the function has written the file and
   returns.

If any function returns non-nil, the remaining functions are not called.Scode-files.elc
Vwrite-region-post-hook
A hook called by `write-region' after a file has been written out.

The functions on this hook are called with arguments START, END,
FILENAME, APPEND, VISIT, LOCKNAME, and CODING-SYSTEM, the same as the
corresponding arguments in the call to `write-region'.Scode-files.elc
Fwrite-region
Write current region into specified file.
Called interactively, prompts for a file name.
With a prefix arg, prompts for a coding system as well.

When called from a program, takes three required arguments:
START, END and FILENAME.  START and END are buffer positions.
APPEND, if non-nil, means append to existing file contents (if any), else
  the file's existing contents are replaced by the specified region.
VISIT, if non-nil, should be a string naming a file.  The buffer is marked
                 as  visiting VISIT.  VISIT is also the file name to lock
                 and unlock for clash detection.
LOCKNAME, if non-nil, specifies the name to use for locking and unlocking,
  overriding FILENAME and VISIT.
CODING-SYSTEM-OR-MUSTBENEW specifies the coding system used to encode the
  text written.  It defaults to the value of `buffer-file-coding-system'
  in the current buffer.

For compatibility with GNU Emacs, several arguments are overloaded:
START may be a string, which is written to the file.  END is ignored.
VISIT may take the value t, meaning to set last-save-file-modtime of buffer
  to this file's modtime and mark buffer not modified.  With any other
  non-nil value of VISIT, suppress printing of the "Wrote file" message.
CODING-SYSTEM-OR-MUSTBENEW may be a non-nil, non-coding-system value.
  If it is `excl' and FILENAME already exists, signal `file-already-exists'.
  Otherwise, if FILENAME already exists, ask for confirmation before
  writing, and signal `file-already-exists' if not confirmed.

See also `write-region-pre-hook' and `write-region-post-hook'.Scode-process.elc
Vprocess-coding-system-alist
Alist to decide a coding system to use for a process I/O operation.
The format is ((PATTERN . VAL) ...),
where PATTERN is a regular expression matching a program name,
VAL is a coding system, a cons of coding systems, or a function symbol.
If VAL is a coding system, it is used for both decoding what received
from the program and encoding what sent to the program.
If VAL is a cons of coding systems, the car part is used for decoding,
and the cdr part is used for encoding.
If VAL is a function symbol, it is called with two arguments, a symbol
indicating the operation being performed (one of `start-process',
`call-process', `open-network-stream', or `open-multicast-group') and the
program name.  The function must return a coding system or a cons of
coding systems which are used as above.Scode-process.elc
Fcall-process
Call PROGRAM synchronously in separate process.

The program's input comes from file INFILE (nil means `/dev/null').
XEmacs feature: INFILE can also be a list of (BUFFER [START [END]]), i.e.
a list of one to three elements, consisting of a buffer and optionally
a start position or start and end position.  In this case, input comes
from the buffer, starting from START (defaults to the beginning of the
buffer) and ending at END (defaults to the end of the buffer).

Insert output in BUFFER before point; t means current buffer;
 nil for BUFFER means discard it; 0 means discard and don't wait.
If BUFFER is a string, then find or create a buffer with that name,
then insert the output in that buffer, before point.
BUFFER can also have the form (REAL-BUFFER STDERR-FILE); in that case,
REAL-BUFFER says what to do with standard output, as above,
while STDERR-FILE says what to do with standard error in the child.
STDERR-FILE may be nil (discard standard error output),
t (mix it with ordinary output), a file name string, or (XEmacs feature)
a buffer object.  If STDERR-FILE is a buffer object (but not the name of
a buffer, since that would be interpreted as a file), the standard error
output will be inserted into the buffer before point.

Fourth arg DISPLAY non-nil means redisplay buffer as output is inserted.
Remaining arguments are strings passed as command arguments to PROGRAM.

If BUFFER is 0, returns immediately with value nil.
Otherwise waits for PROGRAM to terminate and returns a numeric exit status
or a signal description string.  If you quit, the process is first killed
with SIGINT, then with SIGKILL if you quit again before the process exits.

If INFILE is a file, we transfer its exact contents to the process without
any encoding/decoding. (#### This policy might change.)

Otherwise, the read/write coding systems used for process I/O on the
process are determined as follows:

1. `coding-system-for-read', `coding-system-for-write', if non-nil.
      (Intended as a temporary overriding mechanism for use by Lisp
      code.)
2. The matching value for the process name from `process-coding-system-alist',
      if any, and if non-nil.  The value may be either a single coding
      system, used for both read and write; or a cons of read/write; or a
      function, called to get one of the other two values.
3. For writing: If a buffer was given in INFILE, the value of
      `buffer-file-coding-system' in that buffer.
   For reading: if a buffer was given in BUFFER, the value of
      `buffer-file-coding-system-for-read' in that buffer.
4. The value of `default-process-coding-system', which should be a cons
      of read/write coding systems, if the values are non-nil.
5. The coding system `undecided' for read, and `raw-text' for write.

Note that the processes of determining the read and write coding systems
proceed essentially independently one from the other, as in `start-process'.Scode-process.elc
Fcall-process-region
Send text from START to END to a synchronous process running PROGRAM.
Delete the text if fourth arg DELETEP is non-nil.

Insert output in BUFFER before point; t means current buffer;
 nil for BUFFER means discard it; 0 means discard and don't wait.
If BUFFER is a string, then find or create a buffer with that name,
then insert the output in that buffer, before point.
BUFFER can also have the form (REAL-BUFFER STDERR-FILE); in that case,
REAL-BUFFER says what to do with standard output, as above,
while STDERR-FILE says what to do with standard error in the child.
STDERR-FILE may be nil (discard standard error output),
t (mix it with ordinary output), a file name string, or (XEmacs feature)
a buffer object.  If STDERR-FILE is a buffer object (but not the name of
a buffer, since that would be interpreted as a file), the standard error
output will be inserted into the buffer before point.

Sixth arg DISPLAYP non-nil means redisplay buffer as output is inserted.
Remaining args are passed to PROGRAM at startup as command args.

If BUFFER is 0, returns immediately with value nil.
Otherwise waits for PROGRAM to terminate and returns a numeric exit status
or a signal description string.  If you quit, the process is first killed
with SIGINT, then with SIGKILL if you quit again before the process exits.

The read/write coding systems used for process I/O on the process are
the same as for `call-process'.Scode-process.elc
Fstart-process
Start a program in a subprocess.  Return the process object for it.
NAME is name for process.  It is modified if necessary to make it unique.
BUFFER is the buffer or (buffer-name) to associate with the process.
 Process output goes at end of that buffer, unless you specify
 an output stream or filter function to handle the output.
 BUFFER may be also nil, meaning that this process is not associated
 with any buffer.
BUFFER can also have the form (REAL-BUFFER STDERR-BUFFER); in that case,
 REAL-BUFFER says what to do with standard output, as above,
 while STDERR-BUFFER says what to do with standard error in the child.
 STDERR-BUFFER may be nil (discard standard error output, unless a stderr
 filter is set).  Note that if you do not use this form at process creation,
 stdout and stderr will be mixed in the output buffer, and this cannot be
 changed, even by setting a stderr filter.
Third arg is program file name.  It is searched for as in the shell.
Remaining arguments are strings to give program as arguments.

The read/write coding systems used for process I/O on the process are
determined as follows:

1. `coding-system-for-read', `coding-system-for-write', if non-nil.
      (Intended as a temporary overriding mechanism for use by Lisp
      code.)
2. The matching value for the process name from `process-coding-system-alist',
      if any, and if non-nil.  The value may be either a single coding
      system, used for both read and write; or a cons of read/write; or a
      function, called to get one of the other two values.
3. The value of `default-process-coding-system', which should be a cons
      of read/write coding systems, if the values are non-nil.
4. The coding system `undecided' for read, and `raw-text' for write.

Note that the processes of determining the read and write coding systems
proceed essentially independently one from the other.  For example, a value
determined from `process-coding-system-alist' might specify a read coding
system but not a write coding system, in which the read coding system is as
specified and the write coding system comes from proceeding to step 3 (and
looking in `default-process-coding-system').

You can change the coding systems later on using
`set-process-coding-system', `set-process-input-coding-system', or
`set-process-output-coding-system'.

See also `set-process-filter' and `set-process-stderr-filter'.Scode-process.elc
Vnetwork-coding-system-alist
Alist to decide a coding system to use for a network I/O operation.
The format is ((PATTERN . VAL) ...),
where PATTERN is a regular expression matching a network service name
or is a port number to connect to,
VAL is a coding system, a cons of coding systems, or a function symbol.
If VAL is a coding system, it is used for both decoding what received
from the network stream and encoding what sent to the network stream.
If VAL is a cons of coding systems, the car part is used for decoding,
and the cdr part is used for encoding.
If VAL is a function symbol, the function must return a coding system
or a cons of coding systems which are used as above.

See also the function `find-operation-coding-system'.Scode-process.elc
Fopen-network-stream
Open a TCP connection for a service to a host.
Return a process object to represent the connection.
Input and output work as for subprocesses; `delete-process' closes it.
NAME is name for process.  It is modified if necessary to make it unique.
BUFFER is the buffer (or buffer-name) to associate with the process.
 Process output goes at end of that buffer, unless you specify
 an output stream or filter function to handle the output.
 BUFFER may be also nil, meaning that this process is not associated
 with any buffer.
Third arg is name of the host to connect to, or its IP address.
Fourth arg SERVICE is name of the service desired, or an integer
 specifying a port number to connect to.
Fifth argument PROTOCOL is a network protocol.  Currently 'tcp
 (Transmission Control Protocol) and 'udp (User Datagram Protocol) are
 supported.  When omitted, 'tcp is assumed.

Output via `process-send-string' and input via buffer or filter (see
`set-process-filter') are stream-oriented.  That means UDP datagrams are
not guaranteed to be sent and received in discrete packets. (But small
datagrams around 500 bytes that are not truncated by `process-send-string'
are usually fine.)  Note further that UDP protocol does not guard against 
lost packets.

The read/write coding systems used for process I/O on the process are
determined as follows:

1. `coding-system-for-read', `coding-system-for-write', if non-nil.
      (Intended as a temporary overriding mechanism for use by Lisp
      code.)
2. The matching value for the service from `network-coding-system-alist',
      if any, and if non-nil.  The value may be either a single coding
      system, used for both read and write; or a cons of read/write; or a
      function, called to get one of the other two values.
3. The value of `default-network-coding-system', which should be a cons
      of read/write coding systems, if the values are non-nil.
4. The coding system `undecided' for read, and `raw-text' for write.

Note that the processes of determining the read and write coding systems
proceed essentially independently one from the other, as in `start-process'.

You can change the coding systems later on using
`set-process-coding-system', `set-process-input-coding-system', or
`set-process-output-coding-system'.Scode-process.elc
Fset-buffer-process-coding-system
Set coding systems for the process associated with the current buffer.
DECODING is the coding system to be used to decode input from the process,
ENCODING is the coding system to be used to encode output to the process.

For a list of possible values of CODING-SYSTEM, use \[coding-system-list].Scode-cmds.elc
Vcoding-keymap
Keymap for coding-system-specific and (when available) Mule commands.Scode-cmds.elc
Fcoding-system-change-eol-conversion
Return a version of CODING-SYSTEM that provides EOL-TYPE eol conversion.
EOL-TYPE should be `lf', `crlf', `cr' or nil.  nil means the returned coding
system automatically detects the end-of-line convention while decoding.
EOL-TYPE may also be one of the symbols `unix', `dos' or `mac', meaning
`lf', `crlf', and `cr' respectively.Scode-cmds.elc
Funiversal-coding-system-argument
Execute an I/O command using the specified coding system.Scode-cmds.elc
Fset-default-output-coding-systems
Set default value for coding system output to CODING-SYSTEM.
This sets the coding system of newly created buffers (the default value of
`buffer-file-coding-system') and the default coding system for output to a
subprocess (the CDR of `default-process-coding-system').

Other defaults are not changed; see `prefer-coding-system' for why.Scode-cmds.elc
Fprefer-coding-system
Add CODING-SYSTEM at the front of the priority list for automatic detection.
This also sets the coding system of newly created buffers (the default
value of `buffer-file-coding-system') and the default coding system for
output to a subprocess (the CDR of `default-process-coding-system').

If CODING-SYSTEM specifies a certain type of EOL conversion, the coding
systems set by this function will use that type of EOL conversion.

This does not change the default coding system for converting file names
because that is dependent on the current locale; it's changed when
`set-language-environment' is called.  It does not change
`terminal-coding-system' or `keyboard-coding-system'; they should get set
when the terminal is opened (and are typically an inherent property of the
terminal), and don't change afterward.  It does not change the default
coding system for reading files or input from a subprocess; they should
remain as `undecided' so that automatic detection is done.Sunicode.elc
Vload-unicode-tables-at-dump-time
[INTERNAL] Whether to load the Unicode tables at dump time.
Setting this at run-time does nothing.Sunicode.elc
Fload-unicode-tables
Initialize the Unicode translation tables for all standard charsets.Sunicode.elc
Vccl-encode-to-ucs-2
CCL program to transform Mule characters to UCS-2.Sunicode.elc
Fdecode-char
FSF compatibility--return Mule character with Unicode codepoint CODE.
The second argument must be 'ucs, the third argument is ignored.  Sunicode.elc
Fencode-char
FSF compatibility--return the Unicode code point of CHAR.
The second argument must be 'ucs, the third argument is ignored.  Sunicode.elc
Vunicode-error-default-translation-table
Translation table mapping Unicode error sequences to Latin-1 chars.

To transform XEmacs Unicode error sequences to the Latin-1 characters that
correspond to the octets on disk, you can use this variable.  Sunicode.elc
Vunicode-invalid-sequence-regexp-range
Regular expression range to match Unicode error sequences in XEmacs.

Invalid Unicode sequences on input are represented as XEmacs
characters with values stored as the keys in
`unicode-error-default-translation-table', one character for each
invalid octet.  You can use this variable (with `re-search-forward' or
`skip-chars-forward') to search for such characters; see also
`unicode-error-translate-region'.  Sunicode.elc
Ffrob-unicode-errors-region
Call FROB-FUNCTION on the Unicode error sequences between BEGIN and END.

Optional argument BUFFER specifies the buffer that should be examined for
such sequences.  Sunicode.elc
Funicode-error-translate-region
Translate the Unicode error sequences in BUFFER between BEGIN and END.

The error sequences are transformed, by default, into the ASCII,
control-1 and latin-iso8859-1 characters with the numeric values
corresponding to the incorrect octets encountered.  This is achieved
by using `unicode-error-default-translation-table' (which see) for
TABLE; you can change this by supplying another character table,
mapping from the error sequences to the desired characters.  Scode-init.elc
Veol-detection-enabled-p
True if XEmacs automatically detects the EOL type when reading files.
Normally, this is always the case on Windows or when international (Mule)
support is compiled into this XEmacs.  Otherwise, it is currently off by
default, but this may change.  Don't set this; nothing will happen.  Instead,
use the Options menu or `set-eol-detection'.Scode-init.elc
Fset-eol-detection
Enable (if FLAG is non-nil) or disable automatic EOL detection of files.
EOL detection is enabled by default on Windows or when international (Mule)
support is compiled into this XEmacs.  Otherwise, it is currently off by
default, but this may change.  NOTE: You *REALLY* should not turn off EOL
detection on Windows!  Your files will have lots of annoying ^M's in them
if you do this.Scode-init.elc
Fcoding-system-current-system-configuration
Function to decide which default coding system configuration applies.Scode-init.elc
Fdefine-coding-system-default-configuration
Scode-init.elc
Fget-coding-system-variable
Return the value of a basic coding system variable.
This is intended as a uniform interface onto the coding system settings that
control how encoding detection and conversion works.  See
`coding-system-variable-default-value' for a list of the possible values of
VAR.Scode-init.elc
Fset-coding-system-variable
Set a basic coding system variable to VALUE.
This is intended as a uniform interface onto the coding system settings that
control how encoding detection and conversion works.  See
`coding-system-variable-default-value' for a list of the possible values of
VAR.Scode-init.elc
Fcoding-system-variable-default-value
Return the appropriate default value for a coding system variable.

VAR specifies the variable, and CONFIG the configuration, defaulting
to the current system configuration (as returned by
`coding-system-current-system-configuration').

The table of default values looks like this: (see below for abbreviations)


              NoMule NoMuleEOL Mule       MSW          MSWMule       CygUTF 
------------------------------------------------------------------------------
bfcs-for-read binary raw-text undecided   raw-text     undecided     undecided
default-bfcs  binary binary   iso-2022-8  raw-text-dos MSW-MB-dos    utf-8
native        binary binary   binary      raw-text-dos MSW-MB-SD-dos utf-8
keyboard      binary raw-text undecided-  raw-text     undecided-    utf-8
                                unix                     unix
terminal      binary binary   binary      binary       MSW-MB-unix   utf-8
process-read  binary raw-text undecided   raw-text     undecided     utf-8
process-write binary binary   binary      raw-text     MSW-MB-SD     utf-8
no-conv-cs    binary raw-text raw-text    raw-text     MSW-MB        utf-8


VAR can be one of:

`bfcs-for-read'

  Lisp variable of the same name; the default coding system used when
  reading in a file, in the absence of more specific settings. (See
  `insert-file-contents' for a description of exactly how a file's
  coding system is determined when it's read in.)

`default-bfcs'

  Default value of `buffer-file-coding-system', the buffer-local
  variable specifying a file's coding system to be used when it is
  written out.  Set using `set-default-buffer-file-coding-system' (or
  the primitive `setq-default').  When a file is read in,
  `buffer-file-coding-system' for that file is set from the coding
  system used to read the file in; the default value applies to newly
  created files.

`native'

  The coding system named `native'.  Changed using
  `define-coding-system-alias'.  Used internally when passing
  text to or from system API's, unless the particular
  API specifies another coding system.

`keyboard'

 #### fill in

`terminal'

 #### fill in

`process-read'

 #### fill in

`process-write'

 #### fill in

`no-conv-cs'

  Coding system used when category `no-conversion' is detected.


CONFIG is one of: (abbreviations in parens)

`no-mule-no-eol-detection' (NoMule)

Non-Windows, no Mule support, no automatic EOL detection. (Controlled by
`eol-detection-enabled-p', which is set by the command-line flag
-enable-eol-detection or the configure flag --with-default-eol-detection.)

`unix-no-mule-eol-detection' (NoMuleEOL)

Non-Windows, no Mule support, automatic EOL detection.

`unix-mule' (Mule)

Non-Windows, Mule support.

`windows-no-mule' (MSW)

MS Windows or old Cygwin, no Mule support.

`windows-mule' (MSWMule)

MS Windows or old Cygwin, Mule support.

`cygwin-utf-8' (CygUTF)

Cygwin 1.7 or later, which uses UTF-8 consistently.

The following coding system abbreviations are also used in the table:

MSW-MB = mswindows-multibyte
MSW-MB = mswindows-multibyte-system-default
Scode-init.elc
Freset-coding-system-defaults
Reset all basic coding system variables are set to their default values.
See `coding-system-variable-default-value'.Scode-init.elc
Freset-coding-categories-to-default
Reset all coding categories (used for automatic detection) to their defaults.

The order of priorities of coding categories and the coding system
bound to each category are as follows:

	coding category		  coding system
	--------------------------------------------------
        utf-16-little-endian-bom  utf-16-little-endian
	utf-16-bom		  utf-16-bom
	utf-8-bom		  utf-8-bom
	iso-7			  iso-2022-7bit
	no-conversion		  raw-text
	utf-8			  utf-8
	iso-8-1			  iso-8859-1
	iso-8-2			  ctext (iso-8859-1 alias)
	iso-8-designate		  ctext (iso-8859-1 alias)
	iso-lock-shift		  iso-2022-lock
	shift-jis		  shift-jis
	big5			  big5
        utf-16-little-endian      utf-16-little-endian
	utf-16			  utf-16
        ucs-4			  ucs-4
Scode-init.elc
Freset-language-environment
Reset coding system environment of XEmacs to the default status.
All basic coding system variables are set to their default values, as
are the coding categories used for automatic detection and their
priority.

BE VERY CERTAIN YOU WANT TO DO THIS BEFORE DOING IT!

For more information, see `reset-coding-system-defaults' and
`reset-coding-categories-to-default'.Sx-scrollbar.elc
Fx-init-scrollbar-from-resources
Sx-mouse.elc
Fx-mouse-kill
Kill the text between the point and mouse and copy it to the clipboard and
to the cut buffer.Sx-mouse.elc
Fx-set-point-and-insert-selection
Set point where clicked and insert the primary selection or the cut buffer.Sx-mouse.elc
Fx-set-point-and-move-selection
Set point where clicked and move the selected text to that location.Sx-mouse.elc
Fmouse-track-and-copy-to-cutbuffer
Make a selection like `mouse-track', but also copy it to the cutbuffer.Sx-mouse.elc
Fx-init-pointer-shape
Initialize the mouse-pointers of DEVICE from the X resource database.Sx-select.elc
Fx-get-secondary-selection
Return text selected from some X window.Sx-select.elc
Fx-own-secondary-selection
Make a secondary X Selection of the given argument.  The argument may be a
string or a cons of two markers (in which case the selection is considered to
be the text between those markers).Sx-select.elc
Fx-notice-selection-requests
for possible use as the value of `x-sent-selection-hooks'.Sx-select.elc
Fx-notice-selection-failures
for possible use as the value of `x-sent-selection-hooks'.Sx-select.elc
Fx-get-cutbuffer
Return the value of one of the 8 X server cut buffers.
Optional arg WHICH-ONE should be a number from 0 to 7, defaulting to 0.
Cut buffers are considered obsolete; you should use selections instead.
This function does nothing if cut buffer support was not compiled in.Sx-select.elc
Fx-store-cutbuffer
Store STRING into the X server's primary cut buffer.
If optional arg PUSH is non-nil, also rotate the cut buffers: this
means the previous value of the primary cut buffer moves to the second
cut buffer, and the second to the third, and so on (there are 8 buffers.)
Cut buffers are considered obsolete; you should use selections instead.
This function does nothing if cut buffer support was not compiled in.Sx-misc.elc
Fx-bogosity-check-resource
Check for a bogus resource specification.Sx-misc.elc
Fx-init-specifier-from-resources
Initialize a specifier from the resource database.
LOCALE specifies the locale that is to be initialized and should be
a frame, a device, or 'global.  TYPE is the type of the resource and
should be one of 'string, 'boolean, 'integer, or 'natnum.  The
remaining args should be conses of names and classes of resources
to be examined.  The first resource with a value specified becomes
the spec for SPECIFIER in LOCALE. (However, if SPECIFIER already
has a spec in LOCALE, nothing is done.) Finally, if LOCALE is 'global,
a check is done for bogus resource specifications.Sx-misc.elc
Fx-get-resource-and-bogosity-check
Sx-misc.elc
Fx-get-resource-and-maybe-bogosity-check
Sx-misc.elc
Fdevice-x-display
If DEVICE is an X11 device, return its DISPLAY.

DEVICE defaults to the selected device.Sx-init.elc
Fow-find
Search forward the next occurrence of the text of the selection.Sx-init.elc
Fow-find-backward
Search backward for the previous occurrence of the text of the selection.Sx-init.elc
Fx-keysym-on-keyboard-sans-modifiers-p
Return true if KEYSYM names a key on the keyboard of DEVICE.
More precisely, return true if pressing a physical key
on the keyboard of DEVICE without any modifier keys generates KEYSYM.
Valid keysyms are listed in the files /usr/include/X11/keysymdef.h and in
/usr/lib/X11/XKeysymDB, or whatever the equivalents are on your system.
The keysym name can be provided in two forms:
- if keysym is a string, it must be the name as known to X windows.
- if keysym is a symbol, it must be the name as known to XEmacs.
The two names differ in capitalization and underscoring.Sx-init.elc
Fx-keysym-on-keyboard-p
Return true if KEYSYM names a key on the keyboard of DEVICE.
More precisely, return true if some keystroke (possibly including modifiers)
on the keyboard of DEVICE keys generates KEYSYM.
Valid keysyms are listed in the files /usr/include/X11/keysymdef.h and in
/usr/lib/X11/XKeysymDB, or whatever the equivalents are on your system.
The keysym name can be provided in two forms:
- if keysym is a string, it must be the name as known to X windows.
- if keysym is a symbol, it must be the name as known to XEmacs.
The two names differ in capitalization and underscoring.

This function is not entirely trustworthy, in that Xlib compose processing
can produce keysyms that XEmacs will not have seen when it examined the
keysyms available on startup.  So pressing `dead-diaeresis' and then 'a' may
pass `adiaeresis' to XEmacs, or (in some implementations) even `U00E4',
where `(x-keysym-on-keyboard-p 'adiaeresis)' and `(x-keysym-on-keyboard-p
'U00E4)' would both have returned nil.  Subsequent to XEmacs seeing a keysym
it was previously unaware of, the predicate will take note of it, though.Sx-init.elc
Fx-initialize-keyboard
Perform X-Server-specific initializations.  Don't call this.Sx-init.elc
Fx-init-toolbar-from-resources
Sx-init.elc
Vmake-device-early-x-entry-point-called-p
Whether `make-device-early-x-entry-point' has been called, at least once.

Much of the X11-specific Lisp init code should only be called the first time
an X11 device is created; this variable allows for that.Sx-init.elc
Vmake-device-late-x-entry-point-called-p
Whether `make-device-late-x-entry-point' has been called, at least once.

Much of the X11-specific Lisp init code should only be called the first time
an X11 device is created; this variable allows for that.Sx-init.elc
Fmake-device-early-x-entry-point
Entry point to set up the Lisp environment for X device creation.Sx-init.elc
Fmake-device-late-x-entry-point
Entry point to do any Lisp-level X device-specific initialization.Sx-init.elc
Fmake-frame-on-display
Create a frame on the X display named DISPLAY.
DISPLAY should be a standard display string such as "unix:0",
or nil for the display specified on the command line or in the
DISPLAY environment variable.

PROPS should be a plist of properties, as in the call to `make-frame'.

This function opens a connection to the display or reuses an existing
connection.

This function is a trivial wrapper around `make-frame-on-device'.Sx-win-xfree86.elc
Fx-win-init-xfree86
Sx-win-sun.elc
Fx-win-init-sun
Stty-init.elc
Vmake-device-early-tty-entry-point-called-p
Whether `make-device-early-tty-entry-point' has been called, at least once.Stty-init.elc
Fmake-device-early-tty-entry-point
Entry point to set up the Lisp environment for TTY device creation.Stty-init.elc
Fmake-frame-after-init-entry-point
Entry point for Lisp called after first frame creation on a TTY device.Stty-init.elc
Fmake-frame-on-tty
Create a frame on the TTY connection named TTY.
TTY should be a TTY device name such as "/dev/ttyp3" (as returned by
the `tty' command in that TTY), or nil for the standard input/output
of the running XEmacs process.

PROPS should be a plist of properties, as in the call to `make-frame'.

This function opens a connection to the TTY or reuses an existing
connection.

This function is a trivial wrapper around `make-frame-on-device'.Sfontl-hooks.elc
Ffont-lock-set-defaults
Set fontification defaults appropriately for this mode.
Sets `font-lock-keywords', `font-lock-keywords-only', `font-lock-syntax-table',
`font-lock-beginning-of-syntax-function' and
`font-lock-keywords-case-fold-search'.

If `font-lock-defaults' is currently set, it is used.  Otherwise, the
symbol naming the major mode is examined for a `font-lock-defaults'
property.  If that is not present, but a variable `foo-mode-font-lock-keywords'
is, the value of that variable is used as the default for
`font-lock-keywords'.  Various other backward-compatible behaviors also
exist -- if you're curious, look at the source.

The value of `font-lock-maximum-decoration' is used to determine which
set of keywords applies, if more than one exists.

This will also put the buffer into Font Lock mode if any keywords exist
and if auto-fontification is called for, as determined by
`font-lock-auto-fontify', `font-lock-mode-enable-list', and
`font-lock-mode-disable-list'.

Calling this function multiple times in the same buffer is safe -- this
function keeps track of whether it has already been called in this
buffer, and does nothing if so.  This allows for multiple ways of getting
Font Lock properly initialized in a buffer, to deal with existing major
modes that do not call this function. (For example, Font Lock adds this
function to `find-file-hooks'.)

Major modes that have any font-lock defaults specified should call this
function during their initialization process, after they have set
the variable `major-mode'.

If EXPLICIT-DEFAULTS is t, this function will not check whether it
has already been run in this buffer, and will always do the full
computation.

If EXPLICIT-DEFAULTS is not nil and not t, it should be something
that is allowable as a value for `font-lock-defaults' and will be
used to initialize the Font Lock variables.Sauto-show.elc
Vauto-show-mode
*Non-nil enables automatic horizontal scrolling, when lines are truncated.
The default value is t.  To change the default, do this:
	(set-default 'auto-show-mode nil)
See also command `auto-show-mode'.
This variable has no effect when lines are not being truncated.
This variable is automatically local in each buffer where it is set.Sauto-show.elc
Vauto-show-shift-amount
*Extra columns to scroll. for automatic horizontal scrolling.Sauto-show.elc
Vauto-show-show-left-margin-threshold
*Threshold column for automatic horizontal scrolling to the right.
If point is before this column, we try to scroll to make the left margin
visible.  Setting this to 0 disables this feature.Sauto-show.elc
Fauto-show-mode
Turn automatic horizontal scroll mode on or off.
With arg, turn auto scrolling on if arg is positive, off otherwise.
This mode is enabled or disabled for each buffer individually.
It takes effect only when `truncate-lines' is non-nil.Sauto-show.elc
Vauto-show-inhibiting-commands
Commands that inhibit auto-show behavior.
This normally includes the horizontal scrollbar commands.Sauto-show.elc
Fauto-show-should-take-action-p
Sauto-show.elc
Fauto-show-make-region-visible
Move point in such a way that the region (START, END) is visible.
This only does anything if auto-show-mode is enabled, and it doesn't
actually do any horizontal scrolling; rather, it just sets things up so
that the region will be visible when `auto-show-make-point-visible'
is next called (this happens after every command).Sauto-show.elc
Fauto-show-make-point-visible
Scroll horizontally to make point visible, if that is enabled.
This function only does something if `auto-show-mode' is non-nil
and longlines are being truncated in the selected window.
See also the command `auto-show-mode'.Sparagraphs.elc
Vuse-hard-newlines
Non-nil if Use-Hard-Newlines mode is enabled.
Use the command `use-hard-newlines' to change this variable.Sparagraphs.elc
Fuse-hard-newlines
Minor mode to distinguish hard and soft newlines.
When active, the functions `newline' and `open-line' add the
text-property `hard' to newlines that they insert, and a line is
only considered as a candidate to match `paragraph-start' or
`paragraph-separate' if it follows a hard newline.

Prefix argument says to turn mode on if positive, off if negative.
When the mode is turned on, if there are newlines in the buffer but no hard
newlines, ask the user whether to mark as hard any newlines preceeding a
`paragraph-start' line.  From a program, second arg INSERT specifies whether
to do this; it can be `never' to change nothing, t or `always' to force
marking, `guess' to try to do the right thing with no questions, nil
or anything else to ask the user.

Newlines not marked hard are called "soft", and are always internal
to paragraphs.  The fill functions insert and delete only soft newlines.Sparagraphs.elc
Vuse-hard-newlines-hook
Hook run at the end of function `use-hard-newlines'.Sparagraphs.elc
Vuse-hard-newlines-on-hook
Hook to run when entering use-hard-newlines.Sparagraphs.elc
Vuse-hard-newlines-off-hook
Hook to run when exiting use-hard-newlines.Sparagraphs.elc
Vparagraph-start
*Regexp for beginning of a line that starts OR separates paragraphs.
This regexp should match lines that separate paragraphs
and should also match lines that start a paragraph
(and are part of that paragraph).

This is matched against the text at the left margin, which is not necessarily
the beginning of the line, so it should never use "^" as an anchor.  This
ensures that the paragraph functions will work equally well within a region
of text indented by a margin setting.

The variable `paragraph-separate' specifies how to distinguish
lines that start paragraphs from lines that separate them.

If the variable `use-hard-newlines' is non-nil, then only lines following a
hard newline are considered to match.Sparagraphs.elc
Vparagraph-separate
*Regexp for beginning of a line that separates paragraphs.
If you change this, you may have to change `paragraph-start' also.

A line matching this is not part of any paragraph.

This is matched against the text at the left margin, which is not necessarily
the beginning of the line, so it should not use "^" as an anchor.  This
ensures that the paragraph functions will work equally within a region of
text indented by a margin setting.Sparagraphs.elc
Vsentence-end-double-space
*Non-nil means a single space does not end a sentence.
This is relevant for filling.  See also `sentence-end-without-period'
and `colon-double-space'.

This variable applies only to filling, not motion commands.  To
change the behavior of motion commands, see `sentence-end'.

This value is used by the function `sentence-end' to construct the
regexp describing the end of a sentence, when the value of the variable
`sentence-end' is nil.  See Info node `(lispref)Standard Regexps'.Sparagraphs.elc
Vsentence-end-without-period
*Non-nil means a sentence will end without a period.
For example, a sentence in Thai text ends with double space but
without a period.

This value is used by the function `sentence-end' to construct the
regexp describing the end of a sentence, when the value of the variable
`sentence-end' is nil.  See Info node `(lispref)Standard Regexps'.Sparagraphs.elc
Vsentence-end-without-space
String of characters that end sentence without following spaces.

This value is used by the function `sentence-end' to construct the
regexp describing the end of a sentence, when the value of the variable
`sentence-end' is nil.  See Info node `(lispref)Standard Regexps'.Sparagraphs.elc
Vsentence-end
Regexp describing the end of a sentence.
The value includes the whitespace following the sentence.
All paragraph boundaries also end sentences, regardless.

The value nil means to use the default value defined by the
function `sentence-end'.  You should always use this function
to obtain the value of this variable.Sparagraphs.elc
Vsentence-end-base
Regexp matching the basic end of a sentence, not including following space.Sparagraphs.elc
Fsentence-end
Return the regexp describing the end of a sentence.

This function returns either the value of the variable `sentence-end'
if it is non-nil, or the default value constructed from the
variables `sentence-end-base', `sentence-end-double-space',
`sentence-end-without-period' and `sentence-end-without-space'.

The default value specifies that in order to be recognized as the
end of a sentence, the ending period, question mark, or exclamation point
must be followed by two spaces, with perhaps some closing delimiters
in between.  See Info node `(elisp)Standard Regexps'.Sparagraphs.elc
Vpage-delimiter
*Regexp describing line-beginnings that separate pages.Sparagraphs.elc
Vparagraph-ignore-fill-prefix
*Non-nil means the paragraph commands are not affected by `fill-prefix'.
This is desirable in modes where blank lines are the paragraph delimiters.Sparagraphs.elc
Fforward-paragraph
Move forward to end of paragraph.
With argument ARG, do it ARG times;
a negative argument ARG = -N means move backward N paragraphs.

A line which `paragraph-start' matches either separates paragraphs
(if `paragraph-separate' matches it also) or is the first line of a paragraph.
A paragraph end is the beginning of a line which is not part of the paragraph
to which the end of the previous line belongs, or the end of the buffer.
Returns the count of paragraphs left to move.Sparagraphs.elc
Fbackward-paragraph
Move backward to start of paragraph.
With argument ARG, do it ARG times;
a negative argument ARG = -N means move forward N paragraphs.

A paragraph start is the beginning of a line which is a
`paragraph-start' or which is ordinary text and follows a
`paragraph-separate'ing line; except: if the first real line of a
paragraph is preceded by a blank line, the paragraph starts at that
blank line.

See `forward-paragraph' for more information.Sparagraphs.elc
Fmark-paragraph
Put point at beginning of this paragraph, mark at end.
The paragraph marked is the one that contains point or follows point.

With argument ARG, puts mark at end of a following paragraph, so that
the number of paragraphs marked equals ARG.

If ARG is negative, point is put at end of this paragraph, mark is put
at beginning of this or a previous paragraph.

If this command is repeated, it marks the next ARG paragraphs after (or
before, if arg is negative) the ones already marked.Sparagraphs.elc
Fkill-paragraph
Kill forward to end of paragraph.
With arg N, kill forward to Nth end of paragraph;
negative arg -N means kill backward to Nth start of paragraph.Sparagraphs.elc
Fbackward-kill-paragraph
Kill back to start of paragraph.
With arg N, kill back to Nth start of paragraph;
negative arg -N means kill forward to Nth end of paragraph.Sparagraphs.elc
Ftranspose-paragraphs
Interchange this (or next) paragraph with previous one.Sparagraphs.elc
Fstart-of-paragraph-text
Sparagraphs.elc
Fend-of-paragraph-text
Sparagraphs.elc
Fforward-sentence
Move forward to next end of sentence.  With argument, repeat.
With negative argument, move backward repeatedly to start of sentence.

The variable `sentence-end' is a regular expression that matches ends of
sentences.  Also, every paragraph boundary terminates sentences as well.Sparagraphs.elc
Frepunctuate-sentences
Put two spaces at the end of sentences from point to the end of buffer.
It works using `query-replace-regexp'.Sparagraphs.elc
Fbackward-sentence
Move backward to start of sentence.  With arg, do it arg times.
See `forward-sentence' for more information.Sparagraphs.elc
Fkill-sentence
Kill from point to end of sentence.
With arg, repeat; negative arg -N means kill back to Nth start of sentence.Sparagraphs.elc
Fbackward-kill-sentence
Kill back from point to start of sentence.
With arg, repeat, or kill forward to Nth end of sentence if negative arg -N.Sparagraphs.elc
Fmark-end-of-sentence
Put mark at end of sentence.  Arg works as in `forward-sentence'.
If this command is repeated, it marks the next ARG sentences after the
ones already marked.Sparagraphs.elc
Fmark-end-of-line
Put mark at end of line.  Arg works as in `end-of-line'.Sparagraphs.elc
Ftranspose-sentences
Interchange this (next) and previous sentence.
